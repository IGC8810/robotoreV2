
robotoreV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eae8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800ec78  0800ec78  0001ec78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f10c  0800f10c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f10c  0800f10c  0001f10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f114  0800f114  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f114  0800f114  0001f114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f118  0800f118  0001f118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f11c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c0a4  200001e0  0800f2fc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c284  0800f2fc  0002c284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2da  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003531  00000000  00000000  0003b4ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001560  00000000  00000000  0003ea20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e8  00000000  00000000  0003ff80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022866  00000000  00000000  00041368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123e6  00000000  00000000  00063bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca353  00000000  00000000  00075fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140307  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a04  00000000  00000000  00140384  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec60 	.word	0x0800ec60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ec60 	.word	0x0800ec60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	; 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d44:	f1a2 0201 	sub.w	r2, r2, #1
 8000d48:	d1ed      	bne.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_ldivmod>:
 8000ea4:	b97b      	cbnz	r3, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea6:	b972      	cbnz	r2, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bfbe      	ittt	lt
 8000eac:	2000      	movlt	r0, #0
 8000eae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000eb2:	e006      	blt.n	8000ec2 <__aeabi_ldivmod+0x1e>
 8000eb4:	bf08      	it	eq
 8000eb6:	2800      	cmpeq	r0, #0
 8000eb8:	bf1c      	itt	ne
 8000eba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec2:	f000 b9f3 	b.w	80012ac <__aeabi_idiv0>
 8000ec6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	db09      	blt.n	8000ee6 <__aeabi_ldivmod+0x42>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db1a      	blt.n	8000f0c <__aeabi_ldivmod+0x68>
 8000ed6:	f000 f883 	bl	8000fe0 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	4240      	negs	r0, r0
 8000ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db1b      	blt.n	8000f28 <__aeabi_ldivmod+0x84>
 8000ef0:	f000 f876 	bl	8000fe0 <__udivmoddi4>
 8000ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efc:	b004      	add	sp, #16
 8000efe:	4240      	negs	r0, r0
 8000f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0a:	4770      	bx	lr
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	f000 f865 	bl	8000fe0 <__udivmoddi4>
 8000f16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1e:	b004      	add	sp, #16
 8000f20:	4240      	negs	r0, r0
 8000f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f26:	4770      	bx	lr
 8000f28:	4252      	negs	r2, r2
 8000f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2e:	f000 f857 	bl	8000fe0 <__udivmoddi4>
 8000f32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	4770      	bx	lr

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b9a8 	b.w	80012ac <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f83c 	bl	8000fe0 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_f2lz>:
 8000f74:	ee07 0a90 	vmov	s15, r0
 8000f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f80:	d401      	bmi.n	8000f86 <__aeabi_f2lz+0x12>
 8000f82:	f000 b809 	b.w	8000f98 <__aeabi_f2ulz>
 8000f86:	b508      	push	{r3, lr}
 8000f88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000f8c:	f000 f804 	bl	8000f98 <__aeabi_f2ulz>
 8000f90:	4240      	negs	r0, r0
 8000f92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f96:	bd08      	pop	{r3, pc}

08000f98 <__aeabi_f2ulz>:
 8000f98:	b5d0      	push	{r4, r6, r7, lr}
 8000f9a:	f7ff fad5 	bl	8000548 <__aeabi_f2d>
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <__aeabi_f2ulz+0x40>)
 8000fa2:	4606      	mov	r6, r0
 8000fa4:	460f      	mov	r7, r1
 8000fa6:	f7ff fb27 	bl	80005f8 <__aeabi_dmul>
 8000faa:	f7ff fdfd 	bl	8000ba8 <__aeabi_d2uiz>
 8000fae:	4604      	mov	r4, r0
 8000fb0:	f7ff faa8 	bl	8000504 <__aeabi_ui2d>
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <__aeabi_f2ulz+0x44>)
 8000fb8:	f7ff fb1e 	bl	80005f8 <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	4639      	mov	r1, r7
 8000fc4:	f7ff f960 	bl	8000288 <__aeabi_dsub>
 8000fc8:	f7ff fdee 	bl	8000ba8 <__aeabi_d2uiz>
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4623      	mov	r3, r4
 8000fd0:	4310      	orrs	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	bdd0      	pop	{r4, r6, r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	3df00000 	.word	0x3df00000
 8000fdc:	41f00000 	.word	0x41f00000

08000fe0 <__udivmoddi4>:
 8000fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe4:	9e08      	ldr	r6, [sp, #32]
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	4688      	mov	r8, r1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d14b      	bne.n	8001086 <__udivmoddi4+0xa6>
 8000fee:	428a      	cmp	r2, r1
 8000ff0:	4615      	mov	r5, r2
 8000ff2:	d967      	bls.n	80010c4 <__udivmoddi4+0xe4>
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	b14a      	cbz	r2, 800100e <__udivmoddi4+0x2e>
 8000ffa:	f1c2 0720 	rsb	r7, r2, #32
 8000ffe:	fa01 f302 	lsl.w	r3, r1, r2
 8001002:	fa20 f707 	lsr.w	r7, r0, r7
 8001006:	4095      	lsls	r5, r2
 8001008:	ea47 0803 	orr.w	r8, r7, r3
 800100c:	4094      	lsls	r4, r2
 800100e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001012:	0c23      	lsrs	r3, r4, #16
 8001014:	fbb8 f7fe 	udiv	r7, r8, lr
 8001018:	fa1f fc85 	uxth.w	ip, r5
 800101c:	fb0e 8817 	mls	r8, lr, r7, r8
 8001020:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001024:	fb07 f10c 	mul.w	r1, r7, ip
 8001028:	4299      	cmp	r1, r3
 800102a:	d909      	bls.n	8001040 <__udivmoddi4+0x60>
 800102c:	18eb      	adds	r3, r5, r3
 800102e:	f107 30ff 	add.w	r0, r7, #4294967295
 8001032:	f080 811b 	bcs.w	800126c <__udivmoddi4+0x28c>
 8001036:	4299      	cmp	r1, r3
 8001038:	f240 8118 	bls.w	800126c <__udivmoddi4+0x28c>
 800103c:	3f02      	subs	r7, #2
 800103e:	442b      	add	r3, r5
 8001040:	1a5b      	subs	r3, r3, r1
 8001042:	b2a4      	uxth	r4, r4
 8001044:	fbb3 f0fe 	udiv	r0, r3, lr
 8001048:	fb0e 3310 	mls	r3, lr, r0, r3
 800104c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001050:	fb00 fc0c 	mul.w	ip, r0, ip
 8001054:	45a4      	cmp	ip, r4
 8001056:	d909      	bls.n	800106c <__udivmoddi4+0x8c>
 8001058:	192c      	adds	r4, r5, r4
 800105a:	f100 33ff 	add.w	r3, r0, #4294967295
 800105e:	f080 8107 	bcs.w	8001270 <__udivmoddi4+0x290>
 8001062:	45a4      	cmp	ip, r4
 8001064:	f240 8104 	bls.w	8001270 <__udivmoddi4+0x290>
 8001068:	3802      	subs	r0, #2
 800106a:	442c      	add	r4, r5
 800106c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001070:	eba4 040c 	sub.w	r4, r4, ip
 8001074:	2700      	movs	r7, #0
 8001076:	b11e      	cbz	r6, 8001080 <__udivmoddi4+0xa0>
 8001078:	40d4      	lsrs	r4, r2
 800107a:	2300      	movs	r3, #0
 800107c:	e9c6 4300 	strd	r4, r3, [r6]
 8001080:	4639      	mov	r1, r7
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	428b      	cmp	r3, r1
 8001088:	d909      	bls.n	800109e <__udivmoddi4+0xbe>
 800108a:	2e00      	cmp	r6, #0
 800108c:	f000 80eb 	beq.w	8001266 <__udivmoddi4+0x286>
 8001090:	2700      	movs	r7, #0
 8001092:	e9c6 0100 	strd	r0, r1, [r6]
 8001096:	4638      	mov	r0, r7
 8001098:	4639      	mov	r1, r7
 800109a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800109e:	fab3 f783 	clz	r7, r3
 80010a2:	2f00      	cmp	r7, #0
 80010a4:	d147      	bne.n	8001136 <__udivmoddi4+0x156>
 80010a6:	428b      	cmp	r3, r1
 80010a8:	d302      	bcc.n	80010b0 <__udivmoddi4+0xd0>
 80010aa:	4282      	cmp	r2, r0
 80010ac:	f200 80fa 	bhi.w	80012a4 <__udivmoddi4+0x2c4>
 80010b0:	1a84      	subs	r4, r0, r2
 80010b2:	eb61 0303 	sbc.w	r3, r1, r3
 80010b6:	2001      	movs	r0, #1
 80010b8:	4698      	mov	r8, r3
 80010ba:	2e00      	cmp	r6, #0
 80010bc:	d0e0      	beq.n	8001080 <__udivmoddi4+0xa0>
 80010be:	e9c6 4800 	strd	r4, r8, [r6]
 80010c2:	e7dd      	b.n	8001080 <__udivmoddi4+0xa0>
 80010c4:	b902      	cbnz	r2, 80010c8 <__udivmoddi4+0xe8>
 80010c6:	deff      	udf	#255	; 0xff
 80010c8:	fab2 f282 	clz	r2, r2
 80010cc:	2a00      	cmp	r2, #0
 80010ce:	f040 808f 	bne.w	80011f0 <__udivmoddi4+0x210>
 80010d2:	1b49      	subs	r1, r1, r5
 80010d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010d8:	fa1f f885 	uxth.w	r8, r5
 80010dc:	2701      	movs	r7, #1
 80010de:	fbb1 fcfe 	udiv	ip, r1, lr
 80010e2:	0c23      	lsrs	r3, r4, #16
 80010e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80010e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010ec:	fb08 f10c 	mul.w	r1, r8, ip
 80010f0:	4299      	cmp	r1, r3
 80010f2:	d907      	bls.n	8001104 <__udivmoddi4+0x124>
 80010f4:	18eb      	adds	r3, r5, r3
 80010f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80010fa:	d202      	bcs.n	8001102 <__udivmoddi4+0x122>
 80010fc:	4299      	cmp	r1, r3
 80010fe:	f200 80cd 	bhi.w	800129c <__udivmoddi4+0x2bc>
 8001102:	4684      	mov	ip, r0
 8001104:	1a59      	subs	r1, r3, r1
 8001106:	b2a3      	uxth	r3, r4
 8001108:	fbb1 f0fe 	udiv	r0, r1, lr
 800110c:	fb0e 1410 	mls	r4, lr, r0, r1
 8001110:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001114:	fb08 f800 	mul.w	r8, r8, r0
 8001118:	45a0      	cmp	r8, r4
 800111a:	d907      	bls.n	800112c <__udivmoddi4+0x14c>
 800111c:	192c      	adds	r4, r5, r4
 800111e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001122:	d202      	bcs.n	800112a <__udivmoddi4+0x14a>
 8001124:	45a0      	cmp	r8, r4
 8001126:	f200 80b6 	bhi.w	8001296 <__udivmoddi4+0x2b6>
 800112a:	4618      	mov	r0, r3
 800112c:	eba4 0408 	sub.w	r4, r4, r8
 8001130:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001134:	e79f      	b.n	8001076 <__udivmoddi4+0x96>
 8001136:	f1c7 0c20 	rsb	ip, r7, #32
 800113a:	40bb      	lsls	r3, r7
 800113c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001140:	ea4e 0e03 	orr.w	lr, lr, r3
 8001144:	fa01 f407 	lsl.w	r4, r1, r7
 8001148:	fa20 f50c 	lsr.w	r5, r0, ip
 800114c:	fa21 f30c 	lsr.w	r3, r1, ip
 8001150:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001154:	4325      	orrs	r5, r4
 8001156:	fbb3 f9f8 	udiv	r9, r3, r8
 800115a:	0c2c      	lsrs	r4, r5, #16
 800115c:	fb08 3319 	mls	r3, r8, r9, r3
 8001160:	fa1f fa8e 	uxth.w	sl, lr
 8001164:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8001168:	fb09 f40a 	mul.w	r4, r9, sl
 800116c:	429c      	cmp	r4, r3
 800116e:	fa02 f207 	lsl.w	r2, r2, r7
 8001172:	fa00 f107 	lsl.w	r1, r0, r7
 8001176:	d90b      	bls.n	8001190 <__udivmoddi4+0x1b0>
 8001178:	eb1e 0303 	adds.w	r3, lr, r3
 800117c:	f109 30ff 	add.w	r0, r9, #4294967295
 8001180:	f080 8087 	bcs.w	8001292 <__udivmoddi4+0x2b2>
 8001184:	429c      	cmp	r4, r3
 8001186:	f240 8084 	bls.w	8001292 <__udivmoddi4+0x2b2>
 800118a:	f1a9 0902 	sub.w	r9, r9, #2
 800118e:	4473      	add	r3, lr
 8001190:	1b1b      	subs	r3, r3, r4
 8001192:	b2ad      	uxth	r5, r5
 8001194:	fbb3 f0f8 	udiv	r0, r3, r8
 8001198:	fb08 3310 	mls	r3, r8, r0, r3
 800119c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80011a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80011a4:	45a2      	cmp	sl, r4
 80011a6:	d908      	bls.n	80011ba <__udivmoddi4+0x1da>
 80011a8:	eb1e 0404 	adds.w	r4, lr, r4
 80011ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80011b0:	d26b      	bcs.n	800128a <__udivmoddi4+0x2aa>
 80011b2:	45a2      	cmp	sl, r4
 80011b4:	d969      	bls.n	800128a <__udivmoddi4+0x2aa>
 80011b6:	3802      	subs	r0, #2
 80011b8:	4474      	add	r4, lr
 80011ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011be:	fba0 8902 	umull	r8, r9, r0, r2
 80011c2:	eba4 040a 	sub.w	r4, r4, sl
 80011c6:	454c      	cmp	r4, r9
 80011c8:	46c2      	mov	sl, r8
 80011ca:	464b      	mov	r3, r9
 80011cc:	d354      	bcc.n	8001278 <__udivmoddi4+0x298>
 80011ce:	d051      	beq.n	8001274 <__udivmoddi4+0x294>
 80011d0:	2e00      	cmp	r6, #0
 80011d2:	d069      	beq.n	80012a8 <__udivmoddi4+0x2c8>
 80011d4:	ebb1 050a 	subs.w	r5, r1, sl
 80011d8:	eb64 0403 	sbc.w	r4, r4, r3
 80011dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80011e0:	40fd      	lsrs	r5, r7
 80011e2:	40fc      	lsrs	r4, r7
 80011e4:	ea4c 0505 	orr.w	r5, ip, r5
 80011e8:	e9c6 5400 	strd	r5, r4, [r6]
 80011ec:	2700      	movs	r7, #0
 80011ee:	e747      	b.n	8001080 <__udivmoddi4+0xa0>
 80011f0:	f1c2 0320 	rsb	r3, r2, #32
 80011f4:	fa20 f703 	lsr.w	r7, r0, r3
 80011f8:	4095      	lsls	r5, r2
 80011fa:	fa01 f002 	lsl.w	r0, r1, r2
 80011fe:	fa21 f303 	lsr.w	r3, r1, r3
 8001202:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001206:	4338      	orrs	r0, r7
 8001208:	0c01      	lsrs	r1, r0, #16
 800120a:	fbb3 f7fe 	udiv	r7, r3, lr
 800120e:	fa1f f885 	uxth.w	r8, r5
 8001212:	fb0e 3317 	mls	r3, lr, r7, r3
 8001216:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800121a:	fb07 f308 	mul.w	r3, r7, r8
 800121e:	428b      	cmp	r3, r1
 8001220:	fa04 f402 	lsl.w	r4, r4, r2
 8001224:	d907      	bls.n	8001236 <__udivmoddi4+0x256>
 8001226:	1869      	adds	r1, r5, r1
 8001228:	f107 3cff 	add.w	ip, r7, #4294967295
 800122c:	d22f      	bcs.n	800128e <__udivmoddi4+0x2ae>
 800122e:	428b      	cmp	r3, r1
 8001230:	d92d      	bls.n	800128e <__udivmoddi4+0x2ae>
 8001232:	3f02      	subs	r7, #2
 8001234:	4429      	add	r1, r5
 8001236:	1acb      	subs	r3, r1, r3
 8001238:	b281      	uxth	r1, r0
 800123a:	fbb3 f0fe 	udiv	r0, r3, lr
 800123e:	fb0e 3310 	mls	r3, lr, r0, r3
 8001242:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001246:	fb00 f308 	mul.w	r3, r0, r8
 800124a:	428b      	cmp	r3, r1
 800124c:	d907      	bls.n	800125e <__udivmoddi4+0x27e>
 800124e:	1869      	adds	r1, r5, r1
 8001250:	f100 3cff 	add.w	ip, r0, #4294967295
 8001254:	d217      	bcs.n	8001286 <__udivmoddi4+0x2a6>
 8001256:	428b      	cmp	r3, r1
 8001258:	d915      	bls.n	8001286 <__udivmoddi4+0x2a6>
 800125a:	3802      	subs	r0, #2
 800125c:	4429      	add	r1, r5
 800125e:	1ac9      	subs	r1, r1, r3
 8001260:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001264:	e73b      	b.n	80010de <__udivmoddi4+0xfe>
 8001266:	4637      	mov	r7, r6
 8001268:	4630      	mov	r0, r6
 800126a:	e709      	b.n	8001080 <__udivmoddi4+0xa0>
 800126c:	4607      	mov	r7, r0
 800126e:	e6e7      	b.n	8001040 <__udivmoddi4+0x60>
 8001270:	4618      	mov	r0, r3
 8001272:	e6fb      	b.n	800106c <__udivmoddi4+0x8c>
 8001274:	4541      	cmp	r1, r8
 8001276:	d2ab      	bcs.n	80011d0 <__udivmoddi4+0x1f0>
 8001278:	ebb8 0a02 	subs.w	sl, r8, r2
 800127c:	eb69 020e 	sbc.w	r2, r9, lr
 8001280:	3801      	subs	r0, #1
 8001282:	4613      	mov	r3, r2
 8001284:	e7a4      	b.n	80011d0 <__udivmoddi4+0x1f0>
 8001286:	4660      	mov	r0, ip
 8001288:	e7e9      	b.n	800125e <__udivmoddi4+0x27e>
 800128a:	4618      	mov	r0, r3
 800128c:	e795      	b.n	80011ba <__udivmoddi4+0x1da>
 800128e:	4667      	mov	r7, ip
 8001290:	e7d1      	b.n	8001236 <__udivmoddi4+0x256>
 8001292:	4681      	mov	r9, r0
 8001294:	e77c      	b.n	8001190 <__udivmoddi4+0x1b0>
 8001296:	3802      	subs	r0, #2
 8001298:	442c      	add	r4, r5
 800129a:	e747      	b.n	800112c <__udivmoddi4+0x14c>
 800129c:	f1ac 0c02 	sub.w	ip, ip, #2
 80012a0:	442b      	add	r3, r5
 80012a2:	e72f      	b.n	8001104 <__udivmoddi4+0x124>
 80012a4:	4638      	mov	r0, r7
 80012a6:	e708      	b.n	80010ba <__udivmoddi4+0xda>
 80012a8:	4637      	mov	r7, r6
 80012aa:	e6e9      	b.n	8001080 <__udivmoddi4+0xa0>

080012ac <__aeabi_idiv0>:
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop

080012b0 <lcd_cmd>:
//AQM0802.c Ver.1.0
#include "AQM0802.h"

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 80012ba:	2300      	movs	r3, #0
 80012bc:	733b      	strb	r3, [r7, #12]
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2,SLAVEADRESS,Txcmd,2,100);
 80012c2:	f107 020c 	add.w	r2, r7, #12
 80012c6:	2364      	movs	r3, #100	; 0x64
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2302      	movs	r3, #2
 80012cc:	217c      	movs	r1, #124	; 0x7c
 80012ce:	4803      	ldr	r0, [pc, #12]	; (80012dc <lcd_cmd+0x2c>)
 80012d0:	f005 ffc4 	bl	800725c <HAL_I2C_Master_Transmit>
}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000330 	.word	0x20000330

080012e0 <lcd_data>:

void lcd_data(uint8_t data) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 80012ea:	2340      	movs	r3, #64	; 0x40
 80012ec:	733b      	strb	r3, [r7, #12]
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2,SLAVEADRESS,Txdata,2,100);
 80012f2:	f107 020c 	add.w	r2, r7, #12
 80012f6:	2364      	movs	r3, #100	; 0x64
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2302      	movs	r3, #2
 80012fc:	217c      	movs	r1, #124	; 0x7c
 80012fe:	4803      	ldr	r0, [pc, #12]	; (800130c <lcd_data+0x2c>)
 8001300:	f005 ffac 	bl	800725c <HAL_I2C_Master_Transmit>
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000330 	.word	0x20000330

08001310 <lcd_init>:

void lcd_init(){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
	HAL_Delay(40);
 8001314:	2028      	movs	r0, #40	; 0x28
 8001316:	f004 fa1d 	bl	8005754 <HAL_Delay>
	lcd_cmd(0x38);
 800131a:	2038      	movs	r0, #56	; 0x38
 800131c:	f7ff ffc8 	bl	80012b0 <lcd_cmd>
	HAL_Delay(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f004 fa17 	bl	8005754 <HAL_Delay>
	lcd_cmd(0x39);
 8001326:	2039      	movs	r0, #57	; 0x39
 8001328:	f7ff ffc2 	bl	80012b0 <lcd_cmd>
	HAL_Delay(1);
 800132c:	2001      	movs	r0, #1
 800132e:	f004 fa11 	bl	8005754 <HAL_Delay>
	lcd_cmd(0x14);
 8001332:	2014      	movs	r0, #20
 8001334:	f7ff ffbc 	bl	80012b0 <lcd_cmd>
	HAL_Delay(1);
 8001338:	2001      	movs	r0, #1
 800133a:	f004 fa0b 	bl	8005754 <HAL_Delay>
	lcd_cmd(0x70);
 800133e:	2070      	movs	r0, #112	; 0x70
 8001340:	f7ff ffb6 	bl	80012b0 <lcd_cmd>
	HAL_Delay(1);
 8001344:	2001      	movs	r0, #1
 8001346:	f004 fa05 	bl	8005754 <HAL_Delay>
	lcd_cmd(0x56);
 800134a:	2056      	movs	r0, #86	; 0x56
 800134c:	f7ff ffb0 	bl	80012b0 <lcd_cmd>
	HAL_Delay(1);
 8001350:	2001      	movs	r0, #1
 8001352:	f004 f9ff 	bl	8005754 <HAL_Delay>
	lcd_cmd(0x6C);
 8001356:	206c      	movs	r0, #108	; 0x6c
 8001358:	f7ff ffaa 	bl	80012b0 <lcd_cmd>
	HAL_Delay(200);
 800135c:	20c8      	movs	r0, #200	; 0xc8
 800135e:	f004 f9f9 	bl	8005754 <HAL_Delay>
	lcd_cmd(0x38);
 8001362:	2038      	movs	r0, #56	; 0x38
 8001364:	f7ff ffa4 	bl	80012b0 <lcd_cmd>
	HAL_Delay(1);
 8001368:	2001      	movs	r0, #1
 800136a:	f004 f9f3 	bl	8005754 <HAL_Delay>
	lcd_cmd(0x0C);
 800136e:	200c      	movs	r0, #12
 8001370:	f7ff ff9e 	bl	80012b0 <lcd_cmd>
	HAL_Delay(1);
 8001374:	2001      	movs	r0, #1
 8001376:	f004 f9ed 	bl	8005754 <HAL_Delay>
	lcd_cmd(0x01);
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff ff98 	bl	80012b0 <lcd_cmd>
	HAL_Delay(1);
 8001380:	2001      	movs	r0, #1
 8001382:	f004 f9e7 	bl	8005754 <HAL_Delay>
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}

0800138a <lcd_clear>:

void lcd_clear(){
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff ff8e 	bl	80012b0 <lcd_cmd>
	HAL_Delay(1);
 8001394:	2001      	movs	r0, #1
 8001396:	f004 f9dd 	bl	8005754 <HAL_Delay>
	lcd_cmd(0x02);
 800139a:	2002      	movs	r0, #2
 800139c:	f7ff ff88 	bl	80012b0 <lcd_cmd>
	HAL_Delay(1);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f004 f9d7 	bl	8005754 <HAL_Delay>
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}

080013aa <lcd_locate>:

void lcd_locate(int x, int y) {
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	3302      	adds	r3, #2
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	019b      	lsls	r3, r3, #6
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff72 	bl	80012b0 <lcd_cmd>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <lcd_print>:

void lcd_print(const char *str) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80013dc:	e007      	b.n	80013ee <lcd_print+0x1a>
	{
			lcd_data(*str);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff7c 	bl	80012e0 <lcd_data>
			str++;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f3      	bne.n	80013de <lcd_print+0xa>
	}
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <lcd_printf>:

short lcd_printf(const char *format, ...) {
 80013fe:	b40f      	push	{r0, r1, r2, r3}
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

    va_start(argptr, format);
 8001406:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800140a:	61bb      	str	r3, [r7, #24]
    ret = vsprintf(lcd_bff, format, argptr);
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001412:	4618      	mov	r0, r3
 8001414:	f00a feb0 	bl	800c178 <vsiprintf>
 8001418:	4603      	mov	r3, r0
 800141a:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 800141c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001420:	2b00      	cmp	r3, #0
 8001422:	dd03      	ble.n	800142c <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ffd4 	bl	80013d4 <lcd_print>
	}

	return ret;
 800142c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800143a:	b004      	add	sp, #16
 800143c:	4770      	bx	lr
	...

08001440 <FLASH_Unlock>:
const uint32_t end_adress_sector10 	 = 	0x80DFFFF;
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <FLASH_Unlock+0x1c>)
 8001446:	4a06      	ldr	r2, [pc, #24]	; (8001460 <FLASH_Unlock+0x20>)
 8001448:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <FLASH_Unlock+0x1c>)
 800144c:	4a05      	ldr	r2, [pc, #20]	; (8001464 <FLASH_Unlock+0x24>)
 800144e:	605a      	str	r2, [r3, #4]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023c00 	.word	0x40023c00
 8001460:	45670123 	.word	0x45670123
 8001464:	cdef89ab 	.word	0xcdef89ab

08001468 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <FLASH_Lock+0x1c>)
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <FLASH_Lock+0x1c>)
 8001472:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001476:	6113      	str	r3, [r2, #16]

}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023c00 	.word	0x40023c00

08001488 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 800148c:	bf00      	nop
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <FLASH_WaitBusy+0x1c>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f9      	bne.n	800148e <FLASH_WaitBusy+0x6>
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 80014b2:	f005 f9e5 	bl	8006880 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 80014be:	2301      	movs	r3, #1
 80014c0:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 80014c2:	2302      	movs	r3, #2
 80014c4:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 80014ca:	f107 0208 	add.w	r2, r7, #8
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f005 fa9b 	bl	8006a10 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80014da:	f005 f9f3 	bl	80068c4 <HAL_FLASH_Lock>
}
 80014de:	bf00      	nop
 80014e0:	3720      	adds	r7, #32
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <FLASH_Write_Word_S>:

	FLASH_Lock();
}

void FLASH_Write_Word_S(uint32_t address, int32_t data)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
	FLASH_Unlock();
 80014f2:	f7ff ffa5 	bl	8001440 <FLASH_Unlock>

	FLASH_WaitBusy();
 80014f6:	f7ff ffc7 	bl	8001488 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <FLASH_Write_Word_S+0x4c>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <FLASH_Write_Word_S+0x4c>)
 8001500:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001504:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <FLASH_Write_Word_S+0x4c>)
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <FLASH_Write_Word_S+0x4c>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6113      	str	r3, [r2, #16]

	*(__IO int32_t*)address = data;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 8001518:	f7ff ffb6 	bl	8001488 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <FLASH_Write_Word_S+0x4c>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <FLASH_Write_Word_S+0x4c>)
 8001522:	f023 0301 	bic.w	r3, r3, #1
 8001526:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 8001528:	f7ff ff9e 	bl	8001468 <FLASH_Lock>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40023c00 	.word	0x40023c00

08001538 <FLASH_Write_Word_F>:

void FLASH_Write_Word_F(uint32_t address, float data)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 8001544:	f7ff ff7c 	bl	8001440 <FLASH_Unlock>

	FLASH_WaitBusy();
 8001548:	f7ff ff9e 	bl	8001488 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <FLASH_Write_Word_F+0x50>)
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <FLASH_Write_Word_F+0x50>)
 8001552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001556:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <FLASH_Write_Word_F+0x50>)
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <FLASH_Write_Word_F+0x50>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800156a:	f7ff ff8d 	bl	8001488 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <FLASH_Write_Word_F+0x50>)
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <FLASH_Write_Word_F+0x50>)
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 800157a:	f7ff ff75 	bl	8001468 <FLASH_Lock>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00

0800158c <read_byte>:
#include "ICM20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800159c:	b2db      	uxtb	r3, r3
 800159e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80015a0:	2200      	movs	r2, #0
 80015a2:	2104      	movs	r1, #4
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <read_byte+0x50>)
 80015a6:	f005 fcef 	bl	8006f88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 80015aa:	f107 010f 	add.w	r1, r7, #15
 80015ae:	2364      	movs	r3, #100	; 0x64
 80015b0:	2201      	movs	r2, #1
 80015b2:	480b      	ldr	r0, [pc, #44]	; (80015e0 <read_byte+0x54>)
 80015b4:	f007 f942 	bl	800883c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 80015b8:	f107 010e 	add.w	r1, r7, #14
 80015bc:	2364      	movs	r3, #100	; 0x64
 80015be:	2201      	movs	r2, #1
 80015c0:	4807      	ldr	r0, [pc, #28]	; (80015e0 <read_byte+0x54>)
 80015c2:	f007 fa6f 	bl	8008aa4 <HAL_SPI_Receive>
	CS_SET;
 80015c6:	2201      	movs	r2, #1
 80015c8:	2104      	movs	r1, #4
 80015ca:	4804      	ldr	r0, [pc, #16]	; (80015dc <read_byte+0x50>)
 80015cc:	f005 fcdc 	bl	8006f88 <HAL_GPIO_WritePin>

	return val;
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40020c00 	.word	0x40020c00
 80015e0:	200003c4 	.word	0x200003c4

080015e4 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	460a      	mov	r2, r1
 80015ee:	71fb      	strb	r3, [r7, #7]
 80015f0:	4613      	mov	r3, r2
 80015f2:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80015fe:	2200      	movs	r2, #0
 8001600:	2104      	movs	r1, #4
 8001602:	480c      	ldr	r0, [pc, #48]	; (8001634 <write_byte+0x50>)
 8001604:	f005 fcc0 	bl	8006f88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8001608:	f107 010f 	add.w	r1, r7, #15
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	2201      	movs	r2, #1
 8001610:	4809      	ldr	r0, [pc, #36]	; (8001638 <write_byte+0x54>)
 8001612:	f007 f913 	bl	800883c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 8001616:	1db9      	adds	r1, r7, #6
 8001618:	2364      	movs	r3, #100	; 0x64
 800161a:	2201      	movs	r2, #1
 800161c:	4806      	ldr	r0, [pc, #24]	; (8001638 <write_byte+0x54>)
 800161e:	f007 f90d 	bl	800883c <HAL_SPI_Transmit>
	CS_SET;
 8001622:	2201      	movs	r2, #1
 8001624:	2104      	movs	r1, #4
 8001626:	4803      	ldr	r0, [pc, #12]	; (8001634 <write_byte+0x50>)
 8001628:	f005 fcae 	bl	8006f88 <HAL_GPIO_WritePin>
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40020c00 	.word	0x40020c00
 8001638:	200003c4 	.word	0x200003c4

0800163c <IMU_init>:

uint8_t IMU_init() {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001642:	2000      	movs	r0, #0
 8001644:	f7ff ffa2 	bl	800158c <read_byte>
 8001648:	4603      	mov	r3, r0
 800164a:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 800164c:	79bb      	ldrb	r3, [r7, #6]
 800164e:	2be0      	cmp	r3, #224	; 0xe0
 8001650:	d11c      	bne.n	800168c <IMU_init+0x50>
		ret = 1;
 8001652:	2301      	movs	r3, #1
 8001654:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001656:	2101      	movs	r1, #1
 8001658:	2006      	movs	r0, #6
 800165a:	f7ff ffc3 	bl	80015e4 <write_byte>
		HAL_Delay(100);
 800165e:	2064      	movs	r0, #100	; 0x64
 8001660:	f004 f878 	bl	8005754 <HAL_Delay>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001664:	2110      	movs	r1, #16
 8001666:	2003      	movs	r0, #3
 8001668:	f7ff ffbc 	bl	80015e4 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800166c:	2120      	movs	r1, #32
 800166e:	207f      	movs	r0, #127	; 0x7f
 8001670:	f7ff ffb8 	bl	80015e4 <write_byte>
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable
		write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 8001674:	2107      	movs	r1, #7
 8001676:	2001      	movs	r0, #1
 8001678:	f7ff ffb4 	bl	80015e4 <write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x00);	//range±2g
 800167c:	2100      	movs	r1, #0
 800167e:	2014      	movs	r0, #20
 8001680:	f7ff ffb0 	bl	80015e4 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001684:	2100      	movs	r1, #0
 8001686:	207f      	movs	r0, #127	; 0x7f
 8001688:	f7ff ffac 	bl	80015e4 <write_byte>
	}
	return ret;
 800168c:	79fb      	ldrb	r3, [r7, #7]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <read_zg_data>:

void read_zg_data() {
 8001698:	b598      	push	{r3, r4, r7, lr}
 800169a:	af00      	add	r7, sp, #0
	zg = ((int16_t)read_byte(0x37) << 8) | ((int16_t)read_byte(0x38));
 800169c:	2037      	movs	r0, #55	; 0x37
 800169e:	f7ff ff75 	bl	800158c <read_byte>
 80016a2:	4603      	mov	r3, r0
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	b21c      	sxth	r4, r3
 80016a8:	2038      	movs	r0, #56	; 0x38
 80016aa:	f7ff ff6f 	bl	800158c <read_byte>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	4323      	orrs	r3, r4
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	4b02      	ldr	r3, [pc, #8]	; (80016c0 <read_zg_data+0x28>)
 80016b8:	801a      	strh	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	bd98      	pop	{r3, r4, r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000288 	.word	0x20000288

080016c4 <read_gyro_data>:

void read_gyro_data() {
 80016c4:	b598      	push	{r3, r4, r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	xg = ((int16_t)read_byte(0x33) << 8) | ((int16_t)read_byte(0x34));
 80016c8:	2033      	movs	r0, #51	; 0x33
 80016ca:	f7ff ff5f 	bl	800158c <read_byte>
 80016ce:	4603      	mov	r3, r0
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	b21c      	sxth	r4, r3
 80016d4:	2034      	movs	r0, #52	; 0x34
 80016d6:	f7ff ff59 	bl	800158c <read_byte>
 80016da:	4603      	mov	r3, r0
 80016dc:	b21b      	sxth	r3, r3
 80016de:	4323      	orrs	r3, r4
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <read_gyro_data+0x64>)
 80016e4:	801a      	strh	r2, [r3, #0]
	yg = ((int16_t)read_byte(0x35) << 8) | ((int16_t)read_byte(0x36));
 80016e6:	2035      	movs	r0, #53	; 0x35
 80016e8:	f7ff ff50 	bl	800158c <read_byte>
 80016ec:	4603      	mov	r3, r0
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21c      	sxth	r4, r3
 80016f2:	2036      	movs	r0, #54	; 0x36
 80016f4:	f7ff ff4a 	bl	800158c <read_byte>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	4323      	orrs	r3, r4
 80016fe:	b21a      	sxth	r2, r3
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <read_gyro_data+0x68>)
 8001702:	801a      	strh	r2, [r3, #0]
	zg = ((int16_t)read_byte(0x37) << 8) | ((int16_t)read_byte(0x38));
 8001704:	2037      	movs	r0, #55	; 0x37
 8001706:	f7ff ff41 	bl	800158c <read_byte>
 800170a:	4603      	mov	r3, r0
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	b21c      	sxth	r4, r3
 8001710:	2038      	movs	r0, #56	; 0x38
 8001712:	f7ff ff3b 	bl	800158c <read_byte>
 8001716:	4603      	mov	r3, r0
 8001718:	b21b      	sxth	r3, r3
 800171a:	4323      	orrs	r3, r4
 800171c:	b21a      	sxth	r2, r3
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <read_gyro_data+0x6c>)
 8001720:	801a      	strh	r2, [r3, #0]
}
 8001722:	bf00      	nop
 8001724:	bd98      	pop	{r3, r4, r7, pc}
 8001726:	bf00      	nop
 8001728:	20000290 	.word	0x20000290
 800172c:	2000028e 	.word	0x2000028e
 8001730:	20000288 	.word	0x20000288

08001734 <read_accel_data>:

void read_xa_data() {
	xa = ((int16_t)read_byte(0x2D) << 8) | ((int16_t)read_byte(0x2E));
}

void read_accel_data() {
 8001734:	b598      	push	{r3, r4, r7, lr}
 8001736:	af00      	add	r7, sp, #0
	xa = ((int16_t)read_byte(0x2D) << 8) | ((int16_t)read_byte(0x2E));
 8001738:	202d      	movs	r0, #45	; 0x2d
 800173a:	f7ff ff27 	bl	800158c <read_byte>
 800173e:	4603      	mov	r3, r0
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b21c      	sxth	r4, r3
 8001744:	202e      	movs	r0, #46	; 0x2e
 8001746:	f7ff ff21 	bl	800158c <read_byte>
 800174a:	4603      	mov	r3, r0
 800174c:	b21b      	sxth	r3, r3
 800174e:	4323      	orrs	r3, r4
 8001750:	b21a      	sxth	r2, r3
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <read_accel_data+0x64>)
 8001754:	801a      	strh	r2, [r3, #0]
	ya = ((int16_t)read_byte(0x2F) << 8) | ((int16_t)read_byte(0x30));
 8001756:	202f      	movs	r0, #47	; 0x2f
 8001758:	f7ff ff18 	bl	800158c <read_byte>
 800175c:	4603      	mov	r3, r0
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b21c      	sxth	r4, r3
 8001762:	2030      	movs	r0, #48	; 0x30
 8001764:	f7ff ff12 	bl	800158c <read_byte>
 8001768:	4603      	mov	r3, r0
 800176a:	b21b      	sxth	r3, r3
 800176c:	4323      	orrs	r3, r4
 800176e:	b21a      	sxth	r2, r3
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <read_accel_data+0x68>)
 8001772:	801a      	strh	r2, [r3, #0]
	za = ((int16_t)read_byte(0x31) << 8) | ((int16_t)read_byte(0x32));
 8001774:	2031      	movs	r0, #49	; 0x31
 8001776:	f7ff ff09 	bl	800158c <read_byte>
 800177a:	4603      	mov	r3, r0
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21c      	sxth	r4, r3
 8001780:	2032      	movs	r0, #50	; 0x32
 8001782:	f7ff ff03 	bl	800158c <read_byte>
 8001786:	4603      	mov	r3, r0
 8001788:	b21b      	sxth	r3, r3
 800178a:	4323      	orrs	r3, r4
 800178c:	b21a      	sxth	r2, r3
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <read_accel_data+0x6c>)
 8001790:	801a      	strh	r2, [r3, #0]
}
 8001792:	bf00      	nop
 8001794:	bd98      	pop	{r3, r4, r7, pc}
 8001796:	bf00      	nop
 8001798:	2000028c 	.word	0x2000028c
 800179c:	20000292 	.word	0x20000292
 80017a0:	2000028a 	.word	0x2000028a

080017a4 <INA260_read>:
#include "INA260.h"

#define SLAVEADRESS1 (0x40<<1)
//#define SLAVEADRESS2 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS1,&pointer_byte,1,100);
 80017ae:	1dfa      	adds	r2, r7, #7
 80017b0:	2364      	movs	r3, #100	; 0x64
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2301      	movs	r3, #1
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	480c      	ldr	r0, [pc, #48]	; (80017ec <INA260_read+0x48>)
 80017ba:	f005 fd4f 	bl	800725c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,SLAVEADRESS1,Rxdata,2,100);
 80017be:	f107 020c 	add.w	r2, r7, #12
 80017c2:	2364      	movs	r3, #100	; 0x64
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2302      	movs	r3, #2
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	4808      	ldr	r0, [pc, #32]	; (80017ec <INA260_read+0x48>)
 80017cc:	f005 fe44 	bl	8007458 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 80017d0:	7b3b      	ldrb	r3, [r7, #12]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	7b7b      	ldrb	r3, [r7, #13]
 80017d8:	b21b      	sxth	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b21b      	sxth	r3, r3
 80017de:	81fb      	strh	r3, [r7, #14]
	return val;
 80017e0:	89fb      	ldrh	r3, [r7, #14]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200002dc 	.word	0x200002dc

080017f0 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
 80017fa:	460b      	mov	r3, r1
 80017fc:	71bb      	strb	r3, [r7, #6]
 80017fe:	4613      	mov	r3, r2
 8001800:	717b      	strb	r3, [r7, #5]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	733b      	strb	r3, [r7, #12]
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	737b      	strb	r3, [r7, #13]
 800180a:	797b      	ldrb	r3, [r7, #5]
 800180c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS1,Txcmd,3,100);
 800180e:	f107 020c 	add.w	r2, r7, #12
 8001812:	2364      	movs	r3, #100	; 0x64
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2303      	movs	r3, #3
 8001818:	2180      	movs	r1, #128	; 0x80
 800181a:	4803      	ldr	r0, [pc, #12]	; (8001828 <INA260_write+0x38>)
 800181c:	f005 fd1e 	bl	800725c <HAL_I2C_Master_Transmit>
}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200002dc 	.word	0x200002dc

0800182c <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	460a      	mov	r2, r1
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	4613      	mov	r3, r2
 800183a:	71bb      	strb	r3, [r7, #6]
	INA260_write(0x00 , msbyte , lsbyte);
 800183c:	79ba      	ldrb	r2, [r7, #6]
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	4619      	mov	r1, r3
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff ffd4 	bl	80017f0 <INA260_write>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <INA260_init>:

void INA260_init() {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	setConfig(0x00,0xDF);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001854:	21df      	movs	r1, #223	; 0xdf
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff ffe8 	bl	800182c <setConfig>
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <mileage>:
float order_posR = 0.0f;
float order_posL = 0.0f;
float order_velR = 0.0f;
float order_velL = 0.0f;

float mileage(float mm) {
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	ed87 0a01 	vstr	s0, [r7, #4]
	return mm * ENC_PULSE_MM;
 800186a:	edd7 7a01 	vldr	s15, [r7, #4]
 800186e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001884 <mileage+0x24>
 8001872:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001876:	eeb0 0a67 	vmov.f32	s0, s15
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	3c47ffde 	.word	0x3c47ffde

08001888 <ComplementaryFilter>:

float ComplementaryFilter(float high_cut, float low_cut, float alpha, float complement_before) {
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001892:	edc7 0a02 	vstr	s1, [r7, #8]
 8001896:	ed87 1a01 	vstr	s2, [r7, #4]
 800189a:	edc7 1a00 	vstr	s3, [r7]
	float complement;

	complement = alpha * (complement_before + high_cut * DELTA_T) + (1.0f - alpha) * low_cut;
 800189e:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80018ec <ComplementaryFilter+0x64>
 80018a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018aa:	edd7 7a00 	vldr	s15, [r7]
 80018ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018be:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d2:	edc7 7a05 	vstr	s15, [r7, #20]

	return complement;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	ee07 3a90 	vmov	s15, r3
}
 80018dc:	eeb0 0a67 	vmov.f32	s0, s15
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	3a83126f 	.word	0x3a83126f

080018f0 <posPID>:

void posPID(void) {
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0

	float p_pos, d_pos;
	static float i_pos;
	float kp_pos = 0.10f, ki_pos = 0.004f, kd_pos = 0.008f;
 80018f6:	4b4e      	ldr	r3, [pc, #312]	; (8001a30 <posPID+0x140>)
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	4b4e      	ldr	r3, [pc, #312]	; (8001a34 <posPID+0x144>)
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b4e      	ldr	r3, [pc, #312]	; (8001a38 <posPID+0x148>)
 8001900:	60fb      	str	r3, [r7, #12]
	static float def_pos[] = {0.0f, 0.0f};

	def_pos[0] = ( ((float)line_senLLL * 1.6f) + ((float)line_senLL * 1.25f) + (float)line_senL) - ((float)line_senR + ((float)line_senRR * 1.25f) + ((float)line_senRRR * 1.6f)); //1.25 1.6
 8001902:	4b4e      	ldr	r3, [pc, #312]	; (8001a3c <posPID+0x14c>)
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	ee07 3a90 	vmov	s15, r3
 800190a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800190e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001a40 <posPID+0x150>
 8001912:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001916:	4b4b      	ldr	r3, [pc, #300]	; (8001a44 <posPID+0x154>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001922:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8001926:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800192a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800192e:	4b46      	ldr	r3, [pc, #280]	; (8001a48 <posPID+0x158>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800193a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800193e:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <posPID+0x15c>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <posPID+0x160>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	ee07 3a90 	vmov	s15, r3
 8001952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001956:	eeb7 6a04 	vmov.f32	s12, #116	; 0x3fa00000  1.250
 800195a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800195e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001962:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <posPID+0x164>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196e:	ed9f 6a34 	vldr	s12, [pc, #208]	; 8001a40 <posPID+0x150>
 8001972:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800197a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197e:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <posPID+0x168>)
 8001980:	edc3 7a00 	vstr	s15, [r3]

	p_pos = kp_pos * def_pos[0]; //P制御
 8001984:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <posPID+0x168>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ed97 7a05 	vldr	s14, [r7, #20]
 800198e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001992:	edc7 7a02 	vstr	s15, [r7, #8]
	i_pos += ki_pos * def_pos[0] * DELTA_T; //I制御
 8001996:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <posPID+0x168>)
 8001998:	ed93 7a00 	vldr	s14, [r3]
 800199c:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001a5c <posPID+0x16c>
 80019a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019ac:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <posPID+0x170>)
 80019ae:	edd3 7a00 	vldr	s15, [r3]
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <posPID+0x170>)
 80019b8:	edc3 7a00 	vstr	s15, [r3]
	d_pos = kd_pos * (def_pos[0] - def_pos[1]) / DELTA_T; //D制御
 80019bc:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <posPID+0x168>)
 80019be:	ed93 7a00 	vldr	s14, [r3]
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <posPID+0x168>)
 80019c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80019c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d4:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001a5c <posPID+0x16c>
 80019d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019dc:	edc7 7a01 	vstr	s15, [r7, #4]

	order_posR = p_pos + i_pos + d_pos;
 80019e0:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <posPID+0x170>)
 80019e2:	ed93 7a00 	vldr	s14, [r3]
 80019e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f6:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <posPID+0x174>)
 80019f8:	edc3 7a00 	vstr	s15, [r3]
	order_posL = -(p_pos + i_pos + d_pos);
 80019fc:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <posPID+0x170>)
 80019fe:	ed93 7a00 	vldr	s14, [r3]
 8001a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a12:	eef1 7a67 	vneg.f32	s15, s15
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <posPID+0x178>)
 8001a18:	edc3 7a00 	vstr	s15, [r3]

	def_pos[1] = def_pos[0];
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <posPID+0x168>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0d      	ldr	r2, [pc, #52]	; (8001a58 <posPID+0x168>)
 8001a22:	6053      	str	r3, [r2, #4]

}
 8001a24:	bf00      	nop
 8001a26:	371c      	adds	r7, #28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	3dcccccd 	.word	0x3dcccccd
 8001a34:	3b83126f 	.word	0x3b83126f
 8001a38:	3c03126f 	.word	0x3c03126f
 8001a3c:	20000238 	.word	0x20000238
 8001a40:	3fcccccd 	.word	0x3fcccccd
 8001a44:	2000023a 	.word	0x2000023a
 8001a48:	2000023c 	.word	0x2000023c
 8001a4c:	2000023e 	.word	0x2000023e
 8001a50:	20000240 	.word	0x20000240
 8001a54:	20000242 	.word	0x20000242
 8001a58:	2000020c 	.word	0x2000020c
 8001a5c:	3a83126f 	.word	0x3a83126f
 8001a60:	20000214 	.word	0x20000214
 8001a64:	200001fc 	.word	0x200001fc
 8001a68:	20000200 	.word	0x20000200

08001a6c <velPID>:

void velPID(float target) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	ed87 0a01 	vstr	s0, [r7, #4]
	float p_vel, kp_vel = 2.8f, ki_vel = 50.0f;	//2.8 50
 8001a76:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <velPID+0xe8>)
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <velPID+0xec>)
 8001a7c:	61bb      	str	r3, [r7, #24]
	float vel_center, filter_vel_center, acceleration_imu;
	static float i_vel, def_vel, last_vel_center;

	vel_center = (velR + velL) / 2.0f;
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <velPID+0xf0>)
 8001a80:	ed93 7a00 	vldr	s14, [r3]
 8001a84:	4b36      	ldr	r3, [pc, #216]	; (8001b60 <velPID+0xf4>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a96:	edc7 7a05 	vstr	s15, [r7, #20]
	acceleration_imu = (float)xa / 16384.0f;
 8001a9a:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <velPID+0xf8>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001b68 <velPID+0xfc>
 8001aac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab0:	edc7 7a04 	vstr	s15, [r7, #16]
	filter_vel_center = ComplementaryFilter(acceleration_imu, vel_center, 0.65f, last_vel_center);
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <velPID+0x100>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	eef0 1a67 	vmov.f32	s3, s15
 8001abe:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8001b70 <velPID+0x104>
 8001ac2:	edd7 0a05 	vldr	s1, [r7, #20]
 8001ac6:	ed97 0a04 	vldr	s0, [r7, #16]
 8001aca:	f7ff fedd 	bl	8001888 <ComplementaryFilter>
 8001ace:	ed87 0a03 	vstr	s0, [r7, #12]
	last_vel_center = filter_vel_center;
 8001ad2:	4a26      	ldr	r2, [pc, #152]	; (8001b6c <velPID+0x100>)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6013      	str	r3, [r2, #0]

	def_vel = filter_vel_center - target;
 8001ad8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001adc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae4:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <velPID+0x108>)
 8001ae6:	edc3 7a00 	vstr	s15, [r3]

	p_vel = kp_vel * def_vel;
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <velPID+0x108>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af8:	edc7 7a02 	vstr	s15, [r7, #8]
	i_vel += ki_vel * def_vel * DELTA_T;
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <velPID+0x108>)
 8001afe:	ed93 7a00 	vldr	s14, [r3]
 8001b02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001b78 <velPID+0x10c>
 8001b0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <velPID+0x110>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <velPID+0x110>)
 8001b1e:	edc3 7a00 	vstr	s15, [r3]

	order_velR = p_vel + i_vel;
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <velPID+0x110>)
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <velPID+0x114>)
 8001b32:	edc3 7a00 	vstr	s15, [r3]
	order_velL = p_vel + i_vel;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <velPID+0x110>)
 8001b38:	ed93 7a00 	vldr	s14, [r3]
 8001b3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <velPID+0x118>)
 8001b46:	edc3 7a00 	vstr	s15, [r3]
}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40333333 	.word	0x40333333
 8001b58:	42480000 	.word	0x42480000
 8001b5c:	20000668 	.word	0x20000668
 8001b60:	200006a8 	.word	0x200006a8
 8001b64:	2000028c 	.word	0x2000028c
 8001b68:	46800000 	.word	0x46800000
 8001b6c:	20000218 	.word	0x20000218
 8001b70:	3f266666 	.word	0x3f266666
 8001b74:	2000021c 	.word	0x2000021c
 8001b78:	3a83126f 	.word	0x3a83126f
 8001b7c:	20000220 	.word	0x20000220
 8001b80:	20000204 	.word	0x20000204
 8001b84:	20000208 	.word	0x20000208

08001b88 <Calculation_offset_zg>:

void Calculation_offset_zg(void){
 8001b88:	b598      	push	{r3, r4, r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	offset_zg = sum_zg / calibration_cnt;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <Calculation_offset_zg+0x2c>)
 8001b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <Calculation_offset_zg+0x30>)
 8001b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4623      	mov	r3, r4
 8001ba2:	f7ff f97f 	bl	8000ea4 <__aeabi_ldivmod>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	460c      	mov	r4, r1
 8001baa:	b21a      	sxth	r2, r3
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <Calculation_offset_zg+0x34>)
 8001bae:	801a      	strh	r2, [r3, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	bd98      	pop	{r3, r4, r7, pc}
 8001bb4:	20000228 	.word	0x20000228
 8001bb8:	20000298 	.word	0x20000298
 8001bbc:	20000230 	.word	0x20000230

08001bc0 <Velo_Spline_Curve>:

float Velo_Spline_Curve(float curvature) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	ed2d 8b02 	vpush	{d8}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	ed87 0a01 	vstr	s0, [r7, #4]
	float velo_spline;

	velo_spline = 0.00000243536328504599f * powf(curvature, 3) + (-0.00768048107979400f) * powf(curvature, 2) + 8.55442953186553f * curvature + 154.785382404022f;
 8001bce:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001bd2:	ed97 0a01 	vldr	s0, [r7, #4]
 8001bd6:	f00c faf3 	bl	800e1c0 <powf>
 8001bda:	eeb0 7a40 	vmov.f32	s14, s0
 8001bde:	eddf 7a15 	vldr	s15, [pc, #84]	; 8001c34 <Velo_Spline_Curve+0x74>
 8001be2:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001be6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001bea:	ed97 0a01 	vldr	s0, [r7, #4]
 8001bee:	f00c fae7 	bl	800e1c0 <powf>
 8001bf2:	eeb0 7a40 	vmov.f32	s14, s0
 8001bf6:	eddf 7a10 	vldr	s15, [pc, #64]	; 8001c38 <Velo_Spline_Curve+0x78>
 8001bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfe:	ee38 7a27 	vadd.f32	s14, s16, s15
 8001c02:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c06:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001c3c <Velo_Spline_Curve+0x7c>
 8001c0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c12:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001c40 <Velo_Spline_Curve+0x80>
 8001c16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c1a:	edc7 7a03 	vstr	s15, [r7, #12]

	return velo_spline;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	ee07 3a90 	vmov	s15, r3
}
 8001c24:	eeb0 0a67 	vmov.f32	s0, s15
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	ecbd 8b02 	vpop	{d8}
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	36236f39 	.word	0x36236f39
 8001c38:	bbfbac8c 	.word	0xbbfbac8c
 8001c3c:	4108def2 	.word	0x4108def2
 8001c40:	431ac90f 	.word	0x431ac90f

08001c44 <HAL_TIM_PeriodElapsedCallback>:
int16_t calibration_cnt;
uint8_t calibration_flag = 0;
uint8_t start_goal_flag = 0;
uint32_t log_check_adress;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c44:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]

	uint64_t enc_cnt_10ms;

	if(htim->Instance == htim6.Instance){	//1ms
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b85      	ldr	r3, [pc, #532]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	f040 816e 	bne.w	8001f38 <HAL_TIM_PeriodElapsedCallback+0x2f4>

		cnt_sw++;
 8001c5c:	4b83      	ldr	r3, [pc, #524]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	4b81      	ldr	r3, [pc, #516]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c66:	701a      	strb	r2, [r3, #0]
		if(cnt_sw >= 250) cnt_sw = 30;
 8001c68:	4b80      	ldr	r3, [pc, #512]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2bf9      	cmp	r3, #249	; 0xf9
 8001c6e:	d902      	bls.n	8001c76 <HAL_TIM_PeriodElapsedCallback+0x32>
 8001c70:	4b7e      	ldr	r3, [pc, #504]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c72:	221e      	movs	r2, #30
 8001c74:	701a      	strb	r2, [r3, #0]

		getEncoder();
 8001c76:	f002 fdd3 	bl	8004820 <getEncoder>
		read_gyro_data();
 8001c7a:	f7ff fd23 	bl	80016c4 <read_gyro_data>
		read_accel_data();
 8001c7e:	f7ff fd59 	bl	8001734 <read_accel_data>
		ADval_get();
 8001c82:	f002 fea3 	bl	80049cc <ADval_get>
		ADval_sum();
 8001c86:	f002 feff 	bl	8004a88 <ADval_sum>

		if(calibration_flag == 1) {
 8001c8a:	4b79      	ldr	r3, [pc, #484]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d118      	bne.n	8001cc4 <HAL_TIM_PeriodElapsedCallback+0x80>
			sum_zg += zg;
 8001c92:	4b78      	ldr	r3, [pc, #480]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	b219      	sxth	r1, r3
 8001c9a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c9e:	4b76      	ldr	r3, [pc, #472]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001ca0:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8001ca4:	eb1b 0301 	adds.w	r3, fp, r1
 8001ca8:	eb4c 0402 	adc.w	r4, ip, r2
 8001cac:	4a72      	ldr	r2, [pc, #456]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001cae:	e9c2 3400 	strd	r3, r4, [r2]
			calibration_cnt++;
 8001cb2:	4b72      	ldr	r3, [pc, #456]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	b21a      	sxth	r2, r3
 8001cc0:	4b6e      	ldr	r3, [pc, #440]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001cc2:	801a      	strh	r2, [r3, #0]
		}

		if(main_pattern == 0) {
 8001cc4:	4b6e      	ldr	r3, [pc, #440]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10e      	bne.n	8001cea <HAL_TIM_PeriodElapsedCallback+0xa6>
			cnt_sw++;
 8001ccc:	4b67      	ldr	r3, [pc, #412]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	4b65      	ldr	r3, [pc, #404]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001cd6:	701a      	strb	r2, [r3, #0]
			maker_check = MakerSenTh(MAKERTHRESHOLD);
 8001cd8:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8001cdc:	f002 ff30 	bl	8004b40 <MakerSenTh>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b67      	ldr	r3, [pc, #412]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	e126      	b.n	8001f38 <HAL_TIM_PeriodElapsedCallback+0x2f4>
		}
		else if(main_pattern>=10 && main_pattern<=19) {
 8001cea:	4b65      	ldr	r3, [pc, #404]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b09      	cmp	r3, #9
 8001cf0:	f240 8122 	bls.w	8001f38 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 8001cf4:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b13      	cmp	r3, #19
 8001cfa:	f200 811d 	bhi.w	8001f38 <HAL_TIM_PeriodElapsedCallback+0x2f4>

			if(main_pattern == 13 && second_trace_flag == 1){
 8001cfe:	4b60      	ldr	r3, [pc, #384]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b0d      	cmp	r3, #13
 8001d04:	f040 8084 	bne.w	8001e10 <HAL_TIM_PeriodElapsedCallback+0x1cc>
 8001d08:	4b5f      	ldr	r3, [pc, #380]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d17f      	bne.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x1cc>
				while( mm_total < mileage((float)enc_tim_total ) ) {
 8001d10:	e048      	b.n	8001da4 <HAL_TIM_PeriodElapsedCallback+0x160>

					if(isnan(*(float*)log_adress) != 0) {
 8001d12:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	eef4 7a67 	vcmp.f32	s15, s15
 8001d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d22:	d70d      	bvc.n	8001d40 <HAL_TIM_PeriodElapsedCallback+0xfc>
						led_pattern(7);
 8001d24:	2007      	movs	r0, #7
 8001d26:	f002 fd39 	bl	800479c <led_pattern>
						enc_cnt = 0;
 8001d2a:	4a59      	ldr	r2, [pc, #356]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	f04f 0400 	mov.w	r4, #0
 8001d34:	e9c2 3400 	strd	r3, r4, [r2]
						main_pattern = 14;
 8001d38:	4b51      	ldr	r3, [pc, #324]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001d3a:	220e      	movs	r2, #14
 8001d3c:	701a      	strb	r2, [r3, #0]
						break;
 8001d3e:	e047      	b.n	8001dd0 <HAL_TIM_PeriodElapsedCallback+0x18c>
					}
					else mm_total += *(float*)log_adress;
 8001d40:	4b52      	ldr	r3, [pc, #328]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	ed93 7a00 	vldr	s14, [r3]
 8001d48:	4b52      	ldr	r3, [pc, #328]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d52:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001d54:	edc3 7a00 	vstr	s15, [r3]

					if(isnan(*(float*)plan_velo_adress) != 0) {
 8001d58:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	eef4 7a67 	vcmp.f32	s15, s15
 8001d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d68:	d70d      	bvc.n	8001d86 <HAL_TIM_PeriodElapsedCallback+0x142>
						led_pattern(7);
 8001d6a:	2007      	movs	r0, #7
 8001d6c:	f002 fd16 	bl	800479c <led_pattern>
						enc_cnt = 0;
 8001d70:	4a47      	ldr	r2, [pc, #284]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	f04f 0400 	mov.w	r4, #0
 8001d7a:	e9c2 3400 	strd	r3, r4, [r2]
						main_pattern = 14;
 8001d7e:	4b40      	ldr	r3, [pc, #256]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001d80:	220e      	movs	r2, #14
 8001d82:	701a      	strb	r2, [r3, #0]
						break;
 8001d84:	e024      	b.n	8001dd0 <HAL_TIM_PeriodElapsedCallback+0x18c>
					}
					else target_vel = *(float*)plan_velo_adress;
 8001d86:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a43      	ldr	r2, [pc, #268]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001d8e:	6013      	str	r3, [r2, #0]

					plan_velo_adress += 0x04;
 8001d90:	4b41      	ldr	r3, [pc, #260]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3304      	adds	r3, #4
 8001d96:	4a40      	ldr	r2, [pc, #256]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001d98:	6013      	str	r3, [r2, #0]
					log_adress += 0x08;
 8001d9a:	4b3c      	ldr	r3, [pc, #240]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3308      	adds	r3, #8
 8001da0:	4a3a      	ldr	r2, [pc, #232]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001da2:	6013      	str	r3, [r2, #0]
				while( mm_total < mileage((float)enc_tim_total ) ) {
 8001da4:	4b3e      	ldr	r3, [pc, #248]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001da6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001daa:	4618      	mov	r0, r3
 8001dac:	4621      	mov	r1, r4
 8001dae:	f7ff f83b 	bl	8000e28 <__aeabi_l2f>
 8001db2:	4603      	mov	r3, r0
 8001db4:	ee00 3a10 	vmov	s0, r3
 8001db8:	f7ff fd52 	bl	8001860 <mileage>
 8001dbc:	eeb0 7a40 	vmov.f32	s14, s0
 8001dc0:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	dca0      	bgt.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0xce>
				}
				if(maker_check >= 8 && timer >= 1000) { //goal_maler_check
 8001dd0:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b07      	cmp	r3, #7
 8001dd6:	d96d      	bls.n	8001eb4 <HAL_TIM_PeriodElapsedCallback+0x270>
 8001dd8:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001de0:	db68      	blt.n	8001eb4 <HAL_TIM_PeriodElapsedCallback+0x270>
						tim_buf = timer;
						led_pattern(4);
						enc_cnt = 0;
						main_pattern = 14;
					}*/
					flash_flag = 0;
 8001de2:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
					led_pattern(4);
 8001de8:	2004      	movs	r0, #4
 8001dea:	f002 fcd7 	bl	800479c <led_pattern>
					enc_cnt = 0;
 8001dee:	4a28      	ldr	r2, [pc, #160]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	f04f 0400 	mov.w	r4, #0
 8001df8:	e9c2 3400 	strd	r3, r4, [r2]
					main_pattern++;
 8001dfc:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001e06:	701a      	strb	r2, [r3, #0]
					timer = 0;
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
				if(maker_check >= 8 && timer >= 1000) { //goal_maler_check
 8001e0e:	e051      	b.n	8001eb4 <HAL_TIM_PeriodElapsedCallback+0x270>
				}
			}
			else if(main_pattern==14){
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b0e      	cmp	r3, #14
 8001e16:	d14e      	bne.n	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x272>
				if (mileage((float)enc_cnt) >= 400) {
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001e1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	4621      	mov	r1, r4
 8001e22:	f7ff f801 	bl	8000e28 <__aeabi_l2f>
 8001e26:	4603      	mov	r3, r0
 8001e28:	ee00 3a10 	vmov	s0, r3
 8001e2c:	f7ff fd18 	bl	8001860 <mileage>
 8001e30:	eeb0 7a40 	vmov.f32	s14, s0
 8001e34:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001eac <HAL_TIM_PeriodElapsedCallback+0x268>
 8001e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e40:	db39      	blt.n	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x272>
					target_vel = 0.0f;
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
					led_pattern(7);
 8001e4a:	2007      	movs	r0, #7
 8001e4c:	f002 fca6 	bl	800479c <led_pattern>
					main_pattern = 20;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001e52:	2214      	movs	r2, #20
 8001e54:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2200      	movs	r2, #0
 8001e64:	639a      	str	r2, [r3, #56]	; 0x38
 8001e66:	e026      	b.n	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x272>
 8001e68:	20000504 	.word	0x20000504
 8001e6c:	20000278 	.word	0x20000278
 8001e70:	20000232 	.word	0x20000232
 8001e74:	20000288 	.word	0x20000288
 8001e78:	20000228 	.word	0x20000228
 8001e7c:	20000298 	.word	0x20000298
 8001e80:	20000268 	.word	0x20000268
 8001e84:	200006b8 	.word	0x200006b8
 8001e88:	2000026e 	.word	0x2000026e
 8001e8c:	20000678 	.word	0x20000678
 8001e90:	20000658 	.word	0x20000658
 8001e94:	20000270 	.word	0x20000270
 8001e98:	2000c23c 	.word	0x2000c23c
 8001e9c:	200006b4 	.word	0x200006b4
 8001ea0:	20000258 	.word	0x20000258
 8001ea4:	20000264 	.word	0x20000264
 8001ea8:	2000026b 	.word	0x2000026b
 8001eac:	43c80000 	.word	0x43c80000
 8001eb0:	200005c4 	.word	0x200005c4
				if(maker_check >= 8 && timer >= 1000) { //goal_maler_check
 8001eb4:	bf00      	nop
				}
			}

			ErrorCheck(ERRORCHECK);
 8001eb6:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8001eba:	f000 fd49 	bl	8002950 <ErrorCheck>
			timer++;
 8001ebe:	4b73      	ldr	r3, [pc, #460]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	4a71      	ldr	r2, [pc, #452]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001ec6:	6013      	str	r3, [r2, #0]
			CrossCheck(CROSSCHECK);
 8001ec8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001ecc:	f000 fdae 	bl	8002a2c <CrossCheck>
			maker_check = MakerSenTh(MAKERTHRESHOLD);//400 700
 8001ed0:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8001ed4:	f002 fe34 	bl	8004b40 <MakerSenTh>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b6c      	ldr	r3, [pc, #432]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8001ede:	701a      	strb	r2, [r3, #0]
			MakerCheck(maker_check);
 8001ee0:	4b6b      	ldr	r3, [pc, #428]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fdf3 	bl	8002ad0 <MakerCheck>
			posPID();
 8001eea:	f7ff fd01 	bl	80018f0 <posPID>
			velPID(target_vel);
 8001eee:	4b69      	ldr	r3, [pc, #420]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef8:	f7ff fdb8 	bl	8001a6c <velPID>
			MotorCtrl((int16_t)(order_velR + order_posR), (int16_t)(order_velL + order_posL), 0);
 8001efc:	4b66      	ldr	r3, [pc, #408]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x454>)
 8001efe:	ed93 7a00 	vldr	s14, [r3]
 8001f02:	4b66      	ldr	r3, [pc, #408]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x458>)
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f10:	ee17 3a90 	vmov	r3, s15
 8001f14:	b218      	sxth	r0, r3
 8001f16:	4b62      	ldr	r3, [pc, #392]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001f18:	ed93 7a00 	vldr	s14, [r3]
 8001f1c:	4b61      	ldr	r3, [pc, #388]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f2a:	ee17 3a90 	vmov	r3, s15
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	2200      	movs	r2, #0
 8001f32:	4619      	mov	r1, r3
 8001f34:	f002 fe2e 	bl	8004b94 <MotorCtrl>

		}
	}

	if((htim->Instance == htim7.Instance) && (flash_flag == 1)){	//10ms
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b5a      	ldr	r3, [pc, #360]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	f040 809e 	bne.w	8002082 <HAL_TIM_PeriodElapsedCallback+0x43e>
 8001f46:	4b59      	ldr	r3, [pc, #356]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x468>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	f040 8099 	bne.w	8002082 <HAL_TIM_PeriodElapsedCallback+0x43e>

		enc_cnt_10ms = (enc_tim1_cnt_10ms + enc_tim8_cnt_10ms) / 2;
 8001f50:	4b57      	ldr	r3, [pc, #348]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b57      	ldr	r3, [pc, #348]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	0fda      	lsrs	r2, r3, #31
 8001f5c:	4413      	add	r3, r2
 8001f5e:	105b      	asrs	r3, r3, #1
 8001f60:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001f64:	e9c7 3402 	strd	r3, r4, [r7, #8]
		log_mm = mileage((float)enc_cnt_10ms);
 8001f68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f6c:	f7fe ff54 	bl	8000e18 <__aeabi_ul2f>
 8001f70:	4603      	mov	r3, r0
 8001f72:	ee00 3a10 	vmov	s0, r3
 8001f76:	f7ff fc73 	bl	8001860 <mileage>
 8001f7a:	eef0 7a40 	vmov.f32	s15, s0
 8001f7e:	4b4e      	ldr	r3, [pc, #312]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8001f80:	edc3 7a00 	vstr	s15, [r3]

		read_zg_data();
 8001f84:	f7ff fb88 	bl	8001698 <read_zg_data>
		log_zg = ((float)(zg - offset_zg) / 16.4f) * 0.01f;	//θ算出
 8001f88:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b4b      	ldr	r3, [pc, #300]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8001f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa0:	eddf 6a48 	vldr	s13, [pc, #288]	; 80020c4 <HAL_TIM_PeriodElapsedCallback+0x480>
 8001fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80020c8 <HAL_TIM_PeriodElapsedCallback+0x484>
 8001fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb0:	4b46      	ldr	r3, [pc, #280]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001fb2:	edc3 7a00 	vstr	s15, [r3]
		log_zg = fabsf(log_zg);// 絶対値
 8001fb6:	4b45      	ldr	r3, [pc, #276]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	eef0 7ae7 	vabs.f32	s15, s15
 8001fc0:	4b42      	ldr	r3, [pc, #264]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001fc2:	edc3 7a00 	vstr	s15, [r3]
		if( crossline_flag == 1 ) log_zg = 0;
 8001fc6:	4b42      	ldr	r3, [pc, #264]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d103      	bne.n	8001fd6 <HAL_TIM_PeriodElapsedCallback+0x392>
 8001fce:	4b3f      	ldr	r3, [pc, #252]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]

		if( log_zg == 0 ) PlanVelo[log_array] = 10000;	// θが0の場合は曲率半径は10000とする
 8001fd6:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe4:	d108      	bne.n	8001ff8 <HAL_TIM_PeriodElapsedCallback+0x3b4>
 8001fe6:	4b3b      	ldr	r3, [pc, #236]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8001fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fec:	4a3a      	ldr	r2, [pc, #232]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x494>)
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a3a      	ldr	r2, [pc, #232]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x498>)
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e017      	b.n	8002028 <HAL_TIM_PeriodElapsedCallback+0x3e4>
		else PlanVelo[log_array] = log_mm / ( 2.0f * PI * ( log_zg / 360) );
 8001ff8:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8001ffa:	edd3 6a00 	vldr	s13, [r3]
 8001ffe:	4b33      	ldr	r3, [pc, #204]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x488>)
 8002000:	ed93 7a00 	vldr	s14, [r3]
 8002004:	ed9f 6a36 	vldr	s12, [pc, #216]	; 80020e0 <HAL_TIM_PeriodElapsedCallback+0x49c>
 8002008:	eec7 7a06 	vdiv.f32	s15, s14, s12
 800200c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80020e4 <HAL_TIM_PeriodElapsedCallback+0x4a0>
 8002010:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002014:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8002016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800201e:	4a2e      	ldr	r2, [pc, #184]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x494>)
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	edc3 7a00 	vstr	s15, [r3]
		log_array++;
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x490>)
 800202a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202e:	b29b      	uxth	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	b21a      	sxth	r2, r3
 8002036:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8002038:	801a      	strh	r2, [r3, #0]
		//log_zg = (float)zg / 16.4f;
		FLASH_Write_Word_F(log_adress,log_zg); // 曲率半径
 800203a:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b23      	ldr	r3, [pc, #140]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x488>)
 8002040:	edd3 7a00 	vldr	s15, [r3]
 8002044:	eeb0 0a67 	vmov.f32	s0, s15
 8002048:	4610      	mov	r0, r2
 800204a:	f7ff fa75 	bl	8001538 <FLASH_Write_Word_F>
		log_adress += 0x04;
 800204e:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	3304      	adds	r3, #4
 8002054:	4a24      	ldr	r2, [pc, #144]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002056:	6013      	str	r3, [r2, #0]

		FLASH_Write_Word_F(log_adress,log_mm); // 距離
 8002058:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x474>)
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	eeb0 0a67 	vmov.f32	s0, s15
 8002066:	4610      	mov	r0, r2
 8002068:	f7ff fa66 	bl	8001538 <FLASH_Write_Word_F>
		log_adress += 0x04;
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3304      	adds	r3, #4
 8002072:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8002074:	6013      	str	r3, [r2, #0]

		enc_tim1_cnt_10ms = 0;
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
		enc_tim8_cnt_10ms = 0;
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
	}
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800208c:	20000264 	.word	0x20000264
 8002090:	200006b8 	.word	0x200006b8
 8002094:	200006b4 	.word	0x200006b4
 8002098:	20000204 	.word	0x20000204
 800209c:	200001fc 	.word	0x200001fc
 80020a0:	20000208 	.word	0x20000208
 80020a4:	20000200 	.word	0x20000200
 80020a8:	20000604 	.word	0x20000604
 80020ac:	2000026b 	.word	0x2000026b
 80020b0:	2000c258 	.word	0x2000c258
 80020b4:	20000684 	.word	0x20000684
 80020b8:	2000c254 	.word	0x2000c254
 80020bc:	20000288 	.word	0x20000288
 80020c0:	20000230 	.word	0x20000230
 80020c4:	41833333 	.word	0x41833333
 80020c8:	3c23d70a 	.word	0x3c23d70a
 80020cc:	20000670 	.word	0x20000670
 80020d0:	20000269 	.word	0x20000269
 80020d4:	2000026c 	.word	0x2000026c
 80020d8:	200006bc 	.word	0x200006bc
 80020dc:	461c4000 	.word	0x461c4000
 80020e0:	43b40000 	.word	0x43b40000
 80020e4:	40c90fdb 	.word	0x40c90fdb
 80020e8:	20000678 	.word	0x20000678

080020ec <setup>:

void setup(void){
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
	unsigned short volt_reg;

	led_pattern(setup_mode);
 80020f2:	4bb8      	ldr	r3, [pc, #736]	; (80023d4 <setup+0x2e8>)
 80020f4:	f993 3000 	ldrsb.w	r3, [r3]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f002 fb4e 	bl	800479c <led_pattern>

	switch(setup_mode) {
 8002100:	4bb4      	ldr	r3, [pc, #720]	; (80023d4 <setup+0x2e8>)
 8002102:	f993 3000 	ldrsb.w	r3, [r3]
 8002106:	2b07      	cmp	r3, #7
 8002108:	f200 83f9 	bhi.w	80028fe <setup+0x812>
 800210c:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <setup+0x28>)
 800210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002112:	bf00      	nop
 8002114:	08002135 	.word	0x08002135
 8002118:	0800255b 	.word	0x0800255b
 800211c:	080025db 	.word	0x080025db
 8002120:	0800267f 	.word	0x0800267f
 8002124:	08002719 	.word	0x08002719
 8002128:	080027a5 	.word	0x080027a5
 800212c:	080027ff 	.word	0x080027ff
 8002130:	0800287f 	.word	0x0800287f
		case 0:	//sensor check

		if( sw_center_state == 1 ) {	//buzzer
 8002134:	4ba8      	ldr	r3, [pc, #672]	; (80023d8 <setup+0x2ec>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d105      	bne.n	8002148 <setup+0x5c>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1049); //MAX4199
 800213c:	4ba7      	ldr	r3, [pc, #668]	; (80023dc <setup+0x2f0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f240 4219 	movw	r2, #1049	; 0x419
 8002144:	635a      	str	r2, [r3, #52]	; 0x34
 8002146:	e003      	b.n	8002150 <setup+0x64>
		}
		else __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8002148:	4ba4      	ldr	r3, [pc, #656]	; (80023dc <setup+0x2f0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2200      	movs	r2, #0
 800214e:	635a      	str	r2, [r3, #52]	; 0x34

		switch(check_sens_val) {
 8002150:	4ba3      	ldr	r3, [pc, #652]	; (80023e0 <setup+0x2f4>)
 8002152:	f993 3000 	ldrsb.w	r3, [r3]
 8002156:	2b0e      	cmp	r3, #14
 8002158:	f200 81fd 	bhi.w	8002556 <setup+0x46a>
 800215c:	a201      	add	r2, pc, #4	; (adr r2, 8002164 <setup+0x78>)
 800215e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002162:	bf00      	nop
 8002164:	080021a1 	.word	0x080021a1
 8002168:	080021cb 	.word	0x080021cb
 800216c:	080021f5 	.word	0x080021f5
 8002170:	0800221f 	.word	0x0800221f
 8002174:	08002249 	.word	0x08002249
 8002178:	08002273 	.word	0x08002273
 800217c:	0800229d 	.word	0x0800229d
 8002180:	080022c7 	.word	0x080022c7
 8002184:	080022f5 	.word	0x080022f5
 8002188:	08002323 	.word	0x08002323
 800218c:	08002351 	.word	0x08002351
 8002190:	08002393 	.word	0x08002393
 8002194:	08002491 	.word	0x08002491
 8002198:	080024db 	.word	0x080024db
 800219c:	0800251f 	.word	0x0800251f
			case 0:
				lcd_locate(0,0);
 80021a0:	2100      	movs	r1, #0
 80021a2:	2000      	movs	r0, #0
 80021a4:	f7ff f901 	bl	80013aa <lcd_locate>
				lcd_printf("%4d AD0",line_sen0);
 80021a8:	4b8e      	ldr	r3, [pc, #568]	; (80023e4 <setup+0x2f8>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	488e      	ldr	r0, [pc, #568]	; (80023e8 <setup+0x2fc>)
 80021b0:	f7ff f925 	bl	80013fe <lcd_printf>
				lcd_locate(0,1);
 80021b4:	2101      	movs	r1, #1
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7ff f8f7 	bl	80013aa <lcd_locate>
				lcd_printf("%4d AD1",line_sen1);
 80021bc:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <setup+0x300>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	488b      	ldr	r0, [pc, #556]	; (80023f0 <setup+0x304>)
 80021c4:	f7ff f91b 	bl	80013fe <lcd_printf>
				break;
 80021c8:	e1c6      	b.n	8002558 <setup+0x46c>
			case 1:
				lcd_locate(0,0);
 80021ca:	2100      	movs	r1, #0
 80021cc:	2000      	movs	r0, #0
 80021ce:	f7ff f8ec 	bl	80013aa <lcd_locate>
				lcd_printf("%4d AD2",line_sen2);
 80021d2:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <setup+0x308>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	4619      	mov	r1, r3
 80021d8:	4887      	ldr	r0, [pc, #540]	; (80023f8 <setup+0x30c>)
 80021da:	f7ff f910 	bl	80013fe <lcd_printf>
				lcd_locate(0,1);
 80021de:	2101      	movs	r1, #1
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7ff f8e2 	bl	80013aa <lcd_locate>
				lcd_printf("%4d AD3",line_sen3);
 80021e6:	4b85      	ldr	r3, [pc, #532]	; (80023fc <setup+0x310>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	4884      	ldr	r0, [pc, #528]	; (8002400 <setup+0x314>)
 80021ee:	f7ff f906 	bl	80013fe <lcd_printf>
				break;
 80021f2:	e1b1      	b.n	8002558 <setup+0x46c>
			case 2:
				lcd_locate(0,0);
 80021f4:	2100      	movs	r1, #0
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7ff f8d7 	bl	80013aa <lcd_locate>
				lcd_printf("%4d AD4",line_sen4);
 80021fc:	4b81      	ldr	r3, [pc, #516]	; (8002404 <setup+0x318>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	4881      	ldr	r0, [pc, #516]	; (8002408 <setup+0x31c>)
 8002204:	f7ff f8fb 	bl	80013fe <lcd_printf>
				lcd_locate(0,1);
 8002208:	2101      	movs	r1, #1
 800220a:	2000      	movs	r0, #0
 800220c:	f7ff f8cd 	bl	80013aa <lcd_locate>
				lcd_printf("%4d AD5",line_sen5);
 8002210:	4b7e      	ldr	r3, [pc, #504]	; (800240c <setup+0x320>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	4619      	mov	r1, r3
 8002216:	487e      	ldr	r0, [pc, #504]	; (8002410 <setup+0x324>)
 8002218:	f7ff f8f1 	bl	80013fe <lcd_printf>
				break;
 800221c:	e19c      	b.n	8002558 <setup+0x46c>
			case 3:
				lcd_locate(0,0);
 800221e:	2100      	movs	r1, #0
 8002220:	2000      	movs	r0, #0
 8002222:	f7ff f8c2 	bl	80013aa <lcd_locate>
				lcd_printf("%4d AD6",line_sen6);
 8002226:	4b7b      	ldr	r3, [pc, #492]	; (8002414 <setup+0x328>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	4619      	mov	r1, r3
 800222c:	487a      	ldr	r0, [pc, #488]	; (8002418 <setup+0x32c>)
 800222e:	f7ff f8e6 	bl	80013fe <lcd_printf>
				lcd_locate(0,1);
 8002232:	2101      	movs	r1, #1
 8002234:	2000      	movs	r0, #0
 8002236:	f7ff f8b8 	bl	80013aa <lcd_locate>
				lcd_printf("%4d AD7",line_sen7);
 800223a:	4b78      	ldr	r3, [pc, #480]	; (800241c <setup+0x330>)
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	4619      	mov	r1, r3
 8002240:	4877      	ldr	r0, [pc, #476]	; (8002420 <setup+0x334>)
 8002242:	f7ff f8dc 	bl	80013fe <lcd_printf>
				break;
 8002246:	e187      	b.n	8002558 <setup+0x46c>
			case 4:
				lcd_locate(0,0);
 8002248:	2100      	movs	r1, #0
 800224a:	2000      	movs	r0, #0
 800224c:	f7ff f8ad 	bl	80013aa <lcd_locate>
				lcd_printf("%4d AD8",line_sen8);
 8002250:	4b74      	ldr	r3, [pc, #464]	; (8002424 <setup+0x338>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	4874      	ldr	r0, [pc, #464]	; (8002428 <setup+0x33c>)
 8002258:	f7ff f8d1 	bl	80013fe <lcd_printf>
				lcd_locate(0,1);
 800225c:	2101      	movs	r1, #1
 800225e:	2000      	movs	r0, #0
 8002260:	f7ff f8a3 	bl	80013aa <lcd_locate>
				lcd_printf("%4d AD9",line_sen9);
 8002264:	4b71      	ldr	r3, [pc, #452]	; (800242c <setup+0x340>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	4871      	ldr	r0, [pc, #452]	; (8002430 <setup+0x344>)
 800226c:	f7ff f8c7 	bl	80013fe <lcd_printf>
				break;
 8002270:	e172      	b.n	8002558 <setup+0x46c>
			case 5:
				lcd_locate(0,0);
 8002272:	2100      	movs	r1, #0
 8002274:	2000      	movs	r0, #0
 8002276:	f7ff f898 	bl	80013aa <lcd_locate>
				lcd_printf("%4dAD10",line_sen10);
 800227a:	4b6e      	ldr	r3, [pc, #440]	; (8002434 <setup+0x348>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	4619      	mov	r1, r3
 8002280:	486d      	ldr	r0, [pc, #436]	; (8002438 <setup+0x34c>)
 8002282:	f7ff f8bc 	bl	80013fe <lcd_printf>
				lcd_locate(0,1);
 8002286:	2101      	movs	r1, #1
 8002288:	2000      	movs	r0, #0
 800228a:	f7ff f88e 	bl	80013aa <lcd_locate>
				lcd_printf("%4dAD11",line_sen11);
 800228e:	4b6b      	ldr	r3, [pc, #428]	; (800243c <setup+0x350>)
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	4619      	mov	r1, r3
 8002294:	486a      	ldr	r0, [pc, #424]	; (8002440 <setup+0x354>)
 8002296:	f7ff f8b2 	bl	80013fe <lcd_printf>
				break;
 800229a:	e15d      	b.n	8002558 <setup+0x46c>
			case 6:
				lcd_locate(0,0);
 800229c:	2100      	movs	r1, #0
 800229e:	2000      	movs	r0, #0
 80022a0:	f7ff f883 	bl	80013aa <lcd_locate>
				lcd_printf("%4dAD10",line_sen12);
 80022a4:	4b67      	ldr	r3, [pc, #412]	; (8002444 <setup+0x358>)
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	4863      	ldr	r0, [pc, #396]	; (8002438 <setup+0x34c>)
 80022ac:	f7ff f8a7 	bl	80013fe <lcd_printf>
				lcd_locate(0,1);
 80022b0:	2101      	movs	r1, #1
 80022b2:	2000      	movs	r0, #0
 80022b4:	f7ff f879 	bl	80013aa <lcd_locate>
				lcd_printf("%4dAD11",line_sen13);
 80022b8:	4b63      	ldr	r3, [pc, #396]	; (8002448 <setup+0x35c>)
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	4860      	ldr	r0, [pc, #384]	; (8002440 <setup+0x354>)
 80022c0:	f7ff f89d 	bl	80013fe <lcd_printf>
				break;
 80022c4:	e148      	b.n	8002558 <setup+0x46c>
			case 7:
				lcd_locate(0,0);
 80022c6:	2100      	movs	r1, #0
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7ff f86e 	bl	80013aa <lcd_locate>
				lcd_printf("XG%6x",xg);
 80022ce:	4b5f      	ldr	r3, [pc, #380]	; (800244c <setup+0x360>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b21b      	sxth	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	485e      	ldr	r0, [pc, #376]	; (8002450 <setup+0x364>)
 80022d8:	f7ff f891 	bl	80013fe <lcd_printf>
				lcd_locate(0,1);
 80022dc:	2101      	movs	r1, #1
 80022de:	2000      	movs	r0, #0
 80022e0:	f7ff f863 	bl	80013aa <lcd_locate>
				lcd_printf("YG%6x",yg);
 80022e4:	4b5b      	ldr	r3, [pc, #364]	; (8002454 <setup+0x368>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	4619      	mov	r1, r3
 80022ec:	485a      	ldr	r0, [pc, #360]	; (8002458 <setup+0x36c>)
 80022ee:	f7ff f886 	bl	80013fe <lcd_printf>
				break;
 80022f2:	e131      	b.n	8002558 <setup+0x46c>
			case 8:
				lcd_locate(0,0);
 80022f4:	2100      	movs	r1, #0
 80022f6:	2000      	movs	r0, #0
 80022f8:	f7ff f857 	bl	80013aa <lcd_locate>
				lcd_printf("ZG%6x",zg);
 80022fc:	4b57      	ldr	r3, [pc, #348]	; (800245c <setup+0x370>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b21b      	sxth	r3, r3
 8002302:	4619      	mov	r1, r3
 8002304:	4856      	ldr	r0, [pc, #344]	; (8002460 <setup+0x374>)
 8002306:	f7ff f87a 	bl	80013fe <lcd_printf>
				lcd_locate(0,1);
 800230a:	2101      	movs	r1, #1
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff f84c 	bl	80013aa <lcd_locate>
				lcd_printf("XA%6x",xa);
 8002312:	4b54      	ldr	r3, [pc, #336]	; (8002464 <setup+0x378>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	b21b      	sxth	r3, r3
 8002318:	4619      	mov	r1, r3
 800231a:	4853      	ldr	r0, [pc, #332]	; (8002468 <setup+0x37c>)
 800231c:	f7ff f86f 	bl	80013fe <lcd_printf>
				break;
 8002320:	e11a      	b.n	8002558 <setup+0x46c>
			case 9:
				lcd_locate(0,0);
 8002322:	2100      	movs	r1, #0
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff f840 	bl	80013aa <lcd_locate>
				lcd_printf("YA%6x",ya);
 800232a:	4b50      	ldr	r3, [pc, #320]	; (800246c <setup+0x380>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b21b      	sxth	r3, r3
 8002330:	4619      	mov	r1, r3
 8002332:	484f      	ldr	r0, [pc, #316]	; (8002470 <setup+0x384>)
 8002334:	f7ff f863 	bl	80013fe <lcd_printf>
				lcd_locate(0,1);
 8002338:	2101      	movs	r1, #1
 800233a:	2000      	movs	r0, #0
 800233c:	f7ff f835 	bl	80013aa <lcd_locate>
				lcd_printf("ZA%6x",za);
 8002340:	4b4c      	ldr	r3, [pc, #304]	; (8002474 <setup+0x388>)
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	b21b      	sxth	r3, r3
 8002346:	4619      	mov	r1, r3
 8002348:	484b      	ldr	r0, [pc, #300]	; (8002478 <setup+0x38c>)
 800234a:	f7ff f858 	bl	80013fe <lcd_printf>
				break;
 800234e:	e103      	b.n	8002558 <setup+0x46c>
			case 10:
				lcd_locate(0,0);
 8002350:	2100      	movs	r1, #0
 8002352:	2000      	movs	r0, #0
 8002354:	f7ff f829 	bl	80013aa <lcd_locate>
				lcd_print("Encoder1");
 8002358:	4848      	ldr	r0, [pc, #288]	; (800247c <setup+0x390>)
 800235a:	f7ff f83b 	bl	80013d4 <lcd_print>
				lcd_locate(0,1);
 800235e:	2101      	movs	r1, #1
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff f822 	bl	80013aa <lcd_locate>
				lcd_printf("%8d", (int)mileage((float)enc_tim1_total));
 8002366:	4b46      	ldr	r3, [pc, #280]	; (8002480 <setup+0x394>)
 8002368:	e9d3 3400 	ldrd	r3, r4, [r3]
 800236c:	4618      	mov	r0, r3
 800236e:	4621      	mov	r1, r4
 8002370:	f7fe fd5a 	bl	8000e28 <__aeabi_l2f>
 8002374:	4603      	mov	r3, r0
 8002376:	ee00 3a10 	vmov	s0, r3
 800237a:	f7ff fa71 	bl	8001860 <mileage>
 800237e:	eef0 7a40 	vmov.f32	s15, s0
 8002382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002386:	ee17 1a90 	vmov	r1, s15
 800238a:	483e      	ldr	r0, [pc, #248]	; (8002484 <setup+0x398>)
 800238c:	f7ff f837 	bl	80013fe <lcd_printf>
				break;
 8002390:	e0e2      	b.n	8002558 <setup+0x46c>
			case 11:
				lcd_locate(0,0);
 8002392:	2100      	movs	r1, #0
 8002394:	2000      	movs	r0, #0
 8002396:	f7ff f808 	bl	80013aa <lcd_locate>
				lcd_print("Encoder2");
 800239a:	483b      	ldr	r0, [pc, #236]	; (8002488 <setup+0x39c>)
 800239c:	f7ff f81a 	bl	80013d4 <lcd_print>
				lcd_locate(0,1);
 80023a0:	2101      	movs	r1, #1
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7ff f801 	bl	80013aa <lcd_locate>
				lcd_printf("%8d", (int)mileage((float)enc_tim8_total));
 80023a8:	4b38      	ldr	r3, [pc, #224]	; (800248c <setup+0x3a0>)
 80023aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80023ae:	4618      	mov	r0, r3
 80023b0:	4621      	mov	r1, r4
 80023b2:	f7fe fd39 	bl	8000e28 <__aeabi_l2f>
 80023b6:	4603      	mov	r3, r0
 80023b8:	ee00 3a10 	vmov	s0, r3
 80023bc:	f7ff fa50 	bl	8001860 <mileage>
 80023c0:	eef0 7a40 	vmov.f32	s15, s0
 80023c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c8:	ee17 1a90 	vmov	r1, s15
 80023cc:	482d      	ldr	r0, [pc, #180]	; (8002484 <setup+0x398>)
 80023ce:	f7ff f816 	bl	80013fe <lcd_printf>
				break;
 80023d2:	e0c1      	b.n	8002558 <setup+0x46c>
 80023d4:	20000274 	.word	0x20000274
 80023d8:	20000277 	.word	0x20000277
 80023dc:	20000584 	.word	0x20000584
 80023e0:	20000275 	.word	0x20000275
 80023e4:	2000c24c 	.word	0x2000c24c
 80023e8:	0800ec78 	.word	0x0800ec78
 80023ec:	200006ae 	.word	0x200006ae
 80023f0:	0800ec80 	.word	0x0800ec80
 80023f4:	20000680 	.word	0x20000680
 80023f8:	0800ec88 	.word	0x0800ec88
 80023fc:	2000066e 	.word	0x2000066e
 8002400:	0800ec90 	.word	0x0800ec90
 8002404:	2000064a 	.word	0x2000064a
 8002408:	0800ec98 	.word	0x0800ec98
 800240c:	2000c248 	.word	0x2000c248
 8002410:	0800eca0 	.word	0x0800eca0
 8002414:	20000682 	.word	0x20000682
 8002418:	0800eca8 	.word	0x0800eca8
 800241c:	20000674 	.word	0x20000674
 8002420:	0800ecb0 	.word	0x0800ecb0
 8002424:	200006ac 	.word	0x200006ac
 8002428:	0800ecb8 	.word	0x0800ecb8
 800242c:	20000648 	.word	0x20000648
 8002430:	0800ecc0 	.word	0x0800ecc0
 8002434:	200006b0 	.word	0x200006b0
 8002438:	0800ecc8 	.word	0x0800ecc8
 800243c:	2000c24e 	.word	0x2000c24e
 8002440:	0800ecd0 	.word	0x0800ecd0
 8002444:	2000c250 	.word	0x2000c250
 8002448:	200006b2 	.word	0x200006b2
 800244c:	20000290 	.word	0x20000290
 8002450:	0800ecd8 	.word	0x0800ecd8
 8002454:	2000028e 	.word	0x2000028e
 8002458:	0800ece0 	.word	0x0800ece0
 800245c:	20000288 	.word	0x20000288
 8002460:	0800ece8 	.word	0x0800ece8
 8002464:	2000028c 	.word	0x2000028c
 8002468:	0800ecf0 	.word	0x0800ecf0
 800246c:	20000292 	.word	0x20000292
 8002470:	0800ecf8 	.word	0x0800ecf8
 8002474:	2000028a 	.word	0x2000028a
 8002478:	0800ed00 	.word	0x0800ed00
 800247c:	0800ed08 	.word	0x0800ed08
 8002480:	20000248 	.word	0x20000248
 8002484:	0800ed14 	.word	0x0800ed14
 8002488:	0800ed18 	.word	0x0800ed18
 800248c:	20000250 	.word	0x20000250
			case 12:
				lcd_locate(0,0);
 8002490:	2100      	movs	r1, #0
 8002492:	2000      	movs	r0, #0
 8002494:	f7fe ff89 	bl	80013aa <lcd_locate>
				lcd_print("Voltage_");
 8002498:	48a7      	ldr	r0, [pc, #668]	; (8002738 <setup+0x64c>)
 800249a:	f7fe ff9b 	bl	80013d4 <lcd_print>
				lcd_locate(0,1);
 800249e:	2101      	movs	r1, #1
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7fe ff82 	bl	80013aa <lcd_locate>
				volt_reg = INA260_read(0x02);
 80024a6:	2002      	movs	r0, #2
 80024a8:	f7ff f97c 	bl	80017a4 <INA260_read>
 80024ac:	4603      	mov	r3, r0
 80024ae:	80fb      	strh	r3, [r7, #6]
				lcd_printf("   %1.2fV",(float)volt_reg*0.00125f);
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ba:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800273c <setup+0x650>
 80024be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c2:	ee17 0a90 	vmov	r0, s15
 80024c6:	f7fe f83f 	bl	8000548 <__aeabi_f2d>
 80024ca:	4603      	mov	r3, r0
 80024cc:	460c      	mov	r4, r1
 80024ce:	461a      	mov	r2, r3
 80024d0:	4623      	mov	r3, r4
 80024d2:	489b      	ldr	r0, [pc, #620]	; (8002740 <setup+0x654>)
 80024d4:	f7fe ff93 	bl	80013fe <lcd_printf>
				break;
 80024d8:	e03e      	b.n	8002558 <setup+0x46c>
			case 13:
				lcd_locate(0,0);
 80024da:	2100      	movs	r1, #0
 80024dc:	2000      	movs	r0, #0
 80024de:	f7fe ff64 	bl	80013aa <lcd_locate>
				lcd_print("error_th");
 80024e2:	4898      	ldr	r0, [pc, #608]	; (8002744 <setup+0x658>)
 80024e4:	f7fe ff76 	bl	80013d4 <lcd_print>
				lcd_locate(0,1);
 80024e8:	2101      	movs	r1, #1
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7fe ff5d 	bl	80013aa <lcd_locate>
				lcd_printf("%8d",line_senLLL + line_senLL + line_senL + line_senR + line_senRR + line_senRRR);
 80024f0:	4b95      	ldr	r3, [pc, #596]	; (8002748 <setup+0x65c>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b95      	ldr	r3, [pc, #596]	; (800274c <setup+0x660>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4a94      	ldr	r2, [pc, #592]	; (8002750 <setup+0x664>)
 80024fe:	8812      	ldrh	r2, [r2, #0]
 8002500:	4413      	add	r3, r2
 8002502:	4a94      	ldr	r2, [pc, #592]	; (8002754 <setup+0x668>)
 8002504:	8812      	ldrh	r2, [r2, #0]
 8002506:	4413      	add	r3, r2
 8002508:	4a93      	ldr	r2, [pc, #588]	; (8002758 <setup+0x66c>)
 800250a:	8812      	ldrh	r2, [r2, #0]
 800250c:	4413      	add	r3, r2
 800250e:	4a93      	ldr	r2, [pc, #588]	; (800275c <setup+0x670>)
 8002510:	8812      	ldrh	r2, [r2, #0]
 8002512:	4413      	add	r3, r2
 8002514:	4619      	mov	r1, r3
 8002516:	4892      	ldr	r0, [pc, #584]	; (8002760 <setup+0x674>)
 8002518:	f7fe ff71 	bl	80013fe <lcd_printf>
				break;
 800251c:	e01c      	b.n	8002558 <setup+0x46c>
			case 14:
				lcd_locate(0,0);
 800251e:	2100      	movs	r1, #0
 8002520:	2000      	movs	r0, #0
 8002522:	f7fe ff42 	bl	80013aa <lcd_locate>
				lcd_print("cross_th");
 8002526:	488f      	ldr	r0, [pc, #572]	; (8002764 <setup+0x678>)
 8002528:	f7fe ff54 	bl	80013d4 <lcd_print>
				lcd_locate(0,1);
 800252c:	2101      	movs	r1, #1
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe ff3b 	bl	80013aa <lcd_locate>
				lcd_printf("%8d", line_senLL + line_senL + line_senR + line_senRR);
 8002534:	4b85      	ldr	r3, [pc, #532]	; (800274c <setup+0x660>)
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	4b85      	ldr	r3, [pc, #532]	; (8002750 <setup+0x664>)
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	4413      	add	r3, r2
 8002540:	4a84      	ldr	r2, [pc, #528]	; (8002754 <setup+0x668>)
 8002542:	8812      	ldrh	r2, [r2, #0]
 8002544:	4413      	add	r3, r2
 8002546:	4a84      	ldr	r2, [pc, #528]	; (8002758 <setup+0x66c>)
 8002548:	8812      	ldrh	r2, [r2, #0]
 800254a:	4413      	add	r3, r2
 800254c:	4619      	mov	r1, r3
 800254e:	4884      	ldr	r0, [pc, #528]	; (8002760 <setup+0x674>)
 8002550:	f7fe ff55 	bl	80013fe <lcd_printf>
				break;
 8002554:	e000      	b.n	8002558 <setup+0x46c>
			default:
				break;
 8002556:	bf00      	nop
			}

			break;
 8002558:	e1da      	b.n	8002910 <setup+0x824>
		case 1:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800255a:	4b83      	ldr	r3, [pc, #524]	; (8002768 <setup+0x67c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2200      	movs	r2, #0
 8002560:	635a      	str	r2, [r3, #52]	; 0x34

			lcd_locate(0,0);
 8002562:	2100      	movs	r1, #0
 8002564:	2000      	movs	r0, #0
 8002566:	f7fe ff20 	bl	80013aa <lcd_locate>
			lcd_print("test_ESC");
 800256a:	4880      	ldr	r0, [pc, #512]	; (800276c <setup+0x680>)
 800256c:	f7fe ff32 	bl	80013d4 <lcd_print>
			lcd_locate(0,1);
 8002570:	2101      	movs	r1, #1
 8002572:	2000      	movs	r0, #0
 8002574:	f7fe ff19 	bl	80013aa <lcd_locate>
			lcd_print("SW_PUSH_");
 8002578:	487d      	ldr	r0, [pc, #500]	; (8002770 <setup+0x684>)
 800257a:	f7fe ff2b 	bl	80013d4 <lcd_print>

			if( sw_center_state == 1 ) {
 800257e:	4b7d      	ldr	r3, [pc, #500]	; (8002774 <setup+0x688>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d114      	bne.n	80025b0 <setup+0x4c4>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2116);	//	1763(ESC_MIN) + 17.64 * 20
 8002586:	4b7c      	ldr	r3, [pc, #496]	; (8002778 <setup+0x68c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f640 0244 	movw	r2, #2116	; 0x844
 800258e:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2116);
 8002590:	4b79      	ldr	r3, [pc, #484]	; (8002778 <setup+0x68c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f640 0244 	movw	r2, #2116	; 0x844
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 2116);
 800259a:	4b77      	ldr	r3, [pc, #476]	; (8002778 <setup+0x68c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f640 0244 	movw	r2, #2116	; 0x844
 80025a2:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 2116);
 80025a4:	4b74      	ldr	r3, [pc, #464]	; (8002778 <setup+0x68c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f640 0244 	movw	r2, #2116	; 0x844
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
			}
			break;
 80025ae:	e1af      	b.n	8002910 <setup+0x824>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 80025b0:	4b71      	ldr	r3, [pc, #452]	; (8002778 <setup+0x68c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80025b8:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 80025ba:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <setup+0x68c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80025c2:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 80025c4:	4b6c      	ldr	r3, [pc, #432]	; (8002778 <setup+0x68c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80025cc:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 80025ce:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <setup+0x68c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80025d8:	e19a      	b.n	8002910 <setup+0x824>
		case 2:
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 80025da:	4b67      	ldr	r3, [pc, #412]	; (8002778 <setup+0x68c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80025e2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 80025e4:	4b64      	ldr	r3, [pc, #400]	; (8002778 <setup+0x68c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 80025ee:	4b62      	ldr	r3, [pc, #392]	; (8002778 <setup+0x68c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80025f6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 80025f8:	4b5f      	ldr	r3, [pc, #380]	; (8002778 <setup+0x68c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002600:	641a      	str	r2, [r3, #64]	; 0x40

			lcd_locate(0,0);
 8002602:	2100      	movs	r1, #0
 8002604:	2000      	movs	r0, #0
 8002606:	f7fe fed0 	bl	80013aa <lcd_locate>
			lcd_print("test_MD_");
 800260a:	485c      	ldr	r0, [pc, #368]	; (800277c <setup+0x690>)
 800260c:	f7fe fee2 	bl	80013d4 <lcd_print>
			lcd_locate(0,1);
 8002610:	2101      	movs	r1, #1
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe fec9 	bl	80013aa <lcd_locate>
			lcd_print("SW_PUSH_");
 8002618:	4855      	ldr	r0, [pc, #340]	; (8002770 <setup+0x684>)
 800261a:	f7fe fedb 	bl	80013d4 <lcd_print>

			if( sw_center_state == 1 ) {
 800261e:	4b55      	ldr	r3, [pc, #340]	; (8002774 <setup+0x688>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d116      	bne.n	8002654 <setup+0x568>
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 400);
 8002626:	4b56      	ldr	r3, [pc, #344]	; (8002780 <setup+0x694>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800262e:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 400);
 8002630:	4b53      	ldr	r3, [pc, #332]	; (8002780 <setup+0x694>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002638:	639a      	str	r2, [r3, #56]	; 0x38
				MR_SET;
 800263a:	2201      	movs	r2, #1
 800263c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002640:	4850      	ldr	r0, [pc, #320]	; (8002784 <setup+0x698>)
 8002642:	f004 fca1 	bl	8006f88 <HAL_GPIO_WritePin>
				ML_SET;
 8002646:	2201      	movs	r2, #1
 8002648:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800264c:	484d      	ldr	r0, [pc, #308]	; (8002784 <setup+0x698>)
 800264e:	f004 fc9b 	bl	8006f88 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
				MR_SET;
				ML_SET;
			}
			break;
 8002652:	e15d      	b.n	8002910 <setup+0x824>
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8002654:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <setup+0x694>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 800265c:	4b48      	ldr	r3, [pc, #288]	; (8002780 <setup+0x694>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2200      	movs	r2, #0
 8002662:	639a      	str	r2, [r3, #56]	; 0x38
				MR_SET;
 8002664:	2201      	movs	r2, #1
 8002666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800266a:	4846      	ldr	r0, [pc, #280]	; (8002784 <setup+0x698>)
 800266c:	f004 fc8c 	bl	8006f88 <HAL_GPIO_WritePin>
				ML_SET;
 8002670:	2201      	movs	r2, #1
 8002672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002676:	4843      	ldr	r0, [pc, #268]	; (8002784 <setup+0x698>)
 8002678:	f004 fc86 	bl	8006f88 <HAL_GPIO_WritePin>
			break;
 800267c:	e148      	b.n	8002910 <setup+0x824>
		case 3:
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 800267e:	4b40      	ldr	r3, [pc, #256]	; (8002780 <setup+0x694>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2200      	movs	r2, #0
 8002684:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8002686:	4b3e      	ldr	r3, [pc, #248]	; (8002780 <setup+0x694>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2200      	movs	r2, #0
 800268c:	639a      	str	r2, [r3, #56]	; 0x38

			lcd_locate(0,0);
 800268e:	2100      	movs	r1, #0
 8002690:	2000      	movs	r0, #0
 8002692:	f7fe fe8a 	bl	80013aa <lcd_locate>
			lcd_print("_erase__");
 8002696:	483c      	ldr	r0, [pc, #240]	; (8002788 <setup+0x69c>)
 8002698:	f7fe fe9c 	bl	80013d4 <lcd_print>
			lcd_locate(0,1);
 800269c:	2101      	movs	r1, #1
 800269e:	2000      	movs	r0, #0
 80026a0:	f7fe fe83 	bl	80013aa <lcd_locate>
			lcd_print("SW_PUSH_");
 80026a4:	4832      	ldr	r0, [pc, #200]	; (8002770 <setup+0x684>)
 80026a6:	f7fe fe95 	bl	80013d4 <lcd_print>

			if( sw_center_state == 1 ) {
 80026aa:	4b32      	ldr	r3, [pc, #200]	; (8002774 <setup+0x688>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	f040 8127 	bne.w	8002902 <setup+0x816>
				if( isnan( *(float*)start_adress_sector7 ) == 0 )  FLASH_EreaseSector(FLASH_SECTOR_7);
 80026b4:	4b35      	ldr	r3, [pc, #212]	; (800278c <setup+0x6a0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	eef4 7a67 	vcmp.f32	s15, s15
 80026c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c4:	d602      	bvs.n	80026cc <setup+0x5e0>
 80026c6:	2007      	movs	r0, #7
 80026c8:	f7fe feee 	bl	80014a8 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector9 ) == 0 )  FLASH_EreaseSector(FLASH_SECTOR_9);
 80026cc:	4b30      	ldr	r3, [pc, #192]	; (8002790 <setup+0x6a4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	edd3 7a00 	vldr	s15, [r3]
 80026d4:	eef4 7a67 	vcmp.f32	s15, s15
 80026d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026dc:	d602      	bvs.n	80026e4 <setup+0x5f8>
 80026de:	2009      	movs	r0, #9
 80026e0:	f7fe fee2 	bl	80014a8 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector10 ) == 0 ) FLASH_EreaseSector(FLASH_SECTOR_10);
 80026e4:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <setup+0x6a8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	edd3 7a00 	vldr	s15, [r3]
 80026ec:	eef4 7a67 	vcmp.f32	s15, s15
 80026f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f4:	d602      	bvs.n	80026fc <setup+0x610>
 80026f6:	200a      	movs	r0, #10
 80026f8:	f7fe fed6 	bl	80014a8 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector11 ) == 0 ) FLASH_EreaseSector(FLASH_SECTOR_11);
 80026fc:	4b26      	ldr	r3, [pc, #152]	; (8002798 <setup+0x6ac>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	eef4 7a67 	vcmp.f32	s15, s15
 8002708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270c:	f180 80f9 	bvs.w	8002902 <setup+0x816>
 8002710:	200b      	movs	r0, #11
 8002712:	f7fe fec9 	bl	80014a8 <FLASH_EreaseSector>
			}

			break;
 8002716:	e0f4      	b.n	8002902 <setup+0x816>
		case 4:
			lcd_locate(0,0);
 8002718:	2100      	movs	r1, #0
 800271a:	2000      	movs	r0, #0
 800271c:	f7fe fe45 	bl	80013aa <lcd_locate>
			lcd_print("_case-4_");
 8002720:	481e      	ldr	r0, [pc, #120]	; (800279c <setup+0x6b0>)
 8002722:	f7fe fe57 	bl	80013d4 <lcd_print>
			lcd_locate(0,1);
 8002726:	2101      	movs	r1, #1
 8002728:	2000      	movs	r0, #0
 800272a:	f7fe fe3e 	bl	80013aa <lcd_locate>
			lcd_print("________");
 800272e:	481c      	ldr	r0, [pc, #112]	; (80027a0 <setup+0x6b4>)
 8002730:	f7fe fe50 	bl	80013d4 <lcd_print>
			break;
 8002734:	e0ec      	b.n	8002910 <setup+0x824>
 8002736:	bf00      	nop
 8002738:	0800ed24 	.word	0x0800ed24
 800273c:	3aa3d70a 	.word	0x3aa3d70a
 8002740:	0800ed30 	.word	0x0800ed30
 8002744:	0800ed3c 	.word	0x0800ed3c
 8002748:	20000238 	.word	0x20000238
 800274c:	2000023a 	.word	0x2000023a
 8002750:	2000023c 	.word	0x2000023c
 8002754:	2000023e 	.word	0x2000023e
 8002758:	20000240 	.word	0x20000240
 800275c:	20000242 	.word	0x20000242
 8002760:	0800ed14 	.word	0x0800ed14
 8002764:	0800ed48 	.word	0x0800ed48
 8002768:	20000584 	.word	0x20000584
 800276c:	0800ed54 	.word	0x0800ed54
 8002770:	0800ed60 	.word	0x0800ed60
 8002774:	20000277 	.word	0x20000277
 8002778:	20000384 	.word	0x20000384
 800277c:	0800ed6c 	.word	0x0800ed6c
 8002780:	200005c4 	.word	0x200005c4
 8002784:	40020000 	.word	0x40020000
 8002788:	0800ed78 	.word	0x0800ed78
 800278c:	0800edf8 	.word	0x0800edf8
 8002790:	0800edfc 	.word	0x0800edfc
 8002794:	0800ee00 	.word	0x0800ee00
 8002798:	0800ee04 	.word	0x0800ee04
 800279c:	0800ed84 	.word	0x0800ed84
 80027a0:	0800ed90 	.word	0x0800ed90
		case 5:
			lcd_locate(0,0);
 80027a4:	2100      	movs	r1, #0
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fe fdff 	bl	80013aa <lcd_locate>
			lcd_print("SW_PUSH");
 80027ac:	485a      	ldr	r0, [pc, #360]	; (8002918 <setup+0x82c>)
 80027ae:	f7fe fe11 	bl	80013d4 <lcd_print>
			lcd_locate(0,1);
 80027b2:	2101      	movs	r1, #1
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7fe fdf8 	bl	80013aa <lcd_locate>
			lcd_print("START 1 ");
 80027ba:	4858      	ldr	r0, [pc, #352]	; (800291c <setup+0x830>)
 80027bc:	f7fe fe0a 	bl	80013d4 <lcd_print>
			if(sw_center_state == 1) {
 80027c0:	4b57      	ldr	r3, [pc, #348]	; (8002920 <setup+0x834>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	f040 809e 	bne.w	8002906 <setup+0x81a>
				main_pattern = 10;
 80027ca:	4b56      	ldr	r3, [pc, #344]	; (8002924 <setup+0x838>)
 80027cc:	220a      	movs	r2, #10
 80027ce:	701a      	strb	r2, [r3, #0]
				timer = 0;
 80027d0:	4b55      	ldr	r3, [pc, #340]	; (8002928 <setup+0x83c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
				enc_cnt = 0;
 80027d6:	4a55      	ldr	r2, [pc, #340]	; (800292c <setup+0x840>)
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	f04f 0400 	mov.w	r4, #0
 80027e0:	e9c2 3400 	strd	r3, r4, [r2]
				sw_center_state = 0;
 80027e4:	4b4e      	ldr	r3, [pc, #312]	; (8002920 <setup+0x834>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
				velocity_pattern = 1;
 80027ea:	4b51      	ldr	r3, [pc, #324]	; (8002930 <setup+0x844>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 80027f0:	f7fe fdcb 	bl	800138a <lcd_clear>
				HAL_Delay(1000);
 80027f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027f8:	f002 ffac 	bl	8005754 <HAL_Delay>
			}
			break;
 80027fc:	e083      	b.n	8002906 <setup+0x81a>
		case 6:
			lcd_locate(0,0);
 80027fe:	2100      	movs	r1, #0
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe fdd2 	bl	80013aa <lcd_locate>
			lcd_print("SW_PUSH");
 8002806:	4844      	ldr	r0, [pc, #272]	; (8002918 <setup+0x82c>)
 8002808:	f7fe fde4 	bl	80013d4 <lcd_print>
			lcd_locate(0,1);
 800280c:	2101      	movs	r1, #1
 800280e:	2000      	movs	r0, #0
 8002810:	f7fe fdcb 	bl	80013aa <lcd_locate>
			lcd_print("START 2 ");
 8002814:	4847      	ldr	r0, [pc, #284]	; (8002934 <setup+0x848>)
 8002816:	f7fe fddd 	bl	80013d4 <lcd_print>
			if(sw_center_state == 1) {
 800281a:	4b41      	ldr	r3, [pc, #260]	; (8002920 <setup+0x834>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d173      	bne.n	800290a <setup+0x81e>
				main_pattern = 10;
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <setup+0x838>)
 8002824:	220a      	movs	r2, #10
 8002826:	701a      	strb	r2, [r3, #0]
				timer = 0;
 8002828:	4b3f      	ldr	r3, [pc, #252]	; (8002928 <setup+0x83c>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
				enc_cnt = 0;
 800282e:	4a3f      	ldr	r2, [pc, #252]	; (800292c <setup+0x840>)
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	f04f 0400 	mov.w	r4, #0
 8002838:	e9c2 3400 	strd	r3, r4, [r2]
				sw_center_state = 0;
 800283c:	4b38      	ldr	r3, [pc, #224]	; (8002920 <setup+0x834>)
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
				log_check_adress = start_adress_sector10;
 8002842:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <setup+0x84c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a3d      	ldr	r2, [pc, #244]	; (800293c <setup+0x850>)
 8002848:	6013      	str	r3, [r2, #0]
				if( isnan( *(float*)log_check_adress ) == 0 ) {
 800284a:	4b3c      	ldr	r3, [pc, #240]	; (800293c <setup+0x850>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	edd3 7a00 	vldr	s15, [r3]
 8002852:	eef4 7a67 	vcmp.f32	s15, s15
 8002856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285a:	d606      	bvs.n	800286a <setup+0x77e>
					second_trace_flag = 1;
 800285c:	4b38      	ldr	r3, [pc, #224]	; (8002940 <setup+0x854>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
					second_trace_pattern = 1;
 8002862:	4b38      	ldr	r3, [pc, #224]	; (8002944 <setup+0x858>)
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e002      	b.n	8002870 <setup+0x784>
				}
				else velocity_pattern = 2;
 800286a:	4b31      	ldr	r3, [pc, #196]	; (8002930 <setup+0x844>)
 800286c:	2202      	movs	r2, #2
 800286e:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 8002870:	f7fe fd8b 	bl	800138a <lcd_clear>
				HAL_Delay(1000);
 8002874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002878:	f002 ff6c 	bl	8005754 <HAL_Delay>
			}
			break;
 800287c:	e045      	b.n	800290a <setup+0x81e>
		case 7:
			lcd_locate(0,0);
 800287e:	2100      	movs	r1, #0
 8002880:	2000      	movs	r0, #0
 8002882:	f7fe fd92 	bl	80013aa <lcd_locate>
			lcd_print("SW_PUSH");
 8002886:	4824      	ldr	r0, [pc, #144]	; (8002918 <setup+0x82c>)
 8002888:	f7fe fda4 	bl	80013d4 <lcd_print>
			lcd_locate(0,1);
 800288c:	2101      	movs	r1, #1
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe fd8b 	bl	80013aa <lcd_locate>
			lcd_print("START 3 ");
 8002894:	482c      	ldr	r0, [pc, #176]	; (8002948 <setup+0x85c>)
 8002896:	f7fe fd9d 	bl	80013d4 <lcd_print>
			if(sw_center_state == 1) {
 800289a:	4b21      	ldr	r3, [pc, #132]	; (8002920 <setup+0x834>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d135      	bne.n	800290e <setup+0x822>
				main_pattern = 10;
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <setup+0x838>)
 80028a4:	220a      	movs	r2, #10
 80028a6:	701a      	strb	r2, [r3, #0]
				timer = 0;
 80028a8:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <setup+0x83c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
				enc_cnt = 0;
 80028ae:	4a1f      	ldr	r2, [pc, #124]	; (800292c <setup+0x840>)
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	f04f 0400 	mov.w	r4, #0
 80028b8:	e9c2 3400 	strd	r3, r4, [r2]
				sw_center_state = 0;
 80028bc:	4b18      	ldr	r3, [pc, #96]	; (8002920 <setup+0x834>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
				log_check_adress = start_adress_sector11;
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <setup+0x860>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1d      	ldr	r2, [pc, #116]	; (800293c <setup+0x850>)
 80028c8:	6013      	str	r3, [r2, #0]
				if( isnan( *(float*)log_check_adress ) == 0 ) {
 80028ca:	4b1c      	ldr	r3, [pc, #112]	; (800293c <setup+0x850>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	eef4 7a67 	vcmp.f32	s15, s15
 80028d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028da:	d606      	bvs.n	80028ea <setup+0x7fe>
					second_trace_flag = 1;
 80028dc:	4b18      	ldr	r3, [pc, #96]	; (8002940 <setup+0x854>)
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
					second_trace_pattern = 2;
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <setup+0x858>)
 80028e4:	2202      	movs	r2, #2
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	e002      	b.n	80028f0 <setup+0x804>
				}
				else velocity_pattern = 3;
 80028ea:	4b11      	ldr	r3, [pc, #68]	; (8002930 <setup+0x844>)
 80028ec:	2203      	movs	r2, #3
 80028ee:	701a      	strb	r2, [r3, #0]
				lcd_clear();
 80028f0:	f7fe fd4b 	bl	800138a <lcd_clear>
				HAL_Delay(1000);
 80028f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028f8:	f002 ff2c 	bl	8005754 <HAL_Delay>
			}
			break;
 80028fc:	e007      	b.n	800290e <setup+0x822>
		default:
			break;
 80028fe:	bf00      	nop
 8002900:	e006      	b.n	8002910 <setup+0x824>
			break;
 8002902:	bf00      	nop
 8002904:	e004      	b.n	8002910 <setup+0x824>
			break;
 8002906:	bf00      	nop
 8002908:	e002      	b.n	8002910 <setup+0x824>
			break;
 800290a:	bf00      	nop
 800290c:	e000      	b.n	8002910 <setup+0x824>
			break;
 800290e:	bf00      	nop
	}
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bd90      	pop	{r4, r7, pc}
 8002918:	0800ed9c 	.word	0x0800ed9c
 800291c:	0800eda4 	.word	0x0800eda4
 8002920:	20000277 	.word	0x20000277
 8002924:	20000268 	.word	0x20000268
 8002928:	20000264 	.word	0x20000264
 800292c:	20000658 	.word	0x20000658
 8002930:	2000026a 	.word	0x2000026a
 8002934:	0800edb0 	.word	0x0800edb0
 8002938:	0800ee00 	.word	0x0800ee00
 800293c:	20000294 	.word	0x20000294
 8002940:	2000026e 	.word	0x2000026e
 8002944:	2000066c 	.word	0x2000066c
 8002948:	0800edbc 	.word	0x0800edbc
 800294c:	0800ee04 	.word	0x0800ee04

08002950 <ErrorCheck>:

void ErrorCheck(uint16_t errorthreshold) {
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	80fb      	strh	r3, [r7, #6]
	if((line_senLLL + line_senLL + line_senL + line_senR + line_senRR + line_senRRR) > errorthreshold) {
 800295a:	4b28      	ldr	r3, [pc, #160]	; (80029fc <ErrorCheck+0xac>)
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <ErrorCheck+0xb0>)
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	4413      	add	r3, r2
 8002966:	4a27      	ldr	r2, [pc, #156]	; (8002a04 <ErrorCheck+0xb4>)
 8002968:	8812      	ldrh	r2, [r2, #0]
 800296a:	4413      	add	r3, r2
 800296c:	4a26      	ldr	r2, [pc, #152]	; (8002a08 <ErrorCheck+0xb8>)
 800296e:	8812      	ldrh	r2, [r2, #0]
 8002970:	4413      	add	r3, r2
 8002972:	4a26      	ldr	r2, [pc, #152]	; (8002a0c <ErrorCheck+0xbc>)
 8002974:	8812      	ldrh	r2, [r2, #0]
 8002976:	4413      	add	r3, r2
 8002978:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <ErrorCheck+0xc0>)
 800297a:	8812      	ldrh	r2, [r2, #0]
 800297c:	441a      	add	r2, r3
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	429a      	cmp	r2, r3
 8002982:	dd35      	ble.n	80029f0 <ErrorCheck+0xa0>
		error_cnt++;
 8002984:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <ErrorCheck+0xc4>)
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <ErrorCheck+0xc4>)
 800298e:	801a      	strh	r2, [r3, #0]
		if(error_cnt >= 5) {
 8002990:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <ErrorCheck+0xc4>)
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	2b04      	cmp	r3, #4
 8002996:	d921      	bls.n	80029dc <ErrorCheck+0x8c>
			error_flag = 1;
 8002998:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <ErrorCheck+0xc8>)
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
			main_pattern = 20;
 800299e:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <ErrorCheck+0xcc>)
 80029a0:	2214      	movs	r2, #20
 80029a2:	701a      	strb	r2, [r3, #0]
			target_vel = 0.0f;
 80029a4:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <ErrorCheck+0xd0>)
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <ErrorCheck+0xd4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2200      	movs	r2, #0
 80029b2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <ErrorCheck+0xd4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2200      	movs	r2, #0
 80029ba:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80029bc:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <ErrorCheck+0xd8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2200      	movs	r2, #0
 80029c2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80029c4:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <ErrorCheck+0xd8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2200      	movs	r2, #0
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <ErrorCheck+0xd8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2200      	movs	r2, #0
 80029d2:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <ErrorCheck+0xd8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2200      	movs	r2, #0
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
		}
		if(error_cnt > 60000) error_cnt = 1000;
 80029dc:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <ErrorCheck+0xc4>)
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d903      	bls.n	80029f0 <ErrorCheck+0xa0>
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <ErrorCheck+0xc4>)
 80029ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029ee:	801a      	strh	r2, [r3, #0]
	}
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	20000238 	.word	0x20000238
 8002a00:	2000023a 	.word	0x2000023a
 8002a04:	2000023c 	.word	0x2000023c
 8002a08:	2000023e 	.word	0x2000023e
 8002a0c:	20000240 	.word	0x20000240
 8002a10:	20000242 	.word	0x20000242
 8002a14:	2000c242 	.word	0x2000c242
 8002a18:	20000260 	.word	0x20000260
 8002a1c:	20000268 	.word	0x20000268
 8002a20:	200006b4 	.word	0x200006b4
 8002a24:	200005c4 	.word	0x200005c4
 8002a28:	20000384 	.word	0x20000384

08002a2c <CrossCheck>:

void CrossCheck(uint16_t crossthreshold){
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]

	if(crossline_flag == 0 && line_senLL + line_senL + line_senR + line_senRR < crossthreshold ) {
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <CrossCheck+0x88>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d118      	bne.n	8002a70 <CrossCheck+0x44>
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <CrossCheck+0x8c>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <CrossCheck+0x90>)
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	4413      	add	r3, r2
 8002a4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <CrossCheck+0x94>)
 8002a4c:	8812      	ldrh	r2, [r2, #0]
 8002a4e:	4413      	add	r3, r2
 8002a50:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <CrossCheck+0x98>)
 8002a52:	8812      	ldrh	r2, [r2, #0]
 8002a54:	441a      	add	r2, r3
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	da09      	bge.n	8002a70 <CrossCheck+0x44>
		crossline_flag = 1;
 8002a5c:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <CrossCheck+0x88>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
		enc_cnt = 0;
 8002a62:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <CrossCheck+0x9c>)
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	f04f 0400 	mov.w	r4, #0
 8002a6c:	e9c2 3400 	strd	r3, r4, [r2]
	}

	if(crossline_flag == 1 && mileage((float)enc_cnt) >= 90){
 8002a70:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <CrossCheck+0x88>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d118      	bne.n	8002aaa <CrossCheck+0x7e>
 8002a78:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <CrossCheck+0x9c>)
 8002a7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	4621      	mov	r1, r4
 8002a82:	f7fe f9d1 	bl	8000e28 <__aeabi_l2f>
 8002a86:	4603      	mov	r3, r0
 8002a88:	ee00 3a10 	vmov	s0, r3
 8002a8c:	f7fe fee8 	bl	8001860 <mileage>
 8002a90:	eeb0 7a40 	vmov.f32	s14, s0
 8002a94:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8002acc <CrossCheck+0xa0>
 8002a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa0:	da00      	bge.n	8002aa4 <CrossCheck+0x78>
		crossline_flag = 0;
	}
}
 8002aa2:	e002      	b.n	8002aaa <CrossCheck+0x7e>
		crossline_flag = 0;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <CrossCheck+0x88>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd90      	pop	{r4, r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000269 	.word	0x20000269
 8002ab8:	2000023a 	.word	0x2000023a
 8002abc:	2000023c 	.word	0x2000023c
 8002ac0:	2000023e 	.word	0x2000023e
 8002ac4:	20000240 	.word	0x20000240
 8002ac8:	20000658 	.word	0x20000658
 8002acc:	42b40000 	.word	0x42b40000

08002ad0 <MakerCheck>:
	}

	return ret;
}

void MakerCheck(uint8_t makerval){
 8002ad0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	71fb      	strb	r3, [r7, #7]
	int64_t maker_pulse_center;
	static uint16_t maker_preset = 0;
	static uint8_t maker_check_flag = 0;
	static uint8_t cmp_flag = 0;

	if((0 < makerval && makerval <= 3) && maker_check_flag == 0) {
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d010      	beq.n	8002b04 <MakerCheck+0x34>
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d80d      	bhi.n	8002b04 <MakerCheck+0x34>
 8002ae8:	4b8c      	ldr	r3, [pc, #560]	; (8002d1c <MakerCheck+0x24c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d109      	bne.n	8002b04 <MakerCheck+0x34>
		maker_check_flag = 1;
 8002af0:	4b8a      	ldr	r3, [pc, #552]	; (8002d1c <MakerCheck+0x24c>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
		enc_cnt = 0;
 8002af6:	4a8a      	ldr	r2, [pc, #552]	; (8002d20 <MakerCheck+0x250>)
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	f04f 0400 	mov.w	r4, #0
 8002b00:	e9c2 3400 	strd	r3, r4, [r2]
	}

	if((maker_check_flag == 1) && (mileage((float)enc_cnt) >= 6) && makerval == 0 ) {
 8002b04:	4b85      	ldr	r3, [pc, #532]	; (8002d1c <MakerCheck+0x24c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	f040 8101 	bne.w	8002d10 <MakerCheck+0x240>
 8002b0e:	4b84      	ldr	r3, [pc, #528]	; (8002d20 <MakerCheck+0x250>)
 8002b10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b14:	4618      	mov	r0, r3
 8002b16:	4621      	mov	r1, r4
 8002b18:	f7fe f986 	bl	8000e28 <__aeabi_l2f>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	ee00 3a10 	vmov	s0, r3
 8002b22:	f7fe fe9d 	bl	8001860 <mileage>
 8002b26:	eeb0 7a40 	vmov.f32	s14, s0
 8002b2a:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8002b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b36:	da00      	bge.n	8002b3a <MakerCheck+0x6a>
		}

		maker_check_flag = 0;
	}

}
 8002b38:	e0ea      	b.n	8002d10 <MakerCheck+0x240>
	if((maker_check_flag == 1) && (mileage((float)enc_cnt) >= 6) && makerval == 0 ) {
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f040 80e7 	bne.w	8002d10 <MakerCheck+0x240>
		if(second_trace_flag == 1){
 8002b42:	4b78      	ldr	r3, [pc, #480]	; (8002d24 <MakerCheck+0x254>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	f040 80c3 	bne.w	8002cd2 <MakerCheck+0x202>
			maker_adress = start_adress_sector9 + maker_preset;
 8002b4c:	4b76      	ldr	r3, [pc, #472]	; (8002d28 <MakerCheck+0x258>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <MakerCheck+0x25c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a75      	ldr	r2, [pc, #468]	; (8002d30 <MakerCheck+0x260>)
 8002b5a:	6013      	str	r3, [r2, #0]
			cmp_flag = 1;
 8002b5c:	4b75      	ldr	r3, [pc, #468]	; (8002d34 <MakerCheck+0x264>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]
			led_pattern(led);
 8002b62:	4b75      	ldr	r3, [pc, #468]	; (8002d38 <MakerCheck+0x268>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 fe18 	bl	800479c <led_pattern>
			while(cmp_flag){
 8002b6c:	e0ab      	b.n	8002cc6 <MakerCheck+0x1f6>
				maker_pulseL = *(int32_t*)maker_adress;
 8002b6e:	4b70      	ldr	r3, [pc, #448]	; (8002d30 <MakerCheck+0x260>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	617b      	str	r3, [r7, #20]
				maker_adress += 0x04;
 8002b76:	4b6e      	ldr	r3, [pc, #440]	; (8002d30 <MakerCheck+0x260>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	4a6c      	ldr	r2, [pc, #432]	; (8002d30 <MakerCheck+0x260>)
 8002b7e:	6013      	str	r3, [r2, #0]
				if( isnan((float)maker_pulseL) != 0 ) cmp_flag = 0;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	ee07 3a90 	vmov	s15, r3
 8002b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b8a:	eef4 7a67 	vcmp.f32	s15, s15
 8002b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b92:	d702      	bvc.n	8002b9a <MakerCheck+0xca>
 8002b94:	4b67      	ldr	r3, [pc, #412]	; (8002d34 <MakerCheck+0x264>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
				maker_pulseR = *(int32_t*)maker_adress;
 8002b9a:	4b65      	ldr	r3, [pc, #404]	; (8002d30 <MakerCheck+0x260>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	613b      	str	r3, [r7, #16]
				maker_adress += 0x04;
 8002ba2:	4b63      	ldr	r3, [pc, #396]	; (8002d30 <MakerCheck+0x260>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	4a61      	ldr	r2, [pc, #388]	; (8002d30 <MakerCheck+0x260>)
 8002baa:	6013      	str	r3, [r2, #0]
				maker_pulse_center = (int64_t)(maker_pulseL + maker_pulseR) / 2;
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	0fda      	lsrs	r2, r3, #31
 8002bb4:	4413      	add	r3, r2
 8002bb6:	105b      	asrs	r3, r3, #1
 8002bb8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002bbc:	e9c7 3402 	strd	r3, r4, [r7, #8]
				if((enc_tim_total > maker_pulse_center - 3000) && (enc_tim_total < maker_pulse_center + 3000)){
 8002bc0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002bc4:	495d      	ldr	r1, [pc, #372]	; (8002d3c <MakerCheck+0x26c>)
 8002bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bca:	eb11 0b03 	adds.w	fp, r1, r3
 8002bce:	eb42 0c04 	adc.w	ip, r2, r4
 8002bd2:	4b5b      	ldr	r3, [pc, #364]	; (8002d40 <MakerCheck+0x270>)
 8002bd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002bd8:	459b      	cmp	fp, r3
 8002bda:	eb7c 0304 	sbcs.w	r3, ip, r4
 8002bde:	da62      	bge.n	8002ca6 <MakerCheck+0x1d6>
 8002be0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002be4:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	eb13 0b01 	adds.w	fp, r3, r1
 8002bf0:	eb44 0c02 	adc.w	ip, r4, r2
 8002bf4:	4a52      	ldr	r2, [pc, #328]	; (8002d40 <MakerCheck+0x270>)
 8002bf6:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002bfa:	4559      	cmp	r1, fp
 8002bfc:	eb72 030c 	sbcs.w	r3, r2, ip
 8002c00:	da51      	bge.n	8002ca6 <MakerCheck+0x1d6>
					enc_tim1_total = (int64_t)maker_pulseL;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002c08:	4a4e      	ldr	r2, [pc, #312]	; (8002d44 <MakerCheck+0x274>)
 8002c0a:	e9c2 3400 	strd	r3, r4, [r2]
					enc_tim8_total = (int64_t)maker_pulseR;
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002c14:	4a4c      	ldr	r2, [pc, #304]	; (8002d48 <MakerCheck+0x278>)
 8002c16:	e9c2 3400 	strd	r3, r4, [r2]
					maker_preset += 0x08;
 8002c1a:	4b43      	ldr	r3, [pc, #268]	; (8002d28 <MakerCheck+0x258>)
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	3308      	adds	r3, #8
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <MakerCheck+0x258>)
 8002c24:	801a      	strh	r2, [r3, #0]
					while( mm_total > mileage((float)maker_pulse_center) ){
 8002c26:	e01a      	b.n	8002c5e <MakerCheck+0x18e>
						plan_velo_adress -= 0x04;
 8002c28:	4b48      	ldr	r3, [pc, #288]	; (8002d4c <MakerCheck+0x27c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3b04      	subs	r3, #4
 8002c2e:	4a47      	ldr	r2, [pc, #284]	; (8002d4c <MakerCheck+0x27c>)
 8002c30:	6013      	str	r3, [r2, #0]
						log_adress -= 0x08;
 8002c32:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <MakerCheck+0x280>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3b08      	subs	r3, #8
 8002c38:	4a45      	ldr	r2, [pc, #276]	; (8002d50 <MakerCheck+0x280>)
 8002c3a:	6013      	str	r3, [r2, #0]
						mm_total -= *(float*)log_adress;
 8002c3c:	4b45      	ldr	r3, [pc, #276]	; (8002d54 <MakerCheck+0x284>)
 8002c3e:	ed93 7a00 	vldr	s14, [r3]
 8002c42:	4b43      	ldr	r3, [pc, #268]	; (8002d50 <MakerCheck+0x280>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c4e:	4b41      	ldr	r3, [pc, #260]	; (8002d54 <MakerCheck+0x284>)
 8002c50:	edc3 7a00 	vstr	s15, [r3]
						target_vel = *(float*)plan_velo_adress;
 8002c54:	4b3d      	ldr	r3, [pc, #244]	; (8002d4c <MakerCheck+0x27c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3f      	ldr	r2, [pc, #252]	; (8002d58 <MakerCheck+0x288>)
 8002c5c:	6013      	str	r3, [r2, #0]
					while( mm_total > mileage((float)maker_pulse_center) ){
 8002c5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c62:	f7fe f8e1 	bl	8000e28 <__aeabi_l2f>
 8002c66:	4603      	mov	r3, r0
 8002c68:	ee00 3a10 	vmov	s0, r3
 8002c6c:	f7fe fdf8 	bl	8001860 <mileage>
 8002c70:	eeb0 7a40 	vmov.f32	s14, s0
 8002c74:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <MakerCheck+0x284>)
 8002c76:	edd3 7a00 	vldr	s15, [r3]
 8002c7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c82:	d4d1      	bmi.n	8002c28 <MakerCheck+0x158>
					cmp_flag = 0;
 8002c84:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <MakerCheck+0x264>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
					led++;
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <MakerCheck+0x268>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <MakerCheck+0x268>)
 8002c94:	701a      	strb	r2, [r3, #0]
					if(led > 7) led = 0;
 8002c96:	4b28      	ldr	r3, [pc, #160]	; (8002d38 <MakerCheck+0x268>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b07      	cmp	r3, #7
 8002c9c:	d913      	bls.n	8002cc6 <MakerCheck+0x1f6>
 8002c9e:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <MakerCheck+0x268>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e00f      	b.n	8002cc6 <MakerCheck+0x1f6>
				else if( maker_pulse_center > enc_tim_total + 8000) cmp_flag = 0;
 8002ca6:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <MakerCheck+0x270>)
 8002ca8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cac:	f513 51fa 	adds.w	r1, r3, #8000	; 0x1f40
 8002cb0:	f144 0200 	adc.w	r2, r4, #0
 8002cb4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002cb8:	4299      	cmp	r1, r3
 8002cba:	eb72 0304 	sbcs.w	r3, r2, r4
 8002cbe:	da02      	bge.n	8002cc6 <MakerCheck+0x1f6>
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <MakerCheck+0x264>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
			while(cmp_flag){
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <MakerCheck+0x264>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f47f af4f 	bne.w	8002b6e <MakerCheck+0x9e>
 8002cd0:	e01b      	b.n	8002d0a <MakerCheck+0x23a>
			FLASH_Write_Word_S(maker_adress,(int32_t)enc_tim1_total);
 8002cd2:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <MakerCheck+0x260>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <MakerCheck+0x274>)
 8002cd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f7fe fc02 	bl	80014e8 <FLASH_Write_Word_S>
			maker_adress += 0x04;
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <MakerCheck+0x260>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <MakerCheck+0x260>)
 8002cec:	6013      	str	r3, [r2, #0]
			FLASH_Write_Word_S(maker_adress,(int32_t)enc_tim8_total);
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <MakerCheck+0x260>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <MakerCheck+0x278>)
 8002cf4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f7fe fbf4 	bl	80014e8 <FLASH_Write_Word_S>
			maker_adress += 0x04;
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <MakerCheck+0x260>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3304      	adds	r3, #4
 8002d06:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <MakerCheck+0x260>)
 8002d08:	6013      	str	r3, [r2, #0]
		maker_check_flag = 0;
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <MakerCheck+0x24c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
}
 8002d10:	bf00      	nop
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000233 	.word	0x20000233
 8002d20:	20000658 	.word	0x20000658
 8002d24:	2000026e 	.word	0x2000026e
 8002d28:	20000234 	.word	0x20000234
 8002d2c:	0800edfc 	.word	0x0800edfc
 8002d30:	2000067c 	.word	0x2000067c
 8002d34:	20000236 	.word	0x20000236
 8002d38:	20000237 	.word	0x20000237
 8002d3c:	fffff448 	.word	0xfffff448
 8002d40:	20000258 	.word	0x20000258
 8002d44:	20000248 	.word	0x20000248
 8002d48:	20000250 	.word	0x20000250
 8002d4c:	2000c23c 	.word	0x2000c23c
 8002d50:	20000678 	.word	0x20000678
 8002d54:	20000270 	.word	0x20000270
 8002d58:	200006b4 	.word	0x200006b4

08002d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d5c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002d60:	ed2d 8b02 	vpush	{d8}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d68:	f002 fc82 	bl	8005670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d6c:	f000 fed2 	bl	8003b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d70:	f001 fb5c 	bl	800442c <MX_GPIO_Init>
  MX_DMA_Init();
 8002d74:	f001 fb3a 	bl	80043ec <MX_DMA_Init>
  MX_ADC1_Init();
 8002d78:	f000 ff36 	bl	8003be8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002d7c:	f001 f83c 	bl	8003df8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002d80:	f001 f868 	bl	8003e54 <MX_I2C2_Init>
  MX_SPI3_Init();
 8002d84:	f001 f894 	bl	8003eb0 <MX_SPI3_Init>
  MX_TIM1_Init();
 8002d88:	f001 f8c8 	bl	8003f1c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002d8c:	f001 f91e 	bl	8003fcc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d90:	f001 f974 	bl	800407c <MX_TIM3_Init>
  MX_TIM8_Init();
 8002d94:	f001 fa58 	bl	8004248 <MX_TIM8_Init>
  MX_TIM12_Init();
 8002d98:	f001 faae 	bl	80042f8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8002d9c:	f001 fafc 	bl	8004398 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8002da0:	f001 f9e6 	bl	8004170 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002da4:	f001 fa1a 	bl	80041dc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  peripheral_init();
 8002da8:	f001 fc28 	bl	80045fc <peripheral_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	switch(main_pattern) {
 8002dac:	4ba5      	ldr	r3, [pc, #660]	; (8003044 <main+0x2e8>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b16      	cmp	r3, #22
 8002db2:	f200 8686 	bhi.w	8003ac2 <main+0xd66>
 8002db6:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <main+0x60>)
 8002db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbc:	08002e19 	.word	0x08002e19
 8002dc0:	08003ac3 	.word	0x08003ac3
 8002dc4:	08003ac3 	.word	0x08003ac3
 8002dc8:	08003ac3 	.word	0x08003ac3
 8002dcc:	08003ac3 	.word	0x08003ac3
 8002dd0:	08003ac3 	.word	0x08003ac3
 8002dd4:	08003ac3 	.word	0x08003ac3
 8002dd8:	08003ac3 	.word	0x08003ac3
 8002ddc:	08003ac3 	.word	0x08003ac3
 8002de0:	08003ac3 	.word	0x08003ac3
 8002de4:	08002e21 	.word	0x08002e21
 8002de8:	08002e47 	.word	0x08002e47
 8002dec:	08002f79 	.word	0x08002f79
 8002df0:	08003143 	.word	0x08003143
 8002df4:	080031c3 	.word	0x080031c3
 8002df8:	08003ac3 	.word	0x08003ac3
 8002dfc:	08003ac3 	.word	0x08003ac3
 8002e00:	08003ac3 	.word	0x08003ac3
 8002e04:	08003ac3 	.word	0x08003ac3
 8002e08:	08003ac3 	.word	0x08003ac3
 8002e0c:	08003245 	.word	0x08003245
 8002e10:	080032d3 	.word	0x080032d3
 8002e14:	08003a43 	.word	0x08003a43
		case 0:	//setup
			setup();
 8002e18:	f7ff f968 	bl	80020ec <setup>
			break;
 8002e1c:	f000 be5e 	b.w	8003adc <main+0xd80>
		case 10:
			maker_adress = start_adress_sector9;
 8002e20:	4b89      	ldr	r3, [pc, #548]	; (8003048 <main+0x2ec>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a89      	ldr	r2, [pc, #548]	; (800304c <main+0x2f0>)
 8002e26:	6013      	str	r3, [r2, #0]

			timer = 0;
 8002e28:	4b89      	ldr	r3, [pc, #548]	; (8003050 <main+0x2f4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
			target_vel = 0.0f;
 8002e2e:	4b89      	ldr	r3, [pc, #548]	; (8003054 <main+0x2f8>)
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
			main_pattern++;
 8002e36:	4b83      	ldr	r3, [pc, #524]	; (8003044 <main+0x2e8>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b81      	ldr	r3, [pc, #516]	; (8003044 <main+0x2e8>)
 8002e40:	701a      	strb	r2, [r3, #0]

			break;
 8002e42:	f000 be4b 	b.w	8003adc <main+0xd80>
		case 11:	//count down
			if(timer >= 0 && timer < 1000) ;
 8002e46:	4b82      	ldr	r3, [pc, #520]	; (8003050 <main+0x2f4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	db05      	blt.n	8002e5a <main+0xfe>
 8002e4e:	4b80      	ldr	r3, [pc, #512]	; (8003050 <main+0x2f4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e56:	f2c0 808d 	blt.w	8002f74 <main+0x218>
			else if(timer >= 1000 && timer < 2000) ;
 8002e5a:	4b7d      	ldr	r3, [pc, #500]	; (8003050 <main+0x2f4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e62:	db05      	blt.n	8002e70 <main+0x114>
 8002e64:	4b7a      	ldr	r3, [pc, #488]	; (8003050 <main+0x2f4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e6c:	f2c0 8082 	blt.w	8002f74 <main+0x218>
			else if(timer >= 2000 && timer < 3000) {
 8002e70:	4b77      	ldr	r3, [pc, #476]	; (8003050 <main+0x2f4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e78:	db0c      	blt.n	8002e94 <main+0x138>
 8002e7a:	4b75      	ldr	r3, [pc, #468]	; (8003050 <main+0x2f4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002e82:	4293      	cmp	r3, r2
 8002e84:	dc06      	bgt.n	8002e94 <main+0x138>
				calibration_flag = 1;
 8002e86:	4b74      	ldr	r3, [pc, #464]	; (8003058 <main+0x2fc>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
				led_pattern(2);
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f001 fc85 	bl	800479c <led_pattern>
 8002e92:	e06f      	b.n	8002f74 <main+0x218>
			}
			else if(timer >= 3000 && timer < 4000) led_pattern(4);
 8002e94:	4b6e      	ldr	r3, [pc, #440]	; (8003050 <main+0x2f4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	dd08      	ble.n	8002eb2 <main+0x156>
 8002ea0:	4b6b      	ldr	r3, [pc, #428]	; (8003050 <main+0x2f4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002ea8:	da03      	bge.n	8002eb2 <main+0x156>
 8002eaa:	2004      	movs	r0, #4
 8002eac:	f001 fc76 	bl	800479c <led_pattern>
 8002eb0:	e060      	b.n	8002f74 <main+0x218>
			else if(timer >= 4000 && timer < 5000) {
 8002eb2:	4b67      	ldr	r3, [pc, #412]	; (8003050 <main+0x2f4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002eba:	db0e      	blt.n	8002eda <main+0x17e>
 8002ebc:	4b64      	ldr	r3, [pc, #400]	; (8003050 <main+0x2f4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f241 3287 	movw	r2, #4999	; 0x1387
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	dc08      	bgt.n	8002eda <main+0x17e>
				led_pattern(1);
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f001 fc67 	bl	800479c <led_pattern>
				calibration_flag = 0;
 8002ece:	4b62      	ldr	r3, [pc, #392]	; (8003058 <main+0x2fc>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
				Calculation_offset_zg();
 8002ed4:	f7fe fe58 	bl	8001b88 <Calculation_offset_zg>
 8002ed8:	e04c      	b.n	8002f74 <main+0x218>
			}
			else if(timer >= 5000) {
 8002eda:	4b5d      	ldr	r3, [pc, #372]	; (8003050 <main+0x2f4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f241 3287 	movw	r2, #4999	; 0x1387
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	f340 85f0 	ble.w	8003ac8 <main+0xd6c>
				if (second_trace_flag == 0){
 8002ee8:	4b5c      	ldr	r3, [pc, #368]	; (800305c <main+0x300>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d126      	bne.n	8002f3e <main+0x1e2>
					if (velocity_pattern == 1) target_vel = 1000.0f;
 8002ef0:	4b5b      	ldr	r3, [pc, #364]	; (8003060 <main+0x304>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d103      	bne.n	8002f00 <main+0x1a4>
 8002ef8:	4b56      	ldr	r3, [pc, #344]	; (8003054 <main+0x2f8>)
 8002efa:	4a5a      	ldr	r2, [pc, #360]	; (8003064 <main+0x308>)
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e013      	b.n	8002f28 <main+0x1cc>
					else if (velocity_pattern == 2) target_vel = 1200.0f;
 8002f00:	4b57      	ldr	r3, [pc, #348]	; (8003060 <main+0x304>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d103      	bne.n	8002f10 <main+0x1b4>
 8002f08:	4b52      	ldr	r3, [pc, #328]	; (8003054 <main+0x2f8>)
 8002f0a:	4a57      	ldr	r2, [pc, #348]	; (8003068 <main+0x30c>)
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e00b      	b.n	8002f28 <main+0x1cc>
					else if (velocity_pattern == 3) target_vel = 1500.0f;
 8002f10:	4b53      	ldr	r3, [pc, #332]	; (8003060 <main+0x304>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d103      	bne.n	8002f20 <main+0x1c4>
 8002f18:	4b4e      	ldr	r3, [pc, #312]	; (8003054 <main+0x2f8>)
 8002f1a:	4a54      	ldr	r2, [pc, #336]	; (800306c <main+0x310>)
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e003      	b.n	8002f28 <main+0x1cc>
					else target_vel = 0.0f;
 8002f20:	4b4c      	ldr	r3, [pc, #304]	; (8003054 <main+0x2f8>)
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
					led_pattern(0);
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f001 fc37 	bl	800479c <led_pattern>
					main_pattern++;
 8002f2e:	4b45      	ldr	r3, [pc, #276]	; (8003044 <main+0x2e8>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	3301      	adds	r3, #1
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	4b43      	ldr	r3, [pc, #268]	; (8003044 <main+0x2e8>)
 8002f38:	701a      	strb	r2, [r3, #0]

					main_pattern++;
				}
			}

			break;
 8002f3a:	f000 bdc5 	b.w	8003ac8 <main+0xd6c>
					if(second_trace_pattern == 1) target_vel = START_VELOCITY;
 8002f3e:	4b4c      	ldr	r3, [pc, #304]	; (8003070 <main+0x314>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d103      	bne.n	8002f4e <main+0x1f2>
 8002f46:	4b43      	ldr	r3, [pc, #268]	; (8003054 <main+0x2f8>)
 8002f48:	4a4a      	ldr	r2, [pc, #296]	; (8003074 <main+0x318>)
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e00a      	b.n	8002f64 <main+0x208>
					else if(second_trace_pattern == 2) target_vel = START_VELOCITY2;
 8002f4e:	4b48      	ldr	r3, [pc, #288]	; (8003070 <main+0x314>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d103      	bne.n	8002f5e <main+0x202>
 8002f56:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <main+0x2f8>)
 8002f58:	4a47      	ldr	r2, [pc, #284]	; (8003078 <main+0x31c>)
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e002      	b.n	8002f64 <main+0x208>
					else target_vel = 1000.0f;
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <main+0x2f8>)
 8002f60:	4a40      	ldr	r2, [pc, #256]	; (8003064 <main+0x308>)
 8002f62:	601a      	str	r2, [r3, #0]
					main_pattern++;
 8002f64:	4b37      	ldr	r3, [pc, #220]	; (8003044 <main+0x2e8>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	4b35      	ldr	r3, [pc, #212]	; (8003044 <main+0x2e8>)
 8002f6e:	701a      	strb	r2, [r3, #0]
			break;
 8002f70:	f000 bdaa 	b.w	8003ac8 <main+0xd6c>
 8002f74:	f000 bda8 	b.w	8003ac8 <main+0xd6c>
		case 12:	//start
			if(maker_check >= 8) {	//start_maker_check
 8002f78:	4b40      	ldr	r3, [pc, #256]	; (800307c <main+0x320>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b07      	cmp	r3, #7
 8002f7e:	f240 85a6 	bls.w	8003ace <main+0xd72>
			//if( 1 <= maker_check && maker_check <= 3) {	//start_maker_check
				enc_tim1_total = 0;
 8002f82:	4a3f      	ldr	r2, [pc, #252]	; (8003080 <main+0x324>)
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	f04f 0400 	mov.w	r4, #0
 8002f8c:	e9c2 3400 	strd	r3, r4, [r2]
				enc_tim8_total = 0;
 8002f90:	4a3c      	ldr	r2, [pc, #240]	; (8003084 <main+0x328>)
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	f04f 0400 	mov.w	r4, #0
 8002f9a:	e9c2 3400 	strd	r3, r4, [r2]
				enc_tim_total = 0;
 8002f9e:	4a3a      	ldr	r2, [pc, #232]	; (8003088 <main+0x32c>)
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	f04f 0400 	mov.w	r4, #0
 8002fa8:	e9c2 3400 	strd	r3, r4, [r2]
				mm_total = 0;
 8002fac:	4b37      	ldr	r3, [pc, #220]	; (800308c <main+0x330>)
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
				timer = 0;
 8002fb4:	4b26      	ldr	r3, [pc, #152]	; (8003050 <main+0x2f4>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
				main_pattern = 13;
 8002fba:	4b22      	ldr	r3, [pc, #136]	; (8003044 <main+0x2e8>)
 8002fbc:	220d      	movs	r2, #13
 8002fbe:	701a      	strb	r2, [r3, #0]
				enc_tim1_cnt_10ms = 0;
 8002fc0:	4b33      	ldr	r3, [pc, #204]	; (8003090 <main+0x334>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
				enc_tim8_cnt_10ms = 0;
 8002fc6:	4b33      	ldr	r3, [pc, #204]	; (8003094 <main+0x338>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
				log_adress = start_adress_sector7;
 8002fcc:	4b32      	ldr	r3, [pc, #200]	; (8003098 <main+0x33c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a32      	ldr	r2, [pc, #200]	; (800309c <main+0x340>)
 8002fd2:	6013      	str	r3, [r2, #0]
				led_pattern(6);
 8002fd4:	2006      	movs	r0, #6
 8002fd6:	f001 fbe1 	bl	800479c <led_pattern>

				if( second_trace_flag == 0 ) flash_flag = 1;
 8002fda:	4b20      	ldr	r3, [pc, #128]	; (800305c <main+0x300>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d102      	bne.n	8002fe8 <main+0x28c>
 8002fe2:	4b2f      	ldr	r3, [pc, #188]	; (80030a0 <main+0x344>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
				if( second_trace_flag == 1 ) {
 8002fe8:	4b1c      	ldr	r3, [pc, #112]	; (800305c <main+0x300>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	f040 856e 	bne.w	8003ace <main+0xd72>
					if(second_trace_pattern == 2)plan_velo_adress = start_adress_sector11;
 8002ff2:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <main+0x314>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d104      	bne.n	8003004 <main+0x2a8>
 8002ffa:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <main+0x348>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2a      	ldr	r2, [pc, #168]	; (80030a8 <main+0x34c>)
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	e003      	b.n	800300c <main+0x2b0>
					else plan_velo_adress = start_adress_sector10;
 8003004:	4b29      	ldr	r3, [pc, #164]	; (80030ac <main+0x350>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a27      	ldr	r2, [pc, #156]	; (80030a8 <main+0x34c>)
 800300a:	6013      	str	r3, [r2, #0]

					target_vel = *(float*)plan_velo_adress;
 800300c:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <main+0x34c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a10      	ldr	r2, [pc, #64]	; (8003054 <main+0x2f8>)
 8003014:	6013      	str	r3, [r2, #0]
					plan_velo_adress += 0x04;
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <main+0x34c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3304      	adds	r3, #4
 800301c:	4a22      	ldr	r2, [pc, #136]	; (80030a8 <main+0x34c>)
 800301e:	6013      	str	r3, [r2, #0]
					log_adress += 0x04;
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <main+0x340>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3304      	adds	r3, #4
 8003026:	4a1d      	ldr	r2, [pc, #116]	; (800309c <main+0x340>)
 8003028:	6013      	str	r3, [r2, #0]
					mm_total = *(float*)log_adress;
 800302a:	4b1c      	ldr	r3, [pc, #112]	; (800309c <main+0x340>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a16      	ldr	r2, [pc, #88]	; (800308c <main+0x330>)
 8003032:	6013      	str	r3, [r2, #0]
					log_adress += 0x08;
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <main+0x340>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3308      	adds	r3, #8
 800303a:	4a18      	ldr	r2, [pc, #96]	; (800309c <main+0x340>)
 800303c:	6013      	str	r3, [r2, #0]
				}
			}
			break;
 800303e:	f000 bd46 	b.w	8003ace <main+0xd72>
 8003042:	bf00      	nop
 8003044:	20000268 	.word	0x20000268
 8003048:	0800edfc 	.word	0x0800edfc
 800304c:	2000067c 	.word	0x2000067c
 8003050:	20000264 	.word	0x20000264
 8003054:	200006b4 	.word	0x200006b4
 8003058:	20000232 	.word	0x20000232
 800305c:	2000026e 	.word	0x2000026e
 8003060:	2000026a 	.word	0x2000026a
 8003064:	447a0000 	.word	0x447a0000
 8003068:	44960000 	.word	0x44960000
 800306c:	44bb8000 	.word	0x44bb8000
 8003070:	2000066c 	.word	0x2000066c
 8003074:	44898000 	.word	0x44898000
 8003078:	44a28000 	.word	0x44a28000
 800307c:	200006b8 	.word	0x200006b8
 8003080:	20000248 	.word	0x20000248
 8003084:	20000250 	.word	0x20000250
 8003088:	20000258 	.word	0x20000258
 800308c:	20000270 	.word	0x20000270
 8003090:	2000c258 	.word	0x2000c258
 8003094:	20000684 	.word	0x20000684
 8003098:	0800edf8 	.word	0x0800edf8
 800309c:	20000678 	.word	0x20000678
 80030a0:	2000026b 	.word	0x2000026b
 80030a4:	0800ee04 	.word	0x0800ee04
 80030a8:	2000c23c 	.word	0x2000c23c
 80030ac:	0800ee00 	.word	0x0800ee00
		case 13:	//running
			while( ( mm_total <= mileage((float)enc_tim_total)) && second_trace_flag == 1 ) {
				if(isnan(*(float*)log_adress) != 0) {
 80030b0:	4bac      	ldr	r3, [pc, #688]	; (8003364 <main+0x608>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	edd3 7a00 	vldr	s15, [r3]
 80030b8:	eef4 7a67 	vcmp.f32	s15, s15
 80030bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c0:	d70d      	bvc.n	80030de <main+0x382>
					led_pattern(7);
 80030c2:	2007      	movs	r0, #7
 80030c4:	f001 fb6a 	bl	800479c <led_pattern>
					enc_cnt = 0;
 80030c8:	4aa7      	ldr	r2, [pc, #668]	; (8003368 <main+0x60c>)
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	f04f 0400 	mov.w	r4, #0
 80030d2:	e9c2 3400 	strd	r3, r4, [r2]
					main_pattern = 14;
 80030d6:	4ba5      	ldr	r3, [pc, #660]	; (800336c <main+0x610>)
 80030d8:	220e      	movs	r2, #14
 80030da:	701a      	strb	r2, [r3, #0]
					break;
 80030dc:	e04b      	b.n	8003176 <main+0x41a>
				}
				else mm_total += *(float*)log_adress;
 80030de:	4ba1      	ldr	r3, [pc, #644]	; (8003364 <main+0x608>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	ed93 7a00 	vldr	s14, [r3]
 80030e6:	4ba2      	ldr	r3, [pc, #648]	; (8003370 <main+0x614>)
 80030e8:	edd3 7a00 	vldr	s15, [r3]
 80030ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f0:	4b9f      	ldr	r3, [pc, #636]	; (8003370 <main+0x614>)
 80030f2:	edc3 7a00 	vstr	s15, [r3]

				if(isnan(*(float*)plan_velo_adress) != 0) {
 80030f6:	4b9f      	ldr	r3, [pc, #636]	; (8003374 <main+0x618>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	edd3 7a00 	vldr	s15, [r3]
 80030fe:	eef4 7a67 	vcmp.f32	s15, s15
 8003102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003106:	d70d      	bvc.n	8003124 <main+0x3c8>
					led_pattern(7);
 8003108:	2007      	movs	r0, #7
 800310a:	f001 fb47 	bl	800479c <led_pattern>
					enc_cnt = 0;
 800310e:	4a96      	ldr	r2, [pc, #600]	; (8003368 <main+0x60c>)
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	f04f 0400 	mov.w	r4, #0
 8003118:	e9c2 3400 	strd	r3, r4, [r2]
					main_pattern = 14;
 800311c:	4b93      	ldr	r3, [pc, #588]	; (800336c <main+0x610>)
 800311e:	220e      	movs	r2, #14
 8003120:	701a      	strb	r2, [r3, #0]
					break;
 8003122:	e028      	b.n	8003176 <main+0x41a>
				}
				else target_vel = *(float*)plan_velo_adress;
 8003124:	4b93      	ldr	r3, [pc, #588]	; (8003374 <main+0x618>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a93      	ldr	r2, [pc, #588]	; (8003378 <main+0x61c>)
 800312c:	6013      	str	r3, [r2, #0]

				plan_velo_adress += 0x04;
 800312e:	4b91      	ldr	r3, [pc, #580]	; (8003374 <main+0x618>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3304      	adds	r3, #4
 8003134:	4a8f      	ldr	r2, [pc, #572]	; (8003374 <main+0x618>)
 8003136:	6013      	str	r3, [r2, #0]
				log_adress += 0x08;
 8003138:	4b8a      	ldr	r3, [pc, #552]	; (8003364 <main+0x608>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3308      	adds	r3, #8
 800313e:	4a89      	ldr	r2, [pc, #548]	; (8003364 <main+0x608>)
 8003140:	6013      	str	r3, [r2, #0]
			while( ( mm_total <= mileage((float)enc_tim_total)) && second_trace_flag == 1 ) {
 8003142:	4b8e      	ldr	r3, [pc, #568]	; (800337c <main+0x620>)
 8003144:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003148:	4618      	mov	r0, r3
 800314a:	4621      	mov	r1, r4
 800314c:	f7fd fe6c 	bl	8000e28 <__aeabi_l2f>
 8003150:	4603      	mov	r3, r0
 8003152:	ee00 3a10 	vmov	s0, r3
 8003156:	f7fe fb83 	bl	8001860 <mileage>
 800315a:	eeb0 7a40 	vmov.f32	s14, s0
 800315e:	4b84      	ldr	r3, [pc, #528]	; (8003370 <main+0x614>)
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316c:	db03      	blt.n	8003176 <main+0x41a>
 800316e:	4b84      	ldr	r3, [pc, #528]	; (8003380 <main+0x624>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d09c      	beq.n	80030b0 <main+0x354>
			}

			if(maker_check >= 8 && timer >= 1000) { //goal_maler_check
 8003176:	4b83      	ldr	r3, [pc, #524]	; (8003384 <main+0x628>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b07      	cmp	r3, #7
 800317c:	f240 84aa 	bls.w	8003ad4 <main+0xd78>
 8003180:	4b81      	ldr	r3, [pc, #516]	; (8003388 <main+0x62c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003188:	f2c0 84a4 	blt.w	8003ad4 <main+0xd78>
					tim_buf = timer;
					led_pattern(4);
					enc_cnt = 0;
					main_pattern = 14;
				}*/
				flash_flag = 0;
 800318c:	4b7f      	ldr	r3, [pc, #508]	; (800338c <main+0x630>)
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
				tim_buf = timer;
 8003192:	4b7d      	ldr	r3, [pc, #500]	; (8003388 <main+0x62c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	617b      	str	r3, [r7, #20]
				led_pattern(4);
 8003198:	2004      	movs	r0, #4
 800319a:	f001 faff 	bl	800479c <led_pattern>
				enc_cnt = 0;
 800319e:	4a72      	ldr	r2, [pc, #456]	; (8003368 <main+0x60c>)
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	f04f 0400 	mov.w	r4, #0
 80031a8:	e9c2 3400 	strd	r3, r4, [r2]
				main_pattern++;
 80031ac:	4b6f      	ldr	r3, [pc, #444]	; (800336c <main+0x610>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	3301      	adds	r3, #1
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	4b6d      	ldr	r3, [pc, #436]	; (800336c <main+0x610>)
 80031b6:	701a      	strb	r2, [r3, #0]
				timer = 0;
 80031b8:	4b73      	ldr	r3, [pc, #460]	; (8003388 <main+0x62c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
			}

			break;
 80031be:	f000 bc89 	b.w	8003ad4 <main+0xd78>
		case 14:	//goal
			led_pattern(7);
 80031c2:	2007      	movs	r0, #7
 80031c4:	f001 faea 	bl	800479c <led_pattern>
			//target_vel = END_VELOCITY;
			if(second_trace_pattern == 1) target_vel = END_VELOCITY;
 80031c8:	4b71      	ldr	r3, [pc, #452]	; (8003390 <main+0x634>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d103      	bne.n	80031d8 <main+0x47c>
 80031d0:	4b69      	ldr	r3, [pc, #420]	; (8003378 <main+0x61c>)
 80031d2:	4a70      	ldr	r2, [pc, #448]	; (8003394 <main+0x638>)
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e00a      	b.n	80031ee <main+0x492>
			else if(second_trace_pattern == 2) target_vel = END_VELOCITY2;
 80031d8:	4b6d      	ldr	r3, [pc, #436]	; (8003390 <main+0x634>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d103      	bne.n	80031e8 <main+0x48c>
 80031e0:	4b65      	ldr	r3, [pc, #404]	; (8003378 <main+0x61c>)
 80031e2:	4a6d      	ldr	r2, [pc, #436]	; (8003398 <main+0x63c>)
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e002      	b.n	80031ee <main+0x492>
			else target_vel = 1000.0f;
 80031e8:	4b63      	ldr	r3, [pc, #396]	; (8003378 <main+0x61c>)
 80031ea:	4a6a      	ldr	r2, [pc, #424]	; (8003394 <main+0x638>)
 80031ec:	601a      	str	r2, [r3, #0]

			if (mileage((float)enc_cnt) >= 400) {
 80031ee:	4b5e      	ldr	r3, [pc, #376]	; (8003368 <main+0x60c>)
 80031f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031f4:	4618      	mov	r0, r3
 80031f6:	4621      	mov	r1, r4
 80031f8:	f7fd fe16 	bl	8000e28 <__aeabi_l2f>
 80031fc:	4603      	mov	r3, r0
 80031fe:	ee00 3a10 	vmov	s0, r3
 8003202:	f7fe fb2d 	bl	8001860 <mileage>
 8003206:	eeb0 7a40 	vmov.f32	s14, s0
 800320a:	eddf 7a64 	vldr	s15, [pc, #400]	; 800339c <main+0x640>
 800320e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003216:	da01      	bge.n	800321c <main+0x4c0>
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
				led_pattern(7);
				main_pattern = 20;
			}
			break;
 8003218:	f000 bc60 	b.w	8003adc <main+0xd80>
				target_vel = 0.0f;
 800321c:	4b56      	ldr	r3, [pc, #344]	; (8003378 <main+0x61c>)
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8003224:	4b5e      	ldr	r3, [pc, #376]	; (80033a0 <main+0x644>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 800322c:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <main+0x644>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2200      	movs	r2, #0
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
				led_pattern(7);
 8003234:	2007      	movs	r0, #7
 8003236:	f001 fab1 	bl	800479c <led_pattern>
				main_pattern = 20;
 800323a:	4b4c      	ldr	r3, [pc, #304]	; (800336c <main+0x610>)
 800323c:	2214      	movs	r2, #20
 800323e:	701a      	strb	r2, [r3, #0]
			break;
 8003240:	f000 bc4c 	b.w	8003adc <main+0xd80>
		case 20:
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8003244:	4b56      	ldr	r3, [pc, #344]	; (80033a0 <main+0x644>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2200      	movs	r2, #0
 800324a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 800324c:	4b54      	ldr	r3, [pc, #336]	; (80033a0 <main+0x644>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2200      	movs	r2, #0
 8003252:	639a      	str	r2, [r3, #56]	; 0x38
			lcd_locate(0,0);
 8003254:	2100      	movs	r1, #0
 8003256:	2000      	movs	r0, #0
 8003258:	f7fe f8a7 	bl	80013aa <lcd_locate>
			lcd_printf("%8d",tim_buf);
 800325c:	6979      	ldr	r1, [r7, #20]
 800325e:	4851      	ldr	r0, [pc, #324]	; (80033a4 <main+0x648>)
 8003260:	f7fe f8cd 	bl	80013fe <lcd_printf>
			lcd_locate(0,1);
 8003264:	2101      	movs	r1, #1
 8003266:	2000      	movs	r0, #0
 8003268:	f7fe f89f 	bl	80013aa <lcd_locate>
			lcd_printf("%f",mileage((float)(enc_tim1_total + enc_tim8_total) / 2.0f));
 800326c:	4b4e      	ldr	r3, [pc, #312]	; (80033a8 <main+0x64c>)
 800326e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003272:	4b4e      	ldr	r3, [pc, #312]	; (80033ac <main+0x650>)
 8003274:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8003278:	eb1b 0301 	adds.w	r3, fp, r1
 800327c:	eb4c 0402 	adc.w	r4, ip, r2
 8003280:	4618      	mov	r0, r3
 8003282:	4621      	mov	r1, r4
 8003284:	f7fd fdd0 	bl	8000e28 <__aeabi_l2f>
 8003288:	ee06 0a90 	vmov	s13, r0
 800328c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8003290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003294:	eeb0 0a47 	vmov.f32	s0, s14
 8003298:	f7fe fae2 	bl	8001860 <mileage>
 800329c:	ee10 3a10 	vmov	r3, s0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd f951 	bl	8000548 <__aeabi_f2d>
 80032a6:	4603      	mov	r3, r0
 80032a8:	460c      	mov	r4, r1
 80032aa:	461a      	mov	r2, r3
 80032ac:	4623      	mov	r3, r4
 80032ae:	4840      	ldr	r0, [pc, #256]	; (80033b0 <main+0x654>)
 80032b0:	f7fe f8a5 	bl	80013fe <lcd_printf>
			if( second_trace_flag == 0 ) main_pattern++;
 80032b4:	4b32      	ldr	r3, [pc, #200]	; (8003380 <main+0x624>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d105      	bne.n	80032c8 <main+0x56c>
 80032bc:	4b2b      	ldr	r3, [pc, #172]	; (800336c <main+0x610>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	4b29      	ldr	r3, [pc, #164]	; (800336c <main+0x610>)
 80032c6:	701a      	strb	r2, [r3, #0]
			end_log_adress = log_adress;
 80032c8:	4b26      	ldr	r3, [pc, #152]	; (8003364 <main+0x608>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60bb      	str	r3, [r7, #8]
			break;
 80032ce:	f000 bc05 	b.w	8003adc <main+0xd80>
		case 21:
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 80032d2:	4b33      	ldr	r3, [pc, #204]	; (80033a0 <main+0x644>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 80032da:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <main+0x644>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2200      	movs	r2, #0
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
			led_pattern(1);
 80032e2:	2001      	movs	r0, #1
 80032e4:	f001 fa5a 	bl	800479c <led_pattern>

			for(log_cmp = 0; log_cmp < log_array ;log_cmp++){
 80032e8:	2300      	movs	r3, #0
 80032ea:	827b      	strh	r3, [r7, #18]
 80032ec:	e011      	b.n	8003312 <main+0x5b6>
				PlanVelo2[log_cmp] = PlanVelo[log_cmp];
 80032ee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80032f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80032f6:	492f      	ldr	r1, [pc, #188]	; (80033b4 <main+0x658>)
 80032f8:	0092      	lsls	r2, r2, #2
 80032fa:	440a      	add	r2, r1
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	492e      	ldr	r1, [pc, #184]	; (80033b8 <main+0x65c>)
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	601a      	str	r2, [r3, #0]
			for(log_cmp = 0; log_cmp < log_array ;log_cmp++){
 8003306:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800330a:	b29b      	uxth	r3, r3
 800330c:	3301      	adds	r3, #1
 800330e:	b29b      	uxth	r3, r3
 8003310:	827b      	strh	r3, [r7, #18]
 8003312:	4b2a      	ldr	r3, [pc, #168]	; (80033bc <main+0x660>)
 8003314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003318:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800331c:	429a      	cmp	r2, r3
 800331e:	dbe6      	blt.n	80032ee <main+0x592>
			}

			for(log_cmp = 0; log_cmp < log_array ;log_cmp++) {
 8003320:	2300      	movs	r3, #0
 8003322:	827b      	strh	r3, [r7, #18]
 8003324:	e070      	b.n	8003408 <main+0x6ac>
				log_buf = PlanVelo[log_cmp];
 8003326:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800332a:	4a22      	ldr	r2, [pc, #136]	; (80033b4 <main+0x658>)
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	607b      	str	r3, [r7, #4]
				spline_temp = Velo_Spline_Curve(log_buf);
 8003334:	ed97 0a01 	vldr	s0, [r7, #4]
 8003338:	f7fe fc42 	bl	8001bc0 <Velo_Spline_Curve>
 800333c:	ed87 0a00 	vstr	s0, [r7]
				if(spline_temp >= MAX_VELOCITY) PlanVelo[log_cmp] = MAX_VELOCITY;
 8003340:	edd7 7a00 	vldr	s15, [r7]
 8003344:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80033c0 <main+0x664>
 8003348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003350:	db3c      	blt.n	80033cc <main+0x670>
 8003352:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003356:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <main+0x658>)
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	4a19      	ldr	r2, [pc, #100]	; (80033c4 <main+0x668>)
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e04c      	b.n	80033fc <main+0x6a0>
 8003362:	bf00      	nop
 8003364:	20000678 	.word	0x20000678
 8003368:	20000658 	.word	0x20000658
 800336c:	20000268 	.word	0x20000268
 8003370:	20000270 	.word	0x20000270
 8003374:	2000c23c 	.word	0x2000c23c
 8003378:	200006b4 	.word	0x200006b4
 800337c:	20000258 	.word	0x20000258
 8003380:	2000026e 	.word	0x2000026e
 8003384:	200006b8 	.word	0x200006b8
 8003388:	20000264 	.word	0x20000264
 800338c:	2000026b 	.word	0x2000026b
 8003390:	2000066c 	.word	0x2000066c
 8003394:	447a0000 	.word	0x447a0000
 8003398:	44af0000 	.word	0x44af0000
 800339c:	43c80000 	.word	0x43c80000
 80033a0:	200005c4 	.word	0x200005c4
 80033a4:	0800edc8 	.word	0x0800edc8
 80033a8:	20000248 	.word	0x20000248
 80033ac:	20000250 	.word	0x20000250
 80033b0:	0800edcc 	.word	0x0800edcc
 80033b4:	200006bc 	.word	0x200006bc
 80033b8:	2000647c 	.word	0x2000647c
 80033bc:	2000026c 	.word	0x2000026c
 80033c0:	45bb8000 	.word	0x45bb8000
 80033c4:	45bb8000 	.word	0x45bb8000
 80033c8:	44898000 	.word	0x44898000
				else if(spline_temp < MIN_VELOCITY) PlanVelo[log_cmp] = MIN_VELOCITY;
 80033cc:	edd7 7a00 	vldr	s15, [r7]
 80033d0:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80033c8 <main+0x66c>
 80033d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	d507      	bpl.n	80033ee <main+0x692>
 80033de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80033e2:	4aa1      	ldr	r2, [pc, #644]	; (8003668 <main+0x90c>)
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	4aa0      	ldr	r2, [pc, #640]	; (800366c <main+0x910>)
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	e006      	b.n	80033fc <main+0x6a0>
				else PlanVelo[log_cmp] = spline_temp;
 80033ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80033f2:	4a9d      	ldr	r2, [pc, #628]	; (8003668 <main+0x90c>)
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	601a      	str	r2, [r3, #0]
			for(log_cmp = 0; log_cmp < log_array ;log_cmp++) {
 80033fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003400:	b29b      	uxth	r3, r3
 8003402:	3301      	adds	r3, #1
 8003404:	b29b      	uxth	r3, r3
 8003406:	827b      	strh	r3, [r7, #18]
 8003408:	4b99      	ldr	r3, [pc, #612]	; (8003670 <main+0x914>)
 800340a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800340e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003412:	429a      	cmp	r2, r3
 8003414:	db87      	blt.n	8003326 <main+0x5ca>
			}

			for(log_cmp = 0; log_cmp < log_array ;log_cmp++) {
 8003416:	2300      	movs	r3, #0
 8003418:	827b      	strh	r3, [r7, #18]
 800341a:	e03b      	b.n	8003494 <main+0x738>
				log_buf = PlanVelo2[log_cmp];
 800341c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003420:	4a94      	ldr	r2, [pc, #592]	; (8003674 <main+0x918>)
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	607b      	str	r3, [r7, #4]
				spline_temp = Velo_Spline_Curve(log_buf);
 800342a:	ed97 0a01 	vldr	s0, [r7, #4]
 800342e:	f7fe fbc7 	bl	8001bc0 <Velo_Spline_Curve>
 8003432:	ed87 0a00 	vstr	s0, [r7]
				if(spline_temp >= MAX_VELOCITY2) PlanVelo2[log_cmp] = MAX_VELOCITY2;
 8003436:	edd7 7a00 	vldr	s15, [r7]
 800343a:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8003678 <main+0x91c>
 800343e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003446:	db07      	blt.n	8003458 <main+0x6fc>
 8003448:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800344c:	4a89      	ldr	r2, [pc, #548]	; (8003674 <main+0x918>)
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	4a8a      	ldr	r2, [pc, #552]	; (800367c <main+0x920>)
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e017      	b.n	8003488 <main+0x72c>
				else if(spline_temp < MIN_VELOCITY2) PlanVelo2[log_cmp] = MIN_VELOCITY2;
 8003458:	edd7 7a00 	vldr	s15, [r7]
 800345c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8003680 <main+0x924>
 8003460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003468:	d507      	bpl.n	800347a <main+0x71e>
 800346a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800346e:	4a81      	ldr	r2, [pc, #516]	; (8003674 <main+0x918>)
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	4a83      	ldr	r2, [pc, #524]	; (8003684 <main+0x928>)
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e006      	b.n	8003488 <main+0x72c>
				else PlanVelo2[log_cmp] = spline_temp;
 800347a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800347e:	4a7d      	ldr	r2, [pc, #500]	; (8003674 <main+0x918>)
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	601a      	str	r2, [r3, #0]
			for(log_cmp = 0; log_cmp < log_array ;log_cmp++) {
 8003488:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800348c:	b29b      	uxth	r3, r3
 800348e:	3301      	adds	r3, #1
 8003490:	b29b      	uxth	r3, r3
 8003492:	827b      	strh	r3, [r7, #18]
 8003494:	4b76      	ldr	r3, [pc, #472]	; (8003670 <main+0x914>)
 8003496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800349a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800349e:	429a      	cmp	r2, r3
 80034a0:	dbbc      	blt.n	800341c <main+0x6c0>
			}

			log_adress = start_adress_sector7;
 80034a2:	4b79      	ldr	r3, [pc, #484]	; (8003688 <main+0x92c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a79      	ldr	r2, [pc, #484]	; (800368c <main+0x930>)
 80034a8:	6013      	str	r3, [r2, #0]
			log_adress += 0x04;
 80034aa:	4b78      	ldr	r3, [pc, #480]	; (800368c <main+0x930>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4a76      	ldr	r2, [pc, #472]	; (800368c <main+0x930>)
 80034b2:	6013      	str	r3, [r2, #0]

			for(log_cmp = 0; log_cmp < log_array ;log_cmp++) {
 80034b4:	2300      	movs	r3, #0
 80034b6:	827b      	strh	r3, [r7, #18]
 80034b8:	e085      	b.n	80035c6 <main+0x86a>
				mm_buf = *(float*)log_adress;
 80034ba:	4b74      	ldr	r3, [pc, #464]	; (800368c <main+0x930>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60fb      	str	r3, [r7, #12]
				if(log_cmp == 0) {
 80034c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d133      	bne.n	8003532 <main+0x7d6>
					if( PlanVelo[log_cmp] > sqrtf( 2.0f * ACCELERATION * mm_buf ) + START_VELOCITY ) PlanVelo[log_cmp] = sqrtf( 2.0f * ACCELERATION * mm_buf ) + START_VELOCITY;
 80034ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80034ce:	4a66      	ldr	r2, [pc, #408]	; (8003668 <main+0x90c>)
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	ed93 8a00 	vldr	s16, [r3]
 80034d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80034dc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80034e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034e4:	eeb0 0a67 	vmov.f32	s0, s15
 80034e8:	f00a ffce 	bl	800e488 <sqrtf>
 80034ec:	eeb0 7a40 	vmov.f32	s14, s0
 80034f0:	eddf 7a67 	vldr	s15, [pc, #412]	; 8003690 <main+0x934>
 80034f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80034fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003500:	dd56      	ble.n	80035b0 <main+0x854>
 8003502:	edd7 7a03 	vldr	s15, [r7, #12]
 8003506:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800350a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800350e:	eeb0 0a67 	vmov.f32	s0, s15
 8003512:	f00a ffb9 	bl	800e488 <sqrtf>
 8003516:	eeb0 7a40 	vmov.f32	s14, s0
 800351a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800351e:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8003690 <main+0x934>
 8003522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003526:	4a50      	ldr	r2, [pc, #320]	; (8003668 <main+0x90c>)
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	edc3 7a00 	vstr	s15, [r3]
 8003530:	e03e      	b.n	80035b0 <main+0x854>
				}
				else {
					if( PlanVelo[log_cmp] > sqrtf( 2.0f * ACCELERATION * mm_buf ) + PlanVelo[log_cmp - 1] ) PlanVelo[log_cmp] = sqrtf( 2.0f * ACCELERATION * mm_buf ) + PlanVelo[log_cmp - 1];
 8003532:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003536:	4a4c      	ldr	r2, [pc, #304]	; (8003668 <main+0x90c>)
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	ed93 8a00 	vldr	s16, [r3]
 8003540:	edd7 7a03 	vldr	s15, [r7, #12]
 8003544:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800354c:	eeb0 0a67 	vmov.f32	s0, s15
 8003550:	f00a ff9a 	bl	800e488 <sqrtf>
 8003554:	eeb0 7a40 	vmov.f32	s14, s0
 8003558:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800355c:	3b01      	subs	r3, #1
 800355e:	4a42      	ldr	r2, [pc, #264]	; (8003668 <main+0x90c>)
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800356c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003574:	dd1c      	ble.n	80035b0 <main+0x854>
 8003576:	edd7 7a03 	vldr	s15, [r7, #12]
 800357a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800357e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003582:	eeb0 0a67 	vmov.f32	s0, s15
 8003586:	f00a ff7f 	bl	800e488 <sqrtf>
 800358a:	eeb0 7a40 	vmov.f32	s14, s0
 800358e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003592:	3b01      	subs	r3, #1
 8003594:	4a34      	ldr	r2, [pc, #208]	; (8003668 <main+0x90c>)
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	edd3 7a00 	vldr	s15, [r3]
 800359e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80035a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a6:	4a30      	ldr	r2, [pc, #192]	; (8003668 <main+0x90c>)
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	edc3 7a00 	vstr	s15, [r3]
				}

				log_adress += 0x08;
 80035b0:	4b36      	ldr	r3, [pc, #216]	; (800368c <main+0x930>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3308      	adds	r3, #8
 80035b6:	4a35      	ldr	r2, [pc, #212]	; (800368c <main+0x930>)
 80035b8:	6013      	str	r3, [r2, #0]
			for(log_cmp = 0; log_cmp < log_array ;log_cmp++) {
 80035ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	827b      	strh	r3, [r7, #18]
 80035c6:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <main+0x914>)
 80035c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035cc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	f6ff af72 	blt.w	80034ba <main+0x75e>

			}

			log_adress = start_adress_sector7;
 80035d6:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <main+0x92c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a2c      	ldr	r2, [pc, #176]	; (800368c <main+0x930>)
 80035dc:	6013      	str	r3, [r2, #0]
			log_adress += 0x04;
 80035de:	4b2b      	ldr	r3, [pc, #172]	; (800368c <main+0x930>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4a29      	ldr	r2, [pc, #164]	; (800368c <main+0x930>)
 80035e6:	6013      	str	r3, [r2, #0]

			for(log_cmp = 0; log_cmp < log_array ;log_cmp++) {
 80035e8:	2300      	movs	r3, #0
 80035ea:	827b      	strh	r3, [r7, #18]
 80035ec:	e09e      	b.n	800372c <main+0x9d0>
				mm_buf = *(float*)log_adress;
 80035ee:	4b27      	ldr	r3, [pc, #156]	; (800368c <main+0x930>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
				if(log_cmp == 0) {
 80035f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d14c      	bne.n	8003698 <main+0x93c>
					if( PlanVelo2[log_cmp] > sqrtf( 2.0f * ACCELERATION2 * mm_buf ) + START_VELOCITY2 ) PlanVelo2[log_cmp] = sqrtf( 2.0f * ACCELERATION2 * mm_buf ) + START_VELOCITY2;
 80035fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003602:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <main+0x918>)
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	ed93 8a00 	vldr	s16, [r3]
 800360c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003610:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003694 <main+0x938>
 8003614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003618:	eeb0 0a67 	vmov.f32	s0, s15
 800361c:	f00a ff34 	bl	800e488 <sqrtf>
 8003620:	eeb0 7a40 	vmov.f32	s14, s0
 8003624:	eddf 7a16 	vldr	s15, [pc, #88]	; 8003680 <main+0x924>
 8003628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003634:	dd6f      	ble.n	8003716 <main+0x9ba>
 8003636:	edd7 7a03 	vldr	s15, [r7, #12]
 800363a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003694 <main+0x938>
 800363e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003642:	eeb0 0a67 	vmov.f32	s0, s15
 8003646:	f00a ff1f 	bl	800e488 <sqrtf>
 800364a:	eeb0 7a40 	vmov.f32	s14, s0
 800364e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003652:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003680 <main+0x924>
 8003656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800365a:	4a06      	ldr	r2, [pc, #24]	; (8003674 <main+0x918>)
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	edc3 7a00 	vstr	s15, [r3]
 8003664:	e057      	b.n	8003716 <main+0x9ba>
 8003666:	bf00      	nop
 8003668:	200006bc 	.word	0x200006bc
 800366c:	44898000 	.word	0x44898000
 8003670:	2000026c 	.word	0x2000026c
 8003674:	2000647c 	.word	0x2000647c
 8003678:	45dac000 	.word	0x45dac000
 800367c:	45dac000 	.word	0x45dac000
 8003680:	44a28000 	.word	0x44a28000
 8003684:	44a28000 	.word	0x44a28000
 8003688:	0800edf8 	.word	0x0800edf8
 800368c:	20000678 	.word	0x20000678
 8003690:	44898000 	.word	0x44898000
 8003694:	42200000 	.word	0x42200000
				}
				else {
					if( PlanVelo2[log_cmp] > sqrtf( 2.0f * ACCELERATION2 * mm_buf ) + PlanVelo2[log_cmp - 1] ) PlanVelo2[log_cmp] = sqrtf( 2.0f * ACCELERATION2 * mm_buf ) + PlanVelo2[log_cmp - 1];
 8003698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800369c:	4ab5      	ldr	r2, [pc, #724]	; (8003974 <main+0xc18>)
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	ed93 8a00 	vldr	s16, [r3]
 80036a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80036aa:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8003978 <main+0xc1c>
 80036ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036b2:	eeb0 0a67 	vmov.f32	s0, s15
 80036b6:	f00a fee7 	bl	800e488 <sqrtf>
 80036ba:	eeb0 7a40 	vmov.f32	s14, s0
 80036be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	4aab      	ldr	r2, [pc, #684]	; (8003974 <main+0xc18>)
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	edd3 7a00 	vldr	s15, [r3]
 80036ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80036d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036da:	dd1c      	ble.n	8003716 <main+0x9ba>
 80036dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80036e0:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8003978 <main+0xc1c>
 80036e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e8:	eeb0 0a67 	vmov.f32	s0, s15
 80036ec:	f00a fecc 	bl	800e488 <sqrtf>
 80036f0:	eeb0 7a40 	vmov.f32	s14, s0
 80036f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	4a9e      	ldr	r2, [pc, #632]	; (8003974 <main+0xc18>)
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	edd3 7a00 	vldr	s15, [r3]
 8003704:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800370c:	4a99      	ldr	r2, [pc, #612]	; (8003974 <main+0xc18>)
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	edc3 7a00 	vstr	s15, [r3]
				}

				log_adress += 0x08;
 8003716:	4b99      	ldr	r3, [pc, #612]	; (800397c <main+0xc20>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3308      	adds	r3, #8
 800371c:	4a97      	ldr	r2, [pc, #604]	; (800397c <main+0xc20>)
 800371e:	6013      	str	r3, [r2, #0]
			for(log_cmp = 0; log_cmp < log_array ;log_cmp++) {
 8003720:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003724:	b29b      	uxth	r3, r3
 8003726:	3301      	adds	r3, #1
 8003728:	b29b      	uxth	r3, r3
 800372a:	827b      	strh	r3, [r7, #18]
 800372c:	4b94      	ldr	r3, [pc, #592]	; (8003980 <main+0xc24>)
 800372e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003732:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003736:	429a      	cmp	r2, r3
 8003738:	f6ff af59 	blt.w	80035ee <main+0x892>

			}

			log_adress = end_log_adress;
 800373c:	4a8f      	ldr	r2, [pc, #572]	; (800397c <main+0xc20>)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6013      	str	r3, [r2, #0]
			log_adress -= 0x04;
 8003742:	4b8e      	ldr	r3, [pc, #568]	; (800397c <main+0xc20>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3b04      	subs	r3, #4
 8003748:	4a8c      	ldr	r2, [pc, #560]	; (800397c <main+0xc20>)
 800374a:	6013      	str	r3, [r2, #0]

			for(log_cmp = log_array - 1; log_cmp >= 0 ;log_cmp--) {
 800374c:	4b8c      	ldr	r3, [pc, #560]	; (8003980 <main+0xc24>)
 800374e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29b      	uxth	r3, r3
 8003758:	827b      	strh	r3, [r7, #18]
 800375a:	e077      	b.n	800384c <main+0xaf0>

				if(log_cmp != log_array - 1) mm_buf = *(float*)log_adress;
 800375c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003760:	4b87      	ldr	r3, [pc, #540]	; (8003980 <main+0xc24>)
 8003762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003766:	3b01      	subs	r3, #1
 8003768:	429a      	cmp	r2, r3
 800376a:	d003      	beq.n	8003774 <main+0xa18>
 800376c:	4b83      	ldr	r3, [pc, #524]	; (800397c <main+0xc20>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]

				if(log_cmp == log_array - 1) {
 8003774:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003778:	4b81      	ldr	r3, [pc, #516]	; (8003980 <main+0xc24>)
 800377a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800377e:	3b01      	subs	r3, #1
 8003780:	429a      	cmp	r2, r3
 8003782:	d119      	bne.n	80037b8 <main+0xa5c>
					if( END_VELOCITY < PlanVelo[log_cmp] - sqrtf( 2.0f * DECELERATION * END_DISTANCE ) ) PlanVelo[log_cmp] = END_VELOCITY + sqrtf( 2.0f * DECELERATION * END_DISTANCE ) ;
 8003784:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003788:	4a7e      	ldr	r2, [pc, #504]	; (8003984 <main+0xc28>)
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8003988 <main+0xc2c>
 8003796:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800379a:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800398c <main+0xc30>
 800379e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a6:	dd46      	ble.n	8003836 <main+0xada>
 80037a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80037ac:	4a75      	ldr	r2, [pc, #468]	; (8003984 <main+0xc28>)
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	4a77      	ldr	r2, [pc, #476]	; (8003990 <main+0xc34>)
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e03e      	b.n	8003836 <main+0xada>
				}
				else{
					if( PlanVelo[log_cmp + 1] < PlanVelo[log_cmp] - sqrtf( 2.0f * DECELERATION * mm_buf ) ) PlanVelo[log_cmp] = PlanVelo[log_cmp + 1] + sqrtf( 2.0f * DECELERATION * mm_buf );
 80037b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80037bc:	3301      	adds	r3, #1
 80037be:	4a71      	ldr	r2, [pc, #452]	; (8003984 <main+0xc28>)
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	ed93 8a00 	vldr	s16, [r3]
 80037c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80037cc:	4a6d      	ldr	r2, [pc, #436]	; (8003984 <main+0xc28>)
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	edd3 8a00 	vldr	s17, [r3]
 80037d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80037da:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80037de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037e2:	eeb0 0a67 	vmov.f32	s0, s15
 80037e6:	f00a fe4f 	bl	800e488 <sqrtf>
 80037ea:	eef0 7a40 	vmov.f32	s15, s0
 80037ee:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80037f2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80037f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fa:	d51c      	bpl.n	8003836 <main+0xada>
 80037fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003800:	3301      	adds	r3, #1
 8003802:	4a60      	ldr	r2, [pc, #384]	; (8003984 <main+0xc28>)
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	ed93 8a00 	vldr	s16, [r3]
 800380c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003810:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003818:	eeb0 0a67 	vmov.f32	s0, s15
 800381c:	f00a fe34 	bl	800e488 <sqrtf>
 8003820:	eef0 7a40 	vmov.f32	s15, s0
 8003824:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003828:	ee78 7a27 	vadd.f32	s15, s16, s15
 800382c:	4a55      	ldr	r2, [pc, #340]	; (8003984 <main+0xc28>)
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	edc3 7a00 	vstr	s15, [r3]
				}

				log_adress -= 0x08;
 8003836:	4b51      	ldr	r3, [pc, #324]	; (800397c <main+0xc20>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3b08      	subs	r3, #8
 800383c:	4a4f      	ldr	r2, [pc, #316]	; (800397c <main+0xc20>)
 800383e:	6013      	str	r3, [r2, #0]
			for(log_cmp = log_array - 1; log_cmp >= 0 ;log_cmp--) {
 8003840:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29b      	uxth	r3, r3
 800384a:	827b      	strh	r3, [r7, #18]
 800384c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003850:	2b00      	cmp	r3, #0
 8003852:	da83      	bge.n	800375c <main+0xa00>
			}

			log_adress = end_log_adress;
 8003854:	4a49      	ldr	r2, [pc, #292]	; (800397c <main+0xc20>)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6013      	str	r3, [r2, #0]
			log_adress -= 0x04;
 800385a:	4b48      	ldr	r3, [pc, #288]	; (800397c <main+0xc20>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3b04      	subs	r3, #4
 8003860:	4a46      	ldr	r2, [pc, #280]	; (800397c <main+0xc20>)
 8003862:	6013      	str	r3, [r2, #0]

			for(log_cmp = log_array - 1; log_cmp >= 0 ;log_cmp--) {
 8003864:	4b46      	ldr	r3, [pc, #280]	; (8003980 <main+0xc24>)
 8003866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29b      	uxth	r3, r3
 8003870:	827b      	strh	r3, [r7, #18]
 8003872:	e077      	b.n	8003964 <main+0xc08>

				if(log_cmp != log_array - 1) mm_buf = *(float*)log_adress;
 8003874:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003878:	4b41      	ldr	r3, [pc, #260]	; (8003980 <main+0xc24>)
 800387a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800387e:	3b01      	subs	r3, #1
 8003880:	429a      	cmp	r2, r3
 8003882:	d003      	beq.n	800388c <main+0xb30>
 8003884:	4b3d      	ldr	r3, [pc, #244]	; (800397c <main+0xc20>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

				if(log_cmp == log_array - 1) {
 800388c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003890:	4b3b      	ldr	r3, [pc, #236]	; (8003980 <main+0xc24>)
 8003892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003896:	3b01      	subs	r3, #1
 8003898:	429a      	cmp	r2, r3
 800389a:	d119      	bne.n	80038d0 <main+0xb74>
					if( END_VELOCITY2 < PlanVelo2[log_cmp] - sqrtf( 2.0f * DECELERATION2 * END_DISTANCE2 ) ) PlanVelo2[log_cmp] = END_VELOCITY2 + sqrtf( 2.0f * DECELERATION2 * END_DISTANCE2 ) ;
 800389c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80038a0:	4a34      	ldr	r2, [pc, #208]	; (8003974 <main+0xc18>)
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	edd3 7a00 	vldr	s15, [r3]
 80038aa:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003994 <main+0xc38>
 80038ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80038b2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003998 <main+0xc3c>
 80038b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038be:	dd46      	ble.n	800394e <main+0xbf2>
 80038c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80038c4:	4a2b      	ldr	r2, [pc, #172]	; (8003974 <main+0xc18>)
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	4a34      	ldr	r2, [pc, #208]	; (800399c <main+0xc40>)
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e03e      	b.n	800394e <main+0xbf2>
				}
				else{
					if( PlanVelo2[log_cmp + 1] < PlanVelo2[log_cmp] - sqrtf( 2.0f * DECELERATION2 * mm_buf ) ) PlanVelo2[log_cmp] = PlanVelo2[log_cmp + 1] + sqrtf( 2.0f * DECELERATION2 * mm_buf );
 80038d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80038d4:	3301      	adds	r3, #1
 80038d6:	4a27      	ldr	r2, [pc, #156]	; (8003974 <main+0xc18>)
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	ed93 8a00 	vldr	s16, [r3]
 80038e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80038e4:	4a23      	ldr	r2, [pc, #140]	; (8003974 <main+0xc18>)
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	edd3 8a00 	vldr	s17, [r3]
 80038ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80038f2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003978 <main+0xc1c>
 80038f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038fa:	eeb0 0a67 	vmov.f32	s0, s15
 80038fe:	f00a fdc3 	bl	800e488 <sqrtf>
 8003902:	eef0 7a40 	vmov.f32	s15, s0
 8003906:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800390a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800390e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003912:	d51c      	bpl.n	800394e <main+0xbf2>
 8003914:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003918:	3301      	adds	r3, #1
 800391a:	4a16      	ldr	r2, [pc, #88]	; (8003974 <main+0xc18>)
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	ed93 8a00 	vldr	s16, [r3]
 8003924:	edd7 7a03 	vldr	s15, [r7, #12]
 8003928:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003978 <main+0xc1c>
 800392c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003930:	eeb0 0a67 	vmov.f32	s0, s15
 8003934:	f00a fda8 	bl	800e488 <sqrtf>
 8003938:	eef0 7a40 	vmov.f32	s15, s0
 800393c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003940:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003944:	4a0b      	ldr	r2, [pc, #44]	; (8003974 <main+0xc18>)
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	edc3 7a00 	vstr	s15, [r3]
				}

				log_adress -= 0x08;
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <main+0xc20>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3b08      	subs	r3, #8
 8003954:	4a09      	ldr	r2, [pc, #36]	; (800397c <main+0xc20>)
 8003956:	6013      	str	r3, [r2, #0]
			for(log_cmp = log_array - 1; log_cmp >= 0 ;log_cmp--) {
 8003958:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29b      	uxth	r3, r3
 8003962:	827b      	strh	r3, [r7, #18]
 8003964:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003968:	2b00      	cmp	r3, #0
 800396a:	da83      	bge.n	8003874 <main+0xb18>
			}

			for(log_cmp = 0; log_cmp < log_array; log_cmp++) {
 800396c:	2300      	movs	r3, #0
 800396e:	827b      	strh	r3, [r7, #18]
 8003970:	e02f      	b.n	80039d2 <main+0xc76>
 8003972:	bf00      	nop
 8003974:	2000647c 	.word	0x2000647c
 8003978:	42200000 	.word	0x42200000
 800397c:	20000678 	.word	0x20000678
 8003980:	2000026c 	.word	0x2000026c
 8003984:	200006bc 	.word	0x200006bc
 8003988:	428d6bde 	.word	0x428d6bde
 800398c:	447a0000 	.word	0x447a0000
 8003990:	4485d6be 	.word	0x4485d6be
 8003994:	42c80000 	.word	0x42c80000
 8003998:	44af0000 	.word	0x44af0000
 800399c:	44bb8000 	.word	0x44bb8000
				FLASH_Write_Word_F(plan_velo_adress, PlanVelo[log_cmp]);
 80039a0:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <main+0xd84>)
 80039a2:	6819      	ldr	r1, [r3, #0]
 80039a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80039a8:	4a4e      	ldr	r2, [pc, #312]	; (8003ae4 <main+0xd88>)
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	edd3 7a00 	vldr	s15, [r3]
 80039b2:	eeb0 0a67 	vmov.f32	s0, s15
 80039b6:	4608      	mov	r0, r1
 80039b8:	f7fd fdbe 	bl	8001538 <FLASH_Write_Word_F>
				plan_velo_adress += 0x04;
 80039bc:	4b48      	ldr	r3, [pc, #288]	; (8003ae0 <main+0xd84>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4a47      	ldr	r2, [pc, #284]	; (8003ae0 <main+0xd84>)
 80039c4:	6013      	str	r3, [r2, #0]
			for(log_cmp = 0; log_cmp < log_array; log_cmp++) {
 80039c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3301      	adds	r3, #1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	827b      	strh	r3, [r7, #18]
 80039d2:	4b45      	ldr	r3, [pc, #276]	; (8003ae8 <main+0xd8c>)
 80039d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039d8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80039dc:	429a      	cmp	r2, r3
 80039de:	dbdf      	blt.n	80039a0 <main+0xc44>
			}

			plan_velo_adress = start_adress_sector11;
 80039e0:	4b42      	ldr	r3, [pc, #264]	; (8003aec <main+0xd90>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a3e      	ldr	r2, [pc, #248]	; (8003ae0 <main+0xd84>)
 80039e6:	6013      	str	r3, [r2, #0]

			for(log_cmp = 0; log_cmp < log_array; log_cmp++) {
 80039e8:	2300      	movs	r3, #0
 80039ea:	827b      	strh	r3, [r7, #18]
 80039ec:	e018      	b.n	8003a20 <main+0xcc4>
				FLASH_Write_Word_F(plan_velo_adress, PlanVelo2[log_cmp]);
 80039ee:	4b3c      	ldr	r3, [pc, #240]	; (8003ae0 <main+0xd84>)
 80039f0:	6819      	ldr	r1, [r3, #0]
 80039f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80039f6:	4a3e      	ldr	r2, [pc, #248]	; (8003af0 <main+0xd94>)
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	edd3 7a00 	vldr	s15, [r3]
 8003a00:	eeb0 0a67 	vmov.f32	s0, s15
 8003a04:	4608      	mov	r0, r1
 8003a06:	f7fd fd97 	bl	8001538 <FLASH_Write_Word_F>
				plan_velo_adress += 0x04;
 8003a0a:	4b35      	ldr	r3, [pc, #212]	; (8003ae0 <main+0xd84>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	4a33      	ldr	r2, [pc, #204]	; (8003ae0 <main+0xd84>)
 8003a12:	6013      	str	r3, [r2, #0]
			for(log_cmp = 0; log_cmp < log_array; log_cmp++) {
 8003a14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	827b      	strh	r3, [r7, #18]
 8003a20:	4b31      	ldr	r3, [pc, #196]	; (8003ae8 <main+0xd8c>)
 8003a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a26:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	dbdf      	blt.n	80039ee <main+0xc92>
			}

			main_pattern++;
 8003a2e:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <main+0xd98>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	3301      	adds	r3, #1
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	4b2f      	ldr	r3, [pc, #188]	; (8003af4 <main+0xd98>)
 8003a38:	701a      	strb	r2, [r3, #0]
			led_pattern(3);
 8003a3a:	2003      	movs	r0, #3
 8003a3c:	f000 feae 	bl	800479c <led_pattern>
			break;
 8003a40:	e04c      	b.n	8003adc <main+0xd80>
		case 22:
			lcd_locate(0,0);
 8003a42:	2100      	movs	r1, #0
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7fd fcb0 	bl	80013aa <lcd_locate>
			lcd_print("_Finish_");
 8003a4a:	482b      	ldr	r0, [pc, #172]	; (8003af8 <main+0xd9c>)
 8003a4c:	f7fd fcc2 	bl	80013d4 <lcd_print>
			lcd_locate(0,1);
 8003a50:	2101      	movs	r1, #1
 8003a52:	2000      	movs	r0, #0
 8003a54:	f7fd fca9 	bl	80013aa <lcd_locate>
			lcd_printf("%f",mileage((float)(enc_tim1_total + enc_tim8_total) / 2.0f));
 8003a58:	4b28      	ldr	r3, [pc, #160]	; (8003afc <main+0xda0>)
 8003a5a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003a5e:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <main+0xda4>)
 8003a60:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8003a64:	eb1b 0301 	adds.w	r3, fp, r1
 8003a68:	eb4c 0402 	adc.w	r4, ip, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	4621      	mov	r1, r4
 8003a70:	f7fd f9da 	bl	8000e28 <__aeabi_l2f>
 8003a74:	ee06 0a90 	vmov	s13, r0
 8003a78:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8003a7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a80:	eeb0 0a47 	vmov.f32	s0, s14
 8003a84:	f7fd feec 	bl	8001860 <mileage>
 8003a88:	ee10 3a10 	vmov	r3, s0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fc fd5b 	bl	8000548 <__aeabi_f2d>
 8003a92:	4603      	mov	r3, r0
 8003a94:	460c      	mov	r4, r1
 8003a96:	461a      	mov	r2, r3
 8003a98:	4623      	mov	r3, r4
 8003a9a:	481a      	ldr	r0, [pc, #104]	; (8003b04 <main+0xda8>)
 8003a9c:	f7fd fcaf 	bl	80013fe <lcd_printf>
			if(sw_up_state == 1) {
 8003aa0:	4b19      	ldr	r3, [pc, #100]	; (8003b08 <main+0xdac>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d118      	bne.n	8003ada <main+0xd7e>
				main_pattern = 0;
 8003aa8:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <main+0xd98>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
				second_trace_flag = 1;
 8003aae:	4b17      	ldr	r3, [pc, #92]	; (8003b0c <main+0xdb0>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
				setup_mode = 0;
 8003ab4:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <main+0xdb4>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
				sw_up_state = 0;
 8003aba:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <main+0xdac>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003ac0:	e00b      	b.n	8003ada <main+0xd7e>
		default:
			break;
 8003ac2:	bf00      	nop
 8003ac4:	f7ff b972 	b.w	8002dac <main+0x50>
			break;
 8003ac8:	bf00      	nop
 8003aca:	f7ff b96f 	b.w	8002dac <main+0x50>
			break;
 8003ace:	bf00      	nop
 8003ad0:	f7ff b96c 	b.w	8002dac <main+0x50>
			break;
 8003ad4:	bf00      	nop
 8003ad6:	f7ff b969 	b.w	8002dac <main+0x50>
			break;
 8003ada:	bf00      	nop
	switch(main_pattern) {
 8003adc:	f7ff b966 	b.w	8002dac <main+0x50>
 8003ae0:	2000c23c 	.word	0x2000c23c
 8003ae4:	200006bc 	.word	0x200006bc
 8003ae8:	2000026c 	.word	0x2000026c
 8003aec:	0800ee04 	.word	0x0800ee04
 8003af0:	2000647c 	.word	0x2000647c
 8003af4:	20000268 	.word	0x20000268
 8003af8:	0800edd0 	.word	0x0800edd0
 8003afc:	20000248 	.word	0x20000248
 8003b00:	20000250 	.word	0x20000250
 8003b04:	0800edcc 	.word	0x0800edcc
 8003b08:	20000276 	.word	0x20000276
 8003b0c:	2000026e 	.word	0x2000026e
 8003b10:	20000274 	.word	0x20000274

08003b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b094      	sub	sp, #80	; 0x50
 8003b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b1a:	f107 0320 	add.w	r3, r7, #32
 8003b1e:	2230      	movs	r2, #48	; 0x30
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f006 fdf7 	bl	800a716 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b28:	f107 030c 	add.w	r3, r7, #12
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <SystemClock_Config+0xcc>)
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	4a27      	ldr	r2, [pc, #156]	; (8003be0 <SystemClock_Config+0xcc>)
 8003b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b46:	6413      	str	r3, [r2, #64]	; 0x40
 8003b48:	4b25      	ldr	r3, [pc, #148]	; (8003be0 <SystemClock_Config+0xcc>)
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b54:	2300      	movs	r3, #0
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	4b22      	ldr	r3, [pc, #136]	; (8003be4 <SystemClock_Config+0xd0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a21      	ldr	r2, [pc, #132]	; (8003be4 <SystemClock_Config+0xd0>)
 8003b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <SystemClock_Config+0xd0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b70:	2301      	movs	r3, #1
 8003b72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003b74:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003b84:	2306      	movs	r3, #6
 8003b86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003b88:	23a8      	movs	r3, #168	; 0xa8
 8003b8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003b90:	2304      	movs	r3, #4
 8003b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b94:	f107 0320 	add.w	r3, r7, #32
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f004 f9af 	bl	8007efc <HAL_RCC_OscConfig>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003ba4:	f000 fd22 	bl	80045ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ba8:	230f      	movs	r3, #15
 8003baa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bac:	2302      	movs	r3, #2
 8003bae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003bb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003bb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003bc0:	f107 030c 	add.w	r3, r7, #12
 8003bc4:	2105      	movs	r1, #5
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f004 fc08 	bl	80083dc <HAL_RCC_ClockConfig>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003bd2:	f000 fd0b 	bl	80045ec <Error_Handler>
  }
}
 8003bd6:	bf00      	nop
 8003bd8:	3750      	adds	r7, #80	; 0x50
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40007000 	.word	0x40007000

08003be8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003bee:	463b      	mov	r3, r7
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003bfa:	4b7c      	ldr	r3, [pc, #496]	; (8003dec <MX_ADC1_Init+0x204>)
 8003bfc:	4a7c      	ldr	r2, [pc, #496]	; (8003df0 <MX_ADC1_Init+0x208>)
 8003bfe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c00:	4b7a      	ldr	r3, [pc, #488]	; (8003dec <MX_ADC1_Init+0x204>)
 8003c02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c08:	4b78      	ldr	r3, [pc, #480]	; (8003dec <MX_ADC1_Init+0x204>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003c0e:	4b77      	ldr	r3, [pc, #476]	; (8003dec <MX_ADC1_Init+0x204>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003c14:	4b75      	ldr	r3, [pc, #468]	; (8003dec <MX_ADC1_Init+0x204>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c1a:	4b74      	ldr	r3, [pc, #464]	; (8003dec <MX_ADC1_Init+0x204>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c22:	4b72      	ldr	r3, [pc, #456]	; (8003dec <MX_ADC1_Init+0x204>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c28:	4b70      	ldr	r3, [pc, #448]	; (8003dec <MX_ADC1_Init+0x204>)
 8003c2a:	4a72      	ldr	r2, [pc, #456]	; (8003df4 <MX_ADC1_Init+0x20c>)
 8003c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c2e:	4b6f      	ldr	r3, [pc, #444]	; (8003dec <MX_ADC1_Init+0x204>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8003c34:	4b6d      	ldr	r3, [pc, #436]	; (8003dec <MX_ADC1_Init+0x204>)
 8003c36:	220e      	movs	r2, #14
 8003c38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003c3a:	4b6c      	ldr	r3, [pc, #432]	; (8003dec <MX_ADC1_Init+0x204>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c42:	4b6a      	ldr	r3, [pc, #424]	; (8003dec <MX_ADC1_Init+0x204>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c48:	4868      	ldr	r0, [pc, #416]	; (8003dec <MX_ADC1_Init+0x204>)
 8003c4a:	f001 fda5 	bl	8005798 <HAL_ADC_Init>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003c54:	f000 fcca 	bl	80045ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8003c60:	2302      	movs	r3, #2
 8003c62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c64:	463b      	mov	r3, r7
 8003c66:	4619      	mov	r1, r3
 8003c68:	4860      	ldr	r0, [pc, #384]	; (8003dec <MX_ADC1_Init+0x204>)
 8003c6a:	f001 fee9 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003c74:	f000 fcba 	bl	80045ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c80:	463b      	mov	r3, r7
 8003c82:	4619      	mov	r1, r3
 8003c84:	4859      	ldr	r0, [pc, #356]	; (8003dec <MX_ADC1_Init+0x204>)
 8003c86:	f001 fedb 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003c90:	f000 fcac 	bl	80045ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003c94:	2302      	movs	r3, #2
 8003c96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c9c:	463b      	mov	r3, r7
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4852      	ldr	r0, [pc, #328]	; (8003dec <MX_ADC1_Init+0x204>)
 8003ca2:	f001 fecd 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003cac:	f000 fc9e 	bl	80045ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cb8:	463b      	mov	r3, r7
 8003cba:	4619      	mov	r1, r3
 8003cbc:	484b      	ldr	r0, [pc, #300]	; (8003dec <MX_ADC1_Init+0x204>)
 8003cbe:	f001 febf 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003cc8:	f000 fc90 	bl	80045ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003ccc:	2304      	movs	r3, #4
 8003cce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003cd0:	2305      	movs	r3, #5
 8003cd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cd4:	463b      	mov	r3, r7
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4844      	ldr	r0, [pc, #272]	; (8003dec <MX_ADC1_Init+0x204>)
 8003cda:	f001 feb1 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8003ce4:	f000 fc82 	bl	80045ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003ce8:	2305      	movs	r3, #5
 8003cea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003cec:	2306      	movs	r3, #6
 8003cee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cf0:	463b      	mov	r3, r7
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	483d      	ldr	r0, [pc, #244]	; (8003dec <MX_ADC1_Init+0x204>)
 8003cf6:	f001 fea3 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8003d00:	f000 fc74 	bl	80045ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003d04:	2306      	movs	r3, #6
 8003d06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003d08:	2307      	movs	r3, #7
 8003d0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d0c:	463b      	mov	r3, r7
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4836      	ldr	r0, [pc, #216]	; (8003dec <MX_ADC1_Init+0x204>)
 8003d12:	f001 fe95 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8003d1c:	f000 fc66 	bl	80045ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003d20:	2307      	movs	r3, #7
 8003d22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003d24:	2308      	movs	r3, #8
 8003d26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d28:	463b      	mov	r3, r7
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	482f      	ldr	r0, [pc, #188]	; (8003dec <MX_ADC1_Init+0x204>)
 8003d2e:	f001 fe87 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8003d38:	f000 fc58 	bl	80045ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003d40:	2309      	movs	r3, #9
 8003d42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d44:	463b      	mov	r3, r7
 8003d46:	4619      	mov	r1, r3
 8003d48:	4828      	ldr	r0, [pc, #160]	; (8003dec <MX_ADC1_Init+0x204>)
 8003d4a:	f001 fe79 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8003d54:	f000 fc4a 	bl	80045ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003d58:	2309      	movs	r3, #9
 8003d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003d5c:	230a      	movs	r3, #10
 8003d5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d60:	463b      	mov	r3, r7
 8003d62:	4619      	mov	r1, r3
 8003d64:	4821      	ldr	r0, [pc, #132]	; (8003dec <MX_ADC1_Init+0x204>)
 8003d66:	f001 fe6b 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8003d70:	f000 fc3c 	bl	80045ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003d74:	230e      	movs	r3, #14
 8003d76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003d78:	230b      	movs	r3, #11
 8003d7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d7c:	463b      	mov	r3, r7
 8003d7e:	4619      	mov	r1, r3
 8003d80:	481a      	ldr	r0, [pc, #104]	; (8003dec <MX_ADC1_Init+0x204>)
 8003d82:	f001 fe5d 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8003d8c:	f000 fc2e 	bl	80045ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003d90:	230f      	movs	r3, #15
 8003d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003d94:	230c      	movs	r3, #12
 8003d96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d98:	463b      	mov	r3, r7
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4813      	ldr	r0, [pc, #76]	; (8003dec <MX_ADC1_Init+0x204>)
 8003d9e:	f001 fe4f 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8003da8:	f000 fc20 	bl	80045ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003dac:	230c      	movs	r3, #12
 8003dae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003db0:	230d      	movs	r3, #13
 8003db2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003db4:	463b      	mov	r3, r7
 8003db6:	4619      	mov	r1, r3
 8003db8:	480c      	ldr	r0, [pc, #48]	; (8003dec <MX_ADC1_Init+0x204>)
 8003dba:	f001 fe41 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8003dc4:	f000 fc12 	bl	80045ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003dc8:	230d      	movs	r3, #13
 8003dca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003dcc:	230e      	movs	r3, #14
 8003dce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003dd0:	463b      	mov	r3, r7
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4805      	ldr	r0, [pc, #20]	; (8003dec <MX_ADC1_Init+0x204>)
 8003dd6:	f001 fe33 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8003de0:	f000 fc04 	bl	80045ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	2000041c 	.word	0x2000041c
 8003df0:	40012000 	.word	0x40012000
 8003df4:	0f000001 	.word	0x0f000001

08003df8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003dfc:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003dfe:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <MX_I2C1_Init+0x54>)
 8003e00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e04:	4a12      	ldr	r2, [pc, #72]	; (8003e50 <MX_I2C1_Init+0x58>)
 8003e06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e08:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e0e:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e28:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e34:	4804      	ldr	r0, [pc, #16]	; (8003e48 <MX_I2C1_Init+0x50>)
 8003e36:	f003 f8d9 	bl	8006fec <HAL_I2C_Init>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003e40:	f000 fbd4 	bl	80045ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e44:	bf00      	nop
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	200002dc 	.word	0x200002dc
 8003e4c:	40005400 	.word	0x40005400
 8003e50:	00061a80 	.word	0x00061a80

08003e54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003e58:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e5a:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <MX_I2C2_Init+0x54>)
 8003e5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003e5e:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e60:	4a12      	ldr	r2, [pc, #72]	; (8003eac <MX_I2C2_Init+0x58>)
 8003e62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e64:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e84:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003e90:	4804      	ldr	r0, [pc, #16]	; (8003ea4 <MX_I2C2_Init+0x50>)
 8003e92:	f003 f8ab 	bl	8006fec <HAL_I2C_Init>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003e9c:	f000 fba6 	bl	80045ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003ea0:	bf00      	nop
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000330 	.word	0x20000330
 8003ea8:	40005800 	.word	0x40005800
 8003eac:	000186a0 	.word	0x000186a0

08003eb0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003eb4:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <MX_SPI3_Init+0x64>)
 8003eb6:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <MX_SPI3_Init+0x68>)
 8003eb8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003eba:	4b16      	ldr	r3, [pc, #88]	; (8003f14 <MX_SPI3_Init+0x64>)
 8003ebc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ec0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003ec2:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <MX_SPI3_Init+0x64>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ec8:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <MX_SPI3_Init+0x64>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003ece:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <MX_SPI3_Init+0x64>)
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <MX_SPI3_Init+0x64>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <MX_SPI3_Init+0x64>)
 8003edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ee0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003ee2:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <MX_SPI3_Init+0x64>)
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <MX_SPI3_Init+0x64>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <MX_SPI3_Init+0x64>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef4:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <MX_SPI3_Init+0x64>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <MX_SPI3_Init+0x64>)
 8003efc:	220a      	movs	r2, #10
 8003efe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003f00:	4804      	ldr	r0, [pc, #16]	; (8003f14 <MX_SPI3_Init+0x64>)
 8003f02:	f004 fc37 	bl	8008774 <HAL_SPI_Init>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003f0c:	f000 fb6e 	bl	80045ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003f10:	bf00      	nop
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	200003c4 	.word	0x200003c4
 8003f18:	40003c00 	.word	0x40003c00

08003f1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08c      	sub	sp, #48	; 0x30
 8003f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f22:	f107 030c 	add.w	r3, r7, #12
 8003f26:	2224      	movs	r2, #36	; 0x24
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f006 fbf3 	bl	800a716 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f30:	1d3b      	adds	r3, r7, #4
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f38:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <MX_TIM1_Init+0xa8>)
 8003f3a:	4a23      	ldr	r2, [pc, #140]	; (8003fc8 <MX_TIM1_Init+0xac>)
 8003f3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003f3e:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <MX_TIM1_Init+0xa8>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f44:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <MX_TIM1_Init+0xa8>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003f4a:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <MX_TIM1_Init+0xa8>)
 8003f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f52:	4b1c      	ldr	r3, [pc, #112]	; (8003fc4 <MX_TIM1_Init+0xa8>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <MX_TIM1_Init+0xa8>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5e:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <MX_TIM1_Init+0xa8>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f64:	2303      	movs	r3, #3
 8003f66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f80:	2300      	movs	r3, #0
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003f88:	f107 030c 	add.w	r3, r7, #12
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	480d      	ldr	r0, [pc, #52]	; (8003fc4 <MX_TIM1_Init+0xa8>)
 8003f90:	f005 f9fc 	bl	800938c <HAL_TIM_Encoder_Init>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003f9a:	f000 fb27 	bl	80045ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4806      	ldr	r0, [pc, #24]	; (8003fc4 <MX_TIM1_Init+0xa8>)
 8003fac:	f005 ff24 	bl	8009df8 <HAL_TIMEx_MasterConfigSynchronization>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003fb6:	f000 fb19 	bl	80045ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003fba:	bf00      	nop
 8003fbc:	3730      	adds	r7, #48	; 0x30
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000544 	.word	0x20000544
 8003fc8:	40010000 	.word	0x40010000

08003fcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	; 0x28
 8003fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fd2:	f107 0320 	add.w	r3, r7, #32
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fdc:	1d3b      	adds	r3, r7, #4
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	609a      	str	r2, [r3, #8]
 8003fe6:	60da      	str	r2, [r3, #12]
 8003fe8:	611a      	str	r2, [r3, #16]
 8003fea:	615a      	str	r2, [r3, #20]
 8003fec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fee:	4b22      	ldr	r3, [pc, #136]	; (8004078 <MX_TIM2_Init+0xac>)
 8003ff0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ff4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8003ff6:	4b20      	ldr	r3, [pc, #128]	; (8004078 <MX_TIM2_Init+0xac>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ffc:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <MX_TIM2_Init+0xac>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199;
 8004002:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <MX_TIM2_Init+0xac>)
 8004004:	f241 0267 	movw	r2, #4199	; 0x1067
 8004008:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800400a:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <MX_TIM2_Init+0xac>)
 800400c:	2200      	movs	r2, #0
 800400e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <MX_TIM2_Init+0xac>)
 8004012:	2200      	movs	r2, #0
 8004014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004016:	4818      	ldr	r0, [pc, #96]	; (8004078 <MX_TIM2_Init+0xac>)
 8004018:	f005 f94f 	bl	80092ba <HAL_TIM_PWM_Init>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8004022:	f000 fae3 	bl	80045ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004026:	2300      	movs	r3, #0
 8004028:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800402a:	2300      	movs	r3, #0
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800402e:	f107 0320 	add.w	r3, r7, #32
 8004032:	4619      	mov	r1, r3
 8004034:	4810      	ldr	r0, [pc, #64]	; (8004078 <MX_TIM2_Init+0xac>)
 8004036:	f005 fedf 	bl	8009df8 <HAL_TIMEx_MasterConfigSynchronization>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8004040:	f000 fad4 	bl	80045ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004044:	2360      	movs	r3, #96	; 0x60
 8004046:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004054:	1d3b      	adds	r3, r7, #4
 8004056:	2200      	movs	r2, #0
 8004058:	4619      	mov	r1, r3
 800405a:	4807      	ldr	r0, [pc, #28]	; (8004078 <MX_TIM2_Init+0xac>)
 800405c:	f005 fb68 	bl	8009730 <HAL_TIM_PWM_ConfigChannel>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8004066:	f000 fac1 	bl	80045ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800406a:	4803      	ldr	r0, [pc, #12]	; (8004078 <MX_TIM2_Init+0xac>)
 800406c:	f001 f936 	bl	80052dc <HAL_TIM_MspPostInit>

}
 8004070:	bf00      	nop
 8004072:	3728      	adds	r7, #40	; 0x28
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000584 	.word	0x20000584

0800407c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004082:	f107 0320 	add.w	r3, r7, #32
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800408c:	1d3b      	adds	r3, r7, #4
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	605a      	str	r2, [r3, #4]
 8004094:	609a      	str	r2, [r3, #8]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	611a      	str	r2, [r3, #16]
 800409a:	615a      	str	r2, [r3, #20]
 800409c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800409e:	4b32      	ldr	r3, [pc, #200]	; (8004168 <MX_TIM3_Init+0xec>)
 80040a0:	4a32      	ldr	r2, [pc, #200]	; (800416c <MX_TIM3_Init+0xf0>)
 80040a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80040a4:	4b30      	ldr	r3, [pc, #192]	; (8004168 <MX_TIM3_Init+0xec>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040aa:	4b2f      	ldr	r3, [pc, #188]	; (8004168 <MX_TIM3_Init+0xec>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4199;
 80040b0:	4b2d      	ldr	r3, [pc, #180]	; (8004168 <MX_TIM3_Init+0xec>)
 80040b2:	f241 0267 	movw	r2, #4199	; 0x1067
 80040b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <MX_TIM3_Init+0xec>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040be:	4b2a      	ldr	r3, [pc, #168]	; (8004168 <MX_TIM3_Init+0xec>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80040c4:	4828      	ldr	r0, [pc, #160]	; (8004168 <MX_TIM3_Init+0xec>)
 80040c6:	f005 f8f8 	bl	80092ba <HAL_TIM_PWM_Init>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80040d0:	f000 fa8c 	bl	80045ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040d4:	2300      	movs	r3, #0
 80040d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040d8:	2300      	movs	r3, #0
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040dc:	f107 0320 	add.w	r3, r7, #32
 80040e0:	4619      	mov	r1, r3
 80040e2:	4821      	ldr	r0, [pc, #132]	; (8004168 <MX_TIM3_Init+0xec>)
 80040e4:	f005 fe88 	bl	8009df8 <HAL_TIMEx_MasterConfigSynchronization>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80040ee:	f000 fa7d 	bl	80045ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040f2:	2360      	movs	r3, #96	; 0x60
 80040f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004102:	1d3b      	adds	r3, r7, #4
 8004104:	2200      	movs	r2, #0
 8004106:	4619      	mov	r1, r3
 8004108:	4817      	ldr	r0, [pc, #92]	; (8004168 <MX_TIM3_Init+0xec>)
 800410a:	f005 fb11 	bl	8009730 <HAL_TIM_PWM_ConfigChannel>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004114:	f000 fa6a 	bl	80045ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004118:	1d3b      	adds	r3, r7, #4
 800411a:	2204      	movs	r2, #4
 800411c:	4619      	mov	r1, r3
 800411e:	4812      	ldr	r0, [pc, #72]	; (8004168 <MX_TIM3_Init+0xec>)
 8004120:	f005 fb06 	bl	8009730 <HAL_TIM_PWM_ConfigChannel>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800412a:	f000 fa5f 	bl	80045ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800412e:	1d3b      	adds	r3, r7, #4
 8004130:	2208      	movs	r2, #8
 8004132:	4619      	mov	r1, r3
 8004134:	480c      	ldr	r0, [pc, #48]	; (8004168 <MX_TIM3_Init+0xec>)
 8004136:	f005 fafb 	bl	8009730 <HAL_TIM_PWM_ConfigChannel>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8004140:	f000 fa54 	bl	80045ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004144:	1d3b      	adds	r3, r7, #4
 8004146:	220c      	movs	r2, #12
 8004148:	4619      	mov	r1, r3
 800414a:	4807      	ldr	r0, [pc, #28]	; (8004168 <MX_TIM3_Init+0xec>)
 800414c:	f005 faf0 	bl	8009730 <HAL_TIM_PWM_ConfigChannel>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8004156:	f000 fa49 	bl	80045ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800415a:	4803      	ldr	r0, [pc, #12]	; (8004168 <MX_TIM3_Init+0xec>)
 800415c:	f001 f8be 	bl	80052dc <HAL_TIM_MspPostInit>

}
 8004160:	bf00      	nop
 8004162:	3728      	adds	r7, #40	; 0x28
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000384 	.word	0x20000384
 800416c:	40000400 	.word	0x40000400

08004170 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004176:	463b      	mov	r3, r7
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800417e:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <MX_TIM6_Init+0x64>)
 8004180:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <MX_TIM6_Init+0x68>)
 8004182:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19;
 8004184:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <MX_TIM6_Init+0x64>)
 8004186:	2213      	movs	r2, #19
 8004188:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <MX_TIM6_Init+0x64>)
 800418c:	2200      	movs	r2, #0
 800418e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4199;
 8004190:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <MX_TIM6_Init+0x64>)
 8004192:	f241 0267 	movw	r2, #4199	; 0x1067
 8004196:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004198:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <MX_TIM6_Init+0x64>)
 800419a:	2200      	movs	r2, #0
 800419c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800419e:	480d      	ldr	r0, [pc, #52]	; (80041d4 <MX_TIM6_Init+0x64>)
 80041a0:	f005 f83c 	bl	800921c <HAL_TIM_Base_Init>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80041aa:	f000 fa1f 	bl	80045ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ae:	2300      	movs	r3, #0
 80041b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80041b6:	463b      	mov	r3, r7
 80041b8:	4619      	mov	r1, r3
 80041ba:	4806      	ldr	r0, [pc, #24]	; (80041d4 <MX_TIM6_Init+0x64>)
 80041bc:	f005 fe1c 	bl	8009df8 <HAL_TIMEx_MasterConfigSynchronization>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80041c6:	f000 fa11 	bl	80045ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000504 	.word	0x20000504
 80041d8:	40001000 	.word	0x40001000

080041dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041e2:	463b      	mov	r3, r7
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80041ea:	4b15      	ldr	r3, [pc, #84]	; (8004240 <MX_TIM7_Init+0x64>)
 80041ec:	4a15      	ldr	r2, [pc, #84]	; (8004244 <MX_TIM7_Init+0x68>)
 80041ee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 80041f0:	4b13      	ldr	r3, [pc, #76]	; (8004240 <MX_TIM7_Init+0x64>)
 80041f2:	22a7      	movs	r2, #167	; 0xa7
 80041f4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <MX_TIM7_Init+0x64>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 80041fc:	4b10      	ldr	r3, [pc, #64]	; (8004240 <MX_TIM7_Init+0x64>)
 80041fe:	f241 3287 	movw	r2, #4999	; 0x1387
 8004202:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004204:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <MX_TIM7_Init+0x64>)
 8004206:	2200      	movs	r2, #0
 8004208:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800420a:	480d      	ldr	r0, [pc, #52]	; (8004240 <MX_TIM7_Init+0x64>)
 800420c:	f005 f806 	bl	800921c <HAL_TIM_Base_Init>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004216:	f000 f9e9 	bl	80045ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800421a:	2300      	movs	r3, #0
 800421c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800421e:	2300      	movs	r3, #0
 8004220:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004222:	463b      	mov	r3, r7
 8004224:	4619      	mov	r1, r3
 8004226:	4806      	ldr	r0, [pc, #24]	; (8004240 <MX_TIM7_Init+0x64>)
 8004228:	f005 fde6 	bl	8009df8 <HAL_TIMEx_MasterConfigSynchronization>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8004232:	f000 f9db 	bl	80045ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000604 	.word	0x20000604
 8004244:	40001400 	.word	0x40001400

08004248 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	; 0x30
 800424c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800424e:	f107 030c 	add.w	r3, r7, #12
 8004252:	2224      	movs	r2, #36	; 0x24
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f006 fa5d 	bl	800a716 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800425c:	1d3b      	adds	r3, r7, #4
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004264:	4b22      	ldr	r3, [pc, #136]	; (80042f0 <MX_TIM8_Init+0xa8>)
 8004266:	4a23      	ldr	r2, [pc, #140]	; (80042f4 <MX_TIM8_Init+0xac>)
 8004268:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800426a:	4b21      	ldr	r3, [pc, #132]	; (80042f0 <MX_TIM8_Init+0xa8>)
 800426c:	2200      	movs	r2, #0
 800426e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004270:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <MX_TIM8_Init+0xa8>)
 8004272:	2200      	movs	r2, #0
 8004274:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004276:	4b1e      	ldr	r3, [pc, #120]	; (80042f0 <MX_TIM8_Init+0xa8>)
 8004278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800427c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800427e:	4b1c      	ldr	r3, [pc, #112]	; (80042f0 <MX_TIM8_Init+0xa8>)
 8004280:	2200      	movs	r2, #0
 8004282:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004284:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <MX_TIM8_Init+0xa8>)
 8004286:	2200      	movs	r2, #0
 8004288:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800428a:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <MX_TIM8_Init+0xa8>)
 800428c:	2200      	movs	r2, #0
 800428e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004290:	2303      	movs	r3, #3
 8004292:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004294:	2302      	movs	r3, #2
 8004296:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004298:	2301      	movs	r3, #1
 800429a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800429c:	2300      	movs	r3, #0
 800429e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80042a4:	2302      	movs	r3, #2
 80042a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80042a8:	2301      	movs	r3, #1
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80042ac:	2300      	movs	r3, #0
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80042b4:	f107 030c 	add.w	r3, r7, #12
 80042b8:	4619      	mov	r1, r3
 80042ba:	480d      	ldr	r0, [pc, #52]	; (80042f0 <MX_TIM8_Init+0xa8>)
 80042bc:	f005 f866 	bl	800938c <HAL_TIM_Encoder_Init>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80042c6:	f000 f991 	bl	80045ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4806      	ldr	r0, [pc, #24]	; (80042f0 <MX_TIM8_Init+0xa8>)
 80042d8:	f005 fd8e 	bl	8009df8 <HAL_TIMEx_MasterConfigSynchronization>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80042e2:	f000 f983 	bl	80045ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80042e6:	bf00      	nop
 80042e8:	3730      	adds	r7, #48	; 0x30
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	2000029c 	.word	0x2000029c
 80042f4:	40010400 	.word	0x40010400

080042f8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80042fe:	1d3b      	adds	r3, r7, #4
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	60da      	str	r2, [r3, #12]
 800430a:	611a      	str	r2, [r3, #16]
 800430c:	615a      	str	r2, [r3, #20]
 800430e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004310:	4b1f      	ldr	r3, [pc, #124]	; (8004390 <MX_TIM12_Init+0x98>)
 8004312:	4a20      	ldr	r2, [pc, #128]	; (8004394 <MX_TIM12_Init+0x9c>)
 8004314:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8004316:	4b1e      	ldr	r3, [pc, #120]	; (8004390 <MX_TIM12_Init+0x98>)
 8004318:	2201      	movs	r2, #1
 800431a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800431c:	4b1c      	ldr	r3, [pc, #112]	; (8004390 <MX_TIM12_Init+0x98>)
 800431e:	2200      	movs	r2, #0
 8004320:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 839;
 8004322:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <MX_TIM12_Init+0x98>)
 8004324:	f240 3247 	movw	r2, #839	; 0x347
 8004328:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800432a:	4b19      	ldr	r3, [pc, #100]	; (8004390 <MX_TIM12_Init+0x98>)
 800432c:	2200      	movs	r2, #0
 800432e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004330:	4b17      	ldr	r3, [pc, #92]	; (8004390 <MX_TIM12_Init+0x98>)
 8004332:	2200      	movs	r2, #0
 8004334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004336:	4816      	ldr	r0, [pc, #88]	; (8004390 <MX_TIM12_Init+0x98>)
 8004338:	f004 ffbf 	bl	80092ba <HAL_TIM_PWM_Init>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8004342:	f000 f953 	bl	80045ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004346:	2360      	movs	r3, #96	; 0x60
 8004348:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004356:	1d3b      	adds	r3, r7, #4
 8004358:	2200      	movs	r2, #0
 800435a:	4619      	mov	r1, r3
 800435c:	480c      	ldr	r0, [pc, #48]	; (8004390 <MX_TIM12_Init+0x98>)
 800435e:	f005 f9e7 	bl	8009730 <HAL_TIM_PWM_ConfigChannel>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8004368:	f000 f940 	bl	80045ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800436c:	1d3b      	adds	r3, r7, #4
 800436e:	2204      	movs	r2, #4
 8004370:	4619      	mov	r1, r3
 8004372:	4807      	ldr	r0, [pc, #28]	; (8004390 <MX_TIM12_Init+0x98>)
 8004374:	f005 f9dc 	bl	8009730 <HAL_TIM_PWM_ConfigChannel>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800437e:	f000 f935 	bl	80045ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004382:	4803      	ldr	r0, [pc, #12]	; (8004390 <MX_TIM12_Init+0x98>)
 8004384:	f000 ffaa 	bl	80052dc <HAL_TIM_MspPostInit>

}
 8004388:	bf00      	nop
 800438a:	3720      	adds	r7, #32
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	200005c4 	.word	0x200005c4
 8004394:	40001800 	.word	0x40001800

08004398 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800439c:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <MX_USART1_UART_Init+0x4c>)
 800439e:	4a12      	ldr	r2, [pc, #72]	; (80043e8 <MX_USART1_UART_Init+0x50>)
 80043a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80043a2:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <MX_USART1_UART_Init+0x4c>)
 80043a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80043a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043aa:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <MX_USART1_UART_Init+0x4c>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043b0:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <MX_USART1_UART_Init+0x4c>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043b6:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <MX_USART1_UART_Init+0x4c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <MX_USART1_UART_Init+0x4c>)
 80043be:	220c      	movs	r2, #12
 80043c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043c2:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <MX_USART1_UART_Init+0x4c>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <MX_USART1_UART_Init+0x4c>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043ce:	4805      	ldr	r0, [pc, #20]	; (80043e4 <MX_USART1_UART_Init+0x4c>)
 80043d0:	f005 fda2 	bl	8009f18 <HAL_UART_Init>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80043da:	f000 f907 	bl	80045ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000464 	.word	0x20000464
 80043e8:	40011000 	.word	0x40011000

080043ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
 80043f6:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <MX_DMA_Init+0x3c>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	4a0b      	ldr	r2, [pc, #44]	; (8004428 <MX_DMA_Init+0x3c>)
 80043fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004400:	6313      	str	r3, [r2, #48]	; 0x30
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <MX_DMA_Init+0x3c>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440a:	607b      	str	r3, [r7, #4]
 800440c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800440e:	2200      	movs	r2, #0
 8004410:	2105      	movs	r1, #5
 8004412:	2038      	movs	r0, #56	; 0x38
 8004414:	f001 fe8f 	bl	8006136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004418:	2038      	movs	r0, #56	; 0x38
 800441a:	f001 fea8 	bl	800616e <HAL_NVIC_EnableIRQ>

}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40023800 	.word	0x40023800

0800442c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004432:	f107 0314 	add.w	r3, r7, #20
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	605a      	str	r2, [r3, #4]
 800443c:	609a      	str	r2, [r3, #8]
 800443e:	60da      	str	r2, [r3, #12]
 8004440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	4b63      	ldr	r3, [pc, #396]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	4a62      	ldr	r2, [pc, #392]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 800444c:	f043 0304 	orr.w	r3, r3, #4
 8004450:	6313      	str	r3, [r2, #48]	; 0x30
 8004452:	4b60      	ldr	r3, [pc, #384]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	4b5c      	ldr	r3, [pc, #368]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	4a5b      	ldr	r2, [pc, #364]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 8004468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446c:	6313      	str	r3, [r2, #48]	; 0x30
 800446e:	4b59      	ldr	r3, [pc, #356]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800447a:	2300      	movs	r3, #0
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	4b55      	ldr	r3, [pc, #340]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	4a54      	ldr	r2, [pc, #336]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6313      	str	r3, [r2, #48]	; 0x30
 800448a:	4b52      	ldr	r3, [pc, #328]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]
 800449a:	4b4e      	ldr	r3, [pc, #312]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	4a4d      	ldr	r2, [pc, #308]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 80044a0:	f043 0302 	orr.w	r3, r3, #2
 80044a4:	6313      	str	r3, [r2, #48]	; 0x30
 80044a6:	4b4b      	ldr	r3, [pc, #300]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	603b      	str	r3, [r7, #0]
 80044b6:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	4a46      	ldr	r2, [pc, #280]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 80044bc:	f043 0308 	orr.w	r3, r3, #8
 80044c0:	6313      	str	r3, [r2, #48]	; 0x30
 80044c2:	4b44      	ldr	r3, [pc, #272]	; (80045d4 <MX_GPIO_Init+0x1a8>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 80044ce:	2200      	movs	r2, #0
 80044d0:	f242 0104 	movw	r1, #8196	; 0x2004
 80044d4:	4840      	ldr	r0, [pc, #256]	; (80045d8 <MX_GPIO_Init+0x1ac>)
 80044d6:	f002 fd57 	bl	8006f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80044da:	2200      	movs	r2, #0
 80044dc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80044e0:	483e      	ldr	r0, [pc, #248]	; (80045dc <MX_GPIO_Init+0x1b0>)
 80044e2:	f002 fd51 	bl	8006f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80044e6:	2200      	movs	r2, #0
 80044e8:	2104      	movs	r1, #4
 80044ea:	483d      	ldr	r0, [pc, #244]	; (80045e0 <MX_GPIO_Init+0x1b4>)
 80044ec:	f002 fd4c 	bl	8006f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 80044f0:	f24e 0303 	movw	r3, #57347	; 0xe003
 80044f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044f6:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <MX_GPIO_Init+0x1b8>)
 80044f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044fa:	2301      	movs	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044fe:	f107 0314 	add.w	r3, r7, #20
 8004502:	4619      	mov	r1, r3
 8004504:	4838      	ldr	r0, [pc, #224]	; (80045e8 <MX_GPIO_Init+0x1bc>)
 8004506:	f002 fba5 	bl	8006c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13;
 800450a:	f242 0304 	movw	r3, #8196	; 0x2004
 800450e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004510:	2301      	movs	r3, #1
 8004512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004514:	2300      	movs	r3, #0
 8004516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004518:	2300      	movs	r3, #0
 800451a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800451c:	f107 0314 	add.w	r3, r7, #20
 8004520:	4619      	mov	r1, r3
 8004522:	482d      	ldr	r0, [pc, #180]	; (80045d8 <MX_GPIO_Init+0x1ac>)
 8004524:	f002 fb96 	bl	8006c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800452c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800452e:	4b2d      	ldr	r3, [pc, #180]	; (80045e4 <MX_GPIO_Init+0x1b8>)
 8004530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004532:	2301      	movs	r3, #1
 8004534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004536:	f107 0314 	add.w	r3, r7, #20
 800453a:	4619      	mov	r1, r3
 800453c:	4826      	ldr	r0, [pc, #152]	; (80045d8 <MX_GPIO_Init+0x1ac>)
 800453e:	f002 fb89 	bl	8006c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004542:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004548:	2301      	movs	r3, #1
 800454a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454c:	2300      	movs	r3, #0
 800454e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004550:	2302      	movs	r3, #2
 8004552:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004554:	f107 0314 	add.w	r3, r7, #20
 8004558:	4619      	mov	r1, r3
 800455a:	4820      	ldr	r0, [pc, #128]	; (80045dc <MX_GPIO_Init+0x1b0>)
 800455c:	f002 fb7a 	bl	8006c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004566:	2301      	movs	r3, #1
 8004568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800456e:	2300      	movs	r3, #0
 8004570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004572:	f107 0314 	add.w	r3, r7, #20
 8004576:	4619      	mov	r1, r3
 8004578:	4818      	ldr	r0, [pc, #96]	; (80045dc <MX_GPIO_Init+0x1b0>)
 800457a:	f002 fb6b 	bl	8006c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800457e:	2304      	movs	r3, #4
 8004580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004582:	2301      	movs	r3, #1
 8004584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800458a:	2303      	movs	r3, #3
 800458c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800458e:	f107 0314 	add.w	r3, r7, #20
 8004592:	4619      	mov	r1, r3
 8004594:	4812      	ldr	r0, [pc, #72]	; (80045e0 <MX_GPIO_Init+0x1b4>)
 8004596:	f002 fb5d 	bl	8006c54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800459a:	2200      	movs	r2, #0
 800459c:	2100      	movs	r1, #0
 800459e:	2006      	movs	r0, #6
 80045a0:	f001 fdc9 	bl	8006136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80045a4:	2006      	movs	r0, #6
 80045a6:	f001 fde2 	bl	800616e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80045aa:	2200      	movs	r2, #0
 80045ac:	2100      	movs	r1, #0
 80045ae:	2007      	movs	r0, #7
 80045b0:	f001 fdc1 	bl	8006136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80045b4:	2007      	movs	r0, #7
 80045b6:	f001 fdda 	bl	800616e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80045ba:	2200      	movs	r2, #0
 80045bc:	2100      	movs	r1, #0
 80045be:	2028      	movs	r0, #40	; 0x28
 80045c0:	f001 fdb9 	bl	8006136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80045c4:	2028      	movs	r0, #40	; 0x28
 80045c6:	f001 fdd2 	bl	800616e <HAL_NVIC_EnableIRQ>

}
 80045ca:	bf00      	nop
 80045cc:	3728      	adds	r7, #40	; 0x28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40020400 	.word	0x40020400
 80045dc:	40020000 	.word	0x40020000
 80045e0:	40020c00 	.word	0x40020c00
 80045e4:	10110000 	.word	0x10110000
 80045e8:	40020800 	.word	0x40020800

080045ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <peripheral_init>:
int8_t check_sens_val = 0;
uint8_t sw_up_state = 0;
uint8_t sw_center_state = 0;
uint8_t cnt_sw = 0;

void peripheral_init(void){
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
	gpio_set();
 8004600:	f000 f8a0 	bl	8004744 <gpio_set>
	lcd_init();
 8004604:	f7fc fe84 	bl	8001310 <lcd_init>
	INA260_init();
 8004608:	f7fd f922 	bl	8001850 <INA260_init>
	if( IMU_init() == 1 ) {
 800460c:	f7fd f816 	bl	800163c <IMU_init>
 8004610:	4603      	mov	r3, r0
 8004612:	2b01      	cmp	r3, #1
 8004614:	d10e      	bne.n	8004634 <peripheral_init+0x38>
		lcd_locate(0,0);
 8004616:	2100      	movs	r1, #0
 8004618:	2000      	movs	r0, #0
 800461a:	f7fc fec6 	bl	80013aa <lcd_locate>
		lcd_print("WHO_AM_I");
 800461e:	4839      	ldr	r0, [pc, #228]	; (8004704 <peripheral_init+0x108>)
 8004620:	f7fc fed8 	bl	80013d4 <lcd_print>
		lcd_locate(0,1);
 8004624:	2101      	movs	r1, #1
 8004626:	2000      	movs	r0, #0
 8004628:	f7fc febf 	bl	80013aa <lcd_locate>
		lcd_print("SUCCESS");
 800462c:	4836      	ldr	r0, [pc, #216]	; (8004708 <peripheral_init+0x10c>)
 800462e:	f7fc fed1 	bl	80013d4 <lcd_print>
 8004632:	e00d      	b.n	8004650 <peripheral_init+0x54>
	}
	else {
		lcd_locate(0,0);
 8004634:	2100      	movs	r1, #0
 8004636:	2000      	movs	r0, #0
 8004638:	f7fc feb7 	bl	80013aa <lcd_locate>
		lcd_print("WHO_AM_I");
 800463c:	4831      	ldr	r0, [pc, #196]	; (8004704 <peripheral_init+0x108>)
 800463e:	f7fc fec9 	bl	80013d4 <lcd_print>
		lcd_locate(0,1);
 8004642:	2101      	movs	r1, #1
 8004644:	2000      	movs	r0, #0
 8004646:	f7fc feb0 	bl	80013aa <lcd_locate>
		lcd_print("Failed");
 800464a:	4830      	ldr	r0, [pc, #192]	; (800470c <peripheral_init+0x110>)
 800464c:	f7fc fec2 	bl	80013d4 <lcd_print>
	}
	//set_encoder
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8004650:	213c      	movs	r1, #60	; 0x3c
 8004652:	482f      	ldr	r0, [pc, #188]	; (8004710 <peripheral_init+0x114>)
 8004654:	f004 ff2c 	bl	80094b0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8004658:	213c      	movs	r1, #60	; 0x3c
 800465a:	482e      	ldr	r0, [pc, #184]	; (8004714 <peripheral_init+0x118>)
 800465c:	f004 ff28 	bl	80094b0 <HAL_TIM_Encoder_Start>
	//set_motordrive
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8004660:	2100      	movs	r1, #0
 8004662:	482d      	ldr	r0, [pc, #180]	; (8004718 <peripheral_init+0x11c>)
 8004664:	f004 fe54 	bl	8009310 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8004668:	2104      	movs	r1, #4
 800466a:	482b      	ldr	r0, [pc, #172]	; (8004718 <peripheral_init+0x11c>)
 800466c:	f004 fe50 	bl	8009310 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8004670:	4b29      	ldr	r3, [pc, #164]	; (8004718 <peripheral_init+0x11c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2200      	movs	r2, #0
 8004676:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8004678:	4b27      	ldr	r3, [pc, #156]	; (8004718 <peripheral_init+0x11c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2200      	movs	r2, #0
 800467e:	639a      	str	r2, [r3, #56]	; 0x38
	//set_buzzer
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004680:	2100      	movs	r1, #0
 8004682:	4826      	ldr	r0, [pc, #152]	; (800471c <peripheral_init+0x120>)
 8004684:	f004 fe44 	bl	8009310 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8004688:	4b24      	ldr	r3, [pc, #144]	; (800471c <peripheral_init+0x120>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2200      	movs	r2, #0
 800468e:	635a      	str	r2, [r3, #52]	; 0x34
	//set_4in1-esc
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004690:	2100      	movs	r1, #0
 8004692:	4823      	ldr	r0, [pc, #140]	; (8004720 <peripheral_init+0x124>)
 8004694:	f004 fe3c 	bl	8009310 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004698:	2104      	movs	r1, #4
 800469a:	4821      	ldr	r0, [pc, #132]	; (8004720 <peripheral_init+0x124>)
 800469c:	f004 fe38 	bl	8009310 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80046a0:	2108      	movs	r1, #8
 80046a2:	481f      	ldr	r0, [pc, #124]	; (8004720 <peripheral_init+0x124>)
 80046a4:	f004 fe34 	bl	8009310 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80046a8:	210c      	movs	r1, #12
 80046aa:	481d      	ldr	r0, [pc, #116]	; (8004720 <peripheral_init+0x124>)
 80046ac:	f004 fe30 	bl	8009310 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <peripheral_init+0x124>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80046b8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 80046ba:	4b19      	ldr	r3, [pc, #100]	; (8004720 <peripheral_init+0x124>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80046c2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 80046c4:	4b16      	ldr	r3, [pc, #88]	; (8004720 <peripheral_init+0x124>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80046cc:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 80046ce:	4b14      	ldr	r3, [pc, #80]	; (8004720 <peripheral_init+0x124>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40
	//set_timer
	HAL_TIM_Base_Start_IT(&htim6);
 80046d8:	4812      	ldr	r0, [pc, #72]	; (8004724 <peripheral_init+0x128>)
 80046da:	f004 fdca 	bl	8009272 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80046de:	4812      	ldr	r0, [pc, #72]	; (8004728 <peripheral_init+0x12c>)
 80046e0:	f004 fdc7 	bl	8009272 <HAL_TIM_Base_Start_IT>
	//ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC1_Buff, ADC_DATA_BUFFR_SIZE);
 80046e4:	220e      	movs	r2, #14
 80046e6:	4911      	ldr	r1, [pc, #68]	; (800472c <peripheral_init+0x130>)
 80046e8:	4811      	ldr	r0, [pc, #68]	; (8004730 <peripheral_init+0x134>)
 80046ea:	f001 f899 	bl	8005820 <HAL_ADC_Start_DMA>

	log_adress = start_adress_sector7;
 80046ee:	4b11      	ldr	r3, [pc, #68]	; (8004734 <peripheral_init+0x138>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a11      	ldr	r2, [pc, #68]	; (8004738 <peripheral_init+0x13c>)
 80046f4:	6013      	str	r3, [r2, #0]
	plan_velo_adress = start_adress_sector10;
 80046f6:	4b11      	ldr	r3, [pc, #68]	; (800473c <peripheral_init+0x140>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a11      	ldr	r2, [pc, #68]	; (8004740 <peripheral_init+0x144>)
 80046fc:	6013      	str	r3, [r2, #0]

}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	0800eddc 	.word	0x0800eddc
 8004708:	0800ede8 	.word	0x0800ede8
 800470c:	0800edf0 	.word	0x0800edf0
 8004710:	20000544 	.word	0x20000544
 8004714:	2000029c 	.word	0x2000029c
 8004718:	200005c4 	.word	0x200005c4
 800471c:	20000584 	.word	0x20000584
 8004720:	20000384 	.word	0x20000384
 8004724:	20000504 	.word	0x20000504
 8004728:	20000604 	.word	0x20000604
 800472c:	2000068c 	.word	0x2000068c
 8004730:	2000041c 	.word	0x2000041c
 8004734:	0800edf8 	.word	0x0800edf8
 8004738:	20000678 	.word	0x20000678
 800473c:	0800ee00 	.word	0x0800ee00
 8004740:	2000c23c 	.word	0x2000c23c

08004744 <gpio_set>:

void gpio_set(void){
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
	CS_SET;
 8004748:	2201      	movs	r2, #1
 800474a:	2104      	movs	r1, #4
 800474c:	4810      	ldr	r0, [pc, #64]	; (8004790 <gpio_set+0x4c>)
 800474e:	f002 fc1b 	bl	8006f88 <HAL_GPIO_WritePin>
	MR_SET;
 8004752:	2201      	movs	r2, #1
 8004754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004758:	480e      	ldr	r0, [pc, #56]	; (8004794 <gpio_set+0x50>)
 800475a:	f002 fc15 	bl	8006f88 <HAL_GPIO_WritePin>
	ML_SET;
 800475e:	2201      	movs	r2, #1
 8004760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004764:	480b      	ldr	r0, [pc, #44]	; (8004794 <gpio_set+0x50>)
 8004766:	f002 fc0f 	bl	8006f88 <HAL_GPIO_WritePin>
	LED_R_SET;
 800476a:	2201      	movs	r2, #1
 800476c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004770:	4809      	ldr	r0, [pc, #36]	; (8004798 <gpio_set+0x54>)
 8004772:	f002 fc09 	bl	8006f88 <HAL_GPIO_WritePin>
	LED_G_SET;
 8004776:	2201      	movs	r2, #1
 8004778:	2104      	movs	r1, #4
 800477a:	4807      	ldr	r0, [pc, #28]	; (8004798 <gpio_set+0x54>)
 800477c:	f002 fc04 	bl	8006f88 <HAL_GPIO_WritePin>
	LED_B_SET;
 8004780:	2201      	movs	r2, #1
 8004782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004786:	4803      	ldr	r0, [pc, #12]	; (8004794 <gpio_set+0x50>)
 8004788:	f002 fbfe 	bl	8006f88 <HAL_GPIO_WritePin>
}
 800478c:	bf00      	nop
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40020c00 	.word	0x40020c00
 8004794:	40020000 	.word	0x40020000
 8004798:	40020400 	.word	0x40020400

0800479c <led_pattern>:

void led_pattern(uint8_t led){
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	71fb      	strb	r3, [r7, #7]
	if(led & 0b001) LED_B_RESET;
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d006      	beq.n	80047be <led_pattern+0x22>
 80047b0:	2200      	movs	r2, #0
 80047b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047b6:	4818      	ldr	r0, [pc, #96]	; (8004818 <led_pattern+0x7c>)
 80047b8:	f002 fbe6 	bl	8006f88 <HAL_GPIO_WritePin>
 80047bc:	e005      	b.n	80047ca <led_pattern+0x2e>
		else LED_B_SET;
 80047be:	2201      	movs	r2, #1
 80047c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047c4:	4814      	ldr	r0, [pc, #80]	; (8004818 <led_pattern+0x7c>)
 80047c6:	f002 fbdf 	bl	8006f88 <HAL_GPIO_WritePin>
	if(led & 0b010) LED_G_RESET;
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <led_pattern+0x44>
 80047d4:	2200      	movs	r2, #0
 80047d6:	2104      	movs	r1, #4
 80047d8:	4810      	ldr	r0, [pc, #64]	; (800481c <led_pattern+0x80>)
 80047da:	f002 fbd5 	bl	8006f88 <HAL_GPIO_WritePin>
 80047de:	e004      	b.n	80047ea <led_pattern+0x4e>
		else LED_G_SET;
 80047e0:	2201      	movs	r2, #1
 80047e2:	2104      	movs	r1, #4
 80047e4:	480d      	ldr	r0, [pc, #52]	; (800481c <led_pattern+0x80>)
 80047e6:	f002 fbcf 	bl	8006f88 <HAL_GPIO_WritePin>
	if(led & 0b100) LED_R_RESET;
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d006      	beq.n	8004802 <led_pattern+0x66>
 80047f4:	2200      	movs	r2, #0
 80047f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047fa:	4808      	ldr	r0, [pc, #32]	; (800481c <led_pattern+0x80>)
 80047fc:	f002 fbc4 	bl	8006f88 <HAL_GPIO_WritePin>
		else LED_R_SET;
}
 8004800:	e005      	b.n	800480e <led_pattern+0x72>
		else LED_R_SET;
 8004802:	2201      	movs	r2, #1
 8004804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004808:	4804      	ldr	r0, [pc, #16]	; (800481c <led_pattern+0x80>)
 800480a:	f002 fbbd 	bl	8006f88 <HAL_GPIO_WritePin>
}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40020000 	.word	0x40020000
 800481c:	40020400 	.word	0x40020400

08004820 <getEncoder>:

void getEncoder(void) {
 8004820:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0

	int16_t enc_tim1_ms;
	int16_t enc_tim8_ms;

	enc_tim1_ms = TIM1 -> CNT;
 8004828:	4b5b      	ldr	r3, [pc, #364]	; (8004998 <getEncoder+0x178>)
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	80fb      	strh	r3, [r7, #6]
	enc_tim8_ms = TIM8 -> CNT;
 800482e:	4b5b      	ldr	r3, [pc, #364]	; (800499c <getEncoder+0x17c>)
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	80bb      	strh	r3, [r7, #4]

	TIM1 -> CNT = 0;
 8004834:	4b58      	ldr	r3, [pc, #352]	; (8004998 <getEncoder+0x178>)
 8004836:	2200      	movs	r2, #0
 8004838:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = 0;
 800483a:	4b58      	ldr	r3, [pc, #352]	; (800499c <getEncoder+0x17c>)
 800483c:	2200      	movs	r2, #0
 800483e:	625a      	str	r2, [r3, #36]	; 0x24

	enc_tim1_total += enc_tim1_ms;
 8004840:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8004844:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8004848:	4b55      	ldr	r3, [pc, #340]	; (80049a0 <getEncoder+0x180>)
 800484a:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800484e:	eb1b 0301 	adds.w	r3, fp, r1
 8004852:	eb4c 0402 	adc.w	r4, ip, r2
 8004856:	4a52      	ldr	r2, [pc, #328]	; (80049a0 <getEncoder+0x180>)
 8004858:	e9c2 3400 	strd	r3, r4, [r2]
	enc_tim8_total += enc_tim8_ms;
 800485c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004860:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8004864:	4b4f      	ldr	r3, [pc, #316]	; (80049a4 <getEncoder+0x184>)
 8004866:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800486a:	eb1b 0301 	adds.w	r3, fp, r1
 800486e:	eb4c 0402 	adc.w	r4, ip, r2
 8004872:	4a4c      	ldr	r2, [pc, #304]	; (80049a4 <getEncoder+0x184>)
 8004874:	e9c2 3400 	strd	r3, r4, [r2]
	enc_tim_total = (enc_tim1_total + enc_tim8_total) / 2;
 8004878:	4b49      	ldr	r3, [pc, #292]	; (80049a0 <getEncoder+0x180>)
 800487a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800487e:	4b49      	ldr	r3, [pc, #292]	; (80049a4 <getEncoder+0x184>)
 8004880:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004884:	eb13 0b01 	adds.w	fp, r3, r1
 8004888:	eb44 0c02 	adc.w	ip, r4, r2
 800488c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 8004890:	4611      	mov	r1, r2
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	eb1b 0301 	adds.w	r3, fp, r1
 800489a:	eb4c 0402 	adc.w	r4, ip, r2
 800489e:	1064      	asrs	r4, r4, #1
 80048a0:	ea4f 0333 	mov.w	r3, r3, rrx
 80048a4:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <getEncoder+0x188>)
 80048a6:	e9c2 3400 	strd	r3, r4, [r2]

	enc_cnt += ((enc_tim1_ms + enc_tim8_ms) / 2.0f);
 80048aa:	4b40      	ldr	r3, [pc, #256]	; (80049ac <getEncoder+0x18c>)
 80048ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048b0:	4618      	mov	r0, r3
 80048b2:	4621      	mov	r1, r4
 80048b4:	f7fc fab8 	bl	8000e28 <__aeabi_l2f>
 80048b8:	ee06 0a10 	vmov	s12, r0
 80048bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80048c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80048d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048d6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80048da:	ee17 0a90 	vmov	r0, s15
 80048de:	f7fc fb49 	bl	8000f74 <__aeabi_f2lz>
 80048e2:	4603      	mov	r3, r0
 80048e4:	460c      	mov	r4, r1
 80048e6:	4a31      	ldr	r2, [pc, #196]	; (80049ac <getEncoder+0x18c>)
 80048e8:	e9c2 3400 	strd	r3, r4, [r2]
	enc_cnt2 += ((enc_tim1_ms + enc_tim8_ms) / 2.0f);
 80048ec:	4b30      	ldr	r3, [pc, #192]	; (80049b0 <getEncoder+0x190>)
 80048ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048f2:	4618      	mov	r0, r3
 80048f4:	4621      	mov	r1, r4
 80048f6:	f7fc fa97 	bl	8000e28 <__aeabi_l2f>
 80048fa:	ee06 0a10 	vmov	s12, r0
 80048fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004902:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004906:	4413      	add	r3, r2
 8004908:	ee07 3a90 	vmov	s15, r3
 800490c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004910:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004918:	ee76 7a27 	vadd.f32	s15, s12, s15
 800491c:	ee17 0a90 	vmov	r0, s15
 8004920:	f7fc fb28 	bl	8000f74 <__aeabi_f2lz>
 8004924:	4603      	mov	r3, r0
 8004926:	460c      	mov	r4, r1
 8004928:	4a21      	ldr	r2, [pc, #132]	; (80049b0 <getEncoder+0x190>)
 800492a:	e9c2 3400 	strd	r3, r4, [r2]

	enc_tim1_cnt_10ms += enc_tim1_ms;
 800492e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004932:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <getEncoder+0x194>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4413      	add	r3, r2
 8004938:	4a1e      	ldr	r2, [pc, #120]	; (80049b4 <getEncoder+0x194>)
 800493a:	6013      	str	r3, [r2, #0]
	enc_tim8_cnt_10ms += enc_tim8_ms;
 800493c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004940:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <getEncoder+0x198>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4413      	add	r3, r2
 8004946:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <getEncoder+0x198>)
 8004948:	6013      	str	r3, [r2, #0]

	velR = (float)enc_tim8_ms * ENC_PULSE_MM * 1000.0f;
 800494a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004956:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80049bc <getEncoder+0x19c>
 800495a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800495e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80049c0 <getEncoder+0x1a0>
 8004962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004966:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <getEncoder+0x1a4>)
 8004968:	edc3 7a00 	vstr	s15, [r3]
	velL = (float)enc_tim1_ms * ENC_PULSE_MM * 1000.0f;
 800496c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004978:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80049bc <getEncoder+0x19c>
 800497c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004980:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80049c0 <getEncoder+0x1a0>
 8004984:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004988:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <getEncoder+0x1a8>)
 800498a:	edc3 7a00 	vstr	s15, [r3]

}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004998:	40010000 	.word	0x40010000
 800499c:	40010400 	.word	0x40010400
 80049a0:	20000248 	.word	0x20000248
 80049a4:	20000250 	.word	0x20000250
 80049a8:	20000258 	.word	0x20000258
 80049ac:	20000658 	.word	0x20000658
 80049b0:	20000660 	.word	0x20000660
 80049b4:	2000c258 	.word	0x2000c258
 80049b8:	20000684 	.word	0x20000684
 80049bc:	3c47ffde 	.word	0x3c47ffde
 80049c0:	447a0000 	.word	0x447a0000
 80049c4:	20000668 	.word	0x20000668
 80049c8:	200006a8 	.word	0x200006a8

080049cc <ADval_get>:

//sensor-borad	Light	AD9 AD8 AD15 AD14 AD7 AD6   AD5 AD4 AD3 AD2 AD1 AD0   Right
//maker-borad  	 		AD12 	AD13
void ADval_get(void) {
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
	line_sen0  = ADC1_Buff[0];
 80049d0:	4b1e      	ldr	r3, [pc, #120]	; (8004a4c <ADval_get+0x80>)
 80049d2:	881a      	ldrh	r2, [r3, #0]
 80049d4:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <ADval_get+0x84>)
 80049d6:	801a      	strh	r2, [r3, #0]
	line_sen1  = ADC1_Buff[1];
 80049d8:	4b1c      	ldr	r3, [pc, #112]	; (8004a4c <ADval_get+0x80>)
 80049da:	885a      	ldrh	r2, [r3, #2]
 80049dc:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <ADval_get+0x88>)
 80049de:	801a      	strh	r2, [r3, #0]
	line_sen2  = ADC1_Buff[2];
 80049e0:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <ADval_get+0x80>)
 80049e2:	889a      	ldrh	r2, [r3, #4]
 80049e4:	4b1c      	ldr	r3, [pc, #112]	; (8004a58 <ADval_get+0x8c>)
 80049e6:	801a      	strh	r2, [r3, #0]
	line_sen3  = ADC1_Buff[3];
 80049e8:	4b18      	ldr	r3, [pc, #96]	; (8004a4c <ADval_get+0x80>)
 80049ea:	88da      	ldrh	r2, [r3, #6]
 80049ec:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <ADval_get+0x90>)
 80049ee:	801a      	strh	r2, [r3, #0]
	line_sen4  = ADC1_Buff[4];
 80049f0:	4b16      	ldr	r3, [pc, #88]	; (8004a4c <ADval_get+0x80>)
 80049f2:	891a      	ldrh	r2, [r3, #8]
 80049f4:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <ADval_get+0x94>)
 80049f6:	801a      	strh	r2, [r3, #0]
	line_sen5  = ADC1_Buff[5];
 80049f8:	4b14      	ldr	r3, [pc, #80]	; (8004a4c <ADval_get+0x80>)
 80049fa:	895a      	ldrh	r2, [r3, #10]
 80049fc:	4b19      	ldr	r3, [pc, #100]	; (8004a64 <ADval_get+0x98>)
 80049fe:	801a      	strh	r2, [r3, #0]
	line_sen6  = ADC1_Buff[6];
 8004a00:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <ADval_get+0x80>)
 8004a02:	899a      	ldrh	r2, [r3, #12]
 8004a04:	4b18      	ldr	r3, [pc, #96]	; (8004a68 <ADval_get+0x9c>)
 8004a06:	801a      	strh	r2, [r3, #0]
	line_sen7  = ADC1_Buff[7];
 8004a08:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <ADval_get+0x80>)
 8004a0a:	89da      	ldrh	r2, [r3, #14]
 8004a0c:	4b17      	ldr	r3, [pc, #92]	; (8004a6c <ADval_get+0xa0>)
 8004a0e:	801a      	strh	r2, [r3, #0]
	line_sen10 = ADC1_Buff[8];
 8004a10:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <ADval_get+0x80>)
 8004a12:	8a1a      	ldrh	r2, [r3, #16]
 8004a14:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <ADval_get+0xa4>)
 8004a16:	801a      	strh	r2, [r3, #0]
	line_sen11 = ADC1_Buff[9];
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <ADval_get+0x80>)
 8004a1a:	8a5a      	ldrh	r2, [r3, #18]
 8004a1c:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <ADval_get+0xa8>)
 8004a1e:	801a      	strh	r2, [r3, #0]
	line_sen8  = ADC1_Buff[10];
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <ADval_get+0x80>)
 8004a22:	8a9a      	ldrh	r2, [r3, #20]
 8004a24:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <ADval_get+0xac>)
 8004a26:	801a      	strh	r2, [r3, #0]
	line_sen9  = ADC1_Buff[11];
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <ADval_get+0x80>)
 8004a2a:	8ada      	ldrh	r2, [r3, #22]
 8004a2c:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <ADval_get+0xb0>)
 8004a2e:	801a      	strh	r2, [r3, #0]
	line_sen12 = ADC1_Buff[12];
 8004a30:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <ADval_get+0x80>)
 8004a32:	8b1a      	ldrh	r2, [r3, #24]
 8004a34:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <ADval_get+0xb4>)
 8004a36:	801a      	strh	r2, [r3, #0]
	line_sen13 = ADC1_Buff[13];
 8004a38:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <ADval_get+0x80>)
 8004a3a:	8b5a      	ldrh	r2, [r3, #26]
 8004a3c:	4b11      	ldr	r3, [pc, #68]	; (8004a84 <ADval_get+0xb8>)
 8004a3e:	801a      	strh	r2, [r3, #0]
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	2000068c 	.word	0x2000068c
 8004a50:	2000c24c 	.word	0x2000c24c
 8004a54:	200006ae 	.word	0x200006ae
 8004a58:	20000680 	.word	0x20000680
 8004a5c:	2000066e 	.word	0x2000066e
 8004a60:	2000064a 	.word	0x2000064a
 8004a64:	2000c248 	.word	0x2000c248
 8004a68:	20000682 	.word	0x20000682
 8004a6c:	20000674 	.word	0x20000674
 8004a70:	200006b0 	.word	0x200006b0
 8004a74:	2000c24e 	.word	0x2000c24e
 8004a78:	200006ac 	.word	0x200006ac
 8004a7c:	20000648 	.word	0x20000648
 8004a80:	2000c250 	.word	0x2000c250
 8004a84:	200006b2 	.word	0x200006b2

08004a88 <ADval_sum>:

void ADval_sum(void) {
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
	line_senLLL	= line_sen11 + line_sen10;
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	; (8004af8 <ADval_sum+0x70>)
 8004a8e:	881a      	ldrh	r2, [r3, #0]
 8004a90:	4b1a      	ldr	r3, [pc, #104]	; (8004afc <ADval_sum+0x74>)
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	4413      	add	r3, r2
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <ADval_sum+0x78>)
 8004a9a:	801a      	strh	r2, [r3, #0]
	line_senLL	= line_sen9 + line_sen8;
 8004a9c:	4b19      	ldr	r3, [pc, #100]	; (8004b04 <ADval_sum+0x7c>)
 8004a9e:	881a      	ldrh	r2, [r3, #0]
 8004aa0:	4b19      	ldr	r3, [pc, #100]	; (8004b08 <ADval_sum+0x80>)
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <ADval_sum+0x84>)
 8004aaa:	801a      	strh	r2, [r3, #0]
	line_senL	= line_sen7 + line_sen6;
 8004aac:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <ADval_sum+0x88>)
 8004aae:	881a      	ldrh	r2, [r3, #0]
 8004ab0:	4b18      	ldr	r3, [pc, #96]	; (8004b14 <ADval_sum+0x8c>)
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	4b17      	ldr	r3, [pc, #92]	; (8004b18 <ADval_sum+0x90>)
 8004aba:	801a      	strh	r2, [r3, #0]
	line_senR	= line_sen5 + line_sen4;
 8004abc:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <ADval_sum+0x94>)
 8004abe:	881a      	ldrh	r2, [r3, #0]
 8004ac0:	4b17      	ldr	r3, [pc, #92]	; (8004b20 <ADval_sum+0x98>)
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <ADval_sum+0x9c>)
 8004aca:	801a      	strh	r2, [r3, #0]
	line_senRR	= line_sen3 + line_sen2;
 8004acc:	4b16      	ldr	r3, [pc, #88]	; (8004b28 <ADval_sum+0xa0>)
 8004ace:	881a      	ldrh	r2, [r3, #0]
 8004ad0:	4b16      	ldr	r3, [pc, #88]	; (8004b2c <ADval_sum+0xa4>)
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <ADval_sum+0xa8>)
 8004ada:	801a      	strh	r2, [r3, #0]
	line_senRRR	= line_sen1 + line_sen0;
 8004adc:	4b15      	ldr	r3, [pc, #84]	; (8004b34 <ADval_sum+0xac>)
 8004ade:	881a      	ldrh	r2, [r3, #0]
 8004ae0:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <ADval_sum+0xb0>)
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	4b14      	ldr	r3, [pc, #80]	; (8004b3c <ADval_sum+0xb4>)
 8004aea:	801a      	strh	r2, [r3, #0]
}
 8004aec:	bf00      	nop
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	2000c24e 	.word	0x2000c24e
 8004afc:	200006b0 	.word	0x200006b0
 8004b00:	20000238 	.word	0x20000238
 8004b04:	20000648 	.word	0x20000648
 8004b08:	200006ac 	.word	0x200006ac
 8004b0c:	2000023a 	.word	0x2000023a
 8004b10:	20000674 	.word	0x20000674
 8004b14:	20000682 	.word	0x20000682
 8004b18:	2000023c 	.word	0x2000023c
 8004b1c:	2000c248 	.word	0x2000c248
 8004b20:	2000064a 	.word	0x2000064a
 8004b24:	2000023e 	.word	0x2000023e
 8004b28:	2000066e 	.word	0x2000066e
 8004b2c:	20000680 	.word	0x20000680
 8004b30:	20000240 	.word	0x20000240
 8004b34:	200006ae 	.word	0x200006ae
 8004b38:	2000c24c 	.word	0x2000c24c
 8004b3c:	20000242 	.word	0x20000242

08004b40 <MakerSenTh>:

uint8_t MakerSenTh(uint16_t makerthreshold) {
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	80fb      	strh	r3, [r7, #6]
	uint8_t maker = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	73fb      	strb	r3, [r7, #15]

	if(crossline_flag == 0){
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <MakerSenTh+0x48>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d111      	bne.n	8004b7a <MakerSenTh+0x3a>
		if(line_sen12 < makerthreshold) maker |= 0x01;
 8004b56:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <MakerSenTh+0x4c>)
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d903      	bls.n	8004b68 <MakerSenTh+0x28>
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
		if(line_sen13 < makerthreshold) maker |= 0x08;
 8004b68:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <MakerSenTh+0x50>)
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	88fa      	ldrh	r2, [r7, #6]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d903      	bls.n	8004b7a <MakerSenTh+0x3a>
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	f043 0308 	orr.w	r3, r3, #8
 8004b78:	73fb      	strb	r3, [r7, #15]
	}

	return maker;
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	20000269 	.word	0x20000269
 8004b8c:	2000c250 	.word	0x2000c250
 8004b90:	200006b2 	.word	0x200006b2

08004b94 <MotorCtrl>:

void MotorCtrl(int16_t motorR, int16_t motorL, uint8_t stop) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	80fb      	strh	r3, [r7, #6]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	80bb      	strh	r3, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	70fb      	strb	r3, [r7, #3]

	int16_t pwmL_out,pwmR_out;

	if(motorR >= 0) {
 8004ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	db08      	blt.n	8004bc0 <MotorCtrl+0x2c>
		pwmR_out = motorR;
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	81bb      	strh	r3, [r7, #12]
		MR_SET;
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bb8:	4824      	ldr	r0, [pc, #144]	; (8004c4c <MotorCtrl+0xb8>)
 8004bba:	f002 f9e5 	bl	8006f88 <HAL_GPIO_WritePin>
 8004bbe:	e009      	b.n	8004bd4 <MotorCtrl+0x40>
	}
	else {
		pwmR_out = motorR * (-1);
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	425b      	negs	r3, r3
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	81bb      	strh	r3, [r7, #12]
		MR_RESET;
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bce:	481f      	ldr	r0, [pc, #124]	; (8004c4c <MotorCtrl+0xb8>)
 8004bd0:	f002 f9da 	bl	8006f88 <HAL_GPIO_WritePin>
	}

	if(motorL >= 0) {
 8004bd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	db08      	blt.n	8004bee <MotorCtrl+0x5a>
		pwmL_out = motorL;
 8004bdc:	88bb      	ldrh	r3, [r7, #4]
 8004bde:	81fb      	strh	r3, [r7, #14]
		ML_SET;
 8004be0:	2201      	movs	r2, #1
 8004be2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004be6:	4819      	ldr	r0, [pc, #100]	; (8004c4c <MotorCtrl+0xb8>)
 8004be8:	f002 f9ce 	bl	8006f88 <HAL_GPIO_WritePin>
 8004bec:	e009      	b.n	8004c02 <MotorCtrl+0x6e>
	}
	else {
		pwmL_out = motorL * (-1);
 8004bee:	88bb      	ldrh	r3, [r7, #4]
 8004bf0:	425b      	negs	r3, r3
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	81fb      	strh	r3, [r7, #14]
		ML_RESET;
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bfc:	4813      	ldr	r0, [pc, #76]	; (8004c4c <MotorCtrl+0xb8>)
 8004bfe:	f002 f9c3 	bl	8006f88 <HAL_GPIO_WritePin>
	}

	if(pwmR_out > COUNTER_PERIOD_TIM12) pwmR_out = 839;
 8004c02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c06:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8004c0a:	db02      	blt.n	8004c12 <MotorCtrl+0x7e>
 8004c0c:	f240 3347 	movw	r3, #839	; 0x347
 8004c10:	81bb      	strh	r3, [r7, #12]
	if(pwmL_out > COUNTER_PERIOD_TIM12) pwmL_out = 839;
 8004c12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c16:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8004c1a:	db02      	blt.n	8004c22 <MotorCtrl+0x8e>
 8004c1c:	f240 3347 	movw	r3, #839	; 0x347
 8004c20:	81fb      	strh	r3, [r7, #14]

	if(stop == 1) {
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d103      	bne.n	8004c30 <MotorCtrl+0x9c>
		pwmR_out = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	81bb      	strh	r3, [r7, #12]
		pwmL_out = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	81fb      	strh	r3, [r7, #14]
	}

	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, pwmR_out);
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <MotorCtrl+0xbc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004c38:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, pwmL_out);
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <MotorCtrl+0xbc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004c44:	bf00      	nop
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40020000 	.word	0x40020000
 8004c50:	200005c4 	.word	0x200005c4

08004c54 <HAL_GPIO_EXTI_Callback>:

void buzzer(uint8_t bz){
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2099);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	80fb      	strh	r3, [r7, #6]

	if(cnt_sw >= 30) {
 8004c5e:	4b35      	ldr	r3, [pc, #212]	; (8004d34 <HAL_GPIO_EXTI_Callback+0xe0>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b1d      	cmp	r3, #29
 8004c64:	d960      	bls.n	8004d28 <HAL_GPIO_EXTI_Callback+0xd4>
		if (GPIO_Pin == GPIO_PIN_0) ; 	//left

		if (GPIO_Pin == GPIO_PIN_1) { 	//up
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d11e      	bne.n	8004caa <HAL_GPIO_EXTI_Callback+0x56>
			if(sw_up_state > 1) sw_up_state = 1;
 8004c6c:	4b32      	ldr	r3, [pc, #200]	; (8004d38 <HAL_GPIO_EXTI_Callback+0xe4>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d902      	bls.n	8004c7a <HAL_GPIO_EXTI_Callback+0x26>
 8004c74:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <HAL_GPIO_EXTI_Callback+0xe4>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]
			sw_up_state ^= 1;
 8004c7a:	4b2f      	ldr	r3, [pc, #188]	; (8004d38 <HAL_GPIO_EXTI_Callback+0xe4>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	f083 0301 	eor.w	r3, r3, #1
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	4b2c      	ldr	r3, [pc, #176]	; (8004d38 <HAL_GPIO_EXTI_Callback+0xe4>)
 8004c86:	701a      	strb	r2, [r3, #0]
			check_sens_val--;
 8004c88:	4b2c      	ldr	r3, [pc, #176]	; (8004d3c <HAL_GPIO_EXTI_Callback+0xe8>)
 8004c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	b25a      	sxtb	r2, r3
 8004c96:	4b29      	ldr	r3, [pc, #164]	; (8004d3c <HAL_GPIO_EXTI_Callback+0xe8>)
 8004c98:	701a      	strb	r2, [r3, #0]
			if(check_sens_val < 0)  check_sens_val = CHECK_SENS_MAX;
 8004c9a:	4b28      	ldr	r3, [pc, #160]	; (8004d3c <HAL_GPIO_EXTI_Callback+0xe8>)
 8004c9c:	f993 3000 	ldrsb.w	r3, [r3]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	da02      	bge.n	8004caa <HAL_GPIO_EXTI_Callback+0x56>
 8004ca4:	4b25      	ldr	r3, [pc, #148]	; (8004d3c <HAL_GPIO_EXTI_Callback+0xe8>)
 8004ca6:	220e      	movs	r2, #14
 8004ca8:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_12) {	//push
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb0:	d110      	bne.n	8004cd4 <HAL_GPIO_EXTI_Callback+0x80>
			setup_mode++;
 8004cb2:	4b23      	ldr	r3, [pc, #140]	; (8004d40 <HAL_GPIO_EXTI_Callback+0xec>)
 8004cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	b25a      	sxtb	r2, r3
 8004cc0:	4b1f      	ldr	r3, [pc, #124]	; (8004d40 <HAL_GPIO_EXTI_Callback+0xec>)
 8004cc2:	701a      	strb	r2, [r3, #0]
			if(setup_mode >= 8) setup_mode = 0;
 8004cc4:	4b1e      	ldr	r3, [pc, #120]	; (8004d40 <HAL_GPIO_EXTI_Callback+0xec>)
 8004cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8004cca:	2b07      	cmp	r3, #7
 8004ccc:	dd02      	ble.n	8004cd4 <HAL_GPIO_EXTI_Callback+0x80>
 8004cce:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <HAL_GPIO_EXTI_Callback+0xec>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_13) {	//down
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cda:	d110      	bne.n	8004cfe <HAL_GPIO_EXTI_Callback+0xaa>
			check_sens_val++;
 8004cdc:	4b17      	ldr	r3, [pc, #92]	; (8004d3c <HAL_GPIO_EXTI_Callback+0xe8>)
 8004cde:	f993 3000 	ldrsb.w	r3, [r3]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	b25a      	sxtb	r2, r3
 8004cea:	4b14      	ldr	r3, [pc, #80]	; (8004d3c <HAL_GPIO_EXTI_Callback+0xe8>)
 8004cec:	701a      	strb	r2, [r3, #0]
			if(check_sens_val > CHECK_SENS_MAX) check_sens_val = 0;
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <HAL_GPIO_EXTI_Callback+0xe8>)
 8004cf0:	f993 3000 	ldrsb.w	r3, [r3]
 8004cf4:	2b0e      	cmp	r3, #14
 8004cf6:	dd02      	ble.n	8004cfe <HAL_GPIO_EXTI_Callback+0xaa>
 8004cf8:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <HAL_GPIO_EXTI_Callback+0xe8>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_14) {	//center
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d04:	d10d      	bne.n	8004d22 <HAL_GPIO_EXTI_Callback+0xce>
			if(sw_center_state > 1) sw_center_state = 1;
 8004d06:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <HAL_GPIO_EXTI_Callback+0xf0>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d902      	bls.n	8004d14 <HAL_GPIO_EXTI_Callback+0xc0>
 8004d0e:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <HAL_GPIO_EXTI_Callback+0xf0>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]
			sw_center_state ^= 1;
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_GPIO_EXTI_Callback+0xf0>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	f083 0301 	eor.w	r3, r3, #1
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <HAL_GPIO_EXTI_Callback+0xf0>)
 8004d20:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_15) ;	//right

		cnt_sw = 0;
 8004d22:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <HAL_GPIO_EXTI_Callback+0xe0>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]
	}
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	20000278 	.word	0x20000278
 8004d38:	20000276 	.word	0x20000276
 8004d3c:	20000275 	.word	0x20000275
 8004d40:	20000274 	.word	0x20000274
 8004d44:	20000277 	.word	0x20000277

08004d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d4e:	2300      	movs	r3, #0
 8004d50:	607b      	str	r3, [r7, #4]
 8004d52:	4b1e      	ldr	r3, [pc, #120]	; (8004dcc <HAL_MspInit+0x84>)
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	4a1d      	ldr	r2, [pc, #116]	; (8004dcc <HAL_MspInit+0x84>)
 8004d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d5e:	4b1b      	ldr	r3, [pc, #108]	; (8004dcc <HAL_MspInit+0x84>)
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d66:	607b      	str	r3, [r7, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	603b      	str	r3, [r7, #0]
 8004d6e:	4b17      	ldr	r3, [pc, #92]	; (8004dcc <HAL_MspInit+0x84>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	4a16      	ldr	r2, [pc, #88]	; (8004dcc <HAL_MspInit+0x84>)
 8004d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d78:	6413      	str	r3, [r2, #64]	; 0x40
 8004d7a:	4b14      	ldr	r3, [pc, #80]	; (8004dcc <HAL_MspInit+0x84>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 5, 0);
 8004d86:	2200      	movs	r2, #0
 8004d88:	2105      	movs	r1, #5
 8004d8a:	f06f 000b 	mvn.w	r0, #11
 8004d8e:	f001 f9d2 	bl	8006136 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 5, 0);
 8004d92:	2200      	movs	r2, #0
 8004d94:	2105      	movs	r1, #5
 8004d96:	f06f 000a 	mvn.w	r0, #10
 8004d9a:	f001 f9cc 	bl	8006136 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 5, 0);
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2105      	movs	r1, #5
 8004da2:	f06f 0009 	mvn.w	r0, #9
 8004da6:	f001 f9c6 	bl	8006136 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 8004daa:	2200      	movs	r2, #0
 8004dac:	2105      	movs	r1, #5
 8004dae:	f06f 0004 	mvn.w	r0, #4
 8004db2:	f001 f9c0 	bl	8006136 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8004db6:	2200      	movs	r2, #0
 8004db8:	2105      	movs	r1, #5
 8004dba:	f06f 0003 	mvn.w	r0, #3
 8004dbe:	f001 f9ba 	bl	8006136 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40023800 	.word	0x40023800

08004dd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08c      	sub	sp, #48	; 0x30
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd8:	f107 031c 	add.w	r3, r7, #28
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	605a      	str	r2, [r3, #4]
 8004de2:	609a      	str	r2, [r3, #8]
 8004de4:	60da      	str	r2, [r3, #12]
 8004de6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a49      	ldr	r2, [pc, #292]	; (8004f14 <HAL_ADC_MspInit+0x144>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	f040 808c 	bne.w	8004f0c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004df4:	2300      	movs	r3, #0
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	4b47      	ldr	r3, [pc, #284]	; (8004f18 <HAL_ADC_MspInit+0x148>)
 8004dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfc:	4a46      	ldr	r2, [pc, #280]	; (8004f18 <HAL_ADC_MspInit+0x148>)
 8004dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e02:	6453      	str	r3, [r2, #68]	; 0x44
 8004e04:	4b44      	ldr	r3, [pc, #272]	; (8004f18 <HAL_ADC_MspInit+0x148>)
 8004e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	4b40      	ldr	r3, [pc, #256]	; (8004f18 <HAL_ADC_MspInit+0x148>)
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	4a3f      	ldr	r2, [pc, #252]	; (8004f18 <HAL_ADC_MspInit+0x148>)
 8004e1a:	f043 0304 	orr.w	r3, r3, #4
 8004e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8004e20:	4b3d      	ldr	r3, [pc, #244]	; (8004f18 <HAL_ADC_MspInit+0x148>)
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	4b39      	ldr	r3, [pc, #228]	; (8004f18 <HAL_ADC_MspInit+0x148>)
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	4a38      	ldr	r2, [pc, #224]	; (8004f18 <HAL_ADC_MspInit+0x148>)
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e3c:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <HAL_ADC_MspInit+0x148>)
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	4b32      	ldr	r3, [pc, #200]	; (8004f18 <HAL_ADC_MspInit+0x148>)
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	4a31      	ldr	r2, [pc, #196]	; (8004f18 <HAL_ADC_MspInit+0x148>)
 8004e52:	f043 0302 	orr.w	r3, r3, #2
 8004e56:	6313      	str	r3, [r2, #48]	; 0x30
 8004e58:	4b2f      	ldr	r3, [pc, #188]	; (8004f18 <HAL_ADC_MspInit+0x148>)
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004e64:	233c      	movs	r3, #60	; 0x3c
 8004e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e70:	f107 031c 	add.w	r3, r7, #28
 8004e74:	4619      	mov	r1, r3
 8004e76:	4829      	ldr	r0, [pc, #164]	; (8004f1c <HAL_ADC_MspInit+0x14c>)
 8004e78:	f001 feec 	bl	8006c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8004e7c:	23ff      	movs	r3, #255	; 0xff
 8004e7e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e80:	2303      	movs	r3, #3
 8004e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e88:	f107 031c 	add.w	r3, r7, #28
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4824      	ldr	r0, [pc, #144]	; (8004f20 <HAL_ADC_MspInit+0x150>)
 8004e90:	f001 fee0 	bl	8006c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e94:	2303      	movs	r3, #3
 8004e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea0:	f107 031c 	add.w	r3, r7, #28
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	481f      	ldr	r0, [pc, #124]	; (8004f24 <HAL_ADC_MspInit+0x154>)
 8004ea8:	f001 fed4 	bl	8006c54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004eac:	4b1e      	ldr	r3, [pc, #120]	; (8004f28 <HAL_ADC_MspInit+0x158>)
 8004eae:	4a1f      	ldr	r2, [pc, #124]	; (8004f2c <HAL_ADC_MspInit+0x15c>)
 8004eb0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004eb2:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <HAL_ADC_MspInit+0x158>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004eb8:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <HAL_ADC_MspInit+0x158>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ebe:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <HAL_ADC_MspInit+0x158>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004ec4:	4b18      	ldr	r3, [pc, #96]	; (8004f28 <HAL_ADC_MspInit+0x158>)
 8004ec6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004eca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004ecc:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <HAL_ADC_MspInit+0x158>)
 8004ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ed2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ed4:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <HAL_ADC_MspInit+0x158>)
 8004ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004eda:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004edc:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <HAL_ADC_MspInit+0x158>)
 8004ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ee2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004ee4:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <HAL_ADC_MspInit+0x158>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004eea:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <HAL_ADC_MspInit+0x158>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004ef0:	480d      	ldr	r0, [pc, #52]	; (8004f28 <HAL_ADC_MspInit+0x158>)
 8004ef2:	f001 f957 	bl	80061a4 <HAL_DMA_Init>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8004efc:	f7ff fb76 	bl	80045ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <HAL_ADC_MspInit+0x158>)
 8004f04:	639a      	str	r2, [r3, #56]	; 0x38
 8004f06:	4a08      	ldr	r2, [pc, #32]	; (8004f28 <HAL_ADC_MspInit+0x158>)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004f0c:	bf00      	nop
 8004f0e:	3730      	adds	r7, #48	; 0x30
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40012000 	.word	0x40012000
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	40020800 	.word	0x40020800
 8004f20:	40020000 	.word	0x40020000
 8004f24:	40020400 	.word	0x40020400
 8004f28:	200004a4 	.word	0x200004a4
 8004f2c:	40026410 	.word	0x40026410

08004f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08c      	sub	sp, #48	; 0x30
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f38:	f107 031c 	add.w	r3, r7, #28
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	605a      	str	r2, [r3, #4]
 8004f42:	609a      	str	r2, [r3, #8]
 8004f44:	60da      	str	r2, [r3, #12]
 8004f46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a33      	ldr	r2, [pc, #204]	; (800501c <HAL_I2C_MspInit+0xec>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d12d      	bne.n	8004fae <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	4b32      	ldr	r3, [pc, #200]	; (8005020 <HAL_I2C_MspInit+0xf0>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	4a31      	ldr	r2, [pc, #196]	; (8005020 <HAL_I2C_MspInit+0xf0>)
 8004f5c:	f043 0302 	orr.w	r3, r3, #2
 8004f60:	6313      	str	r3, [r2, #48]	; 0x30
 8004f62:	4b2f      	ldr	r3, [pc, #188]	; (8005020 <HAL_I2C_MspInit+0xf0>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004f6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f74:	2312      	movs	r3, #18
 8004f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f80:	2304      	movs	r3, #4
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f84:	f107 031c 	add.w	r3, r7, #28
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4826      	ldr	r0, [pc, #152]	; (8005024 <HAL_I2C_MspInit+0xf4>)
 8004f8c:	f001 fe62 	bl	8006c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	4b22      	ldr	r3, [pc, #136]	; (8005020 <HAL_I2C_MspInit+0xf0>)
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	4a21      	ldr	r2, [pc, #132]	; (8005020 <HAL_I2C_MspInit+0xf0>)
 8004f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8004fa0:	4b1f      	ldr	r3, [pc, #124]	; (8005020 <HAL_I2C_MspInit+0xf0>)
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004fac:	e031      	b.n	8005012 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1d      	ldr	r2, [pc, #116]	; (8005028 <HAL_I2C_MspInit+0xf8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d12c      	bne.n	8005012 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fb8:	2300      	movs	r3, #0
 8004fba:	613b      	str	r3, [r7, #16]
 8004fbc:	4b18      	ldr	r3, [pc, #96]	; (8005020 <HAL_I2C_MspInit+0xf0>)
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	4a17      	ldr	r2, [pc, #92]	; (8005020 <HAL_I2C_MspInit+0xf0>)
 8004fc2:	f043 0302 	orr.w	r3, r3, #2
 8004fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8004fc8:	4b15      	ldr	r3, [pc, #84]	; (8005020 <HAL_I2C_MspInit+0xf0>)
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004fd4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fda:	2312      	movs	r3, #18
 8004fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fea:	f107 031c 	add.w	r3, r7, #28
 8004fee:	4619      	mov	r1, r3
 8004ff0:	480c      	ldr	r0, [pc, #48]	; (8005024 <HAL_I2C_MspInit+0xf4>)
 8004ff2:	f001 fe2f 	bl	8006c54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_I2C_MspInit+0xf0>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	4a08      	ldr	r2, [pc, #32]	; (8005020 <HAL_I2C_MspInit+0xf0>)
 8005000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005004:	6413      	str	r3, [r2, #64]	; 0x40
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <HAL_I2C_MspInit+0xf0>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
}
 8005012:	bf00      	nop
 8005014:	3730      	adds	r7, #48	; 0x30
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40005400 	.word	0x40005400
 8005020:	40023800 	.word	0x40023800
 8005024:	40020400 	.word	0x40020400
 8005028:	40005800 	.word	0x40005800

0800502c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	; 0x28
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005034:	f107 0314 	add.w	r3, r7, #20
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	609a      	str	r2, [r3, #8]
 8005040:	60da      	str	r2, [r3, #12]
 8005042:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a19      	ldr	r2, [pc, #100]	; (80050b0 <HAL_SPI_MspInit+0x84>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d12c      	bne.n	80050a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	4b18      	ldr	r3, [pc, #96]	; (80050b4 <HAL_SPI_MspInit+0x88>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	4a17      	ldr	r2, [pc, #92]	; (80050b4 <HAL_SPI_MspInit+0x88>)
 8005058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505c:	6413      	str	r3, [r2, #64]	; 0x40
 800505e:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <HAL_SPI_MspInit+0x88>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	4b11      	ldr	r3, [pc, #68]	; (80050b4 <HAL_SPI_MspInit+0x88>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	4a10      	ldr	r2, [pc, #64]	; (80050b4 <HAL_SPI_MspInit+0x88>)
 8005074:	f043 0304 	orr.w	r3, r3, #4
 8005078:	6313      	str	r3, [r2, #48]	; 0x30
 800507a:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <HAL_SPI_MspInit+0x88>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005086:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800508a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800508c:	2302      	movs	r3, #2
 800508e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005090:	2300      	movs	r3, #0
 8005092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005094:	2303      	movs	r3, #3
 8005096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005098:	2306      	movs	r3, #6
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800509c:	f107 0314 	add.w	r3, r7, #20
 80050a0:	4619      	mov	r1, r3
 80050a2:	4805      	ldr	r0, [pc, #20]	; (80050b8 <HAL_SPI_MspInit+0x8c>)
 80050a4:	f001 fdd6 	bl	8006c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80050a8:	bf00      	nop
 80050aa:	3728      	adds	r7, #40	; 0x28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40003c00 	.word	0x40003c00
 80050b4:	40023800 	.word	0x40023800
 80050b8:	40020800 	.word	0x40020800

080050bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08c      	sub	sp, #48	; 0x30
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050c4:	f107 031c 	add.w	r3, r7, #28
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	605a      	str	r2, [r3, #4]
 80050ce:	609a      	str	r2, [r3, #8]
 80050d0:	60da      	str	r2, [r3, #12]
 80050d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a32      	ldr	r2, [pc, #200]	; (80051a4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d12d      	bne.n	800513a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050de:	2300      	movs	r3, #0
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	4b31      	ldr	r3, [pc, #196]	; (80051a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80050e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e6:	4a30      	ldr	r2, [pc, #192]	; (80051a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	6453      	str	r3, [r2, #68]	; 0x44
 80050ee:	4b2e      	ldr	r3, [pc, #184]	; (80051a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80050f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	4b2a      	ldr	r3, [pc, #168]	; (80051a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	4a29      	ldr	r2, [pc, #164]	; (80051a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	6313      	str	r3, [r2, #48]	; 0x30
 800510a:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005116:	f44f 7340 	mov.w	r3, #768	; 0x300
 800511a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800511c:	2302      	movs	r3, #2
 800511e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005120:	2300      	movs	r3, #0
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005124:	2300      	movs	r3, #0
 8005126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005128:	2301      	movs	r3, #1
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800512c:	f107 031c 	add.w	r3, r7, #28
 8005130:	4619      	mov	r1, r3
 8005132:	481e      	ldr	r0, [pc, #120]	; (80051ac <HAL_TIM_Encoder_MspInit+0xf0>)
 8005134:	f001 fd8e 	bl	8006c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005138:	e030      	b.n	800519c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM8)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a1c      	ldr	r2, [pc, #112]	; (80051b0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d12b      	bne.n	800519c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005144:	2300      	movs	r3, #0
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	4b17      	ldr	r3, [pc, #92]	; (80051a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800514a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514c:	4a16      	ldr	r2, [pc, #88]	; (80051a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800514e:	f043 0302 	orr.w	r3, r3, #2
 8005152:	6453      	str	r3, [r2, #68]	; 0x44
 8005154:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	4a0f      	ldr	r2, [pc, #60]	; (80051a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800516a:	f043 0304 	orr.w	r3, r3, #4
 800516e:	6313      	str	r3, [r2, #48]	; 0x30
 8005170:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800517c:	23c0      	movs	r3, #192	; 0xc0
 800517e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005180:	2302      	movs	r3, #2
 8005182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005184:	2300      	movs	r3, #0
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005188:	2300      	movs	r3, #0
 800518a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800518c:	2303      	movs	r3, #3
 800518e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005190:	f107 031c 	add.w	r3, r7, #28
 8005194:	4619      	mov	r1, r3
 8005196:	4807      	ldr	r0, [pc, #28]	; (80051b4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8005198:	f001 fd5c 	bl	8006c54 <HAL_GPIO_Init>
}
 800519c:	bf00      	nop
 800519e:	3730      	adds	r7, #48	; 0x30
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40023800 	.word	0x40023800
 80051ac:	40020000 	.word	0x40020000
 80051b0:	40010400 	.word	0x40010400
 80051b4:	40020800 	.word	0x40020800

080051b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d10e      	bne.n	80051e8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <HAL_TIM_PWM_MspInit+0x8c>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	4a1c      	ldr	r2, [pc, #112]	; (8005244 <HAL_TIM_PWM_MspInit+0x8c>)
 80051d4:	f043 0301 	orr.w	r3, r3, #1
 80051d8:	6413      	str	r3, [r2, #64]	; 0x40
 80051da:	4b1a      	ldr	r3, [pc, #104]	; (8005244 <HAL_TIM_PWM_MspInit+0x8c>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80051e6:	e026      	b.n	8005236 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a16      	ldr	r2, [pc, #88]	; (8005248 <HAL_TIM_PWM_MspInit+0x90>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d10e      	bne.n	8005210 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	4b13      	ldr	r3, [pc, #76]	; (8005244 <HAL_TIM_PWM_MspInit+0x8c>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	4a12      	ldr	r2, [pc, #72]	; (8005244 <HAL_TIM_PWM_MspInit+0x8c>)
 80051fc:	f043 0302 	orr.w	r3, r3, #2
 8005200:	6413      	str	r3, [r2, #64]	; 0x40
 8005202:	4b10      	ldr	r3, [pc, #64]	; (8005244 <HAL_TIM_PWM_MspInit+0x8c>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	693b      	ldr	r3, [r7, #16]
}
 800520e:	e012      	b.n	8005236 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a0d      	ldr	r2, [pc, #52]	; (800524c <HAL_TIM_PWM_MspInit+0x94>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d10d      	bne.n	8005236 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <HAL_TIM_PWM_MspInit+0x8c>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	4a08      	ldr	r2, [pc, #32]	; (8005244 <HAL_TIM_PWM_MspInit+0x8c>)
 8005224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005228:	6413      	str	r3, [r2, #64]	; 0x40
 800522a:	4b06      	ldr	r3, [pc, #24]	; (8005244 <HAL_TIM_PWM_MspInit+0x8c>)
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40023800 	.word	0x40023800
 8005248:	40000400 	.word	0x40000400
 800524c:	40001800 	.word	0x40001800

08005250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a1c      	ldr	r2, [pc, #112]	; (80052d0 <HAL_TIM_Base_MspInit+0x80>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d116      	bne.n	8005290 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <HAL_TIM_Base_MspInit+0x84>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	4a1a      	ldr	r2, [pc, #104]	; (80052d4 <HAL_TIM_Base_MspInit+0x84>)
 800526c:	f043 0310 	orr.w	r3, r3, #16
 8005270:	6413      	str	r3, [r2, #64]	; 0x40
 8005272:	4b18      	ldr	r3, [pc, #96]	; (80052d4 <HAL_TIM_Base_MspInit+0x84>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800527e:	2200      	movs	r2, #0
 8005280:	2105      	movs	r1, #5
 8005282:	2036      	movs	r0, #54	; 0x36
 8005284:	f000 ff57 	bl	8006136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005288:	2036      	movs	r0, #54	; 0x36
 800528a:	f000 ff70 	bl	800616e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800528e:	e01a      	b.n	80052c6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a10      	ldr	r2, [pc, #64]	; (80052d8 <HAL_TIM_Base_MspInit+0x88>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d115      	bne.n	80052c6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800529a:	2300      	movs	r3, #0
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <HAL_TIM_Base_MspInit+0x84>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	4a0c      	ldr	r2, [pc, #48]	; (80052d4 <HAL_TIM_Base_MspInit+0x84>)
 80052a4:	f043 0320 	orr.w	r3, r3, #32
 80052a8:	6413      	str	r3, [r2, #64]	; 0x40
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <HAL_TIM_Base_MspInit+0x84>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80052b6:	2200      	movs	r2, #0
 80052b8:	2105      	movs	r1, #5
 80052ba:	2037      	movs	r0, #55	; 0x37
 80052bc:	f000 ff3b 	bl	8006136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80052c0:	2037      	movs	r0, #55	; 0x37
 80052c2:	f000 ff54 	bl	800616e <HAL_NVIC_EnableIRQ>
}
 80052c6:	bf00      	nop
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40001000 	.word	0x40001000
 80052d4:	40023800 	.word	0x40023800
 80052d8:	40001400 	.word	0x40001400

080052dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08c      	sub	sp, #48	; 0x30
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052e4:	f107 031c 	add.w	r3, r7, #28
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	605a      	str	r2, [r3, #4]
 80052ee:	609a      	str	r2, [r3, #8]
 80052f0:	60da      	str	r2, [r3, #12]
 80052f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fc:	d11f      	bne.n	800533e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	4b44      	ldr	r3, [pc, #272]	; (8005414 <HAL_TIM_MspPostInit+0x138>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	4a43      	ldr	r2, [pc, #268]	; (8005414 <HAL_TIM_MspPostInit+0x138>)
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	6313      	str	r3, [r2, #48]	; 0x30
 800530e:	4b41      	ldr	r3, [pc, #260]	; (8005414 <HAL_TIM_MspPostInit+0x138>)
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	61bb      	str	r3, [r7, #24]
 8005318:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800531a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800531e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005320:	2302      	movs	r3, #2
 8005322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005324:	2300      	movs	r3, #0
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005328:	2300      	movs	r3, #0
 800532a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800532c:	2301      	movs	r3, #1
 800532e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005330:	f107 031c 	add.w	r3, r7, #28
 8005334:	4619      	mov	r1, r3
 8005336:	4838      	ldr	r0, [pc, #224]	; (8005418 <HAL_TIM_MspPostInit+0x13c>)
 8005338:	f001 fc8c 	bl	8006c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800533c:	e066      	b.n	800540c <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM3)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a36      	ldr	r2, [pc, #216]	; (800541c <HAL_TIM_MspPostInit+0x140>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d13d      	bne.n	80053c4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	4b31      	ldr	r3, [pc, #196]	; (8005414 <HAL_TIM_MspPostInit+0x138>)
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	4a30      	ldr	r2, [pc, #192]	; (8005414 <HAL_TIM_MspPostInit+0x138>)
 8005352:	f043 0304 	orr.w	r3, r3, #4
 8005356:	6313      	str	r3, [r2, #48]	; 0x30
 8005358:	4b2e      	ldr	r3, [pc, #184]	; (8005414 <HAL_TIM_MspPostInit+0x138>)
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005364:	2300      	movs	r3, #0
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	4b2a      	ldr	r3, [pc, #168]	; (8005414 <HAL_TIM_MspPostInit+0x138>)
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	4a29      	ldr	r2, [pc, #164]	; (8005414 <HAL_TIM_MspPostInit+0x138>)
 800536e:	f043 0302 	orr.w	r3, r3, #2
 8005372:	6313      	str	r3, [r2, #48]	; 0x30
 8005374:	4b27      	ldr	r3, [pc, #156]	; (8005414 <HAL_TIM_MspPostInit+0x138>)
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005380:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005386:	2302      	movs	r3, #2
 8005388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800538a:	2300      	movs	r3, #0
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800538e:	2300      	movs	r3, #0
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005392:	2302      	movs	r3, #2
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005396:	f107 031c 	add.w	r3, r7, #28
 800539a:	4619      	mov	r1, r3
 800539c:	4820      	ldr	r0, [pc, #128]	; (8005420 <HAL_TIM_MspPostInit+0x144>)
 800539e:	f001 fc59 	bl	8006c54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80053a2:	2330      	movs	r3, #48	; 0x30
 80053a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a6:	2302      	movs	r3, #2
 80053a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ae:	2300      	movs	r3, #0
 80053b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80053b2:	2302      	movs	r3, #2
 80053b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053b6:	f107 031c 	add.w	r3, r7, #28
 80053ba:	4619      	mov	r1, r3
 80053bc:	4819      	ldr	r0, [pc, #100]	; (8005424 <HAL_TIM_MspPostInit+0x148>)
 80053be:	f001 fc49 	bl	8006c54 <HAL_GPIO_Init>
}
 80053c2:	e023      	b.n	800540c <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM12)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a17      	ldr	r2, [pc, #92]	; (8005428 <HAL_TIM_MspPostInit+0x14c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d11e      	bne.n	800540c <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <HAL_TIM_MspPostInit+0x138>)
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	4a0f      	ldr	r2, [pc, #60]	; (8005414 <HAL_TIM_MspPostInit+0x138>)
 80053d8:	f043 0302 	orr.w	r3, r3, #2
 80053dc:	6313      	str	r3, [r2, #48]	; 0x30
 80053de:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <HAL_TIM_MspPostInit+0x138>)
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80053ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80053ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f0:	2302      	movs	r3, #2
 80053f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f8:	2300      	movs	r3, #0
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80053fc:	2309      	movs	r3, #9
 80053fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005400:	f107 031c 	add.w	r3, r7, #28
 8005404:	4619      	mov	r1, r3
 8005406:	4807      	ldr	r0, [pc, #28]	; (8005424 <HAL_TIM_MspPostInit+0x148>)
 8005408:	f001 fc24 	bl	8006c54 <HAL_GPIO_Init>
}
 800540c:	bf00      	nop
 800540e:	3730      	adds	r7, #48	; 0x30
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40023800 	.word	0x40023800
 8005418:	40020000 	.word	0x40020000
 800541c:	40000400 	.word	0x40000400
 8005420:	40020800 	.word	0x40020800
 8005424:	40020400 	.word	0x40020400
 8005428:	40001800 	.word	0x40001800

0800542c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005434:	f107 0314 	add.w	r3, r7, #20
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	605a      	str	r2, [r3, #4]
 800543e:	609a      	str	r2, [r3, #8]
 8005440:	60da      	str	r2, [r3, #12]
 8005442:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a19      	ldr	r2, [pc, #100]	; (80054b0 <HAL_UART_MspInit+0x84>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d12b      	bne.n	80054a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	4b18      	ldr	r3, [pc, #96]	; (80054b4 <HAL_UART_MspInit+0x88>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	4a17      	ldr	r2, [pc, #92]	; (80054b4 <HAL_UART_MspInit+0x88>)
 8005458:	f043 0310 	orr.w	r3, r3, #16
 800545c:	6453      	str	r3, [r2, #68]	; 0x44
 800545e:	4b15      	ldr	r3, [pc, #84]	; (80054b4 <HAL_UART_MspInit+0x88>)
 8005460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005462:	f003 0310 	and.w	r3, r3, #16
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <HAL_UART_MspInit+0x88>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	4a10      	ldr	r2, [pc, #64]	; (80054b4 <HAL_UART_MspInit+0x88>)
 8005474:	f043 0302 	orr.w	r3, r3, #2
 8005478:	6313      	str	r3, [r2, #48]	; 0x30
 800547a:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <HAL_UART_MspInit+0x88>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005486:	23c0      	movs	r3, #192	; 0xc0
 8005488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800548a:	2302      	movs	r3, #2
 800548c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800548e:	2301      	movs	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005492:	2303      	movs	r3, #3
 8005494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005496:	2307      	movs	r3, #7
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800549a:	f107 0314 	add.w	r3, r7, #20
 800549e:	4619      	mov	r1, r3
 80054a0:	4805      	ldr	r0, [pc, #20]	; (80054b8 <HAL_UART_MspInit+0x8c>)
 80054a2:	f001 fbd7 	bl	8006c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80054a6:	bf00      	nop
 80054a8:	3728      	adds	r7, #40	; 0x28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40011000 	.word	0x40011000
 80054b4:	40023800 	.word	0x40023800
 80054b8:	40020400 	.word	0x40020400

080054bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80054c0:	bf00      	nop
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054ca:	b480      	push	{r7}
 80054cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054ce:	e7fe      	b.n	80054ce <HardFault_Handler+0x4>

080054d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054d4:	e7fe      	b.n	80054d4 <MemManage_Handler+0x4>

080054d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054d6:	b480      	push	{r7}
 80054d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054da:	e7fe      	b.n	80054da <BusFault_Handler+0x4>

080054dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054e0:	e7fe      	b.n	80054e0 <UsageFault_Handler+0x4>

080054e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054e2:	b480      	push	{r7}
 80054e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054e6:	bf00      	nop
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054fe:	b480      	push	{r7}
 8005500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005502:	bf00      	nop
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005510:	f000 f900 	bl	8005714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005514:	bf00      	nop
 8005516:	bd80      	pop	{r7, pc}

08005518 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800551c:	2001      	movs	r0, #1
 800551e:	f001 fd4d 	bl	8006fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005522:	bf00      	nop
 8005524:	bd80      	pop	{r7, pc}

08005526 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800552a:	2002      	movs	r0, #2
 800552c:	f001 fd46 	bl	8006fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005530:	bf00      	nop
 8005532:	bd80      	pop	{r7, pc}

08005534 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005538:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800553c:	f001 fd3e 	bl	8006fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005540:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005544:	f001 fd3a 	bl	8006fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005548:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800554c:	f001 fd36 	bl	8006fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005550:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005554:	f001 fd32 	bl	8006fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005558:	bf00      	nop
 800555a:	bd80      	pop	{r7, pc}

0800555c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005560:	4802      	ldr	r0, [pc, #8]	; (800556c <TIM6_DAC_IRQHandler+0x10>)
 8005562:	f003 ffdc 	bl	800951e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005566:	bf00      	nop
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000504 	.word	0x20000504

08005570 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005574:	4802      	ldr	r0, [pc, #8]	; (8005580 <TIM7_IRQHandler+0x10>)
 8005576:	f003 ffd2 	bl	800951e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000604 	.word	0x20000604

08005584 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005588:	4802      	ldr	r0, [pc, #8]	; (8005594 <DMA2_Stream0_IRQHandler+0x10>)
 800558a:	f000 ff11 	bl	80063b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800558e:	bf00      	nop
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	200004a4 	.word	0x200004a4

08005598 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80055a0:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <_sbrk+0x50>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d102      	bne.n	80055ae <_sbrk+0x16>
		heap_end = &end;
 80055a8:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <_sbrk+0x50>)
 80055aa:	4a10      	ldr	r2, [pc, #64]	; (80055ec <_sbrk+0x54>)
 80055ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80055ae:	4b0e      	ldr	r3, [pc, #56]	; (80055e8 <_sbrk+0x50>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80055b4:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <_sbrk+0x50>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4413      	add	r3, r2
 80055bc:	466a      	mov	r2, sp
 80055be:	4293      	cmp	r3, r2
 80055c0:	d907      	bls.n	80055d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80055c2:	f005 f873 	bl	800a6ac <__errno>
 80055c6:	4602      	mov	r2, r0
 80055c8:	230c      	movs	r3, #12
 80055ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80055cc:	f04f 33ff 	mov.w	r3, #4294967295
 80055d0:	e006      	b.n	80055e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80055d2:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <_sbrk+0x50>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4413      	add	r3, r2
 80055da:	4a03      	ldr	r2, [pc, #12]	; (80055e8 <_sbrk+0x50>)
 80055dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80055de:	68fb      	ldr	r3, [r7, #12]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	2000027c 	.word	0x2000027c
 80055ec:	2000c288 	.word	0x2000c288

080055f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055f4:	4b08      	ldr	r3, [pc, #32]	; (8005618 <SystemInit+0x28>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fa:	4a07      	ldr	r2, [pc, #28]	; (8005618 <SystemInit+0x28>)
 80055fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005604:	4b04      	ldr	r3, [pc, #16]	; (8005618 <SystemInit+0x28>)
 8005606:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800560a:	609a      	str	r2, [r3, #8]
#endif
}
 800560c:	bf00      	nop
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	e000ed00 	.word	0xe000ed00

0800561c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800561c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005654 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005620:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005622:	e003      	b.n	800562c <LoopCopyDataInit>

08005624 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005624:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005626:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005628:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800562a:	3104      	adds	r1, #4

0800562c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800562c:	480b      	ldr	r0, [pc, #44]	; (800565c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800562e:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005630:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005632:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005634:	d3f6      	bcc.n	8005624 <CopyDataInit>
  ldr  r2, =_sbss
 8005636:	4a0b      	ldr	r2, [pc, #44]	; (8005664 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005638:	e002      	b.n	8005640 <LoopFillZerobss>

0800563a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800563a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800563c:	f842 3b04 	str.w	r3, [r2], #4

08005640 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005640:	4b09      	ldr	r3, [pc, #36]	; (8005668 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005642:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005644:	d3f9      	bcc.n	800563a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005646:	f7ff ffd3 	bl	80055f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800564a:	f005 f835 	bl	800a6b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800564e:	f7fd fb85 	bl	8002d5c <main>
  bx  lr    
 8005652:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005654:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005658:	0800f11c 	.word	0x0800f11c
  ldr  r0, =_sdata
 800565c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005660:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8005664:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8005668:	2000c284 	.word	0x2000c284

0800566c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800566c:	e7fe      	b.n	800566c <ADC_IRQHandler>
	...

08005670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005674:	4b0e      	ldr	r3, [pc, #56]	; (80056b0 <HAL_Init+0x40>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a0d      	ldr	r2, [pc, #52]	; (80056b0 <HAL_Init+0x40>)
 800567a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800567e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <HAL_Init+0x40>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a0a      	ldr	r2, [pc, #40]	; (80056b0 <HAL_Init+0x40>)
 8005686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800568a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800568c:	4b08      	ldr	r3, [pc, #32]	; (80056b0 <HAL_Init+0x40>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a07      	ldr	r2, [pc, #28]	; (80056b0 <HAL_Init+0x40>)
 8005692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005698:	2003      	movs	r0, #3
 800569a:	f000 fd41 	bl	8006120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800569e:	2000      	movs	r0, #0
 80056a0:	f000 f808 	bl	80056b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80056a4:	f7ff fb50 	bl	8004d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	40023c00 	.word	0x40023c00

080056b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056bc:	4b12      	ldr	r3, [pc, #72]	; (8005708 <HAL_InitTick+0x54>)
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	4b12      	ldr	r3, [pc, #72]	; (800570c <HAL_InitTick+0x58>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	4619      	mov	r1, r3
 80056c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80056ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fd59 	bl	800618a <HAL_SYSTICK_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e00e      	b.n	8005700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b0f      	cmp	r3, #15
 80056e6:	d80a      	bhi.n	80056fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056e8:	2200      	movs	r2, #0
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	f000 fd21 	bl	8006136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056f4:	4a06      	ldr	r2, [pc, #24]	; (8005710 <HAL_InitTick+0x5c>)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	e000      	b.n	8005700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
}
 8005700:	4618      	mov	r0, r3
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20000000 	.word	0x20000000
 800570c:	20000008 	.word	0x20000008
 8005710:	20000004 	.word	0x20000004

08005714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005718:	4b06      	ldr	r3, [pc, #24]	; (8005734 <HAL_IncTick+0x20>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	461a      	mov	r2, r3
 800571e:	4b06      	ldr	r3, [pc, #24]	; (8005738 <HAL_IncTick+0x24>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4413      	add	r3, r2
 8005724:	4a04      	ldr	r2, [pc, #16]	; (8005738 <HAL_IncTick+0x24>)
 8005726:	6013      	str	r3, [r2, #0]
}
 8005728:	bf00      	nop
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20000008 	.word	0x20000008
 8005738:	2000c25c 	.word	0x2000c25c

0800573c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  return uwTick;
 8005740:	4b03      	ldr	r3, [pc, #12]	; (8005750 <HAL_GetTick+0x14>)
 8005742:	681b      	ldr	r3, [r3, #0]
}
 8005744:	4618      	mov	r0, r3
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	2000c25c 	.word	0x2000c25c

08005754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800575c:	f7ff ffee 	bl	800573c <HAL_GetTick>
 8005760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576c:	d005      	beq.n	800577a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800576e:	4b09      	ldr	r3, [pc, #36]	; (8005794 <HAL_Delay+0x40>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800577a:	bf00      	nop
 800577c:	f7ff ffde 	bl	800573c <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	429a      	cmp	r2, r3
 800578a:	d8f7      	bhi.n	800577c <HAL_Delay+0x28>
  {
  }
}
 800578c:	bf00      	nop
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	20000008 	.word	0x20000008

08005798 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e033      	b.n	8005816 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d109      	bne.n	80057ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fb0a 	bl	8004dd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f003 0310 	and.w	r3, r3, #16
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d118      	bne.n	8005808 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80057de:	f023 0302 	bic.w	r3, r3, #2
 80057e2:	f043 0202 	orr.w	r2, r3, #2
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fa4a 	bl	8005c84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	f023 0303 	bic.w	r3, r3, #3
 80057fe:	f043 0201 	orr.w	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
 8005806:	e001      	b.n	800580c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_ADC_Start_DMA+0x1e>
 800583a:	2302      	movs	r3, #2
 800583c:	e0cc      	b.n	80059d8 <HAL_ADC_Start_DMA+0x1b8>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b01      	cmp	r3, #1
 8005852:	d018      	beq.n	8005886 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0201 	orr.w	r2, r2, #1
 8005862:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005864:	4b5e      	ldr	r3, [pc, #376]	; (80059e0 <HAL_ADC_Start_DMA+0x1c0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a5e      	ldr	r2, [pc, #376]	; (80059e4 <HAL_ADC_Start_DMA+0x1c4>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	0c9a      	lsrs	r2, r3, #18
 8005870:	4613      	mov	r3, r2
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	4413      	add	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005878:	e002      	b.n	8005880 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	3b01      	subs	r3, #1
 800587e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f9      	bne.n	800587a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	f040 80a0 	bne.w	80059d6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800589e:	f023 0301 	bic.w	r3, r3, #1
 80058a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d4:	d106      	bne.n	80058e4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058da:	f023 0206 	bic.w	r2, r3, #6
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	645a      	str	r2, [r3, #68]	; 0x44
 80058e2:	e002      	b.n	80058ea <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058f2:	4b3d      	ldr	r3, [pc, #244]	; (80059e8 <HAL_ADC_Start_DMA+0x1c8>)
 80058f4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	4a3c      	ldr	r2, [pc, #240]	; (80059ec <HAL_ADC_Start_DMA+0x1cc>)
 80058fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	4a3b      	ldr	r2, [pc, #236]	; (80059f0 <HAL_ADC_Start_DMA+0x1d0>)
 8005904:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	4a3a      	ldr	r2, [pc, #232]	; (80059f4 <HAL_ADC_Start_DMA+0x1d4>)
 800590c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005916:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005926:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005936:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	334c      	adds	r3, #76	; 0x4c
 8005942:	4619      	mov	r1, r3
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f000 fcda 	bl	8006300 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f003 031f 	and.w	r3, r3, #31
 8005954:	2b00      	cmp	r3, #0
 8005956:	d12a      	bne.n	80059ae <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a26      	ldr	r2, [pc, #152]	; (80059f8 <HAL_ADC_Start_DMA+0x1d8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d015      	beq.n	800598e <HAL_ADC_Start_DMA+0x16e>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a25      	ldr	r2, [pc, #148]	; (80059fc <HAL_ADC_Start_DMA+0x1dc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d105      	bne.n	8005978 <HAL_ADC_Start_DMA+0x158>
 800596c:	4b1e      	ldr	r3, [pc, #120]	; (80059e8 <HAL_ADC_Start_DMA+0x1c8>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a20      	ldr	r2, [pc, #128]	; (8005a00 <HAL_ADC_Start_DMA+0x1e0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d129      	bne.n	80059d6 <HAL_ADC_Start_DMA+0x1b6>
 8005982:	4b19      	ldr	r3, [pc, #100]	; (80059e8 <HAL_ADC_Start_DMA+0x1c8>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	2b0f      	cmp	r3, #15
 800598c:	d823      	bhi.n	80059d6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d11c      	bne.n	80059d6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80059aa:	609a      	str	r2, [r3, #8]
 80059ac:	e013      	b.n	80059d6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a11      	ldr	r2, [pc, #68]	; (80059f8 <HAL_ADC_Start_DMA+0x1d8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d10e      	bne.n	80059d6 <HAL_ADC_Start_DMA+0x1b6>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d107      	bne.n	80059d6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80059d4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20000000 	.word	0x20000000
 80059e4:	431bde83 	.word	0x431bde83
 80059e8:	40012300 	.word	0x40012300
 80059ec:	08005e7d 	.word	0x08005e7d
 80059f0:	08005f37 	.word	0x08005f37
 80059f4:	08005f53 	.word	0x08005f53
 80059f8:	40012000 	.word	0x40012000
 80059fc:	40012100 	.word	0x40012100
 8005a00:	40012200 	.word	0x40012200

08005a04 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_ADC_ConfigChannel+0x1c>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e105      	b.n	8005c68 <HAL_ADC_ConfigChannel+0x228>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b09      	cmp	r3, #9
 8005a6a:	d925      	bls.n	8005ab8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68d9      	ldr	r1, [r3, #12]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	4413      	add	r3, r2
 8005a80:	3b1e      	subs	r3, #30
 8005a82:	2207      	movs	r2, #7
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	43da      	mvns	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	400a      	ands	r2, r1
 8005a90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68d9      	ldr	r1, [r3, #12]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	4403      	add	r3, r0
 8005aaa:	3b1e      	subs	r3, #30
 8005aac:	409a      	lsls	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	60da      	str	r2, [r3, #12]
 8005ab6:	e022      	b.n	8005afe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6919      	ldr	r1, [r3, #16]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	4413      	add	r3, r2
 8005acc:	2207      	movs	r2, #7
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43da      	mvns	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	400a      	ands	r2, r1
 8005ada:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6919      	ldr	r1, [r3, #16]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	4618      	mov	r0, r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4403      	add	r3, r0
 8005af4:	409a      	lsls	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b06      	cmp	r3, #6
 8005b04:	d824      	bhi.n	8005b50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	3b05      	subs	r3, #5
 8005b18:	221f      	movs	r2, #31
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	43da      	mvns	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	400a      	ands	r2, r1
 8005b26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	4618      	mov	r0, r3
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	3b05      	subs	r3, #5
 8005b42:	fa00 f203 	lsl.w	r2, r0, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8005b4e:	e04c      	b.n	8005bea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b0c      	cmp	r3, #12
 8005b56:	d824      	bhi.n	8005ba2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	3b23      	subs	r3, #35	; 0x23
 8005b6a:	221f      	movs	r2, #31
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	43da      	mvns	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	400a      	ands	r2, r1
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	4618      	mov	r0, r3
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	3b23      	subs	r3, #35	; 0x23
 8005b94:	fa00 f203 	lsl.w	r2, r0, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8005ba0:	e023      	b.n	8005bea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3b41      	subs	r3, #65	; 0x41
 8005bb4:	221f      	movs	r2, #31
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43da      	mvns	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	400a      	ands	r2, r1
 8005bc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	3b41      	subs	r3, #65	; 0x41
 8005bde:	fa00 f203 	lsl.w	r2, r0, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bea:	4b22      	ldr	r3, [pc, #136]	; (8005c74 <HAL_ADC_ConfigChannel+0x234>)
 8005bec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a21      	ldr	r2, [pc, #132]	; (8005c78 <HAL_ADC_ConfigChannel+0x238>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d109      	bne.n	8005c0c <HAL_ADC_ConfigChannel+0x1cc>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b12      	cmp	r3, #18
 8005bfe:	d105      	bne.n	8005c0c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a19      	ldr	r2, [pc, #100]	; (8005c78 <HAL_ADC_ConfigChannel+0x238>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d123      	bne.n	8005c5e <HAL_ADC_ConfigChannel+0x21e>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b10      	cmp	r3, #16
 8005c1c:	d003      	beq.n	8005c26 <HAL_ADC_ConfigChannel+0x1e6>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b11      	cmp	r3, #17
 8005c24:	d11b      	bne.n	8005c5e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d111      	bne.n	8005c5e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c3a:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <HAL_ADC_ConfigChannel+0x23c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a10      	ldr	r2, [pc, #64]	; (8005c80 <HAL_ADC_ConfigChannel+0x240>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	0c9a      	lsrs	r2, r3, #18
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005c50:	e002      	b.n	8005c58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1f9      	bne.n	8005c52 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	40012300 	.word	0x40012300
 8005c78:	40012000 	.word	0x40012000
 8005c7c:	20000000 	.word	0x20000000
 8005c80:	431bde83 	.word	0x431bde83

08005c84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c8c:	4b79      	ldr	r3, [pc, #484]	; (8005e74 <ADC_Init+0x1f0>)
 8005c8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6859      	ldr	r1, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	021a      	lsls	r2, r3, #8
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005cdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6859      	ldr	r1, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6899      	ldr	r1, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	4a58      	ldr	r2, [pc, #352]	; (8005e78 <ADC_Init+0x1f4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d022      	beq.n	8005d62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6899      	ldr	r1, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6899      	ldr	r1, [r3, #8]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	609a      	str	r2, [r3, #8]
 8005d60:	e00f      	b.n	8005d82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0202 	bic.w	r2, r2, #2
 8005d90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6899      	ldr	r1, [r3, #8]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	7e1b      	ldrb	r3, [r3, #24]
 8005d9c:	005a      	lsls	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01b      	beq.n	8005de8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005dce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6859      	ldr	r1, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	035a      	lsls	r2, r3, #13
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	e007      	b.n	8005df8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005df6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	051a      	lsls	r2, r3, #20
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005e2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6899      	ldr	r1, [r3, #8]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e3a:	025a      	lsls	r2, r3, #9
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6899      	ldr	r1, [r3, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	029a      	lsls	r2, r3, #10
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	609a      	str	r2, [r3, #8]
}
 8005e68:	bf00      	nop
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	40012300 	.word	0x40012300
 8005e78:	0f000001 	.word	0x0f000001

08005e7c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d13c      	bne.n	8005f10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d12b      	bne.n	8005f08 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d127      	bne.n	8005f08 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d006      	beq.n	8005ed4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d119      	bne.n	8005f08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0220 	bic.w	r2, r2, #32
 8005ee2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d105      	bne.n	8005f08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	f043 0201 	orr.w	r2, r3, #1
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f7ff fd7b 	bl	8005a04 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005f0e:	e00e      	b.n	8005f2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	f003 0310 	and.w	r3, r3, #16
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f7ff fd85 	bl	8005a2c <HAL_ADC_ErrorCallback>
}
 8005f22:	e004      	b.n	8005f2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	4798      	blx	r3
}
 8005f2e:	bf00      	nop
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f7ff fd67 	bl	8005a18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f4a:	bf00      	nop
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2240      	movs	r2, #64	; 0x40
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6a:	f043 0204 	orr.w	r2, r3, #4
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7ff fd5a 	bl	8005a2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f78:	bf00      	nop
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f90:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fb2:	4a04      	ldr	r2, [pc, #16]	; (8005fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	60d3      	str	r3, [r2, #12]
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	e000ed00 	.word	0xe000ed00

08005fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fcc:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	0a1b      	lsrs	r3, r3, #8
 8005fd2:	f003 0307 	and.w	r3, r3, #7
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	e000ed00 	.word	0xe000ed00

08005fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	db0b      	blt.n	800600e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
 8005ff8:	f003 021f 	and.w	r2, r3, #31
 8005ffc:	4907      	ldr	r1, [pc, #28]	; (800601c <__NVIC_EnableIRQ+0x38>)
 8005ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	2001      	movs	r0, #1
 8006006:	fa00 f202 	lsl.w	r2, r0, r2
 800600a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	e000e100 	.word	0xe000e100

08006020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	6039      	str	r1, [r7, #0]
 800602a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800602c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006030:	2b00      	cmp	r3, #0
 8006032:	db0a      	blt.n	800604a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	490c      	ldr	r1, [pc, #48]	; (800606c <__NVIC_SetPriority+0x4c>)
 800603a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603e:	0112      	lsls	r2, r2, #4
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	440b      	add	r3, r1
 8006044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006048:	e00a      	b.n	8006060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	b2da      	uxtb	r2, r3
 800604e:	4908      	ldr	r1, [pc, #32]	; (8006070 <__NVIC_SetPriority+0x50>)
 8006050:	79fb      	ldrb	r3, [r7, #7]
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	3b04      	subs	r3, #4
 8006058:	0112      	lsls	r2, r2, #4
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	440b      	add	r3, r1
 800605e:	761a      	strb	r2, [r3, #24]
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	e000e100 	.word	0xe000e100
 8006070:	e000ed00 	.word	0xe000ed00

08006074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006074:	b480      	push	{r7}
 8006076:	b089      	sub	sp, #36	; 0x24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f1c3 0307 	rsb	r3, r3, #7
 800608e:	2b04      	cmp	r3, #4
 8006090:	bf28      	it	cs
 8006092:	2304      	movcs	r3, #4
 8006094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	3304      	adds	r3, #4
 800609a:	2b06      	cmp	r3, #6
 800609c:	d902      	bls.n	80060a4 <NVIC_EncodePriority+0x30>
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	3b03      	subs	r3, #3
 80060a2:	e000      	b.n	80060a6 <NVIC_EncodePriority+0x32>
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060a8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	43da      	mvns	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	401a      	ands	r2, r3
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060bc:	f04f 31ff 	mov.w	r1, #4294967295
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	fa01 f303 	lsl.w	r3, r1, r3
 80060c6:	43d9      	mvns	r1, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060cc:	4313      	orrs	r3, r2
         );
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3724      	adds	r7, #36	; 0x24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
	...

080060dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060ec:	d301      	bcc.n	80060f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060ee:	2301      	movs	r3, #1
 80060f0:	e00f      	b.n	8006112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060f2:	4a0a      	ldr	r2, [pc, #40]	; (800611c <SysTick_Config+0x40>)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060fa:	210f      	movs	r1, #15
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006100:	f7ff ff8e 	bl	8006020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <SysTick_Config+0x40>)
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800610a:	4b04      	ldr	r3, [pc, #16]	; (800611c <SysTick_Config+0x40>)
 800610c:	2207      	movs	r2, #7
 800610e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	e000e010 	.word	0xe000e010

08006120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff ff29 	bl	8005f80 <__NVIC_SetPriorityGrouping>
}
 800612e:	bf00      	nop
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006136:	b580      	push	{r7, lr}
 8006138:	b086      	sub	sp, #24
 800613a:	af00      	add	r7, sp, #0
 800613c:	4603      	mov	r3, r0
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
 8006142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006148:	f7ff ff3e 	bl	8005fc8 <__NVIC_GetPriorityGrouping>
 800614c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	6978      	ldr	r0, [r7, #20]
 8006154:	f7ff ff8e 	bl	8006074 <NVIC_EncodePriority>
 8006158:	4602      	mov	r2, r0
 800615a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800615e:	4611      	mov	r1, r2
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff ff5d 	bl	8006020 <__NVIC_SetPriority>
}
 8006166:	bf00      	nop
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	4603      	mov	r3, r0
 8006176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff ff31 	bl	8005fe4 <__NVIC_EnableIRQ>
}
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff ffa2 	bl	80060dc <SysTick_Config>
 8006198:	4603      	mov	r3, r0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80061b0:	f7ff fac4 	bl	800573c <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e099      	b.n	80062f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061e0:	e00f      	b.n	8006202 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061e2:	f7ff faab 	bl	800573c <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b05      	cmp	r3, #5
 80061ee:	d908      	bls.n	8006202 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2203      	movs	r2, #3
 80061fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e078      	b.n	80062f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e8      	bne.n	80061e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4b38      	ldr	r3, [pc, #224]	; (80062fc <HAL_DMA_Init+0x158>)
 800621c:	4013      	ands	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800622e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800623a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	2b04      	cmp	r3, #4
 800625a:	d107      	bne.n	800626c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006264:	4313      	orrs	r3, r2
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f023 0307 	bic.w	r3, r3, #7
 8006282:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	2b04      	cmp	r3, #4
 8006294:	d117      	bne.n	80062c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00e      	beq.n	80062c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fa6f 	bl	800678c <DMA_CheckFifoParam>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2240      	movs	r2, #64	; 0x40
 80062b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80062c2:	2301      	movs	r3, #1
 80062c4:	e016      	b.n	80062f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fa26 	bl	8006720 <DMA_CalcBaseAndBitshift>
 80062d4:	4603      	mov	r3, r0
 80062d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062dc:	223f      	movs	r2, #63	; 0x3f
 80062de:	409a      	lsls	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	f010803f 	.word	0xf010803f

08006300 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006316:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_DMA_Start_IT+0x26>
 8006322:	2302      	movs	r3, #2
 8006324:	e040      	b.n	80063a8 <HAL_DMA_Start_IT+0xa8>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b01      	cmp	r3, #1
 8006338:	d12f      	bne.n	800639a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2202      	movs	r2, #2
 800633e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f9b8 	bl	80066c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006358:	223f      	movs	r2, #63	; 0x3f
 800635a:	409a      	lsls	r2, r3
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0216 	orr.w	r2, r2, #22
 800636e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0208 	orr.w	r2, r2, #8
 8006386:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0201 	orr.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	e005      	b.n	80063a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80063a2:	2302      	movs	r3, #2
 80063a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063bc:	4b92      	ldr	r3, [pc, #584]	; (8006608 <HAL_DMA_IRQHandler+0x258>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a92      	ldr	r2, [pc, #584]	; (800660c <HAL_DMA_IRQHandler+0x25c>)
 80063c2:	fba2 2303 	umull	r2, r3, r2, r3
 80063c6:	0a9b      	lsrs	r3, r3, #10
 80063c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063da:	2208      	movs	r2, #8
 80063dc:	409a      	lsls	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4013      	ands	r3, r2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01a      	beq.n	800641c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d013      	beq.n	800641c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0204 	bic.w	r2, r2, #4
 8006402:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006408:	2208      	movs	r2, #8
 800640a:	409a      	lsls	r2, r3
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006414:	f043 0201 	orr.w	r2, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006420:	2201      	movs	r2, #1
 8006422:	409a      	lsls	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4013      	ands	r3, r2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d012      	beq.n	8006452 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643e:	2201      	movs	r2, #1
 8006440:	409a      	lsls	r2, r3
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644a:	f043 0202 	orr.w	r2, r3, #2
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006456:	2204      	movs	r2, #4
 8006458:	409a      	lsls	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4013      	ands	r3, r2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d012      	beq.n	8006488 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006474:	2204      	movs	r2, #4
 8006476:	409a      	lsls	r2, r3
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006480:	f043 0204 	orr.w	r2, r3, #4
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648c:	2210      	movs	r2, #16
 800648e:	409a      	lsls	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4013      	ands	r3, r2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d043      	beq.n	8006520 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d03c      	beq.n	8006520 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064aa:	2210      	movs	r2, #16
 80064ac:	409a      	lsls	r2, r3
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d018      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d108      	bne.n	80064e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d024      	beq.n	8006520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	4798      	blx	r3
 80064de:	e01f      	b.n	8006520 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01b      	beq.n	8006520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	4798      	blx	r3
 80064f0:	e016      	b.n	8006520 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d107      	bne.n	8006510 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0208 	bic.w	r2, r2, #8
 800650e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006524:	2220      	movs	r2, #32
 8006526:	409a      	lsls	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4013      	ands	r3, r2
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 808e 	beq.w	800664e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8086 	beq.w	800664e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006546:	2220      	movs	r2, #32
 8006548:	409a      	lsls	r2, r3
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b05      	cmp	r3, #5
 8006558:	d136      	bne.n	80065c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0216 	bic.w	r2, r2, #22
 8006568:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	695a      	ldr	r2, [r3, #20]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006578:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d103      	bne.n	800658a <HAL_DMA_IRQHandler+0x1da>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006586:	2b00      	cmp	r3, #0
 8006588:	d007      	beq.n	800659a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0208 	bic.w	r2, r2, #8
 8006598:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659e:	223f      	movs	r2, #63	; 0x3f
 80065a0:	409a      	lsls	r2, r3
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d07d      	beq.n	80066ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
        }
        return;
 80065c6:	e078      	b.n	80066ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d01c      	beq.n	8006610 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d108      	bne.n	80065f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d030      	beq.n	800664e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	4798      	blx	r3
 80065f4:	e02b      	b.n	800664e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d027      	beq.n	800664e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	4798      	blx	r3
 8006606:	e022      	b.n	800664e <HAL_DMA_IRQHandler+0x29e>
 8006608:	20000000 	.word	0x20000000
 800660c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10f      	bne.n	800663e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0210 	bic.w	r2, r2, #16
 800662c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006652:	2b00      	cmp	r3, #0
 8006654:	d032      	beq.n	80066bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d022      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2205      	movs	r2, #5
 8006666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0201 	bic.w	r2, r2, #1
 8006678:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	3301      	adds	r3, #1
 800667e:	60bb      	str	r3, [r7, #8]
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	429a      	cmp	r2, r3
 8006684:	d307      	bcc.n	8006696 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1f2      	bne.n	800667a <HAL_DMA_IRQHandler+0x2ca>
 8006694:	e000      	b.n	8006698 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006696:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4798      	blx	r3
 80066b8:	e000      	b.n	80066bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80066ba:	bf00      	nop
    }
  }
}
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop

080066c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80066e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2b40      	cmp	r3, #64	; 0x40
 80066f0:	d108      	bne.n	8006704 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006702:	e007      	b.n	8006714 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	60da      	str	r2, [r3, #12]
}
 8006714:	bf00      	nop
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	3b10      	subs	r3, #16
 8006730:	4a14      	ldr	r2, [pc, #80]	; (8006784 <DMA_CalcBaseAndBitshift+0x64>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	091b      	lsrs	r3, r3, #4
 8006738:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800673a:	4a13      	ldr	r2, [pc, #76]	; (8006788 <DMA_CalcBaseAndBitshift+0x68>)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b03      	cmp	r3, #3
 800674c:	d909      	bls.n	8006762 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006756:	f023 0303 	bic.w	r3, r3, #3
 800675a:	1d1a      	adds	r2, r3, #4
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	659a      	str	r2, [r3, #88]	; 0x58
 8006760:	e007      	b.n	8006772 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800676a:	f023 0303 	bic.w	r3, r3, #3
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	aaaaaaab 	.word	0xaaaaaaab
 8006788:	0800ee20 	.word	0x0800ee20

0800678c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d11f      	bne.n	80067e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d855      	bhi.n	8006858 <DMA_CheckFifoParam+0xcc>
 80067ac:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <DMA_CheckFifoParam+0x28>)
 80067ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b2:	bf00      	nop
 80067b4:	080067c5 	.word	0x080067c5
 80067b8:	080067d7 	.word	0x080067d7
 80067bc:	080067c5 	.word	0x080067c5
 80067c0:	08006859 	.word	0x08006859
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d045      	beq.n	800685c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067d4:	e042      	b.n	800685c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067de:	d13f      	bne.n	8006860 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067e4:	e03c      	b.n	8006860 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ee:	d121      	bne.n	8006834 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d836      	bhi.n	8006864 <DMA_CheckFifoParam+0xd8>
 80067f6:	a201      	add	r2, pc, #4	; (adr r2, 80067fc <DMA_CheckFifoParam+0x70>)
 80067f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fc:	0800680d 	.word	0x0800680d
 8006800:	08006813 	.word	0x08006813
 8006804:	0800680d 	.word	0x0800680d
 8006808:	08006825 	.word	0x08006825
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
      break;
 8006810:	e02f      	b.n	8006872 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d024      	beq.n	8006868 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006822:	e021      	b.n	8006868 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800682c:	d11e      	bne.n	800686c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006832:	e01b      	b.n	800686c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d902      	bls.n	8006840 <DMA_CheckFifoParam+0xb4>
 800683a:	2b03      	cmp	r3, #3
 800683c:	d003      	beq.n	8006846 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800683e:	e018      	b.n	8006872 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	73fb      	strb	r3, [r7, #15]
      break;
 8006844:	e015      	b.n	8006872 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00e      	beq.n	8006870 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	73fb      	strb	r3, [r7, #15]
      break;
 8006856:	e00b      	b.n	8006870 <DMA_CheckFifoParam+0xe4>
      break;
 8006858:	bf00      	nop
 800685a:	e00a      	b.n	8006872 <DMA_CheckFifoParam+0xe6>
      break;
 800685c:	bf00      	nop
 800685e:	e008      	b.n	8006872 <DMA_CheckFifoParam+0xe6>
      break;
 8006860:	bf00      	nop
 8006862:	e006      	b.n	8006872 <DMA_CheckFifoParam+0xe6>
      break;
 8006864:	bf00      	nop
 8006866:	e004      	b.n	8006872 <DMA_CheckFifoParam+0xe6>
      break;
 8006868:	bf00      	nop
 800686a:	e002      	b.n	8006872 <DMA_CheckFifoParam+0xe6>
      break;   
 800686c:	bf00      	nop
 800686e:	e000      	b.n	8006872 <DMA_CheckFifoParam+0xe6>
      break;
 8006870:	bf00      	nop
    }
  } 
  
  return status; 
 8006872:	7bfb      	ldrb	r3, [r7, #15]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800688a:	4b0b      	ldr	r3, [pc, #44]	; (80068b8 <HAL_FLASH_Unlock+0x38>)
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	da0b      	bge.n	80068aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_FLASH_Unlock+0x38>)
 8006894:	4a09      	ldr	r2, [pc, #36]	; (80068bc <HAL_FLASH_Unlock+0x3c>)
 8006896:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006898:	4b07      	ldr	r3, [pc, #28]	; (80068b8 <HAL_FLASH_Unlock+0x38>)
 800689a:	4a09      	ldr	r2, [pc, #36]	; (80068c0 <HAL_FLASH_Unlock+0x40>)
 800689c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800689e:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <HAL_FLASH_Unlock+0x38>)
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	da01      	bge.n	80068aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80068aa:	79fb      	ldrb	r3, [r7, #7]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	40023c00 	.word	0x40023c00
 80068bc:	45670123 	.word	0x45670123
 80068c0:	cdef89ab 	.word	0xcdef89ab

080068c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80068c8:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <HAL_FLASH_Lock+0x1c>)
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	4a04      	ldr	r2, [pc, #16]	; (80068e0 <HAL_FLASH_Lock+0x1c>)
 80068ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068d2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	40023c00 	.word	0x40023c00

080068e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80068f0:	4b1a      	ldr	r3, [pc, #104]	; (800695c <FLASH_WaitForLastOperation+0x78>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80068f6:	f7fe ff21 	bl	800573c <HAL_GetTick>
 80068fa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80068fc:	e010      	b.n	8006920 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006904:	d00c      	beq.n	8006920 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <FLASH_WaitForLastOperation+0x38>
 800690c:	f7fe ff16 	bl	800573c <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	429a      	cmp	r2, r3
 800691a:	d201      	bcs.n	8006920 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e019      	b.n	8006954 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006920:	4b0f      	ldr	r3, [pc, #60]	; (8006960 <FLASH_WaitForLastOperation+0x7c>)
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e8      	bne.n	80068fe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800692c:	4b0c      	ldr	r3, [pc, #48]	; (8006960 <FLASH_WaitForLastOperation+0x7c>)
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006938:	4b09      	ldr	r3, [pc, #36]	; (8006960 <FLASH_WaitForLastOperation+0x7c>)
 800693a:	2201      	movs	r2, #1
 800693c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800693e:	4b08      	ldr	r3, [pc, #32]	; (8006960 <FLASH_WaitForLastOperation+0x7c>)
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800694a:	f000 f80b 	bl	8006964 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006952:	2300      	movs	r3, #0
  
}  
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	2000c260 	.word	0x2000c260
 8006960:	40023c00 	.word	0x40023c00

08006964 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006968:	4b27      	ldr	r3, [pc, #156]	; (8006a08 <FLASH_SetErrorCode+0xa4>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0310 	and.w	r3, r3, #16
 8006970:	2b00      	cmp	r3, #0
 8006972:	d008      	beq.n	8006986 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006974:	4b25      	ldr	r3, [pc, #148]	; (8006a0c <FLASH_SetErrorCode+0xa8>)
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f043 0310 	orr.w	r3, r3, #16
 800697c:	4a23      	ldr	r2, [pc, #140]	; (8006a0c <FLASH_SetErrorCode+0xa8>)
 800697e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006980:	4b21      	ldr	r3, [pc, #132]	; (8006a08 <FLASH_SetErrorCode+0xa4>)
 8006982:	2210      	movs	r2, #16
 8006984:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006986:	4b20      	ldr	r3, [pc, #128]	; (8006a08 <FLASH_SetErrorCode+0xa4>)
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006992:	4b1e      	ldr	r3, [pc, #120]	; (8006a0c <FLASH_SetErrorCode+0xa8>)
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f043 0308 	orr.w	r3, r3, #8
 800699a:	4a1c      	ldr	r2, [pc, #112]	; (8006a0c <FLASH_SetErrorCode+0xa8>)
 800699c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800699e:	4b1a      	ldr	r3, [pc, #104]	; (8006a08 <FLASH_SetErrorCode+0xa4>)
 80069a0:	2220      	movs	r2, #32
 80069a2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80069a4:	4b18      	ldr	r3, [pc, #96]	; (8006a08 <FLASH_SetErrorCode+0xa4>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80069b0:	4b16      	ldr	r3, [pc, #88]	; (8006a0c <FLASH_SetErrorCode+0xa8>)
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	f043 0304 	orr.w	r3, r3, #4
 80069b8:	4a14      	ldr	r2, [pc, #80]	; (8006a0c <FLASH_SetErrorCode+0xa8>)
 80069ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80069bc:	4b12      	ldr	r3, [pc, #72]	; (8006a08 <FLASH_SetErrorCode+0xa4>)
 80069be:	2240      	movs	r2, #64	; 0x40
 80069c0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80069c2:	4b11      	ldr	r3, [pc, #68]	; (8006a08 <FLASH_SetErrorCode+0xa4>)
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d008      	beq.n	80069e0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80069ce:	4b0f      	ldr	r3, [pc, #60]	; (8006a0c <FLASH_SetErrorCode+0xa8>)
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f043 0302 	orr.w	r3, r3, #2
 80069d6:	4a0d      	ldr	r2, [pc, #52]	; (8006a0c <FLASH_SetErrorCode+0xa8>)
 80069d8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80069da:	4b0b      	ldr	r3, [pc, #44]	; (8006a08 <FLASH_SetErrorCode+0xa4>)
 80069dc:	2280      	movs	r2, #128	; 0x80
 80069de:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80069e0:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <FLASH_SetErrorCode+0xa4>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80069ec:	4b07      	ldr	r3, [pc, #28]	; (8006a0c <FLASH_SetErrorCode+0xa8>)
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	f043 0320 	orr.w	r3, r3, #32
 80069f4:	4a05      	ldr	r2, [pc, #20]	; (8006a0c <FLASH_SetErrorCode+0xa8>)
 80069f6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80069f8:	4b03      	ldr	r3, [pc, #12]	; (8006a08 <FLASH_SetErrorCode+0xa4>)
 80069fa:	2202      	movs	r2, #2
 80069fc:	60da      	str	r2, [r3, #12]
  }
}
 80069fe:	bf00      	nop
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	40023c00 	.word	0x40023c00
 8006a0c:	2000c260 	.word	0x2000c260

08006a10 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006a22:	4b31      	ldr	r3, [pc, #196]	; (8006ae8 <HAL_FLASHEx_Erase+0xd8>)
 8006a24:	7e1b      	ldrb	r3, [r3, #24]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d101      	bne.n	8006a2e <HAL_FLASHEx_Erase+0x1e>
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	e058      	b.n	8006ae0 <HAL_FLASHEx_Erase+0xd0>
 8006a2e:	4b2e      	ldr	r3, [pc, #184]	; (8006ae8 <HAL_FLASHEx_Erase+0xd8>)
 8006a30:	2201      	movs	r2, #1
 8006a32:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a38:	f7ff ff54 	bl	80068e4 <FLASH_WaitForLastOperation>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d148      	bne.n	8006ad8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d115      	bne.n	8006a82 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	4619      	mov	r1, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	f000 f844 	bl	8006af0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a6c:	f7ff ff3a 	bl	80068e4 <FLASH_WaitForLastOperation>
 8006a70:	4603      	mov	r3, r0
 8006a72:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006a74:	4b1d      	ldr	r3, [pc, #116]	; (8006aec <HAL_FLASHEx_Erase+0xdc>)
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	4a1c      	ldr	r2, [pc, #112]	; (8006aec <HAL_FLASHEx_Erase+0xdc>)
 8006a7a:	f023 0304 	bic.w	r3, r3, #4
 8006a7e:	6113      	str	r3, [r2, #16]
 8006a80:	e028      	b.n	8006ad4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	60bb      	str	r3, [r7, #8]
 8006a88:	e01c      	b.n	8006ac4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	4619      	mov	r1, r3
 8006a92:	68b8      	ldr	r0, [r7, #8]
 8006a94:	f000 f850 	bl	8006b38 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a9c:	f7ff ff22 	bl	80068e4 <FLASH_WaitForLastOperation>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006aa4:	4b11      	ldr	r3, [pc, #68]	; (8006aec <HAL_FLASHEx_Erase+0xdc>)
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	4a10      	ldr	r2, [pc, #64]	; (8006aec <HAL_FLASHEx_Erase+0xdc>)
 8006aaa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006aae:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	601a      	str	r2, [r3, #0]
          break;
 8006abc:	e00a      	b.n	8006ad4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	60bb      	str	r3, [r7, #8]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	4413      	add	r3, r2
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d3da      	bcc.n	8006a8a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8006ad4:	f000 f878 	bl	8006bc8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006ad8:	4b03      	ldr	r3, [pc, #12]	; (8006ae8 <HAL_FLASHEx_Erase+0xd8>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	761a      	strb	r2, [r3, #24]

  return status;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	2000c260 	.word	0x2000c260
 8006aec:	40023c00 	.word	0x40023c00

08006af0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	6039      	str	r1, [r7, #0]
 8006afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006afc:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <FLASH_MassErase+0x44>)
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	4a0c      	ldr	r2, [pc, #48]	; (8006b34 <FLASH_MassErase+0x44>)
 8006b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006b08:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <FLASH_MassErase+0x44>)
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	4a09      	ldr	r2, [pc, #36]	; (8006b34 <FLASH_MassErase+0x44>)
 8006b0e:	f043 0304 	orr.w	r3, r3, #4
 8006b12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8006b14:	4b07      	ldr	r3, [pc, #28]	; (8006b34 <FLASH_MassErase+0x44>)
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	021b      	lsls	r3, r3, #8
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	4a05      	ldr	r2, [pc, #20]	; (8006b34 <FLASH_MassErase+0x44>)
 8006b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b24:	6113      	str	r3, [r2, #16]
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40023c00 	.word	0x40023c00

08006b38 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d102      	bne.n	8006b54 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	e010      	b.n	8006b76 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d103      	bne.n	8006b62 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	e009      	b.n	8006b76 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d103      	bne.n	8006b70 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	e002      	b.n	8006b76 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006b70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b74:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006b76:	4b13      	ldr	r3, [pc, #76]	; (8006bc4 <FLASH_Erase_Sector+0x8c>)
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	4a12      	ldr	r2, [pc, #72]	; (8006bc4 <FLASH_Erase_Sector+0x8c>)
 8006b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006b82:	4b10      	ldr	r3, [pc, #64]	; (8006bc4 <FLASH_Erase_Sector+0x8c>)
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	490f      	ldr	r1, [pc, #60]	; (8006bc4 <FLASH_Erase_Sector+0x8c>)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	; (8006bc4 <FLASH_Erase_Sector+0x8c>)
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	4a0c      	ldr	r2, [pc, #48]	; (8006bc4 <FLASH_Erase_Sector+0x8c>)
 8006b94:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006b98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <FLASH_Erase_Sector+0x8c>)
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	4a07      	ldr	r2, [pc, #28]	; (8006bc4 <FLASH_Erase_Sector+0x8c>)
 8006ba6:	f043 0302 	orr.w	r3, r3, #2
 8006baa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006bac:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <FLASH_Erase_Sector+0x8c>)
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	4a04      	ldr	r2, [pc, #16]	; (8006bc4 <FLASH_Erase_Sector+0x8c>)
 8006bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bb6:	6113      	str	r3, [r2, #16]
}
 8006bb8:	bf00      	nop
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	40023c00 	.word	0x40023c00

08006bc8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8006bcc:	4b20      	ldr	r3, [pc, #128]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d017      	beq.n	8006c08 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006bd8:	4b1d      	ldr	r3, [pc, #116]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1c      	ldr	r2, [pc, #112]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006bde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006be2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006be4:	4b1a      	ldr	r3, [pc, #104]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a19      	ldr	r2, [pc, #100]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006bea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	4b17      	ldr	r3, [pc, #92]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a16      	ldr	r2, [pc, #88]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bfa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006bfc:	4b14      	ldr	r3, [pc, #80]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a13      	ldr	r2, [pc, #76]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c06:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006c08:	4b11      	ldr	r3, [pc, #68]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d017      	beq.n	8006c44 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006c14:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a0d      	ldr	r2, [pc, #52]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006c1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c1e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006c20:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a0a      	ldr	r2, [pc, #40]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006c26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	4b08      	ldr	r3, [pc, #32]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a07      	ldr	r2, [pc, #28]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006c32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c36:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006c38:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a04      	ldr	r2, [pc, #16]	; (8006c50 <FLASH_FlushCaches+0x88>)
 8006c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c42:	6013      	str	r3, [r2, #0]
  }
}
 8006c44:	bf00      	nop
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	40023c00 	.word	0x40023c00

08006c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b089      	sub	sp, #36	; 0x24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c62:	2300      	movs	r3, #0
 8006c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61fb      	str	r3, [r7, #28]
 8006c6e:	e16b      	b.n	8006f48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c70:	2201      	movs	r2, #1
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	fa02 f303 	lsl.w	r3, r2, r3
 8006c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4013      	ands	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	f040 815a 	bne.w	8006f42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d00b      	beq.n	8006cae <HAL_GPIO_Init+0x5a>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d007      	beq.n	8006cae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ca2:	2b11      	cmp	r3, #17
 8006ca4:	d003      	beq.n	8006cae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b12      	cmp	r3, #18
 8006cac:	d130      	bne.n	8006d10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	2203      	movs	r2, #3
 8006cba:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbe:	43db      	mvns	r3, r3
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	68da      	ldr	r2, [r3, #12]
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cec:	43db      	mvns	r3, r3
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	091b      	lsrs	r3, r3, #4
 8006cfa:	f003 0201 	and.w	r2, r3, #1
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	fa02 f303 	lsl.w	r3, r2, r3
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	2203      	movs	r2, #3
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	43db      	mvns	r3, r3
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	4013      	ands	r3, r2
 8006d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	fa02 f303 	lsl.w	r3, r2, r3
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d003      	beq.n	8006d50 <HAL_GPIO_Init+0xfc>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2b12      	cmp	r3, #18
 8006d4e:	d123      	bne.n	8006d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	08da      	lsrs	r2, r3, #3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3208      	adds	r2, #8
 8006d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	f003 0307 	and.w	r3, r3, #7
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	220f      	movs	r2, #15
 8006d68:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	4013      	ands	r3, r2
 8006d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	08da      	lsrs	r2, r3, #3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3208      	adds	r2, #8
 8006d92:	69b9      	ldr	r1, [r7, #24]
 8006d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	2203      	movs	r2, #3
 8006da4:	fa02 f303 	lsl.w	r3, r2, r3
 8006da8:	43db      	mvns	r3, r3
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	4013      	ands	r3, r2
 8006dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f003 0203 	and.w	r2, r3, #3
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 80b4 	beq.w	8006f42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	4b5f      	ldr	r3, [pc, #380]	; (8006f5c <HAL_GPIO_Init+0x308>)
 8006de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de2:	4a5e      	ldr	r2, [pc, #376]	; (8006f5c <HAL_GPIO_Init+0x308>)
 8006de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006de8:	6453      	str	r3, [r2, #68]	; 0x44
 8006dea:	4b5c      	ldr	r3, [pc, #368]	; (8006f5c <HAL_GPIO_Init+0x308>)
 8006dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006df6:	4a5a      	ldr	r2, [pc, #360]	; (8006f60 <HAL_GPIO_Init+0x30c>)
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	089b      	lsrs	r3, r3, #2
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	220f      	movs	r2, #15
 8006e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e12:	43db      	mvns	r3, r3
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	4013      	ands	r3, r2
 8006e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a51      	ldr	r2, [pc, #324]	; (8006f64 <HAL_GPIO_Init+0x310>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d02b      	beq.n	8006e7a <HAL_GPIO_Init+0x226>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a50      	ldr	r2, [pc, #320]	; (8006f68 <HAL_GPIO_Init+0x314>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d025      	beq.n	8006e76 <HAL_GPIO_Init+0x222>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a4f      	ldr	r2, [pc, #316]	; (8006f6c <HAL_GPIO_Init+0x318>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d01f      	beq.n	8006e72 <HAL_GPIO_Init+0x21e>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a4e      	ldr	r2, [pc, #312]	; (8006f70 <HAL_GPIO_Init+0x31c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d019      	beq.n	8006e6e <HAL_GPIO_Init+0x21a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a4d      	ldr	r2, [pc, #308]	; (8006f74 <HAL_GPIO_Init+0x320>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d013      	beq.n	8006e6a <HAL_GPIO_Init+0x216>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a4c      	ldr	r2, [pc, #304]	; (8006f78 <HAL_GPIO_Init+0x324>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00d      	beq.n	8006e66 <HAL_GPIO_Init+0x212>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a4b      	ldr	r2, [pc, #300]	; (8006f7c <HAL_GPIO_Init+0x328>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d007      	beq.n	8006e62 <HAL_GPIO_Init+0x20e>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a4a      	ldr	r2, [pc, #296]	; (8006f80 <HAL_GPIO_Init+0x32c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d101      	bne.n	8006e5e <HAL_GPIO_Init+0x20a>
 8006e5a:	2307      	movs	r3, #7
 8006e5c:	e00e      	b.n	8006e7c <HAL_GPIO_Init+0x228>
 8006e5e:	2308      	movs	r3, #8
 8006e60:	e00c      	b.n	8006e7c <HAL_GPIO_Init+0x228>
 8006e62:	2306      	movs	r3, #6
 8006e64:	e00a      	b.n	8006e7c <HAL_GPIO_Init+0x228>
 8006e66:	2305      	movs	r3, #5
 8006e68:	e008      	b.n	8006e7c <HAL_GPIO_Init+0x228>
 8006e6a:	2304      	movs	r3, #4
 8006e6c:	e006      	b.n	8006e7c <HAL_GPIO_Init+0x228>
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e004      	b.n	8006e7c <HAL_GPIO_Init+0x228>
 8006e72:	2302      	movs	r3, #2
 8006e74:	e002      	b.n	8006e7c <HAL_GPIO_Init+0x228>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <HAL_GPIO_Init+0x228>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	69fa      	ldr	r2, [r7, #28]
 8006e7e:	f002 0203 	and.w	r2, r2, #3
 8006e82:	0092      	lsls	r2, r2, #2
 8006e84:	4093      	lsls	r3, r2
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e8c:	4934      	ldr	r1, [pc, #208]	; (8006f60 <HAL_GPIO_Init+0x30c>)
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	089b      	lsrs	r3, r3, #2
 8006e92:	3302      	adds	r3, #2
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e9a:	4b3a      	ldr	r3, [pc, #232]	; (8006f84 <HAL_GPIO_Init+0x330>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	43db      	mvns	r3, r3
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ebe:	4a31      	ldr	r2, [pc, #196]	; (8006f84 <HAL_GPIO_Init+0x330>)
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006ec4:	4b2f      	ldr	r3, [pc, #188]	; (8006f84 <HAL_GPIO_Init+0x330>)
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	43db      	mvns	r3, r3
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ee8:	4a26      	ldr	r2, [pc, #152]	; (8006f84 <HAL_GPIO_Init+0x330>)
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006eee:	4b25      	ldr	r3, [pc, #148]	; (8006f84 <HAL_GPIO_Init+0x330>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	43db      	mvns	r3, r3
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	4013      	ands	r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f12:	4a1c      	ldr	r2, [pc, #112]	; (8006f84 <HAL_GPIO_Init+0x330>)
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f18:	4b1a      	ldr	r3, [pc, #104]	; (8006f84 <HAL_GPIO_Init+0x330>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	43db      	mvns	r3, r3
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	4013      	ands	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f3c:	4a11      	ldr	r2, [pc, #68]	; (8006f84 <HAL_GPIO_Init+0x330>)
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	3301      	adds	r3, #1
 8006f46:	61fb      	str	r3, [r7, #28]
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	2b0f      	cmp	r3, #15
 8006f4c:	f67f ae90 	bls.w	8006c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f50:	bf00      	nop
 8006f52:	3724      	adds	r7, #36	; 0x24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	40013800 	.word	0x40013800
 8006f64:	40020000 	.word	0x40020000
 8006f68:	40020400 	.word	0x40020400
 8006f6c:	40020800 	.word	0x40020800
 8006f70:	40020c00 	.word	0x40020c00
 8006f74:	40021000 	.word	0x40021000
 8006f78:	40021400 	.word	0x40021400
 8006f7c:	40021800 	.word	0x40021800
 8006f80:	40021c00 	.word	0x40021c00
 8006f84:	40013c00 	.word	0x40013c00

08006f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	807b      	strh	r3, [r7, #2]
 8006f94:	4613      	mov	r3, r2
 8006f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f98:	787b      	ldrb	r3, [r7, #1]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f9e:	887a      	ldrh	r2, [r7, #2]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006fa4:	e003      	b.n	8006fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006fa6:	887b      	ldrh	r3, [r7, #2]
 8006fa8:	041a      	lsls	r2, r3, #16
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	619a      	str	r2, [r3, #24]
}
 8006fae:	bf00      	nop
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
	...

08006fbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006fc6:	4b08      	ldr	r3, [pc, #32]	; (8006fe8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fc8:	695a      	ldr	r2, [r3, #20]
 8006fca:	88fb      	ldrh	r3, [r7, #6]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d006      	beq.n	8006fe0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006fd2:	4a05      	ldr	r2, [pc, #20]	; (8006fe8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006fd8:	88fb      	ldrh	r3, [r7, #6]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fd fe3a 	bl	8004c54 <HAL_GPIO_EXTI_Callback>
  }
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	40013c00 	.word	0x40013c00

08006fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e11f      	b.n	800723e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d106      	bne.n	8007018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7fd ff8c 	bl	8004f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2224      	movs	r2, #36	; 0x24
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0201 	bic.w	r2, r2, #1
 800702e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800703e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800704e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007050:	f001 fb68 	bl	8008724 <HAL_RCC_GetPCLK1Freq>
 8007054:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	4a7b      	ldr	r2, [pc, #492]	; (8007248 <HAL_I2C_Init+0x25c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d807      	bhi.n	8007070 <HAL_I2C_Init+0x84>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4a7a      	ldr	r2, [pc, #488]	; (800724c <HAL_I2C_Init+0x260>)
 8007064:	4293      	cmp	r3, r2
 8007066:	bf94      	ite	ls
 8007068:	2301      	movls	r3, #1
 800706a:	2300      	movhi	r3, #0
 800706c:	b2db      	uxtb	r3, r3
 800706e:	e006      	b.n	800707e <HAL_I2C_Init+0x92>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4a77      	ldr	r2, [pc, #476]	; (8007250 <HAL_I2C_Init+0x264>)
 8007074:	4293      	cmp	r3, r2
 8007076:	bf94      	ite	ls
 8007078:	2301      	movls	r3, #1
 800707a:	2300      	movhi	r3, #0
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e0db      	b.n	800723e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4a72      	ldr	r2, [pc, #456]	; (8007254 <HAL_I2C_Init+0x268>)
 800708a:	fba2 2303 	umull	r2, r3, r2, r3
 800708e:	0c9b      	lsrs	r3, r3, #18
 8007090:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	4a64      	ldr	r2, [pc, #400]	; (8007248 <HAL_I2C_Init+0x25c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d802      	bhi.n	80070c0 <HAL_I2C_Init+0xd4>
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	3301      	adds	r3, #1
 80070be:	e009      	b.n	80070d4 <HAL_I2C_Init+0xe8>
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80070c6:	fb02 f303 	mul.w	r3, r2, r3
 80070ca:	4a63      	ldr	r2, [pc, #396]	; (8007258 <HAL_I2C_Init+0x26c>)
 80070cc:	fba2 2303 	umull	r2, r3, r2, r3
 80070d0:	099b      	lsrs	r3, r3, #6
 80070d2:	3301      	adds	r3, #1
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	6812      	ldr	r2, [r2, #0]
 80070d8:	430b      	orrs	r3, r1
 80070da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80070e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	4956      	ldr	r1, [pc, #344]	; (8007248 <HAL_I2C_Init+0x25c>)
 80070f0:	428b      	cmp	r3, r1
 80070f2:	d80d      	bhi.n	8007110 <HAL_I2C_Init+0x124>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	1e59      	subs	r1, r3, #1
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8007102:	3301      	adds	r3, #1
 8007104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007108:	2b04      	cmp	r3, #4
 800710a:	bf38      	it	cc
 800710c:	2304      	movcc	r3, #4
 800710e:	e04f      	b.n	80071b0 <HAL_I2C_Init+0x1c4>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d111      	bne.n	800713c <HAL_I2C_Init+0x150>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	1e58      	subs	r0, r3, #1
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6859      	ldr	r1, [r3, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	440b      	add	r3, r1
 8007126:	fbb0 f3f3 	udiv	r3, r0, r3
 800712a:	3301      	adds	r3, #1
 800712c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007130:	2b00      	cmp	r3, #0
 8007132:	bf0c      	ite	eq
 8007134:	2301      	moveq	r3, #1
 8007136:	2300      	movne	r3, #0
 8007138:	b2db      	uxtb	r3, r3
 800713a:	e012      	b.n	8007162 <HAL_I2C_Init+0x176>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	1e58      	subs	r0, r3, #1
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6859      	ldr	r1, [r3, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	0099      	lsls	r1, r3, #2
 800714c:	440b      	add	r3, r1
 800714e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007152:	3301      	adds	r3, #1
 8007154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007158:	2b00      	cmp	r3, #0
 800715a:	bf0c      	ite	eq
 800715c:	2301      	moveq	r3, #1
 800715e:	2300      	movne	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <HAL_I2C_Init+0x17e>
 8007166:	2301      	movs	r3, #1
 8007168:	e022      	b.n	80071b0 <HAL_I2C_Init+0x1c4>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10e      	bne.n	8007190 <HAL_I2C_Init+0x1a4>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1e58      	subs	r0, r3, #1
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6859      	ldr	r1, [r3, #4]
 800717a:	460b      	mov	r3, r1
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	440b      	add	r3, r1
 8007180:	fbb0 f3f3 	udiv	r3, r0, r3
 8007184:	3301      	adds	r3, #1
 8007186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800718a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800718e:	e00f      	b.n	80071b0 <HAL_I2C_Init+0x1c4>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	1e58      	subs	r0, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6859      	ldr	r1, [r3, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	440b      	add	r3, r1
 800719e:	0099      	lsls	r1, r3, #2
 80071a0:	440b      	add	r3, r1
 80071a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80071a6:	3301      	adds	r3, #1
 80071a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071b0:	6879      	ldr	r1, [r7, #4]
 80071b2:	6809      	ldr	r1, [r1, #0]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69da      	ldr	r2, [r3, #28]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	431a      	orrs	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80071de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6911      	ldr	r1, [r2, #16]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68d2      	ldr	r2, [r2, #12]
 80071ea:	4311      	orrs	r1, r2
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6812      	ldr	r2, [r2, #0]
 80071f0:	430b      	orrs	r3, r1
 80071f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	695a      	ldr	r2, [r3, #20]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	431a      	orrs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0201 	orr.w	r2, r2, #1
 800721e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	000186a0 	.word	0x000186a0
 800724c:	001e847f 	.word	0x001e847f
 8007250:	003d08ff 	.word	0x003d08ff
 8007254:	431bde83 	.word	0x431bde83
 8007258:	10624dd3 	.word	0x10624dd3

0800725c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	607a      	str	r2, [r7, #4]
 8007266:	461a      	mov	r2, r3
 8007268:	460b      	mov	r3, r1
 800726a:	817b      	strh	r3, [r7, #10]
 800726c:	4613      	mov	r3, r2
 800726e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007270:	f7fe fa64 	bl	800573c <HAL_GetTick>
 8007274:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b20      	cmp	r3, #32
 8007280:	f040 80e0 	bne.w	8007444 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	2319      	movs	r3, #25
 800728a:	2201      	movs	r2, #1
 800728c:	4970      	ldr	r1, [pc, #448]	; (8007450 <HAL_I2C_Master_Transmit+0x1f4>)
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fc56 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800729a:	2302      	movs	r3, #2
 800729c:	e0d3      	b.n	8007446 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_I2C_Master_Transmit+0x50>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e0cc      	b.n	8007446 <HAL_I2C_Master_Transmit+0x1ea>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d007      	beq.n	80072d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f042 0201 	orr.w	r2, r2, #1
 80072d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2221      	movs	r2, #33	; 0x21
 80072e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2210      	movs	r2, #16
 80072ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	893a      	ldrh	r2, [r7, #8]
 8007302:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4a50      	ldr	r2, [pc, #320]	; (8007454 <HAL_I2C_Master_Transmit+0x1f8>)
 8007312:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007314:	8979      	ldrh	r1, [r7, #10]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	6a3a      	ldr	r2, [r7, #32]
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 fac2 	bl	80078a4 <I2C_MasterRequestWrite>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e08d      	b.n	8007446 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800732a:	2300      	movs	r3, #0
 800732c:	613b      	str	r3, [r7, #16]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	613b      	str	r3, [r7, #16]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007340:	e066      	b.n	8007410 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	6a39      	ldr	r1, [r7, #32]
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 fcd0 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00d      	beq.n	800736e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	2b04      	cmp	r3, #4
 8007358:	d107      	bne.n	800736a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007368:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e06b      	b.n	8007446 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	781a      	ldrb	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007396:	3b01      	subs	r3, #1
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d11b      	bne.n	80073e4 <HAL_I2C_Master_Transmit+0x188>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d017      	beq.n	80073e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	781a      	ldrb	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073dc:	3b01      	subs	r3, #1
 80073de:	b29a      	uxth	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	6a39      	ldr	r1, [r7, #32]
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fcc0 	bl	8007d6e <I2C_WaitOnBTFFlagUntilTimeout>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00d      	beq.n	8007410 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d107      	bne.n	800740c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800740a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e01a      	b.n	8007446 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007414:	2b00      	cmp	r3, #0
 8007416:	d194      	bne.n	8007342 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2220      	movs	r2, #32
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	e000      	b.n	8007446 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007444:	2302      	movs	r3, #2
  }
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	00100002 	.word	0x00100002
 8007454:	ffff0000 	.word	0xffff0000

08007458 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08c      	sub	sp, #48	; 0x30
 800745c:	af02      	add	r7, sp, #8
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	461a      	mov	r2, r3
 8007464:	460b      	mov	r3, r1
 8007466:	817b      	strh	r3, [r7, #10]
 8007468:	4613      	mov	r3, r2
 800746a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800746c:	f7fe f966 	bl	800573c <HAL_GetTick>
 8007470:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b20      	cmp	r3, #32
 800747c:	f040 820b 	bne.w	8007896 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	2319      	movs	r3, #25
 8007486:	2201      	movs	r2, #1
 8007488:	497c      	ldr	r1, [pc, #496]	; (800767c <HAL_I2C_Master_Receive+0x224>)
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 fb58 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007496:	2302      	movs	r3, #2
 8007498:	e1fe      	b.n	8007898 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_I2C_Master_Receive+0x50>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e1f7      	b.n	8007898 <HAL_I2C_Master_Receive+0x440>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d007      	beq.n	80074ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f042 0201 	orr.w	r2, r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2222      	movs	r2, #34	; 0x22
 80074e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2210      	movs	r2, #16
 80074ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	893a      	ldrh	r2, [r7, #8]
 80074fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4a5c      	ldr	r2, [pc, #368]	; (8007680 <HAL_I2C_Master_Receive+0x228>)
 800750e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007510:	8979      	ldrh	r1, [r7, #10]
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fa46 	bl	80079a8 <I2C_MasterRequestRead>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e1b8      	b.n	8007898 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752a:	2b00      	cmp	r3, #0
 800752c:	d113      	bne.n	8007556 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800752e:	2300      	movs	r3, #0
 8007530:	623b      	str	r3, [r7, #32]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	623b      	str	r3, [r7, #32]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	623b      	str	r3, [r7, #32]
 8007542:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	e18c      	b.n	8007870 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755a:	2b01      	cmp	r3, #1
 800755c:	d11b      	bne.n	8007596 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800756c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800756e:	2300      	movs	r3, #0
 8007570:	61fb      	str	r3, [r7, #28]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	61fb      	str	r3, [r7, #28]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	61fb      	str	r3, [r7, #28]
 8007582:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	e16c      	b.n	8007870 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759a:	2b02      	cmp	r3, #2
 800759c:	d11b      	bne.n	80075d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075be:	2300      	movs	r3, #0
 80075c0:	61bb      	str	r3, [r7, #24]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	61bb      	str	r3, [r7, #24]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	61bb      	str	r3, [r7, #24]
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	e14c      	b.n	8007870 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075e6:	2300      	movs	r3, #0
 80075e8:	617b      	str	r3, [r7, #20]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80075fc:	e138      	b.n	8007870 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007602:	2b03      	cmp	r3, #3
 8007604:	f200 80f1 	bhi.w	80077ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760c:	2b01      	cmp	r3, #1
 800760e:	d123      	bne.n	8007658 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007612:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 fbeb 	bl	8007df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e139      	b.n	8007898 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	691a      	ldr	r2, [r3, #16]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764c:	b29b      	uxth	r3, r3
 800764e:	3b01      	subs	r3, #1
 8007650:	b29a      	uxth	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007656:	e10b      	b.n	8007870 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800765c:	2b02      	cmp	r3, #2
 800765e:	d14e      	bne.n	80076fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007666:	2200      	movs	r2, #0
 8007668:	4906      	ldr	r1, [pc, #24]	; (8007684 <HAL_I2C_Master_Receive+0x22c>)
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 fa68 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d008      	beq.n	8007688 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e10e      	b.n	8007898 <HAL_I2C_Master_Receive+0x440>
 800767a:	bf00      	nop
 800767c:	00100002 	.word	0x00100002
 8007680:	ffff0000 	.word	0xffff0000
 8007684:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691a      	ldr	r2, [r3, #16]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	691a      	ldr	r2, [r3, #16]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	b2d2      	uxtb	r2, r2
 80076d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	3b01      	subs	r3, #1
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076fc:	e0b8      	b.n	8007870 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	2200      	movs	r2, #0
 8007706:	4966      	ldr	r1, [pc, #408]	; (80078a0 <HAL_I2C_Master_Receive+0x448>)
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 fa19 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e0bf      	b.n	8007898 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007750:	b29b      	uxth	r3, r3
 8007752:	3b01      	subs	r3, #1
 8007754:	b29a      	uxth	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007760:	2200      	movs	r2, #0
 8007762:	494f      	ldr	r1, [pc, #316]	; (80078a0 <HAL_I2C_Master_Receive+0x448>)
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 f9eb 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e091      	b.n	8007898 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691a      	ldr	r2, [r3, #16]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	b2d2      	uxtb	r2, r2
 8007790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	3b01      	subs	r3, #1
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	b2d2      	uxtb	r2, r2
 80077c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d2:	3b01      	subs	r3, #1
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077de:	b29b      	uxth	r3, r3
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077e8:	e042      	b.n	8007870 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 fafe 	bl	8007df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e04c      	b.n	8007898 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	b2d2      	uxtb	r2, r2
 800780a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781a:	3b01      	subs	r3, #1
 800781c:	b29a      	uxth	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007826:	b29b      	uxth	r3, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	f003 0304 	and.w	r3, r3, #4
 800783a:	2b04      	cmp	r3, #4
 800783c:	d118      	bne.n	8007870 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	691a      	ldr	r2, [r3, #16]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	b2d2      	uxtb	r2, r2
 800784a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007866:	b29b      	uxth	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007874:	2b00      	cmp	r3, #0
 8007876:	f47f aec2 	bne.w	80075fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2220      	movs	r2, #32
 800787e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	e000      	b.n	8007898 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007896:	2302      	movs	r3, #2
  }
}
 8007898:	4618      	mov	r0, r3
 800789a:	3728      	adds	r7, #40	; 0x28
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	00010004 	.word	0x00010004

080078a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b088      	sub	sp, #32
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	607a      	str	r2, [r7, #4]
 80078ae:	603b      	str	r3, [r7, #0]
 80078b0:	460b      	mov	r3, r1
 80078b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d006      	beq.n	80078ce <I2C_MasterRequestWrite+0x2a>
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d003      	beq.n	80078ce <I2C_MasterRequestWrite+0x2a>
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078cc:	d108      	bne.n	80078e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	e00b      	b.n	80078f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e4:	2b12      	cmp	r3, #18
 80078e6:	d107      	bne.n	80078f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 f91b 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00c      	beq.n	800792a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007924:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e035      	b.n	8007996 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007932:	d108      	bne.n	8007946 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007934:	897b      	ldrh	r3, [r7, #10]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007942:	611a      	str	r2, [r3, #16]
 8007944:	e01b      	b.n	800797e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007946:	897b      	ldrh	r3, [r7, #10]
 8007948:	11db      	asrs	r3, r3, #7
 800794a:	b2db      	uxtb	r3, r3
 800794c:	f003 0306 	and.w	r3, r3, #6
 8007950:	b2db      	uxtb	r3, r3
 8007952:	f063 030f 	orn	r3, r3, #15
 8007956:	b2da      	uxtb	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	490f      	ldr	r1, [pc, #60]	; (80079a0 <I2C_MasterRequestWrite+0xfc>)
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f942 	bl	8007bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e010      	b.n	8007996 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007974:	897b      	ldrh	r3, [r7, #10]
 8007976:	b2da      	uxtb	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	4908      	ldr	r1, [pc, #32]	; (80079a4 <I2C_MasterRequestWrite+0x100>)
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f932 	bl	8007bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e000      	b.n	8007996 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	00010008 	.word	0x00010008
 80079a4:	00010002 	.word	0x00010002

080079a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b088      	sub	sp, #32
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	607a      	str	r2, [r7, #4]
 80079b2:	603b      	str	r3, [r7, #0]
 80079b4:	460b      	mov	r3, r1
 80079b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d006      	beq.n	80079e2 <I2C_MasterRequestRead+0x3a>
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d003      	beq.n	80079e2 <I2C_MasterRequestRead+0x3a>
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079e0:	d108      	bne.n	80079f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	e00b      	b.n	8007a0c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f8:	2b11      	cmp	r3, #17
 80079fa:	d107      	bne.n	8007a0c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 f891 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00c      	beq.n	8007a3e <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e078      	b.n	8007b30 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a46:	d108      	bne.n	8007a5a <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a48:	897b      	ldrh	r3, [r7, #10]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	f043 0301 	orr.w	r3, r3, #1
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	611a      	str	r2, [r3, #16]
 8007a58:	e05e      	b.n	8007b18 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007a5a:	897b      	ldrh	r3, [r7, #10]
 8007a5c:	11db      	asrs	r3, r3, #7
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	f003 0306 	and.w	r3, r3, #6
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	f063 030f 	orn	r3, r3, #15
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	4930      	ldr	r1, [pc, #192]	; (8007b38 <I2C_MasterRequestRead+0x190>)
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f8b8 	bl	8007bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e053      	b.n	8007b30 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007a88:	897b      	ldrh	r3, [r7, #10]
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	4929      	ldr	r1, [pc, #164]	; (8007b3c <I2C_MasterRequestRead+0x194>)
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 f8a8 	bl	8007bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e043      	b.n	8007b30 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	613b      	str	r3, [r7, #16]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	613b      	str	r3, [r7, #16]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	613b      	str	r3, [r7, #16]
 8007abc:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007acc:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 f830 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00c      	beq.n	8007b00 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007afa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e017      	b.n	8007b30 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007b00:	897b      	ldrh	r3, [r7, #10]
 8007b02:	11db      	asrs	r3, r3, #7
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	f003 0306 	and.w	r3, r3, #6
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	f063 030e 	orn	r3, r3, #14
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	4907      	ldr	r1, [pc, #28]	; (8007b3c <I2C_MasterRequestRead+0x194>)
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 f865 	bl	8007bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	00010008 	.word	0x00010008
 8007b3c:	00010002 	.word	0x00010002

08007b40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b50:	e025      	b.n	8007b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d021      	beq.n	8007b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5a:	f7fd fdef 	bl	800573c <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d302      	bcc.n	8007b70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d116      	bne.n	8007b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	f043 0220 	orr.w	r2, r3, #32
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e023      	b.n	8007be6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	0c1b      	lsrs	r3, r3, #16
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d10d      	bne.n	8007bc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	43da      	mvns	r2, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	bf0c      	ite	eq
 8007bba:	2301      	moveq	r3, #1
 8007bbc:	2300      	movne	r3, #0
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	e00c      	b.n	8007bde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	43da      	mvns	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	4013      	ands	r3, r2
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bf0c      	ite	eq
 8007bd6:	2301      	moveq	r3, #1
 8007bd8:	2300      	movne	r3, #0
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	461a      	mov	r2, r3
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d0b6      	beq.n	8007b52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
 8007bfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bfc:	e051      	b.n	8007ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c0c:	d123      	bne.n	8007c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2220      	movs	r2, #32
 8007c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	f043 0204 	orr.w	r2, r3, #4
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e046      	b.n	8007ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5c:	d021      	beq.n	8007ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c5e:	f7fd fd6d 	bl	800573c <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d302      	bcc.n	8007c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d116      	bne.n	8007ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2220      	movs	r2, #32
 8007c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	f043 0220 	orr.w	r2, r3, #32
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e020      	b.n	8007ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	0c1b      	lsrs	r3, r3, #16
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d10c      	bne.n	8007cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	43da      	mvns	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	bf14      	ite	ne
 8007cbe:	2301      	movne	r3, #1
 8007cc0:	2300      	moveq	r3, #0
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	e00b      	b.n	8007cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	43da      	mvns	r2, r3
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	bf14      	ite	ne
 8007cd8:	2301      	movne	r3, #1
 8007cda:	2300      	moveq	r3, #0
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d18d      	bne.n	8007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cf8:	e02d      	b.n	8007d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f8ce 	bl	8007e9c <I2C_IsAcknowledgeFailed>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e02d      	b.n	8007d66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d10:	d021      	beq.n	8007d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d12:	f7fd fd13 	bl	800573c <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d302      	bcc.n	8007d28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d116      	bne.n	8007d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	f043 0220 	orr.w	r2, r3, #32
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e007      	b.n	8007d66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d60:	2b80      	cmp	r3, #128	; 0x80
 8007d62:	d1ca      	bne.n	8007cfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d7a:	e02d      	b.n	8007dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 f88d 	bl	8007e9c <I2C_IsAcknowledgeFailed>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e02d      	b.n	8007de8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d92:	d021      	beq.n	8007dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d94:	f7fd fcd2 	bl	800573c <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d302      	bcc.n	8007daa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d116      	bne.n	8007dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2220      	movs	r2, #32
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc4:	f043 0220 	orr.w	r2, r3, #32
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e007      	b.n	8007de8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	f003 0304 	and.w	r3, r3, #4
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d1ca      	bne.n	8007d7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007dfc:	e042      	b.n	8007e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	f003 0310 	and.w	r3, r3, #16
 8007e08:	2b10      	cmp	r3, #16
 8007e0a:	d119      	bne.n	8007e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f06f 0210 	mvn.w	r2, #16
 8007e14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e029      	b.n	8007e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e40:	f7fd fc7c 	bl	800573c <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d302      	bcc.n	8007e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d116      	bne.n	8007e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e70:	f043 0220 	orr.w	r2, r3, #32
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e007      	b.n	8007e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8e:	2b40      	cmp	r3, #64	; 0x40
 8007e90:	d1b5      	bne.n	8007dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb2:	d11b      	bne.n	8007eec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ebc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed8:	f043 0204 	orr.w	r2, r3, #4
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e000      	b.n	8007eee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
	...

08007efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e25b      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d075      	beq.n	8008006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f1a:	4ba3      	ldr	r3, [pc, #652]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 030c 	and.w	r3, r3, #12
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	d00c      	beq.n	8007f40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f26:	4ba0      	ldr	r3, [pc, #640]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f2e:	2b08      	cmp	r3, #8
 8007f30:	d112      	bne.n	8007f58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f32:	4b9d      	ldr	r3, [pc, #628]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f3e:	d10b      	bne.n	8007f58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f40:	4b99      	ldr	r3, [pc, #612]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d05b      	beq.n	8008004 <HAL_RCC_OscConfig+0x108>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d157      	bne.n	8008004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e236      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f60:	d106      	bne.n	8007f70 <HAL_RCC_OscConfig+0x74>
 8007f62:	4b91      	ldr	r3, [pc, #580]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a90      	ldr	r2, [pc, #576]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f6c:	6013      	str	r3, [r2, #0]
 8007f6e:	e01d      	b.n	8007fac <HAL_RCC_OscConfig+0xb0>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f78:	d10c      	bne.n	8007f94 <HAL_RCC_OscConfig+0x98>
 8007f7a:	4b8b      	ldr	r3, [pc, #556]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a8a      	ldr	r2, [pc, #552]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	4b88      	ldr	r3, [pc, #544]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a87      	ldr	r2, [pc, #540]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f90:	6013      	str	r3, [r2, #0]
 8007f92:	e00b      	b.n	8007fac <HAL_RCC_OscConfig+0xb0>
 8007f94:	4b84      	ldr	r3, [pc, #528]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a83      	ldr	r2, [pc, #524]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f9e:	6013      	str	r3, [r2, #0]
 8007fa0:	4b81      	ldr	r3, [pc, #516]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a80      	ldr	r2, [pc, #512]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d013      	beq.n	8007fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fb4:	f7fd fbc2 	bl	800573c <HAL_GetTick>
 8007fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fba:	e008      	b.n	8007fce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fbc:	f7fd fbbe 	bl	800573c <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2b64      	cmp	r3, #100	; 0x64
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e1fb      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fce:	4b76      	ldr	r3, [pc, #472]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0f0      	beq.n	8007fbc <HAL_RCC_OscConfig+0xc0>
 8007fda:	e014      	b.n	8008006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fdc:	f7fd fbae 	bl	800573c <HAL_GetTick>
 8007fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fe2:	e008      	b.n	8007ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fe4:	f7fd fbaa 	bl	800573c <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	2b64      	cmp	r3, #100	; 0x64
 8007ff0:	d901      	bls.n	8007ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e1e7      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ff6:	4b6c      	ldr	r3, [pc, #432]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1f0      	bne.n	8007fe4 <HAL_RCC_OscConfig+0xe8>
 8008002:	e000      	b.n	8008006 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	2b00      	cmp	r3, #0
 8008010:	d063      	beq.n	80080da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008012:	4b65      	ldr	r3, [pc, #404]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f003 030c 	and.w	r3, r3, #12
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00b      	beq.n	8008036 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800801e:	4b62      	ldr	r3, [pc, #392]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008026:	2b08      	cmp	r3, #8
 8008028:	d11c      	bne.n	8008064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800802a:	4b5f      	ldr	r3, [pc, #380]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d116      	bne.n	8008064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008036:	4b5c      	ldr	r3, [pc, #368]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <HAL_RCC_OscConfig+0x152>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d001      	beq.n	800804e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e1bb      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800804e:	4b56      	ldr	r3, [pc, #344]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	00db      	lsls	r3, r3, #3
 800805c:	4952      	ldr	r1, [pc, #328]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 800805e:	4313      	orrs	r3, r2
 8008060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008062:	e03a      	b.n	80080da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d020      	beq.n	80080ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800806c:	4b4f      	ldr	r3, [pc, #316]	; (80081ac <HAL_RCC_OscConfig+0x2b0>)
 800806e:	2201      	movs	r2, #1
 8008070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008072:	f7fd fb63 	bl	800573c <HAL_GetTick>
 8008076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008078:	e008      	b.n	800808c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800807a:	f7fd fb5f 	bl	800573c <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d901      	bls.n	800808c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e19c      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800808c:	4b46      	ldr	r3, [pc, #280]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d0f0      	beq.n	800807a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008098:	4b43      	ldr	r3, [pc, #268]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	4940      	ldr	r1, [pc, #256]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	600b      	str	r3, [r1, #0]
 80080ac:	e015      	b.n	80080da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080ae:	4b3f      	ldr	r3, [pc, #252]	; (80081ac <HAL_RCC_OscConfig+0x2b0>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b4:	f7fd fb42 	bl	800573c <HAL_GetTick>
 80080b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080ba:	e008      	b.n	80080ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080bc:	f7fd fb3e 	bl	800573c <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d901      	bls.n	80080ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e17b      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080ce:	4b36      	ldr	r3, [pc, #216]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0302 	and.w	r3, r3, #2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1f0      	bne.n	80080bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0308 	and.w	r3, r3, #8
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d030      	beq.n	8008148 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d016      	beq.n	800811c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080ee:	4b30      	ldr	r3, [pc, #192]	; (80081b0 <HAL_RCC_OscConfig+0x2b4>)
 80080f0:	2201      	movs	r2, #1
 80080f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f4:	f7fd fb22 	bl	800573c <HAL_GetTick>
 80080f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080fa:	e008      	b.n	800810e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080fc:	f7fd fb1e 	bl	800573c <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d901      	bls.n	800810e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e15b      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800810e:	4b26      	ldr	r3, [pc, #152]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8008110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0f0      	beq.n	80080fc <HAL_RCC_OscConfig+0x200>
 800811a:	e015      	b.n	8008148 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800811c:	4b24      	ldr	r3, [pc, #144]	; (80081b0 <HAL_RCC_OscConfig+0x2b4>)
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008122:	f7fd fb0b 	bl	800573c <HAL_GetTick>
 8008126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008128:	e008      	b.n	800813c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800812a:	f7fd fb07 	bl	800573c <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	2b02      	cmp	r3, #2
 8008136:	d901      	bls.n	800813c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e144      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800813c:	4b1a      	ldr	r3, [pc, #104]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 800813e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008140:	f003 0302 	and.w	r3, r3, #2
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1f0      	bne.n	800812a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 80a0 	beq.w	8008296 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008156:	2300      	movs	r3, #0
 8008158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800815a:	4b13      	ldr	r3, [pc, #76]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10f      	bne.n	8008186 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008166:	2300      	movs	r3, #0
 8008168:	60bb      	str	r3, [r7, #8]
 800816a:	4b0f      	ldr	r3, [pc, #60]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	4a0e      	ldr	r2, [pc, #56]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8008170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008174:	6413      	str	r3, [r2, #64]	; 0x40
 8008176:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <HAL_RCC_OscConfig+0x2ac>)
 8008178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800817e:	60bb      	str	r3, [r7, #8]
 8008180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008182:	2301      	movs	r3, #1
 8008184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <HAL_RCC_OscConfig+0x2b8>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818e:	2b00      	cmp	r3, #0
 8008190:	d121      	bne.n	80081d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008192:	4b08      	ldr	r3, [pc, #32]	; (80081b4 <HAL_RCC_OscConfig+0x2b8>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a07      	ldr	r2, [pc, #28]	; (80081b4 <HAL_RCC_OscConfig+0x2b8>)
 8008198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800819c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800819e:	f7fd facd 	bl	800573c <HAL_GetTick>
 80081a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081a4:	e011      	b.n	80081ca <HAL_RCC_OscConfig+0x2ce>
 80081a6:	bf00      	nop
 80081a8:	40023800 	.word	0x40023800
 80081ac:	42470000 	.word	0x42470000
 80081b0:	42470e80 	.word	0x42470e80
 80081b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081b8:	f7fd fac0 	bl	800573c <HAL_GetTick>
 80081bc:	4602      	mov	r2, r0
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d901      	bls.n	80081ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e0fd      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ca:	4b81      	ldr	r3, [pc, #516]	; (80083d0 <HAL_RCC_OscConfig+0x4d4>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d0f0      	beq.n	80081b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d106      	bne.n	80081ec <HAL_RCC_OscConfig+0x2f0>
 80081de:	4b7d      	ldr	r3, [pc, #500]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 80081e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e2:	4a7c      	ldr	r2, [pc, #496]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 80081e4:	f043 0301 	orr.w	r3, r3, #1
 80081e8:	6713      	str	r3, [r2, #112]	; 0x70
 80081ea:	e01c      	b.n	8008226 <HAL_RCC_OscConfig+0x32a>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	2b05      	cmp	r3, #5
 80081f2:	d10c      	bne.n	800820e <HAL_RCC_OscConfig+0x312>
 80081f4:	4b77      	ldr	r3, [pc, #476]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 80081f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f8:	4a76      	ldr	r2, [pc, #472]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 80081fa:	f043 0304 	orr.w	r3, r3, #4
 80081fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008200:	4b74      	ldr	r3, [pc, #464]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 8008202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008204:	4a73      	ldr	r2, [pc, #460]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 8008206:	f043 0301 	orr.w	r3, r3, #1
 800820a:	6713      	str	r3, [r2, #112]	; 0x70
 800820c:	e00b      	b.n	8008226 <HAL_RCC_OscConfig+0x32a>
 800820e:	4b71      	ldr	r3, [pc, #452]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 8008210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008212:	4a70      	ldr	r2, [pc, #448]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 8008214:	f023 0301 	bic.w	r3, r3, #1
 8008218:	6713      	str	r3, [r2, #112]	; 0x70
 800821a:	4b6e      	ldr	r3, [pc, #440]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 800821c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821e:	4a6d      	ldr	r2, [pc, #436]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 8008220:	f023 0304 	bic.w	r3, r3, #4
 8008224:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d015      	beq.n	800825a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800822e:	f7fd fa85 	bl	800573c <HAL_GetTick>
 8008232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008234:	e00a      	b.n	800824c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008236:	f7fd fa81 	bl	800573c <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	f241 3288 	movw	r2, #5000	; 0x1388
 8008244:	4293      	cmp	r3, r2
 8008246:	d901      	bls.n	800824c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e0bc      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800824c:	4b61      	ldr	r3, [pc, #388]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 800824e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008250:	f003 0302 	and.w	r3, r3, #2
 8008254:	2b00      	cmp	r3, #0
 8008256:	d0ee      	beq.n	8008236 <HAL_RCC_OscConfig+0x33a>
 8008258:	e014      	b.n	8008284 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800825a:	f7fd fa6f 	bl	800573c <HAL_GetTick>
 800825e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008260:	e00a      	b.n	8008278 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008262:	f7fd fa6b 	bl	800573c <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008270:	4293      	cmp	r3, r2
 8008272:	d901      	bls.n	8008278 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e0a6      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008278:	4b56      	ldr	r3, [pc, #344]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 800827a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1ee      	bne.n	8008262 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d105      	bne.n	8008296 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800828a:	4b52      	ldr	r3, [pc, #328]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 800828c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828e:	4a51      	ldr	r2, [pc, #324]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 8008290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008294:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 8092 	beq.w	80083c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082a0:	4b4c      	ldr	r3, [pc, #304]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f003 030c 	and.w	r3, r3, #12
 80082a8:	2b08      	cmp	r3, #8
 80082aa:	d05c      	beq.n	8008366 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d141      	bne.n	8008338 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082b4:	4b48      	ldr	r3, [pc, #288]	; (80083d8 <HAL_RCC_OscConfig+0x4dc>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082ba:	f7fd fa3f 	bl	800573c <HAL_GetTick>
 80082be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082c0:	e008      	b.n	80082d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082c2:	f7fd fa3b 	bl	800573c <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d901      	bls.n	80082d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e078      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082d4:	4b3f      	ldr	r3, [pc, #252]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1f0      	bne.n	80082c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	69da      	ldr	r2, [r3, #28]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	431a      	orrs	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	019b      	lsls	r3, r3, #6
 80082f0:	431a      	orrs	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f6:	085b      	lsrs	r3, r3, #1
 80082f8:	3b01      	subs	r3, #1
 80082fa:	041b      	lsls	r3, r3, #16
 80082fc:	431a      	orrs	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008302:	061b      	lsls	r3, r3, #24
 8008304:	4933      	ldr	r1, [pc, #204]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 8008306:	4313      	orrs	r3, r2
 8008308:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800830a:	4b33      	ldr	r3, [pc, #204]	; (80083d8 <HAL_RCC_OscConfig+0x4dc>)
 800830c:	2201      	movs	r2, #1
 800830e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008310:	f7fd fa14 	bl	800573c <HAL_GetTick>
 8008314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008316:	e008      	b.n	800832a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008318:	f7fd fa10 	bl	800573c <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d901      	bls.n	800832a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e04d      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800832a:	4b2a      	ldr	r3, [pc, #168]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0f0      	beq.n	8008318 <HAL_RCC_OscConfig+0x41c>
 8008336:	e045      	b.n	80083c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008338:	4b27      	ldr	r3, [pc, #156]	; (80083d8 <HAL_RCC_OscConfig+0x4dc>)
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800833e:	f7fd f9fd 	bl	800573c <HAL_GetTick>
 8008342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008344:	e008      	b.n	8008358 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008346:	f7fd f9f9 	bl	800573c <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	2b02      	cmp	r3, #2
 8008352:	d901      	bls.n	8008358 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e036      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008358:	4b1e      	ldr	r3, [pc, #120]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1f0      	bne.n	8008346 <HAL_RCC_OscConfig+0x44a>
 8008364:	e02e      	b.n	80083c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d101      	bne.n	8008372 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e029      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008372:	4b18      	ldr	r3, [pc, #96]	; (80083d4 <HAL_RCC_OscConfig+0x4d8>)
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	429a      	cmp	r2, r3
 8008384:	d11c      	bne.n	80083c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008390:	429a      	cmp	r2, r3
 8008392:	d115      	bne.n	80083c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800839a:	4013      	ands	r3, r2
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d10d      	bne.n	80083c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d106      	bne.n	80083c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80083bc:	429a      	cmp	r2, r3
 80083be:	d001      	beq.n	80083c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e000      	b.n	80083c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	40007000 	.word	0x40007000
 80083d4:	40023800 	.word	0x40023800
 80083d8:	42470060 	.word	0x42470060

080083dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e0cc      	b.n	800858a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083f0:	4b68      	ldr	r3, [pc, #416]	; (8008594 <HAL_RCC_ClockConfig+0x1b8>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 030f 	and.w	r3, r3, #15
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d90c      	bls.n	8008418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083fe:	4b65      	ldr	r3, [pc, #404]	; (8008594 <HAL_RCC_ClockConfig+0x1b8>)
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008406:	4b63      	ldr	r3, [pc, #396]	; (8008594 <HAL_RCC_ClockConfig+0x1b8>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 030f 	and.w	r3, r3, #15
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	429a      	cmp	r2, r3
 8008412:	d001      	beq.n	8008418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e0b8      	b.n	800858a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d020      	beq.n	8008466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	d005      	beq.n	800843c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008430:	4b59      	ldr	r3, [pc, #356]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	4a58      	ldr	r2, [pc, #352]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 8008436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800843a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0308 	and.w	r3, r3, #8
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008448:	4b53      	ldr	r3, [pc, #332]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	4a52      	ldr	r2, [pc, #328]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 800844e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008454:	4b50      	ldr	r3, [pc, #320]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	494d      	ldr	r1, [pc, #308]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 8008462:	4313      	orrs	r3, r2
 8008464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d044      	beq.n	80084fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d107      	bne.n	800848a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800847a:	4b47      	ldr	r3, [pc, #284]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d119      	bne.n	80084ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e07f      	b.n	800858a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2b02      	cmp	r3, #2
 8008490:	d003      	beq.n	800849a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008496:	2b03      	cmp	r3, #3
 8008498:	d107      	bne.n	80084aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800849a:	4b3f      	ldr	r3, [pc, #252]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d109      	bne.n	80084ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e06f      	b.n	800858a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084aa:	4b3b      	ldr	r3, [pc, #236]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e067      	b.n	800858a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084ba:	4b37      	ldr	r3, [pc, #220]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f023 0203 	bic.w	r2, r3, #3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	4934      	ldr	r1, [pc, #208]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084cc:	f7fd f936 	bl	800573c <HAL_GetTick>
 80084d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084d2:	e00a      	b.n	80084ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084d4:	f7fd f932 	bl	800573c <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	f241 3288 	movw	r2, #5000	; 0x1388
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d901      	bls.n	80084ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e04f      	b.n	800858a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ea:	4b2b      	ldr	r3, [pc, #172]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f003 020c 	and.w	r2, r3, #12
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d1eb      	bne.n	80084d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084fc:	4b25      	ldr	r3, [pc, #148]	; (8008594 <HAL_RCC_ClockConfig+0x1b8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 030f 	and.w	r3, r3, #15
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	429a      	cmp	r2, r3
 8008508:	d20c      	bcs.n	8008524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800850a:	4b22      	ldr	r3, [pc, #136]	; (8008594 <HAL_RCC_ClockConfig+0x1b8>)
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	b2d2      	uxtb	r2, r2
 8008510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008512:	4b20      	ldr	r3, [pc, #128]	; (8008594 <HAL_RCC_ClockConfig+0x1b8>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 030f 	and.w	r3, r3, #15
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	429a      	cmp	r2, r3
 800851e:	d001      	beq.n	8008524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e032      	b.n	800858a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b00      	cmp	r3, #0
 800852e:	d008      	beq.n	8008542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008530:	4b19      	ldr	r3, [pc, #100]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	4916      	ldr	r1, [pc, #88]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 800853e:	4313      	orrs	r3, r2
 8008540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0308 	and.w	r3, r3, #8
 800854a:	2b00      	cmp	r3, #0
 800854c:	d009      	beq.n	8008562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800854e:	4b12      	ldr	r3, [pc, #72]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	00db      	lsls	r3, r3, #3
 800855c:	490e      	ldr	r1, [pc, #56]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 800855e:	4313      	orrs	r3, r2
 8008560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008562:	f000 f821 	bl	80085a8 <HAL_RCC_GetSysClockFreq>
 8008566:	4601      	mov	r1, r0
 8008568:	4b0b      	ldr	r3, [pc, #44]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	091b      	lsrs	r3, r3, #4
 800856e:	f003 030f 	and.w	r3, r3, #15
 8008572:	4a0a      	ldr	r2, [pc, #40]	; (800859c <HAL_RCC_ClockConfig+0x1c0>)
 8008574:	5cd3      	ldrb	r3, [r2, r3]
 8008576:	fa21 f303 	lsr.w	r3, r1, r3
 800857a:	4a09      	ldr	r2, [pc, #36]	; (80085a0 <HAL_RCC_ClockConfig+0x1c4>)
 800857c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800857e:	4b09      	ldr	r3, [pc, #36]	; (80085a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4618      	mov	r0, r3
 8008584:	f7fd f896 	bl	80056b4 <HAL_InitTick>

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	40023c00 	.word	0x40023c00
 8008598:	40023800 	.word	0x40023800
 800859c:	0800ee08 	.word	0x0800ee08
 80085a0:	20000000 	.word	0x20000000
 80085a4:	20000004 	.word	0x20000004

080085a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	607b      	str	r3, [r7, #4]
 80085b2:	2300      	movs	r3, #0
 80085b4:	60fb      	str	r3, [r7, #12]
 80085b6:	2300      	movs	r3, #0
 80085b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085be:	4b50      	ldr	r3, [pc, #320]	; (8008700 <HAL_RCC_GetSysClockFreq+0x158>)
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f003 030c 	and.w	r3, r3, #12
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d007      	beq.n	80085da <HAL_RCC_GetSysClockFreq+0x32>
 80085ca:	2b08      	cmp	r3, #8
 80085cc:	d008      	beq.n	80085e0 <HAL_RCC_GetSysClockFreq+0x38>
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f040 808d 	bne.w	80086ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085d4:	4b4b      	ldr	r3, [pc, #300]	; (8008704 <HAL_RCC_GetSysClockFreq+0x15c>)
 80085d6:	60bb      	str	r3, [r7, #8]
       break;
 80085d8:	e08c      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085da:	4b4b      	ldr	r3, [pc, #300]	; (8008708 <HAL_RCC_GetSysClockFreq+0x160>)
 80085dc:	60bb      	str	r3, [r7, #8]
      break;
 80085de:	e089      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085e0:	4b47      	ldr	r3, [pc, #284]	; (8008700 <HAL_RCC_GetSysClockFreq+0x158>)
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085ea:	4b45      	ldr	r3, [pc, #276]	; (8008700 <HAL_RCC_GetSysClockFreq+0x158>)
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d023      	beq.n	800863e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085f6:	4b42      	ldr	r3, [pc, #264]	; (8008700 <HAL_RCC_GetSysClockFreq+0x158>)
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	099b      	lsrs	r3, r3, #6
 80085fc:	f04f 0400 	mov.w	r4, #0
 8008600:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008604:	f04f 0200 	mov.w	r2, #0
 8008608:	ea03 0501 	and.w	r5, r3, r1
 800860c:	ea04 0602 	and.w	r6, r4, r2
 8008610:	4a3d      	ldr	r2, [pc, #244]	; (8008708 <HAL_RCC_GetSysClockFreq+0x160>)
 8008612:	fb02 f106 	mul.w	r1, r2, r6
 8008616:	2200      	movs	r2, #0
 8008618:	fb02 f205 	mul.w	r2, r2, r5
 800861c:	440a      	add	r2, r1
 800861e:	493a      	ldr	r1, [pc, #232]	; (8008708 <HAL_RCC_GetSysClockFreq+0x160>)
 8008620:	fba5 0101 	umull	r0, r1, r5, r1
 8008624:	1853      	adds	r3, r2, r1
 8008626:	4619      	mov	r1, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f04f 0400 	mov.w	r4, #0
 800862e:	461a      	mov	r2, r3
 8008630:	4623      	mov	r3, r4
 8008632:	f7f8 fc87 	bl	8000f44 <__aeabi_uldivmod>
 8008636:	4603      	mov	r3, r0
 8008638:	460c      	mov	r4, r1
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	e049      	b.n	80086d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800863e:	4b30      	ldr	r3, [pc, #192]	; (8008700 <HAL_RCC_GetSysClockFreq+0x158>)
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	099b      	lsrs	r3, r3, #6
 8008644:	f04f 0400 	mov.w	r4, #0
 8008648:	f240 11ff 	movw	r1, #511	; 0x1ff
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	ea03 0501 	and.w	r5, r3, r1
 8008654:	ea04 0602 	and.w	r6, r4, r2
 8008658:	4629      	mov	r1, r5
 800865a:	4632      	mov	r2, r6
 800865c:	f04f 0300 	mov.w	r3, #0
 8008660:	f04f 0400 	mov.w	r4, #0
 8008664:	0154      	lsls	r4, r2, #5
 8008666:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800866a:	014b      	lsls	r3, r1, #5
 800866c:	4619      	mov	r1, r3
 800866e:	4622      	mov	r2, r4
 8008670:	1b49      	subs	r1, r1, r5
 8008672:	eb62 0206 	sbc.w	r2, r2, r6
 8008676:	f04f 0300 	mov.w	r3, #0
 800867a:	f04f 0400 	mov.w	r4, #0
 800867e:	0194      	lsls	r4, r2, #6
 8008680:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008684:	018b      	lsls	r3, r1, #6
 8008686:	1a5b      	subs	r3, r3, r1
 8008688:	eb64 0402 	sbc.w	r4, r4, r2
 800868c:	f04f 0100 	mov.w	r1, #0
 8008690:	f04f 0200 	mov.w	r2, #0
 8008694:	00e2      	lsls	r2, r4, #3
 8008696:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800869a:	00d9      	lsls	r1, r3, #3
 800869c:	460b      	mov	r3, r1
 800869e:	4614      	mov	r4, r2
 80086a0:	195b      	adds	r3, r3, r5
 80086a2:	eb44 0406 	adc.w	r4, r4, r6
 80086a6:	f04f 0100 	mov.w	r1, #0
 80086aa:	f04f 0200 	mov.w	r2, #0
 80086ae:	02a2      	lsls	r2, r4, #10
 80086b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80086b4:	0299      	lsls	r1, r3, #10
 80086b6:	460b      	mov	r3, r1
 80086b8:	4614      	mov	r4, r2
 80086ba:	4618      	mov	r0, r3
 80086bc:	4621      	mov	r1, r4
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f04f 0400 	mov.w	r4, #0
 80086c4:	461a      	mov	r2, r3
 80086c6:	4623      	mov	r3, r4
 80086c8:	f7f8 fc3c 	bl	8000f44 <__aeabi_uldivmod>
 80086cc:	4603      	mov	r3, r0
 80086ce:	460c      	mov	r4, r1
 80086d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80086d2:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <HAL_RCC_GetSysClockFreq+0x158>)
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	0c1b      	lsrs	r3, r3, #16
 80086d8:	f003 0303 	and.w	r3, r3, #3
 80086dc:	3301      	adds	r3, #1
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ea:	60bb      	str	r3, [r7, #8]
      break;
 80086ec:	e002      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <HAL_RCC_GetSysClockFreq+0x15c>)
 80086f0:	60bb      	str	r3, [r7, #8]
      break;
 80086f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80086f4:	68bb      	ldr	r3, [r7, #8]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086fe:	bf00      	nop
 8008700:	40023800 	.word	0x40023800
 8008704:	00f42400 	.word	0x00f42400
 8008708:	00b71b00 	.word	0x00b71b00

0800870c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800870c:	b480      	push	{r7}
 800870e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008710:	4b03      	ldr	r3, [pc, #12]	; (8008720 <HAL_RCC_GetHCLKFreq+0x14>)
 8008712:	681b      	ldr	r3, [r3, #0]
}
 8008714:	4618      	mov	r0, r3
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	20000000 	.word	0x20000000

08008724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008728:	f7ff fff0 	bl	800870c <HAL_RCC_GetHCLKFreq>
 800872c:	4601      	mov	r1, r0
 800872e:	4b05      	ldr	r3, [pc, #20]	; (8008744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	0a9b      	lsrs	r3, r3, #10
 8008734:	f003 0307 	and.w	r3, r3, #7
 8008738:	4a03      	ldr	r2, [pc, #12]	; (8008748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800873a:	5cd3      	ldrb	r3, [r2, r3]
 800873c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008740:	4618      	mov	r0, r3
 8008742:	bd80      	pop	{r7, pc}
 8008744:	40023800 	.word	0x40023800
 8008748:	0800ee18 	.word	0x0800ee18

0800874c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008750:	f7ff ffdc 	bl	800870c <HAL_RCC_GetHCLKFreq>
 8008754:	4601      	mov	r1, r0
 8008756:	4b05      	ldr	r3, [pc, #20]	; (800876c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	0b5b      	lsrs	r3, r3, #13
 800875c:	f003 0307 	and.w	r3, r3, #7
 8008760:	4a03      	ldr	r2, [pc, #12]	; (8008770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008762:	5cd3      	ldrb	r3, [r2, r3]
 8008764:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008768:	4618      	mov	r0, r3
 800876a:	bd80      	pop	{r7, pc}
 800876c:	40023800 	.word	0x40023800
 8008770:	0800ee18 	.word	0x0800ee18

08008774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e056      	b.n	8008834 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b00      	cmp	r3, #0
 8008796:	d106      	bne.n	80087a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7fc fc43 	bl	800502c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2202      	movs	r2, #2
 80087aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	431a      	orrs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	431a      	orrs	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	431a      	orrs	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	431a      	orrs	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	69db      	ldr	r3, [r3, #28]
 80087e8:	431a      	orrs	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	ea42 0103 	orr.w	r1, r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	430a      	orrs	r2, r1
 80087fc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	0c1b      	lsrs	r3, r3, #16
 8008804:	f003 0104 	and.w	r1, r3, #4
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	430a      	orrs	r2, r1
 8008812:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	69da      	ldr	r2, [r3, #28]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008822:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b088      	sub	sp, #32
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	603b      	str	r3, [r7, #0]
 8008848:	4613      	mov	r3, r2
 800884a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008856:	2b01      	cmp	r3, #1
 8008858:	d101      	bne.n	800885e <HAL_SPI_Transmit+0x22>
 800885a:	2302      	movs	r3, #2
 800885c:	e11e      	b.n	8008a9c <HAL_SPI_Transmit+0x260>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008866:	f7fc ff69 	bl	800573c <HAL_GetTick>
 800886a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800886c:	88fb      	ldrh	r3, [r7, #6]
 800886e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b01      	cmp	r3, #1
 800887a:	d002      	beq.n	8008882 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800887c:	2302      	movs	r3, #2
 800887e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008880:	e103      	b.n	8008a8a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <HAL_SPI_Transmit+0x52>
 8008888:	88fb      	ldrh	r3, [r7, #6]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008892:	e0fa      	b.n	8008a8a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2203      	movs	r2, #3
 8008898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	88fa      	ldrh	r2, [r7, #6]
 80088ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	88fa      	ldrh	r2, [r7, #6]
 80088b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088da:	d107      	bne.n	80088ec <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f6:	2b40      	cmp	r3, #64	; 0x40
 80088f8:	d007      	beq.n	800890a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008908:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008912:	d14b      	bne.n	80089ac <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <HAL_SPI_Transmit+0xe6>
 800891c:	8afb      	ldrh	r3, [r7, #22]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d13e      	bne.n	80089a0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008926:	881a      	ldrh	r2, [r3, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008932:	1c9a      	adds	r2, r3, #2
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800893c:	b29b      	uxth	r3, r3
 800893e:	3b01      	subs	r3, #1
 8008940:	b29a      	uxth	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008946:	e02b      	b.n	80089a0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b02      	cmp	r3, #2
 8008954:	d112      	bne.n	800897c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895a:	881a      	ldrh	r2, [r3, #0]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008966:	1c9a      	adds	r2, r3, #2
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008970:	b29b      	uxth	r3, r3
 8008972:	3b01      	subs	r3, #1
 8008974:	b29a      	uxth	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	86da      	strh	r2, [r3, #54]	; 0x36
 800897a:	e011      	b.n	80089a0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800897c:	f7fc fede 	bl	800573c <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	429a      	cmp	r2, r3
 800898a:	d803      	bhi.n	8008994 <HAL_SPI_Transmit+0x158>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008992:	d102      	bne.n	800899a <HAL_SPI_Transmit+0x15e>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d102      	bne.n	80089a0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800899e:	e074      	b.n	8008a8a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1ce      	bne.n	8008948 <HAL_SPI_Transmit+0x10c>
 80089aa:	e04c      	b.n	8008a46 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <HAL_SPI_Transmit+0x17e>
 80089b4:	8afb      	ldrh	r3, [r7, #22]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d140      	bne.n	8008a3c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	330c      	adds	r3, #12
 80089c4:	7812      	ldrb	r2, [r2, #0]
 80089c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	3b01      	subs	r3, #1
 80089da:	b29a      	uxth	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80089e0:	e02c      	b.n	8008a3c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d113      	bne.n	8008a18 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	330c      	adds	r3, #12
 80089fa:	7812      	ldrb	r2, [r2, #0]
 80089fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a16:	e011      	b.n	8008a3c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a18:	f7fc fe90 	bl	800573c <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d803      	bhi.n	8008a30 <HAL_SPI_Transmit+0x1f4>
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2e:	d102      	bne.n	8008a36 <HAL_SPI_Transmit+0x1fa>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d102      	bne.n	8008a3c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a3a:	e026      	b.n	8008a8a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1cd      	bne.n	80089e2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 fba4 	bl	8009198 <SPI_EndRxTxTransaction>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10a      	bne.n	8008a7a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a64:	2300      	movs	r3, #0
 8008a66:	613b      	str	r3, [r7, #16]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	613b      	str	r3, [r7, #16]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	613b      	str	r3, [r7, #16]
 8008a78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	77fb      	strb	r3, [r7, #31]
 8008a86:	e000      	b.n	8008a8a <HAL_SPI_Transmit+0x24e>
  }

error:
 8008a88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3720      	adds	r7, #32
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b088      	sub	sp, #32
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	603b      	str	r3, [r7, #0]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ac0:	d112      	bne.n	8008ae8 <HAL_SPI_Receive+0x44>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10e      	bne.n	8008ae8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2204      	movs	r2, #4
 8008ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008ad2:	88fa      	ldrh	r2, [r7, #6]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	68b9      	ldr	r1, [r7, #8]
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f000 f8e9 	bl	8008cb6 <HAL_SPI_TransmitReceive>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	e0e2      	b.n	8008cae <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d101      	bne.n	8008af6 <HAL_SPI_Receive+0x52>
 8008af2:	2302      	movs	r3, #2
 8008af4:	e0db      	b.n	8008cae <HAL_SPI_Receive+0x20a>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008afe:	f7fc fe1d 	bl	800573c <HAL_GetTick>
 8008b02:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d002      	beq.n	8008b16 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008b10:	2302      	movs	r3, #2
 8008b12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b14:	e0c2      	b.n	8008c9c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d002      	beq.n	8008b22 <HAL_SPI_Receive+0x7e>
 8008b1c:	88fb      	ldrh	r3, [r7, #6]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d102      	bne.n	8008b28 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b26:	e0b9      	b.n	8008c9c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2204      	movs	r2, #4
 8008b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	88fa      	ldrh	r2, [r7, #6]
 8008b40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	88fa      	ldrh	r2, [r7, #6]
 8008b46:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b6e:	d107      	bne.n	8008b80 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b7e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8a:	2b40      	cmp	r3, #64	; 0x40
 8008b8c:	d007      	beq.n	8008b9e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b9c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d162      	bne.n	8008c6c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008ba6:	e02e      	b.n	8008c06 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d115      	bne.n	8008be2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f103 020c 	add.w	r2, r3, #12
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	7812      	ldrb	r2, [r2, #0]
 8008bc4:	b2d2      	uxtb	r2, r2
 8008bc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008be0:	e011      	b.n	8008c06 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008be2:	f7fc fdab 	bl	800573c <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d803      	bhi.n	8008bfa <HAL_SPI_Receive+0x156>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf8:	d102      	bne.n	8008c00 <HAL_SPI_Receive+0x15c>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d102      	bne.n	8008c06 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008c04:	e04a      	b.n	8008c9c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1cb      	bne.n	8008ba8 <HAL_SPI_Receive+0x104>
 8008c10:	e031      	b.n	8008c76 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d113      	bne.n	8008c48 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68da      	ldr	r2, [r3, #12]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2a:	b292      	uxth	r2, r2
 8008c2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c32:	1c9a      	adds	r2, r3, #2
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c46:	e011      	b.n	8008c6c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c48:	f7fc fd78 	bl	800573c <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d803      	bhi.n	8008c60 <HAL_SPI_Receive+0x1bc>
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5e:	d102      	bne.n	8008c66 <HAL_SPI_Receive+0x1c2>
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d102      	bne.n	8008c6c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008c6a:	e017      	b.n	8008c9c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1cd      	bne.n	8008c12 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 fa27 	bl	80090ce <SPI_EndRxTransaction>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d002      	beq.n	8008c8c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d002      	beq.n	8008c9a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	75fb      	strb	r3, [r7, #23]
 8008c98:	e000      	b.n	8008c9c <HAL_SPI_Receive+0x1f8>
  }

error :
 8008c9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3718      	adds	r7, #24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b08c      	sub	sp, #48	; 0x30
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	60f8      	str	r0, [r7, #12]
 8008cbe:	60b9      	str	r1, [r7, #8]
 8008cc0:	607a      	str	r2, [r7, #4]
 8008cc2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d101      	bne.n	8008cdc <HAL_SPI_TransmitReceive+0x26>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e18a      	b.n	8008ff2 <HAL_SPI_TransmitReceive+0x33c>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ce4:	f7fc fd2a 	bl	800573c <HAL_GetTick>
 8008ce8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008cfa:	887b      	ldrh	r3, [r7, #2]
 8008cfc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008cfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d00f      	beq.n	8008d26 <HAL_SPI_TransmitReceive+0x70>
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d0c:	d107      	bne.n	8008d1e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d103      	bne.n	8008d1e <HAL_SPI_TransmitReceive+0x68>
 8008d16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d1a:	2b04      	cmp	r3, #4
 8008d1c:	d003      	beq.n	8008d26 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d1e:	2302      	movs	r3, #2
 8008d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d24:	e15b      	b.n	8008fde <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <HAL_SPI_TransmitReceive+0x82>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <HAL_SPI_TransmitReceive+0x82>
 8008d32:	887b      	ldrh	r3, [r7, #2]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d103      	bne.n	8008d40 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d3e:	e14e      	b.n	8008fde <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d003      	beq.n	8008d54 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2205      	movs	r2, #5
 8008d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	887a      	ldrh	r2, [r7, #2]
 8008d64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	887a      	ldrh	r2, [r7, #2]
 8008d6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	887a      	ldrh	r2, [r7, #2]
 8008d76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	887a      	ldrh	r2, [r7, #2]
 8008d7c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d94:	2b40      	cmp	r3, #64	; 0x40
 8008d96:	d007      	beq.n	8008da8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008da6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008db0:	d178      	bne.n	8008ea4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <HAL_SPI_TransmitReceive+0x10a>
 8008dba:	8b7b      	ldrh	r3, [r7, #26]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d166      	bne.n	8008e8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc4:	881a      	ldrh	r2, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd0:	1c9a      	adds	r2, r3, #2
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008de4:	e053      	b.n	8008e8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f003 0302 	and.w	r3, r3, #2
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d11b      	bne.n	8008e2c <HAL_SPI_TransmitReceive+0x176>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d016      	beq.n	8008e2c <HAL_SPI_TransmitReceive+0x176>
 8008dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d113      	bne.n	8008e2c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e08:	881a      	ldrh	r2, [r3, #0]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e14:	1c9a      	adds	r2, r3, #2
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	3b01      	subs	r3, #1
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d119      	bne.n	8008e6e <HAL_SPI_TransmitReceive+0x1b8>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d014      	beq.n	8008e6e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68da      	ldr	r2, [r3, #12]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	b292      	uxth	r2, r2
 8008e50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e56:	1c9a      	adds	r2, r3, #2
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3b01      	subs	r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008e6e:	f7fc fc65 	bl	800573c <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d807      	bhi.n	8008e8e <HAL_SPI_TransmitReceive+0x1d8>
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e84:	d003      	beq.n	8008e8e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008e8c:	e0a7      	b.n	8008fde <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1a6      	bne.n	8008de6 <HAL_SPI_TransmitReceive+0x130>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1a1      	bne.n	8008de6 <HAL_SPI_TransmitReceive+0x130>
 8008ea2:	e07c      	b.n	8008f9e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <HAL_SPI_TransmitReceive+0x1fc>
 8008eac:	8b7b      	ldrh	r3, [r7, #26]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d16b      	bne.n	8008f8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	330c      	adds	r3, #12
 8008ebc:	7812      	ldrb	r2, [r2, #0]
 8008ebe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ed8:	e057      	b.n	8008f8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f003 0302 	and.w	r3, r3, #2
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d11c      	bne.n	8008f22 <HAL_SPI_TransmitReceive+0x26c>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d017      	beq.n	8008f22 <HAL_SPI_TransmitReceive+0x26c>
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d114      	bne.n	8008f22 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330c      	adds	r3, #12
 8008f02:	7812      	ldrb	r2, [r2, #0]
 8008f04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d119      	bne.n	8008f64 <HAL_SPI_TransmitReceive+0x2ae>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d014      	beq.n	8008f64 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f44:	b2d2      	uxtb	r2, r2
 8008f46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f60:	2301      	movs	r3, #1
 8008f62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008f64:	f7fc fbea 	bl	800573c <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d803      	bhi.n	8008f7c <HAL_SPI_TransmitReceive+0x2c6>
 8008f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f7a:	d102      	bne.n	8008f82 <HAL_SPI_TransmitReceive+0x2cc>
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d103      	bne.n	8008f8a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f88:	e029      	b.n	8008fde <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1a2      	bne.n	8008eda <HAL_SPI_TransmitReceive+0x224>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d19d      	bne.n	8008eda <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 f8f8 	bl	8009198 <SPI_EndRxTxTransaction>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d006      	beq.n	8008fbc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008fba:	e010      	b.n	8008fde <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10b      	bne.n	8008fdc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	617b      	str	r3, [r7, #20]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	617b      	str	r3, [r7, #20]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	e000      	b.n	8008fde <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008fdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008fee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3730      	adds	r7, #48	; 0x30
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	603b      	str	r3, [r7, #0]
 8009006:	4613      	mov	r3, r2
 8009008:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800900a:	e04c      	b.n	80090a6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009012:	d048      	beq.n	80090a6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009014:	f7fc fb92 	bl	800573c <HAL_GetTick>
 8009018:	4602      	mov	r2, r0
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	429a      	cmp	r2, r3
 8009022:	d902      	bls.n	800902a <SPI_WaitFlagStateUntilTimeout+0x30>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d13d      	bne.n	80090a6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009038:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009042:	d111      	bne.n	8009068 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800904c:	d004      	beq.n	8009058 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009056:	d107      	bne.n	8009068 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009066:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009070:	d10f      	bne.n	8009092 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009090:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e00f      	b.n	80090c6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689a      	ldr	r2, [r3, #8]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	4013      	ands	r3, r2
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	bf0c      	ite	eq
 80090b6:	2301      	moveq	r3, #1
 80090b8:	2300      	movne	r3, #0
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	461a      	mov	r2, r3
 80090be:	79fb      	ldrb	r3, [r7, #7]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d1a3      	bne.n	800900c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b086      	sub	sp, #24
 80090d2:	af02      	add	r7, sp, #8
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090e2:	d111      	bne.n	8009108 <SPI_EndRxTransaction+0x3a>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090ec:	d004      	beq.n	80090f8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090f6:	d107      	bne.n	8009108 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009106:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009110:	d12a      	bne.n	8009168 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800911a:	d012      	beq.n	8009142 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2200      	movs	r2, #0
 8009124:	2180      	movs	r1, #128	; 0x80
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f7ff ff67 	bl	8008ffa <SPI_WaitFlagStateUntilTimeout>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d02d      	beq.n	800918e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009136:	f043 0220 	orr.w	r2, r3, #32
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e026      	b.n	8009190 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2200      	movs	r2, #0
 800914a:	2101      	movs	r1, #1
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7ff ff54 	bl	8008ffa <SPI_WaitFlagStateUntilTimeout>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d01a      	beq.n	800918e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800915c:	f043 0220 	orr.w	r2, r3, #32
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e013      	b.n	8009190 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2200      	movs	r2, #0
 8009170:	2101      	movs	r1, #1
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f7ff ff41 	bl	8008ffa <SPI_WaitFlagStateUntilTimeout>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d007      	beq.n	800918e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009182:	f043 0220 	orr.w	r2, r3, #32
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800918a:	2303      	movs	r3, #3
 800918c:	e000      	b.n	8009190 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af02      	add	r7, sp, #8
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80091a4:	4b1b      	ldr	r3, [pc, #108]	; (8009214 <SPI_EndRxTxTransaction+0x7c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a1b      	ldr	r2, [pc, #108]	; (8009218 <SPI_EndRxTxTransaction+0x80>)
 80091aa:	fba2 2303 	umull	r2, r3, r2, r3
 80091ae:	0d5b      	lsrs	r3, r3, #21
 80091b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091b4:	fb02 f303 	mul.w	r3, r2, r3
 80091b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091c2:	d112      	bne.n	80091ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2200      	movs	r2, #0
 80091cc:	2180      	movs	r1, #128	; 0x80
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f7ff ff13 	bl	8008ffa <SPI_WaitFlagStateUntilTimeout>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d016      	beq.n	8009208 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091de:	f043 0220 	orr.w	r2, r3, #32
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e00f      	b.n	800920a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00a      	beq.n	8009206 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	3b01      	subs	r3, #1
 80091f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009200:	2b80      	cmp	r3, #128	; 0x80
 8009202:	d0f2      	beq.n	80091ea <SPI_EndRxTxTransaction+0x52>
 8009204:	e000      	b.n	8009208 <SPI_EndRxTxTransaction+0x70>
        break;
 8009206:	bf00      	nop
  }

  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3718      	adds	r7, #24
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	20000000 	.word	0x20000000
 8009218:	165e9f81 	.word	0x165e9f81

0800921c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e01d      	b.n	800926a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b00      	cmp	r3, #0
 8009238:	d106      	bne.n	8009248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7fc f804 	bl	8005250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	3304      	adds	r3, #4
 8009258:	4619      	mov	r1, r3
 800925a:	4610      	mov	r0, r2
 800925c:	f000 fb56 	bl	800990c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009272:	b480      	push	{r7}
 8009274:	b085      	sub	sp, #20
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68da      	ldr	r2, [r3, #12]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f042 0201 	orr.w	r2, r2, #1
 8009288:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f003 0307 	and.w	r3, r3, #7
 8009294:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b06      	cmp	r3, #6
 800929a:	d007      	beq.n	80092ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f042 0201 	orr.w	r2, r2, #1
 80092aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b082      	sub	sp, #8
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e01d      	b.n	8009308 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d106      	bne.n	80092e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7fb ff69 	bl	80051b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2202      	movs	r2, #2
 80092ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4619      	mov	r1, r3
 80092f8:	4610      	mov	r0, r2
 80092fa:	f000 fb07 	bl	800990c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2201      	movs	r2, #1
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	4618      	mov	r0, r3
 8009324:	f000 fd42 	bl	8009dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a15      	ldr	r2, [pc, #84]	; (8009384 <HAL_TIM_PWM_Start+0x74>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d004      	beq.n	800933c <HAL_TIM_PWM_Start+0x2c>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a14      	ldr	r2, [pc, #80]	; (8009388 <HAL_TIM_PWM_Start+0x78>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d101      	bne.n	8009340 <HAL_TIM_PWM_Start+0x30>
 800933c:	2301      	movs	r3, #1
 800933e:	e000      	b.n	8009342 <HAL_TIM_PWM_Start+0x32>
 8009340:	2300      	movs	r3, #0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d007      	beq.n	8009356 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009354:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f003 0307 	and.w	r3, r3, #7
 8009360:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b06      	cmp	r3, #6
 8009366:	d007      	beq.n	8009378 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f042 0201 	orr.w	r2, r2, #1
 8009376:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	40010000 	.word	0x40010000
 8009388:	40010400 	.word	0x40010400

0800938c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b086      	sub	sp, #24
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	e083      	b.n	80094a8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d106      	bne.n	80093ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7fb fe81 	bl	80050bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2202      	movs	r2, #2
 80093be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6812      	ldr	r2, [r2, #0]
 80093cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093d0:	f023 0307 	bic.w	r3, r3, #7
 80093d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	3304      	adds	r3, #4
 80093de:	4619      	mov	r1, r3
 80093e0:	4610      	mov	r0, r2
 80093e2:	f000 fa93 	bl	800990c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6a1b      	ldr	r3, [r3, #32]
 80093fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	4313      	orrs	r3, r2
 8009406:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800940e:	f023 0303 	bic.w	r3, r3, #3
 8009412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	021b      	lsls	r3, r3, #8
 800941e:	4313      	orrs	r3, r2
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	4313      	orrs	r3, r2
 8009424:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800942c:	f023 030c 	bic.w	r3, r3, #12
 8009430:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009438:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800943c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	68da      	ldr	r2, [r3, #12]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	021b      	lsls	r3, r3, #8
 8009448:	4313      	orrs	r3, r2
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	4313      	orrs	r3, r2
 800944e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	011a      	lsls	r2, r3, #4
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	031b      	lsls	r3, r3, #12
 800945c:	4313      	orrs	r3, r2
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	4313      	orrs	r3, r2
 8009462:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800946a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009472:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	695b      	ldr	r3, [r3, #20]
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	4313      	orrs	r3, r2
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	4313      	orrs	r3, r2
 8009484:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d002      	beq.n	80094c6 <HAL_TIM_Encoder_Start+0x16>
 80094c0:	2b04      	cmp	r3, #4
 80094c2:	d008      	beq.n	80094d6 <HAL_TIM_Encoder_Start+0x26>
 80094c4:	e00f      	b.n	80094e6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2201      	movs	r2, #1
 80094cc:	2100      	movs	r1, #0
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 fc6c 	bl	8009dac <TIM_CCxChannelCmd>
      break;
 80094d4:	e016      	b.n	8009504 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2201      	movs	r2, #1
 80094dc:	2104      	movs	r1, #4
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 fc64 	bl	8009dac <TIM_CCxChannelCmd>
      break;
 80094e4:	e00e      	b.n	8009504 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2201      	movs	r2, #1
 80094ec:	2100      	movs	r1, #0
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 fc5c 	bl	8009dac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2201      	movs	r2, #1
 80094fa:	2104      	movs	r1, #4
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 fc55 	bl	8009dac <TIM_CCxChannelCmd>
      break;
 8009502:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f042 0201 	orr.w	r2, r2, #1
 8009512:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	f003 0302 	and.w	r3, r3, #2
 8009530:	2b02      	cmp	r3, #2
 8009532:	d122      	bne.n	800957a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	f003 0302 	and.w	r3, r3, #2
 800953e:	2b02      	cmp	r3, #2
 8009540:	d11b      	bne.n	800957a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f06f 0202 	mvn.w	r2, #2
 800954a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	f003 0303 	and.w	r3, r3, #3
 800955c:	2b00      	cmp	r3, #0
 800955e:	d003      	beq.n	8009568 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f9b5 	bl	80098d0 <HAL_TIM_IC_CaptureCallback>
 8009566:	e005      	b.n	8009574 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f9a7 	bl	80098bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f9b8 	bl	80098e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b04      	cmp	r3, #4
 8009586:	d122      	bne.n	80095ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	f003 0304 	and.w	r3, r3, #4
 8009592:	2b04      	cmp	r3, #4
 8009594:	d11b      	bne.n	80095ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f06f 0204 	mvn.w	r2, #4
 800959e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2202      	movs	r2, #2
 80095a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d003      	beq.n	80095bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f98b 	bl	80098d0 <HAL_TIM_IC_CaptureCallback>
 80095ba:	e005      	b.n	80095c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f97d 	bl	80098bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f98e 	bl	80098e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	f003 0308 	and.w	r3, r3, #8
 80095d8:	2b08      	cmp	r3, #8
 80095da:	d122      	bne.n	8009622 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f003 0308 	and.w	r3, r3, #8
 80095e6:	2b08      	cmp	r3, #8
 80095e8:	d11b      	bne.n	8009622 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f06f 0208 	mvn.w	r2, #8
 80095f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2204      	movs	r2, #4
 80095f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	f003 0303 	and.w	r3, r3, #3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d003      	beq.n	8009610 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f961 	bl	80098d0 <HAL_TIM_IC_CaptureCallback>
 800960e:	e005      	b.n	800961c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f953 	bl	80098bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f964 	bl	80098e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	f003 0310 	and.w	r3, r3, #16
 800962c:	2b10      	cmp	r3, #16
 800962e:	d122      	bne.n	8009676 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	f003 0310 	and.w	r3, r3, #16
 800963a:	2b10      	cmp	r3, #16
 800963c:	d11b      	bne.n	8009676 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f06f 0210 	mvn.w	r2, #16
 8009646:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2208      	movs	r2, #8
 800964c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009658:	2b00      	cmp	r3, #0
 800965a:	d003      	beq.n	8009664 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f937 	bl	80098d0 <HAL_TIM_IC_CaptureCallback>
 8009662:	e005      	b.n	8009670 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f929 	bl	80098bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f93a 	bl	80098e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	f003 0301 	and.w	r3, r3, #1
 8009680:	2b01      	cmp	r3, #1
 8009682:	d10e      	bne.n	80096a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b01      	cmp	r3, #1
 8009690:	d107      	bne.n	80096a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f06f 0201 	mvn.w	r2, #1
 800969a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7f8 fad1 	bl	8001c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ac:	2b80      	cmp	r3, #128	; 0x80
 80096ae:	d10e      	bne.n	80096ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ba:	2b80      	cmp	r3, #128	; 0x80
 80096bc:	d107      	bne.n	80096ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80096c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fc1b 	bl	8009f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d8:	2b40      	cmp	r3, #64	; 0x40
 80096da:	d10e      	bne.n	80096fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e6:	2b40      	cmp	r3, #64	; 0x40
 80096e8:	d107      	bne.n	80096fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f8ff 	bl	80098f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	f003 0320 	and.w	r3, r3, #32
 8009704:	2b20      	cmp	r3, #32
 8009706:	d10e      	bne.n	8009726 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	f003 0320 	and.w	r3, r3, #32
 8009712:	2b20      	cmp	r3, #32
 8009714:	d107      	bne.n	8009726 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f06f 0220 	mvn.w	r2, #32
 800971e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fbe5 	bl	8009ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009726:	bf00      	nop
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009746:	2302      	movs	r3, #2
 8009748:	e0b4      	b.n	80098b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2202      	movs	r2, #2
 8009756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b0c      	cmp	r3, #12
 800975e:	f200 809f 	bhi.w	80098a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009762:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009768:	0800979d 	.word	0x0800979d
 800976c:	080098a1 	.word	0x080098a1
 8009770:	080098a1 	.word	0x080098a1
 8009774:	080098a1 	.word	0x080098a1
 8009778:	080097dd 	.word	0x080097dd
 800977c:	080098a1 	.word	0x080098a1
 8009780:	080098a1 	.word	0x080098a1
 8009784:	080098a1 	.word	0x080098a1
 8009788:	0800981f 	.word	0x0800981f
 800978c:	080098a1 	.word	0x080098a1
 8009790:	080098a1 	.word	0x080098a1
 8009794:	080098a1 	.word	0x080098a1
 8009798:	0800985f 	.word	0x0800985f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68b9      	ldr	r1, [r7, #8]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 f952 	bl	8009a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	699a      	ldr	r2, [r3, #24]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f042 0208 	orr.w	r2, r2, #8
 80097b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	699a      	ldr	r2, [r3, #24]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 0204 	bic.w	r2, r2, #4
 80097c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6999      	ldr	r1, [r3, #24]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	691a      	ldr	r2, [r3, #16]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	619a      	str	r2, [r3, #24]
      break;
 80097da:	e062      	b.n	80098a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68b9      	ldr	r1, [r7, #8]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 f9a2 	bl	8009b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	699a      	ldr	r2, [r3, #24]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	699a      	ldr	r2, [r3, #24]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6999      	ldr	r1, [r3, #24]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	021a      	lsls	r2, r3, #8
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	430a      	orrs	r2, r1
 800981a:	619a      	str	r2, [r3, #24]
      break;
 800981c:	e041      	b.n	80098a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	4618      	mov	r0, r3
 8009826:	f000 f9f7 	bl	8009c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	69da      	ldr	r2, [r3, #28]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f042 0208 	orr.w	r2, r2, #8
 8009838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	69da      	ldr	r2, [r3, #28]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f022 0204 	bic.w	r2, r2, #4
 8009848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	69d9      	ldr	r1, [r3, #28]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	691a      	ldr	r2, [r3, #16]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	430a      	orrs	r2, r1
 800985a:	61da      	str	r2, [r3, #28]
      break;
 800985c:	e021      	b.n	80098a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68b9      	ldr	r1, [r7, #8]
 8009864:	4618      	mov	r0, r3
 8009866:	f000 fa4b 	bl	8009d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	69da      	ldr	r2, [r3, #28]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	69da      	ldr	r2, [r3, #28]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	69d9      	ldr	r1, [r3, #28]
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	021a      	lsls	r2, r3, #8
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	61da      	str	r2, [r3, #28]
      break;
 800989e:	e000      	b.n	80098a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80098a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a40      	ldr	r2, [pc, #256]	; (8009a20 <TIM_Base_SetConfig+0x114>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d013      	beq.n	800994c <TIM_Base_SetConfig+0x40>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800992a:	d00f      	beq.n	800994c <TIM_Base_SetConfig+0x40>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a3d      	ldr	r2, [pc, #244]	; (8009a24 <TIM_Base_SetConfig+0x118>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d00b      	beq.n	800994c <TIM_Base_SetConfig+0x40>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a3c      	ldr	r2, [pc, #240]	; (8009a28 <TIM_Base_SetConfig+0x11c>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d007      	beq.n	800994c <TIM_Base_SetConfig+0x40>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a3b      	ldr	r2, [pc, #236]	; (8009a2c <TIM_Base_SetConfig+0x120>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d003      	beq.n	800994c <TIM_Base_SetConfig+0x40>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a3a      	ldr	r2, [pc, #232]	; (8009a30 <TIM_Base_SetConfig+0x124>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d108      	bne.n	800995e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	4313      	orrs	r3, r2
 800995c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a2f      	ldr	r2, [pc, #188]	; (8009a20 <TIM_Base_SetConfig+0x114>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d02b      	beq.n	80099be <TIM_Base_SetConfig+0xb2>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800996c:	d027      	beq.n	80099be <TIM_Base_SetConfig+0xb2>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a2c      	ldr	r2, [pc, #176]	; (8009a24 <TIM_Base_SetConfig+0x118>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d023      	beq.n	80099be <TIM_Base_SetConfig+0xb2>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a2b      	ldr	r2, [pc, #172]	; (8009a28 <TIM_Base_SetConfig+0x11c>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d01f      	beq.n	80099be <TIM_Base_SetConfig+0xb2>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a2a      	ldr	r2, [pc, #168]	; (8009a2c <TIM_Base_SetConfig+0x120>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d01b      	beq.n	80099be <TIM_Base_SetConfig+0xb2>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4a29      	ldr	r2, [pc, #164]	; (8009a30 <TIM_Base_SetConfig+0x124>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d017      	beq.n	80099be <TIM_Base_SetConfig+0xb2>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a28      	ldr	r2, [pc, #160]	; (8009a34 <TIM_Base_SetConfig+0x128>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d013      	beq.n	80099be <TIM_Base_SetConfig+0xb2>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a27      	ldr	r2, [pc, #156]	; (8009a38 <TIM_Base_SetConfig+0x12c>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d00f      	beq.n	80099be <TIM_Base_SetConfig+0xb2>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a26      	ldr	r2, [pc, #152]	; (8009a3c <TIM_Base_SetConfig+0x130>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d00b      	beq.n	80099be <TIM_Base_SetConfig+0xb2>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a25      	ldr	r2, [pc, #148]	; (8009a40 <TIM_Base_SetConfig+0x134>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d007      	beq.n	80099be <TIM_Base_SetConfig+0xb2>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a24      	ldr	r2, [pc, #144]	; (8009a44 <TIM_Base_SetConfig+0x138>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d003      	beq.n	80099be <TIM_Base_SetConfig+0xb2>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a23      	ldr	r2, [pc, #140]	; (8009a48 <TIM_Base_SetConfig+0x13c>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d108      	bne.n	80099d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	4313      	orrs	r3, r2
 80099dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a0a      	ldr	r2, [pc, #40]	; (8009a20 <TIM_Base_SetConfig+0x114>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d003      	beq.n	8009a04 <TIM_Base_SetConfig+0xf8>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a0c      	ldr	r2, [pc, #48]	; (8009a30 <TIM_Base_SetConfig+0x124>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d103      	bne.n	8009a0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	691a      	ldr	r2, [r3, #16]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	615a      	str	r2, [r3, #20]
}
 8009a12:	bf00      	nop
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	40010000 	.word	0x40010000
 8009a24:	40000400 	.word	0x40000400
 8009a28:	40000800 	.word	0x40000800
 8009a2c:	40000c00 	.word	0x40000c00
 8009a30:	40010400 	.word	0x40010400
 8009a34:	40014000 	.word	0x40014000
 8009a38:	40014400 	.word	0x40014400
 8009a3c:	40014800 	.word	0x40014800
 8009a40:	40001800 	.word	0x40001800
 8009a44:	40001c00 	.word	0x40001c00
 8009a48:	40002000 	.word	0x40002000

08009a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b087      	sub	sp, #28
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	f023 0201 	bic.w	r2, r3, #1
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f023 0303 	bic.w	r3, r3, #3
 8009a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f023 0302 	bic.w	r3, r3, #2
 8009a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a20      	ldr	r2, [pc, #128]	; (8009b24 <TIM_OC1_SetConfig+0xd8>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d003      	beq.n	8009ab0 <TIM_OC1_SetConfig+0x64>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a1f      	ldr	r2, [pc, #124]	; (8009b28 <TIM_OC1_SetConfig+0xdc>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d10c      	bne.n	8009aca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	f023 0308 	bic.w	r3, r3, #8
 8009ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f023 0304 	bic.w	r3, r3, #4
 8009ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a15      	ldr	r2, [pc, #84]	; (8009b24 <TIM_OC1_SetConfig+0xd8>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d003      	beq.n	8009ada <TIM_OC1_SetConfig+0x8e>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a14      	ldr	r2, [pc, #80]	; (8009b28 <TIM_OC1_SetConfig+0xdc>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d111      	bne.n	8009afe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	693a      	ldr	r2, [r7, #16]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	685a      	ldr	r2, [r3, #4]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	621a      	str	r2, [r3, #32]
}
 8009b18:	bf00      	nop
 8009b1a:	371c      	adds	r7, #28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	40010000 	.word	0x40010000
 8009b28:	40010400 	.word	0x40010400

08009b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	f023 0210 	bic.w	r2, r3, #16
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	021b      	lsls	r3, r3, #8
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	f023 0320 	bic.w	r3, r3, #32
 8009b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	011b      	lsls	r3, r3, #4
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a22      	ldr	r2, [pc, #136]	; (8009c10 <TIM_OC2_SetConfig+0xe4>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d003      	beq.n	8009b94 <TIM_OC2_SetConfig+0x68>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a21      	ldr	r2, [pc, #132]	; (8009c14 <TIM_OC2_SetConfig+0xe8>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d10d      	bne.n	8009bb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	011b      	lsls	r3, r3, #4
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a17      	ldr	r2, [pc, #92]	; (8009c10 <TIM_OC2_SetConfig+0xe4>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d003      	beq.n	8009bc0 <TIM_OC2_SetConfig+0x94>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a16      	ldr	r2, [pc, #88]	; (8009c14 <TIM_OC2_SetConfig+0xe8>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d113      	bne.n	8009be8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	621a      	str	r2, [r3, #32]
}
 8009c02:	bf00      	nop
 8009c04:	371c      	adds	r7, #28
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	40010000 	.word	0x40010000
 8009c14:	40010400 	.word	0x40010400

08009c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f023 0303 	bic.w	r3, r3, #3
 8009c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	021b      	lsls	r3, r3, #8
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a21      	ldr	r2, [pc, #132]	; (8009cf8 <TIM_OC3_SetConfig+0xe0>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d003      	beq.n	8009c7e <TIM_OC3_SetConfig+0x66>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a20      	ldr	r2, [pc, #128]	; (8009cfc <TIM_OC3_SetConfig+0xe4>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d10d      	bne.n	8009c9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	021b      	lsls	r3, r3, #8
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a16      	ldr	r2, [pc, #88]	; (8009cf8 <TIM_OC3_SetConfig+0xe0>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d003      	beq.n	8009caa <TIM_OC3_SetConfig+0x92>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a15      	ldr	r2, [pc, #84]	; (8009cfc <TIM_OC3_SetConfig+0xe4>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d113      	bne.n	8009cd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	011b      	lsls	r3, r3, #4
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	011b      	lsls	r3, r3, #4
 8009ccc:	693a      	ldr	r2, [r7, #16]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	697a      	ldr	r2, [r7, #20]
 8009cea:	621a      	str	r2, [r3, #32]
}
 8009cec:	bf00      	nop
 8009cee:	371c      	adds	r7, #28
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	40010000 	.word	0x40010000
 8009cfc:	40010400 	.word	0x40010400

08009d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b087      	sub	sp, #28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	69db      	ldr	r3, [r3, #28]
 8009d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	031b      	lsls	r3, r3, #12
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a12      	ldr	r2, [pc, #72]	; (8009da4 <TIM_OC4_SetConfig+0xa4>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d003      	beq.n	8009d68 <TIM_OC4_SetConfig+0x68>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a11      	ldr	r2, [pc, #68]	; (8009da8 <TIM_OC4_SetConfig+0xa8>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d109      	bne.n	8009d7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	019b      	lsls	r3, r3, #6
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	621a      	str	r2, [r3, #32]
}
 8009d96:	bf00      	nop
 8009d98:	371c      	adds	r7, #28
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	40010000 	.word	0x40010000
 8009da8:	40010400 	.word	0x40010400

08009dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	f003 031f 	and.w	r3, r3, #31
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6a1a      	ldr	r2, [r3, #32]
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	43db      	mvns	r3, r3
 8009dce:	401a      	ands	r2, r3
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6a1a      	ldr	r2, [r3, #32]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f003 031f 	and.w	r3, r3, #31
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	fa01 f303 	lsl.w	r3, r1, r3
 8009de4:	431a      	orrs	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	621a      	str	r2, [r3, #32]
}
 8009dea:	bf00      	nop
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
	...

08009df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d101      	bne.n	8009e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	e05a      	b.n	8009ec6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a21      	ldr	r2, [pc, #132]	; (8009ed4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d022      	beq.n	8009e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e5c:	d01d      	beq.n	8009e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a1d      	ldr	r2, [pc, #116]	; (8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d018      	beq.n	8009e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a1b      	ldr	r2, [pc, #108]	; (8009edc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d013      	beq.n	8009e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a1a      	ldr	r2, [pc, #104]	; (8009ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d00e      	beq.n	8009e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a18      	ldr	r2, [pc, #96]	; (8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d009      	beq.n	8009e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a17      	ldr	r2, [pc, #92]	; (8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d004      	beq.n	8009e9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a15      	ldr	r2, [pc, #84]	; (8009eec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d10c      	bne.n	8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ea0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3714      	adds	r7, #20
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	40010000 	.word	0x40010000
 8009ed8:	40000400 	.word	0x40000400
 8009edc:	40000800 	.word	0x40000800
 8009ee0:	40000c00 	.word	0x40000c00
 8009ee4:	40010400 	.word	0x40010400
 8009ee8:	40014000 	.word	0x40014000
 8009eec:	40001800 	.word	0x40001800

08009ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e03f      	b.n	8009faa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d106      	bne.n	8009f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7fb fa74 	bl	800542c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2224      	movs	r2, #36	; 0x24
 8009f48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68da      	ldr	r2, [r3, #12]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f829 	bl	8009fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	691a      	ldr	r2, [r3, #16]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	695a      	ldr	r2, [r3, #20]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68da      	ldr	r2, [r3, #12]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2220      	movs	r2, #32
 8009f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2220      	movs	r2, #32
 8009fa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
	...

08009fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	b085      	sub	sp, #20
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	68da      	ldr	r2, [r3, #12]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	689a      	ldr	r2, [r3, #8]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	431a      	orrs	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	431a      	orrs	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	69db      	ldr	r3, [r3, #28]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009ff6:	f023 030c 	bic.w	r3, r3, #12
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	6812      	ldr	r2, [r2, #0]
 8009ffe:	68f9      	ldr	r1, [r7, #12]
 800a000:	430b      	orrs	r3, r1
 800a002:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	699a      	ldr	r2, [r3, #24]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	430a      	orrs	r2, r1
 800a018:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a022:	f040 818b 	bne.w	800a33c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4ac1      	ldr	r2, [pc, #772]	; (800a330 <UART_SetConfig+0x37c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d005      	beq.n	800a03c <UART_SetConfig+0x88>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4abf      	ldr	r2, [pc, #764]	; (800a334 <UART_SetConfig+0x380>)
 800a036:	4293      	cmp	r3, r2
 800a038:	f040 80bd 	bne.w	800a1b6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a03c:	f7fe fb86 	bl	800874c <HAL_RCC_GetPCLK2Freq>
 800a040:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	461d      	mov	r5, r3
 800a046:	f04f 0600 	mov.w	r6, #0
 800a04a:	46a8      	mov	r8, r5
 800a04c:	46b1      	mov	r9, r6
 800a04e:	eb18 0308 	adds.w	r3, r8, r8
 800a052:	eb49 0409 	adc.w	r4, r9, r9
 800a056:	4698      	mov	r8, r3
 800a058:	46a1      	mov	r9, r4
 800a05a:	eb18 0805 	adds.w	r8, r8, r5
 800a05e:	eb49 0906 	adc.w	r9, r9, r6
 800a062:	f04f 0100 	mov.w	r1, #0
 800a066:	f04f 0200 	mov.w	r2, #0
 800a06a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a06e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a072:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a076:	4688      	mov	r8, r1
 800a078:	4691      	mov	r9, r2
 800a07a:	eb18 0005 	adds.w	r0, r8, r5
 800a07e:	eb49 0106 	adc.w	r1, r9, r6
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	461d      	mov	r5, r3
 800a088:	f04f 0600 	mov.w	r6, #0
 800a08c:	196b      	adds	r3, r5, r5
 800a08e:	eb46 0406 	adc.w	r4, r6, r6
 800a092:	461a      	mov	r2, r3
 800a094:	4623      	mov	r3, r4
 800a096:	f7f6 ff55 	bl	8000f44 <__aeabi_uldivmod>
 800a09a:	4603      	mov	r3, r0
 800a09c:	460c      	mov	r4, r1
 800a09e:	461a      	mov	r2, r3
 800a0a0:	4ba5      	ldr	r3, [pc, #660]	; (800a338 <UART_SetConfig+0x384>)
 800a0a2:	fba3 2302 	umull	r2, r3, r3, r2
 800a0a6:	095b      	lsrs	r3, r3, #5
 800a0a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	461d      	mov	r5, r3
 800a0b0:	f04f 0600 	mov.w	r6, #0
 800a0b4:	46a9      	mov	r9, r5
 800a0b6:	46b2      	mov	sl, r6
 800a0b8:	eb19 0309 	adds.w	r3, r9, r9
 800a0bc:	eb4a 040a 	adc.w	r4, sl, sl
 800a0c0:	4699      	mov	r9, r3
 800a0c2:	46a2      	mov	sl, r4
 800a0c4:	eb19 0905 	adds.w	r9, r9, r5
 800a0c8:	eb4a 0a06 	adc.w	sl, sl, r6
 800a0cc:	f04f 0100 	mov.w	r1, #0
 800a0d0:	f04f 0200 	mov.w	r2, #0
 800a0d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a0dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a0e0:	4689      	mov	r9, r1
 800a0e2:	4692      	mov	sl, r2
 800a0e4:	eb19 0005 	adds.w	r0, r9, r5
 800a0e8:	eb4a 0106 	adc.w	r1, sl, r6
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	461d      	mov	r5, r3
 800a0f2:	f04f 0600 	mov.w	r6, #0
 800a0f6:	196b      	adds	r3, r5, r5
 800a0f8:	eb46 0406 	adc.w	r4, r6, r6
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	4623      	mov	r3, r4
 800a100:	f7f6 ff20 	bl	8000f44 <__aeabi_uldivmod>
 800a104:	4603      	mov	r3, r0
 800a106:	460c      	mov	r4, r1
 800a108:	461a      	mov	r2, r3
 800a10a:	4b8b      	ldr	r3, [pc, #556]	; (800a338 <UART_SetConfig+0x384>)
 800a10c:	fba3 1302 	umull	r1, r3, r3, r2
 800a110:	095b      	lsrs	r3, r3, #5
 800a112:	2164      	movs	r1, #100	; 0x64
 800a114:	fb01 f303 	mul.w	r3, r1, r3
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	3332      	adds	r3, #50	; 0x32
 800a11e:	4a86      	ldr	r2, [pc, #536]	; (800a338 <UART_SetConfig+0x384>)
 800a120:	fba2 2303 	umull	r2, r3, r2, r3
 800a124:	095b      	lsrs	r3, r3, #5
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a12c:	4498      	add	r8, r3
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	461d      	mov	r5, r3
 800a132:	f04f 0600 	mov.w	r6, #0
 800a136:	46a9      	mov	r9, r5
 800a138:	46b2      	mov	sl, r6
 800a13a:	eb19 0309 	adds.w	r3, r9, r9
 800a13e:	eb4a 040a 	adc.w	r4, sl, sl
 800a142:	4699      	mov	r9, r3
 800a144:	46a2      	mov	sl, r4
 800a146:	eb19 0905 	adds.w	r9, r9, r5
 800a14a:	eb4a 0a06 	adc.w	sl, sl, r6
 800a14e:	f04f 0100 	mov.w	r1, #0
 800a152:	f04f 0200 	mov.w	r2, #0
 800a156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a15a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a15e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a162:	4689      	mov	r9, r1
 800a164:	4692      	mov	sl, r2
 800a166:	eb19 0005 	adds.w	r0, r9, r5
 800a16a:	eb4a 0106 	adc.w	r1, sl, r6
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	461d      	mov	r5, r3
 800a174:	f04f 0600 	mov.w	r6, #0
 800a178:	196b      	adds	r3, r5, r5
 800a17a:	eb46 0406 	adc.w	r4, r6, r6
 800a17e:	461a      	mov	r2, r3
 800a180:	4623      	mov	r3, r4
 800a182:	f7f6 fedf 	bl	8000f44 <__aeabi_uldivmod>
 800a186:	4603      	mov	r3, r0
 800a188:	460c      	mov	r4, r1
 800a18a:	461a      	mov	r2, r3
 800a18c:	4b6a      	ldr	r3, [pc, #424]	; (800a338 <UART_SetConfig+0x384>)
 800a18e:	fba3 1302 	umull	r1, r3, r3, r2
 800a192:	095b      	lsrs	r3, r3, #5
 800a194:	2164      	movs	r1, #100	; 0x64
 800a196:	fb01 f303 	mul.w	r3, r1, r3
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	00db      	lsls	r3, r3, #3
 800a19e:	3332      	adds	r3, #50	; 0x32
 800a1a0:	4a65      	ldr	r2, [pc, #404]	; (800a338 <UART_SetConfig+0x384>)
 800a1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a6:	095b      	lsrs	r3, r3, #5
 800a1a8:	f003 0207 	and.w	r2, r3, #7
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4442      	add	r2, r8
 800a1b2:	609a      	str	r2, [r3, #8]
 800a1b4:	e26f      	b.n	800a696 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a1b6:	f7fe fab5 	bl	8008724 <HAL_RCC_GetPCLK1Freq>
 800a1ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	461d      	mov	r5, r3
 800a1c0:	f04f 0600 	mov.w	r6, #0
 800a1c4:	46a8      	mov	r8, r5
 800a1c6:	46b1      	mov	r9, r6
 800a1c8:	eb18 0308 	adds.w	r3, r8, r8
 800a1cc:	eb49 0409 	adc.w	r4, r9, r9
 800a1d0:	4698      	mov	r8, r3
 800a1d2:	46a1      	mov	r9, r4
 800a1d4:	eb18 0805 	adds.w	r8, r8, r5
 800a1d8:	eb49 0906 	adc.w	r9, r9, r6
 800a1dc:	f04f 0100 	mov.w	r1, #0
 800a1e0:	f04f 0200 	mov.w	r2, #0
 800a1e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a1e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a1ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a1f0:	4688      	mov	r8, r1
 800a1f2:	4691      	mov	r9, r2
 800a1f4:	eb18 0005 	adds.w	r0, r8, r5
 800a1f8:	eb49 0106 	adc.w	r1, r9, r6
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	461d      	mov	r5, r3
 800a202:	f04f 0600 	mov.w	r6, #0
 800a206:	196b      	adds	r3, r5, r5
 800a208:	eb46 0406 	adc.w	r4, r6, r6
 800a20c:	461a      	mov	r2, r3
 800a20e:	4623      	mov	r3, r4
 800a210:	f7f6 fe98 	bl	8000f44 <__aeabi_uldivmod>
 800a214:	4603      	mov	r3, r0
 800a216:	460c      	mov	r4, r1
 800a218:	461a      	mov	r2, r3
 800a21a:	4b47      	ldr	r3, [pc, #284]	; (800a338 <UART_SetConfig+0x384>)
 800a21c:	fba3 2302 	umull	r2, r3, r3, r2
 800a220:	095b      	lsrs	r3, r3, #5
 800a222:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	461d      	mov	r5, r3
 800a22a:	f04f 0600 	mov.w	r6, #0
 800a22e:	46a9      	mov	r9, r5
 800a230:	46b2      	mov	sl, r6
 800a232:	eb19 0309 	adds.w	r3, r9, r9
 800a236:	eb4a 040a 	adc.w	r4, sl, sl
 800a23a:	4699      	mov	r9, r3
 800a23c:	46a2      	mov	sl, r4
 800a23e:	eb19 0905 	adds.w	r9, r9, r5
 800a242:	eb4a 0a06 	adc.w	sl, sl, r6
 800a246:	f04f 0100 	mov.w	r1, #0
 800a24a:	f04f 0200 	mov.w	r2, #0
 800a24e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a252:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a256:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a25a:	4689      	mov	r9, r1
 800a25c:	4692      	mov	sl, r2
 800a25e:	eb19 0005 	adds.w	r0, r9, r5
 800a262:	eb4a 0106 	adc.w	r1, sl, r6
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	461d      	mov	r5, r3
 800a26c:	f04f 0600 	mov.w	r6, #0
 800a270:	196b      	adds	r3, r5, r5
 800a272:	eb46 0406 	adc.w	r4, r6, r6
 800a276:	461a      	mov	r2, r3
 800a278:	4623      	mov	r3, r4
 800a27a:	f7f6 fe63 	bl	8000f44 <__aeabi_uldivmod>
 800a27e:	4603      	mov	r3, r0
 800a280:	460c      	mov	r4, r1
 800a282:	461a      	mov	r2, r3
 800a284:	4b2c      	ldr	r3, [pc, #176]	; (800a338 <UART_SetConfig+0x384>)
 800a286:	fba3 1302 	umull	r1, r3, r3, r2
 800a28a:	095b      	lsrs	r3, r3, #5
 800a28c:	2164      	movs	r1, #100	; 0x64
 800a28e:	fb01 f303 	mul.w	r3, r1, r3
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	00db      	lsls	r3, r3, #3
 800a296:	3332      	adds	r3, #50	; 0x32
 800a298:	4a27      	ldr	r2, [pc, #156]	; (800a338 <UART_SetConfig+0x384>)
 800a29a:	fba2 2303 	umull	r2, r3, r2, r3
 800a29e:	095b      	lsrs	r3, r3, #5
 800a2a0:	005b      	lsls	r3, r3, #1
 800a2a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a2a6:	4498      	add	r8, r3
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	461d      	mov	r5, r3
 800a2ac:	f04f 0600 	mov.w	r6, #0
 800a2b0:	46a9      	mov	r9, r5
 800a2b2:	46b2      	mov	sl, r6
 800a2b4:	eb19 0309 	adds.w	r3, r9, r9
 800a2b8:	eb4a 040a 	adc.w	r4, sl, sl
 800a2bc:	4699      	mov	r9, r3
 800a2be:	46a2      	mov	sl, r4
 800a2c0:	eb19 0905 	adds.w	r9, r9, r5
 800a2c4:	eb4a 0a06 	adc.w	sl, sl, r6
 800a2c8:	f04f 0100 	mov.w	r1, #0
 800a2cc:	f04f 0200 	mov.w	r2, #0
 800a2d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a2d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a2d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a2dc:	4689      	mov	r9, r1
 800a2de:	4692      	mov	sl, r2
 800a2e0:	eb19 0005 	adds.w	r0, r9, r5
 800a2e4:	eb4a 0106 	adc.w	r1, sl, r6
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	461d      	mov	r5, r3
 800a2ee:	f04f 0600 	mov.w	r6, #0
 800a2f2:	196b      	adds	r3, r5, r5
 800a2f4:	eb46 0406 	adc.w	r4, r6, r6
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	4623      	mov	r3, r4
 800a2fc:	f7f6 fe22 	bl	8000f44 <__aeabi_uldivmod>
 800a300:	4603      	mov	r3, r0
 800a302:	460c      	mov	r4, r1
 800a304:	461a      	mov	r2, r3
 800a306:	4b0c      	ldr	r3, [pc, #48]	; (800a338 <UART_SetConfig+0x384>)
 800a308:	fba3 1302 	umull	r1, r3, r3, r2
 800a30c:	095b      	lsrs	r3, r3, #5
 800a30e:	2164      	movs	r1, #100	; 0x64
 800a310:	fb01 f303 	mul.w	r3, r1, r3
 800a314:	1ad3      	subs	r3, r2, r3
 800a316:	00db      	lsls	r3, r3, #3
 800a318:	3332      	adds	r3, #50	; 0x32
 800a31a:	4a07      	ldr	r2, [pc, #28]	; (800a338 <UART_SetConfig+0x384>)
 800a31c:	fba2 2303 	umull	r2, r3, r2, r3
 800a320:	095b      	lsrs	r3, r3, #5
 800a322:	f003 0207 	and.w	r2, r3, #7
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4442      	add	r2, r8
 800a32c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a32e:	e1b2      	b.n	800a696 <UART_SetConfig+0x6e2>
 800a330:	40011000 	.word	0x40011000
 800a334:	40011400 	.word	0x40011400
 800a338:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4ad7      	ldr	r2, [pc, #860]	; (800a6a0 <UART_SetConfig+0x6ec>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d005      	beq.n	800a352 <UART_SetConfig+0x39e>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4ad6      	ldr	r2, [pc, #856]	; (800a6a4 <UART_SetConfig+0x6f0>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	f040 80d1 	bne.w	800a4f4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a352:	f7fe f9fb 	bl	800874c <HAL_RCC_GetPCLK2Freq>
 800a356:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	469a      	mov	sl, r3
 800a35c:	f04f 0b00 	mov.w	fp, #0
 800a360:	46d0      	mov	r8, sl
 800a362:	46d9      	mov	r9, fp
 800a364:	eb18 0308 	adds.w	r3, r8, r8
 800a368:	eb49 0409 	adc.w	r4, r9, r9
 800a36c:	4698      	mov	r8, r3
 800a36e:	46a1      	mov	r9, r4
 800a370:	eb18 080a 	adds.w	r8, r8, sl
 800a374:	eb49 090b 	adc.w	r9, r9, fp
 800a378:	f04f 0100 	mov.w	r1, #0
 800a37c:	f04f 0200 	mov.w	r2, #0
 800a380:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a384:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a388:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a38c:	4688      	mov	r8, r1
 800a38e:	4691      	mov	r9, r2
 800a390:	eb1a 0508 	adds.w	r5, sl, r8
 800a394:	eb4b 0609 	adc.w	r6, fp, r9
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	4619      	mov	r1, r3
 800a39e:	f04f 0200 	mov.w	r2, #0
 800a3a2:	f04f 0300 	mov.w	r3, #0
 800a3a6:	f04f 0400 	mov.w	r4, #0
 800a3aa:	0094      	lsls	r4, r2, #2
 800a3ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a3b0:	008b      	lsls	r3, r1, #2
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	4623      	mov	r3, r4
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	4631      	mov	r1, r6
 800a3ba:	f7f6 fdc3 	bl	8000f44 <__aeabi_uldivmod>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	4bb8      	ldr	r3, [pc, #736]	; (800a6a8 <UART_SetConfig+0x6f4>)
 800a3c6:	fba3 2302 	umull	r2, r3, r3, r2
 800a3ca:	095b      	lsrs	r3, r3, #5
 800a3cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	469b      	mov	fp, r3
 800a3d4:	f04f 0c00 	mov.w	ip, #0
 800a3d8:	46d9      	mov	r9, fp
 800a3da:	46e2      	mov	sl, ip
 800a3dc:	eb19 0309 	adds.w	r3, r9, r9
 800a3e0:	eb4a 040a 	adc.w	r4, sl, sl
 800a3e4:	4699      	mov	r9, r3
 800a3e6:	46a2      	mov	sl, r4
 800a3e8:	eb19 090b 	adds.w	r9, r9, fp
 800a3ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a3f0:	f04f 0100 	mov.w	r1, #0
 800a3f4:	f04f 0200 	mov.w	r2, #0
 800a3f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a400:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a404:	4689      	mov	r9, r1
 800a406:	4692      	mov	sl, r2
 800a408:	eb1b 0509 	adds.w	r5, fp, r9
 800a40c:	eb4c 060a 	adc.w	r6, ip, sl
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	4619      	mov	r1, r3
 800a416:	f04f 0200 	mov.w	r2, #0
 800a41a:	f04f 0300 	mov.w	r3, #0
 800a41e:	f04f 0400 	mov.w	r4, #0
 800a422:	0094      	lsls	r4, r2, #2
 800a424:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a428:	008b      	lsls	r3, r1, #2
 800a42a:	461a      	mov	r2, r3
 800a42c:	4623      	mov	r3, r4
 800a42e:	4628      	mov	r0, r5
 800a430:	4631      	mov	r1, r6
 800a432:	f7f6 fd87 	bl	8000f44 <__aeabi_uldivmod>
 800a436:	4603      	mov	r3, r0
 800a438:	460c      	mov	r4, r1
 800a43a:	461a      	mov	r2, r3
 800a43c:	4b9a      	ldr	r3, [pc, #616]	; (800a6a8 <UART_SetConfig+0x6f4>)
 800a43e:	fba3 1302 	umull	r1, r3, r3, r2
 800a442:	095b      	lsrs	r3, r3, #5
 800a444:	2164      	movs	r1, #100	; 0x64
 800a446:	fb01 f303 	mul.w	r3, r1, r3
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	011b      	lsls	r3, r3, #4
 800a44e:	3332      	adds	r3, #50	; 0x32
 800a450:	4a95      	ldr	r2, [pc, #596]	; (800a6a8 <UART_SetConfig+0x6f4>)
 800a452:	fba2 2303 	umull	r2, r3, r2, r3
 800a456:	095b      	lsrs	r3, r3, #5
 800a458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a45c:	4498      	add	r8, r3
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	469b      	mov	fp, r3
 800a462:	f04f 0c00 	mov.w	ip, #0
 800a466:	46d9      	mov	r9, fp
 800a468:	46e2      	mov	sl, ip
 800a46a:	eb19 0309 	adds.w	r3, r9, r9
 800a46e:	eb4a 040a 	adc.w	r4, sl, sl
 800a472:	4699      	mov	r9, r3
 800a474:	46a2      	mov	sl, r4
 800a476:	eb19 090b 	adds.w	r9, r9, fp
 800a47a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a47e:	f04f 0100 	mov.w	r1, #0
 800a482:	f04f 0200 	mov.w	r2, #0
 800a486:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a48a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a48e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a492:	4689      	mov	r9, r1
 800a494:	4692      	mov	sl, r2
 800a496:	eb1b 0509 	adds.w	r5, fp, r9
 800a49a:	eb4c 060a 	adc.w	r6, ip, sl
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	f04f 0200 	mov.w	r2, #0
 800a4a8:	f04f 0300 	mov.w	r3, #0
 800a4ac:	f04f 0400 	mov.w	r4, #0
 800a4b0:	0094      	lsls	r4, r2, #2
 800a4b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a4b6:	008b      	lsls	r3, r1, #2
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	4623      	mov	r3, r4
 800a4bc:	4628      	mov	r0, r5
 800a4be:	4631      	mov	r1, r6
 800a4c0:	f7f6 fd40 	bl	8000f44 <__aeabi_uldivmod>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	4b77      	ldr	r3, [pc, #476]	; (800a6a8 <UART_SetConfig+0x6f4>)
 800a4cc:	fba3 1302 	umull	r1, r3, r3, r2
 800a4d0:	095b      	lsrs	r3, r3, #5
 800a4d2:	2164      	movs	r1, #100	; 0x64
 800a4d4:	fb01 f303 	mul.w	r3, r1, r3
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	011b      	lsls	r3, r3, #4
 800a4dc:	3332      	adds	r3, #50	; 0x32
 800a4de:	4a72      	ldr	r2, [pc, #456]	; (800a6a8 <UART_SetConfig+0x6f4>)
 800a4e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a4e4:	095b      	lsrs	r3, r3, #5
 800a4e6:	f003 020f 	and.w	r2, r3, #15
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4442      	add	r2, r8
 800a4f0:	609a      	str	r2, [r3, #8]
 800a4f2:	e0d0      	b.n	800a696 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4f4:	f7fe f916 	bl	8008724 <HAL_RCC_GetPCLK1Freq>
 800a4f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	469a      	mov	sl, r3
 800a4fe:	f04f 0b00 	mov.w	fp, #0
 800a502:	46d0      	mov	r8, sl
 800a504:	46d9      	mov	r9, fp
 800a506:	eb18 0308 	adds.w	r3, r8, r8
 800a50a:	eb49 0409 	adc.w	r4, r9, r9
 800a50e:	4698      	mov	r8, r3
 800a510:	46a1      	mov	r9, r4
 800a512:	eb18 080a 	adds.w	r8, r8, sl
 800a516:	eb49 090b 	adc.w	r9, r9, fp
 800a51a:	f04f 0100 	mov.w	r1, #0
 800a51e:	f04f 0200 	mov.w	r2, #0
 800a522:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a526:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a52a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a52e:	4688      	mov	r8, r1
 800a530:	4691      	mov	r9, r2
 800a532:	eb1a 0508 	adds.w	r5, sl, r8
 800a536:	eb4b 0609 	adc.w	r6, fp, r9
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	4619      	mov	r1, r3
 800a540:	f04f 0200 	mov.w	r2, #0
 800a544:	f04f 0300 	mov.w	r3, #0
 800a548:	f04f 0400 	mov.w	r4, #0
 800a54c:	0094      	lsls	r4, r2, #2
 800a54e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a552:	008b      	lsls	r3, r1, #2
 800a554:	461a      	mov	r2, r3
 800a556:	4623      	mov	r3, r4
 800a558:	4628      	mov	r0, r5
 800a55a:	4631      	mov	r1, r6
 800a55c:	f7f6 fcf2 	bl	8000f44 <__aeabi_uldivmod>
 800a560:	4603      	mov	r3, r0
 800a562:	460c      	mov	r4, r1
 800a564:	461a      	mov	r2, r3
 800a566:	4b50      	ldr	r3, [pc, #320]	; (800a6a8 <UART_SetConfig+0x6f4>)
 800a568:	fba3 2302 	umull	r2, r3, r3, r2
 800a56c:	095b      	lsrs	r3, r3, #5
 800a56e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	469b      	mov	fp, r3
 800a576:	f04f 0c00 	mov.w	ip, #0
 800a57a:	46d9      	mov	r9, fp
 800a57c:	46e2      	mov	sl, ip
 800a57e:	eb19 0309 	adds.w	r3, r9, r9
 800a582:	eb4a 040a 	adc.w	r4, sl, sl
 800a586:	4699      	mov	r9, r3
 800a588:	46a2      	mov	sl, r4
 800a58a:	eb19 090b 	adds.w	r9, r9, fp
 800a58e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a592:	f04f 0100 	mov.w	r1, #0
 800a596:	f04f 0200 	mov.w	r2, #0
 800a59a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a59e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a5a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a5a6:	4689      	mov	r9, r1
 800a5a8:	4692      	mov	sl, r2
 800a5aa:	eb1b 0509 	adds.w	r5, fp, r9
 800a5ae:	eb4c 060a 	adc.w	r6, ip, sl
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	f04f 0200 	mov.w	r2, #0
 800a5bc:	f04f 0300 	mov.w	r3, #0
 800a5c0:	f04f 0400 	mov.w	r4, #0
 800a5c4:	0094      	lsls	r4, r2, #2
 800a5c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a5ca:	008b      	lsls	r3, r1, #2
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	4623      	mov	r3, r4
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	f7f6 fcb6 	bl	8000f44 <__aeabi_uldivmod>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	460c      	mov	r4, r1
 800a5dc:	461a      	mov	r2, r3
 800a5de:	4b32      	ldr	r3, [pc, #200]	; (800a6a8 <UART_SetConfig+0x6f4>)
 800a5e0:	fba3 1302 	umull	r1, r3, r3, r2
 800a5e4:	095b      	lsrs	r3, r3, #5
 800a5e6:	2164      	movs	r1, #100	; 0x64
 800a5e8:	fb01 f303 	mul.w	r3, r1, r3
 800a5ec:	1ad3      	subs	r3, r2, r3
 800a5ee:	011b      	lsls	r3, r3, #4
 800a5f0:	3332      	adds	r3, #50	; 0x32
 800a5f2:	4a2d      	ldr	r2, [pc, #180]	; (800a6a8 <UART_SetConfig+0x6f4>)
 800a5f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a5f8:	095b      	lsrs	r3, r3, #5
 800a5fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5fe:	4498      	add	r8, r3
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	469b      	mov	fp, r3
 800a604:	f04f 0c00 	mov.w	ip, #0
 800a608:	46d9      	mov	r9, fp
 800a60a:	46e2      	mov	sl, ip
 800a60c:	eb19 0309 	adds.w	r3, r9, r9
 800a610:	eb4a 040a 	adc.w	r4, sl, sl
 800a614:	4699      	mov	r9, r3
 800a616:	46a2      	mov	sl, r4
 800a618:	eb19 090b 	adds.w	r9, r9, fp
 800a61c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a620:	f04f 0100 	mov.w	r1, #0
 800a624:	f04f 0200 	mov.w	r2, #0
 800a628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a62c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a630:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a634:	4689      	mov	r9, r1
 800a636:	4692      	mov	sl, r2
 800a638:	eb1b 0509 	adds.w	r5, fp, r9
 800a63c:	eb4c 060a 	adc.w	r6, ip, sl
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	4619      	mov	r1, r3
 800a646:	f04f 0200 	mov.w	r2, #0
 800a64a:	f04f 0300 	mov.w	r3, #0
 800a64e:	f04f 0400 	mov.w	r4, #0
 800a652:	0094      	lsls	r4, r2, #2
 800a654:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a658:	008b      	lsls	r3, r1, #2
 800a65a:	461a      	mov	r2, r3
 800a65c:	4623      	mov	r3, r4
 800a65e:	4628      	mov	r0, r5
 800a660:	4631      	mov	r1, r6
 800a662:	f7f6 fc6f 	bl	8000f44 <__aeabi_uldivmod>
 800a666:	4603      	mov	r3, r0
 800a668:	460c      	mov	r4, r1
 800a66a:	461a      	mov	r2, r3
 800a66c:	4b0e      	ldr	r3, [pc, #56]	; (800a6a8 <UART_SetConfig+0x6f4>)
 800a66e:	fba3 1302 	umull	r1, r3, r3, r2
 800a672:	095b      	lsrs	r3, r3, #5
 800a674:	2164      	movs	r1, #100	; 0x64
 800a676:	fb01 f303 	mul.w	r3, r1, r3
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	011b      	lsls	r3, r3, #4
 800a67e:	3332      	adds	r3, #50	; 0x32
 800a680:	4a09      	ldr	r2, [pc, #36]	; (800a6a8 <UART_SetConfig+0x6f4>)
 800a682:	fba2 2303 	umull	r2, r3, r2, r3
 800a686:	095b      	lsrs	r3, r3, #5
 800a688:	f003 020f 	and.w	r2, r3, #15
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4442      	add	r2, r8
 800a692:	609a      	str	r2, [r3, #8]
}
 800a694:	e7ff      	b.n	800a696 <UART_SetConfig+0x6e2>
 800a696:	bf00      	nop
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a0:	40011000 	.word	0x40011000
 800a6a4:	40011400 	.word	0x40011400
 800a6a8:	51eb851f 	.word	0x51eb851f

0800a6ac <__errno>:
 800a6ac:	4b01      	ldr	r3, [pc, #4]	; (800a6b4 <__errno+0x8>)
 800a6ae:	6818      	ldr	r0, [r3, #0]
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	2000000c 	.word	0x2000000c

0800a6b8 <__libc_init_array>:
 800a6b8:	b570      	push	{r4, r5, r6, lr}
 800a6ba:	4e0d      	ldr	r6, [pc, #52]	; (800a6f0 <__libc_init_array+0x38>)
 800a6bc:	4c0d      	ldr	r4, [pc, #52]	; (800a6f4 <__libc_init_array+0x3c>)
 800a6be:	1ba4      	subs	r4, r4, r6
 800a6c0:	10a4      	asrs	r4, r4, #2
 800a6c2:	2500      	movs	r5, #0
 800a6c4:	42a5      	cmp	r5, r4
 800a6c6:	d109      	bne.n	800a6dc <__libc_init_array+0x24>
 800a6c8:	4e0b      	ldr	r6, [pc, #44]	; (800a6f8 <__libc_init_array+0x40>)
 800a6ca:	4c0c      	ldr	r4, [pc, #48]	; (800a6fc <__libc_init_array+0x44>)
 800a6cc:	f004 fac8 	bl	800ec60 <_init>
 800a6d0:	1ba4      	subs	r4, r4, r6
 800a6d2:	10a4      	asrs	r4, r4, #2
 800a6d4:	2500      	movs	r5, #0
 800a6d6:	42a5      	cmp	r5, r4
 800a6d8:	d105      	bne.n	800a6e6 <__libc_init_array+0x2e>
 800a6da:	bd70      	pop	{r4, r5, r6, pc}
 800a6dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a6e0:	4798      	blx	r3
 800a6e2:	3501      	adds	r5, #1
 800a6e4:	e7ee      	b.n	800a6c4 <__libc_init_array+0xc>
 800a6e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a6ea:	4798      	blx	r3
 800a6ec:	3501      	adds	r5, #1
 800a6ee:	e7f2      	b.n	800a6d6 <__libc_init_array+0x1e>
 800a6f0:	0800f114 	.word	0x0800f114
 800a6f4:	0800f114 	.word	0x0800f114
 800a6f8:	0800f114 	.word	0x0800f114
 800a6fc:	0800f118 	.word	0x0800f118

0800a700 <memcpy>:
 800a700:	b510      	push	{r4, lr}
 800a702:	1e43      	subs	r3, r0, #1
 800a704:	440a      	add	r2, r1
 800a706:	4291      	cmp	r1, r2
 800a708:	d100      	bne.n	800a70c <memcpy+0xc>
 800a70a:	bd10      	pop	{r4, pc}
 800a70c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a710:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a714:	e7f7      	b.n	800a706 <memcpy+0x6>

0800a716 <memset>:
 800a716:	4402      	add	r2, r0
 800a718:	4603      	mov	r3, r0
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d100      	bne.n	800a720 <memset+0xa>
 800a71e:	4770      	bx	lr
 800a720:	f803 1b01 	strb.w	r1, [r3], #1
 800a724:	e7f9      	b.n	800a71a <memset+0x4>

0800a726 <__cvt>:
 800a726:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a72a:	ec55 4b10 	vmov	r4, r5, d0
 800a72e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a730:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a734:	2d00      	cmp	r5, #0
 800a736:	460e      	mov	r6, r1
 800a738:	4691      	mov	r9, r2
 800a73a:	4619      	mov	r1, r3
 800a73c:	bfb8      	it	lt
 800a73e:	4622      	movlt	r2, r4
 800a740:	462b      	mov	r3, r5
 800a742:	f027 0720 	bic.w	r7, r7, #32
 800a746:	bfbb      	ittet	lt
 800a748:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a74c:	461d      	movlt	r5, r3
 800a74e:	2300      	movge	r3, #0
 800a750:	232d      	movlt	r3, #45	; 0x2d
 800a752:	bfb8      	it	lt
 800a754:	4614      	movlt	r4, r2
 800a756:	2f46      	cmp	r7, #70	; 0x46
 800a758:	700b      	strb	r3, [r1, #0]
 800a75a:	d004      	beq.n	800a766 <__cvt+0x40>
 800a75c:	2f45      	cmp	r7, #69	; 0x45
 800a75e:	d100      	bne.n	800a762 <__cvt+0x3c>
 800a760:	3601      	adds	r6, #1
 800a762:	2102      	movs	r1, #2
 800a764:	e000      	b.n	800a768 <__cvt+0x42>
 800a766:	2103      	movs	r1, #3
 800a768:	ab03      	add	r3, sp, #12
 800a76a:	9301      	str	r3, [sp, #4]
 800a76c:	ab02      	add	r3, sp, #8
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	4632      	mov	r2, r6
 800a772:	4653      	mov	r3, sl
 800a774:	ec45 4b10 	vmov	d0, r4, r5
 800a778:	f001 fd96 	bl	800c2a8 <_dtoa_r>
 800a77c:	2f47      	cmp	r7, #71	; 0x47
 800a77e:	4680      	mov	r8, r0
 800a780:	d102      	bne.n	800a788 <__cvt+0x62>
 800a782:	f019 0f01 	tst.w	r9, #1
 800a786:	d026      	beq.n	800a7d6 <__cvt+0xb0>
 800a788:	2f46      	cmp	r7, #70	; 0x46
 800a78a:	eb08 0906 	add.w	r9, r8, r6
 800a78e:	d111      	bne.n	800a7b4 <__cvt+0x8e>
 800a790:	f898 3000 	ldrb.w	r3, [r8]
 800a794:	2b30      	cmp	r3, #48	; 0x30
 800a796:	d10a      	bne.n	800a7ae <__cvt+0x88>
 800a798:	2200      	movs	r2, #0
 800a79a:	2300      	movs	r3, #0
 800a79c:	4620      	mov	r0, r4
 800a79e:	4629      	mov	r1, r5
 800a7a0:	f7f6 f992 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7a4:	b918      	cbnz	r0, 800a7ae <__cvt+0x88>
 800a7a6:	f1c6 0601 	rsb	r6, r6, #1
 800a7aa:	f8ca 6000 	str.w	r6, [sl]
 800a7ae:	f8da 3000 	ldr.w	r3, [sl]
 800a7b2:	4499      	add	r9, r3
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	f7f6 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7c0:	b938      	cbnz	r0, 800a7d2 <__cvt+0xac>
 800a7c2:	2230      	movs	r2, #48	; 0x30
 800a7c4:	9b03      	ldr	r3, [sp, #12]
 800a7c6:	454b      	cmp	r3, r9
 800a7c8:	d205      	bcs.n	800a7d6 <__cvt+0xb0>
 800a7ca:	1c59      	adds	r1, r3, #1
 800a7cc:	9103      	str	r1, [sp, #12]
 800a7ce:	701a      	strb	r2, [r3, #0]
 800a7d0:	e7f8      	b.n	800a7c4 <__cvt+0x9e>
 800a7d2:	f8cd 900c 	str.w	r9, [sp, #12]
 800a7d6:	9b03      	ldr	r3, [sp, #12]
 800a7d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7da:	eba3 0308 	sub.w	r3, r3, r8
 800a7de:	4640      	mov	r0, r8
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	b004      	add	sp, #16
 800a7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a7e8 <__exponent>:
 800a7e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7ea:	2900      	cmp	r1, #0
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	bfba      	itte	lt
 800a7f0:	4249      	neglt	r1, r1
 800a7f2:	232d      	movlt	r3, #45	; 0x2d
 800a7f4:	232b      	movge	r3, #43	; 0x2b
 800a7f6:	2909      	cmp	r1, #9
 800a7f8:	f804 2b02 	strb.w	r2, [r4], #2
 800a7fc:	7043      	strb	r3, [r0, #1]
 800a7fe:	dd20      	ble.n	800a842 <__exponent+0x5a>
 800a800:	f10d 0307 	add.w	r3, sp, #7
 800a804:	461f      	mov	r7, r3
 800a806:	260a      	movs	r6, #10
 800a808:	fb91 f5f6 	sdiv	r5, r1, r6
 800a80c:	fb06 1115 	mls	r1, r6, r5, r1
 800a810:	3130      	adds	r1, #48	; 0x30
 800a812:	2d09      	cmp	r5, #9
 800a814:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a818:	f103 32ff 	add.w	r2, r3, #4294967295
 800a81c:	4629      	mov	r1, r5
 800a81e:	dc09      	bgt.n	800a834 <__exponent+0x4c>
 800a820:	3130      	adds	r1, #48	; 0x30
 800a822:	3b02      	subs	r3, #2
 800a824:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a828:	42bb      	cmp	r3, r7
 800a82a:	4622      	mov	r2, r4
 800a82c:	d304      	bcc.n	800a838 <__exponent+0x50>
 800a82e:	1a10      	subs	r0, r2, r0
 800a830:	b003      	add	sp, #12
 800a832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a834:	4613      	mov	r3, r2
 800a836:	e7e7      	b.n	800a808 <__exponent+0x20>
 800a838:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a83c:	f804 2b01 	strb.w	r2, [r4], #1
 800a840:	e7f2      	b.n	800a828 <__exponent+0x40>
 800a842:	2330      	movs	r3, #48	; 0x30
 800a844:	4419      	add	r1, r3
 800a846:	7083      	strb	r3, [r0, #2]
 800a848:	1d02      	adds	r2, r0, #4
 800a84a:	70c1      	strb	r1, [r0, #3]
 800a84c:	e7ef      	b.n	800a82e <__exponent+0x46>
	...

0800a850 <_printf_float>:
 800a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a854:	b08d      	sub	sp, #52	; 0x34
 800a856:	460c      	mov	r4, r1
 800a858:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a85c:	4616      	mov	r6, r2
 800a85e:	461f      	mov	r7, r3
 800a860:	4605      	mov	r5, r0
 800a862:	f002 fe05 	bl	800d470 <_localeconv_r>
 800a866:	6803      	ldr	r3, [r0, #0]
 800a868:	9304      	str	r3, [sp, #16]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7f5 fcb0 	bl	80001d0 <strlen>
 800a870:	2300      	movs	r3, #0
 800a872:	930a      	str	r3, [sp, #40]	; 0x28
 800a874:	f8d8 3000 	ldr.w	r3, [r8]
 800a878:	9005      	str	r0, [sp, #20]
 800a87a:	3307      	adds	r3, #7
 800a87c:	f023 0307 	bic.w	r3, r3, #7
 800a880:	f103 0208 	add.w	r2, r3, #8
 800a884:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a888:	f8d4 b000 	ldr.w	fp, [r4]
 800a88c:	f8c8 2000 	str.w	r2, [r8]
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a898:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a89c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a8a0:	9307      	str	r3, [sp, #28]
 800a8a2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8aa:	4ba7      	ldr	r3, [pc, #668]	; (800ab48 <_printf_float+0x2f8>)
 800a8ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8b0:	f7f6 f93c 	bl	8000b2c <__aeabi_dcmpun>
 800a8b4:	bb70      	cbnz	r0, 800a914 <_printf_float+0xc4>
 800a8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ba:	4ba3      	ldr	r3, [pc, #652]	; (800ab48 <_printf_float+0x2f8>)
 800a8bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8c0:	f7f6 f916 	bl	8000af0 <__aeabi_dcmple>
 800a8c4:	bb30      	cbnz	r0, 800a914 <_printf_float+0xc4>
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	f7f6 f905 	bl	8000adc <__aeabi_dcmplt>
 800a8d2:	b110      	cbz	r0, 800a8da <_printf_float+0x8a>
 800a8d4:	232d      	movs	r3, #45	; 0x2d
 800a8d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8da:	4a9c      	ldr	r2, [pc, #624]	; (800ab4c <_printf_float+0x2fc>)
 800a8dc:	4b9c      	ldr	r3, [pc, #624]	; (800ab50 <_printf_float+0x300>)
 800a8de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a8e2:	bf8c      	ite	hi
 800a8e4:	4690      	movhi	r8, r2
 800a8e6:	4698      	movls	r8, r3
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	f02b 0204 	bic.w	r2, fp, #4
 800a8ee:	6123      	str	r3, [r4, #16]
 800a8f0:	6022      	str	r2, [r4, #0]
 800a8f2:	f04f 0900 	mov.w	r9, #0
 800a8f6:	9700      	str	r7, [sp, #0]
 800a8f8:	4633      	mov	r3, r6
 800a8fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	4628      	mov	r0, r5
 800a900:	f000 f9e6 	bl	800acd0 <_printf_common>
 800a904:	3001      	adds	r0, #1
 800a906:	f040 808d 	bne.w	800aa24 <_printf_float+0x1d4>
 800a90a:	f04f 30ff 	mov.w	r0, #4294967295
 800a90e:	b00d      	add	sp, #52	; 0x34
 800a910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a914:	4642      	mov	r2, r8
 800a916:	464b      	mov	r3, r9
 800a918:	4640      	mov	r0, r8
 800a91a:	4649      	mov	r1, r9
 800a91c:	f7f6 f906 	bl	8000b2c <__aeabi_dcmpun>
 800a920:	b110      	cbz	r0, 800a928 <_printf_float+0xd8>
 800a922:	4a8c      	ldr	r2, [pc, #560]	; (800ab54 <_printf_float+0x304>)
 800a924:	4b8c      	ldr	r3, [pc, #560]	; (800ab58 <_printf_float+0x308>)
 800a926:	e7da      	b.n	800a8de <_printf_float+0x8e>
 800a928:	6861      	ldr	r1, [r4, #4]
 800a92a:	1c4b      	adds	r3, r1, #1
 800a92c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a930:	a80a      	add	r0, sp, #40	; 0x28
 800a932:	d13e      	bne.n	800a9b2 <_printf_float+0x162>
 800a934:	2306      	movs	r3, #6
 800a936:	6063      	str	r3, [r4, #4]
 800a938:	2300      	movs	r3, #0
 800a93a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a93e:	ab09      	add	r3, sp, #36	; 0x24
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	ec49 8b10 	vmov	d0, r8, r9
 800a946:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a94a:	6022      	str	r2, [r4, #0]
 800a94c:	f8cd a004 	str.w	sl, [sp, #4]
 800a950:	6861      	ldr	r1, [r4, #4]
 800a952:	4628      	mov	r0, r5
 800a954:	f7ff fee7 	bl	800a726 <__cvt>
 800a958:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a95c:	2b47      	cmp	r3, #71	; 0x47
 800a95e:	4680      	mov	r8, r0
 800a960:	d109      	bne.n	800a976 <_printf_float+0x126>
 800a962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a964:	1cd8      	adds	r0, r3, #3
 800a966:	db02      	blt.n	800a96e <_printf_float+0x11e>
 800a968:	6862      	ldr	r2, [r4, #4]
 800a96a:	4293      	cmp	r3, r2
 800a96c:	dd47      	ble.n	800a9fe <_printf_float+0x1ae>
 800a96e:	f1aa 0a02 	sub.w	sl, sl, #2
 800a972:	fa5f fa8a 	uxtb.w	sl, sl
 800a976:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a97a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a97c:	d824      	bhi.n	800a9c8 <_printf_float+0x178>
 800a97e:	3901      	subs	r1, #1
 800a980:	4652      	mov	r2, sl
 800a982:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a986:	9109      	str	r1, [sp, #36]	; 0x24
 800a988:	f7ff ff2e 	bl	800a7e8 <__exponent>
 800a98c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a98e:	1813      	adds	r3, r2, r0
 800a990:	2a01      	cmp	r2, #1
 800a992:	4681      	mov	r9, r0
 800a994:	6123      	str	r3, [r4, #16]
 800a996:	dc02      	bgt.n	800a99e <_printf_float+0x14e>
 800a998:	6822      	ldr	r2, [r4, #0]
 800a99a:	07d1      	lsls	r1, r2, #31
 800a99c:	d501      	bpl.n	800a9a2 <_printf_float+0x152>
 800a99e:	3301      	adds	r3, #1
 800a9a0:	6123      	str	r3, [r4, #16]
 800a9a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d0a5      	beq.n	800a8f6 <_printf_float+0xa6>
 800a9aa:	232d      	movs	r3, #45	; 0x2d
 800a9ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9b0:	e7a1      	b.n	800a8f6 <_printf_float+0xa6>
 800a9b2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a9b6:	f000 8177 	beq.w	800aca8 <_printf_float+0x458>
 800a9ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a9be:	d1bb      	bne.n	800a938 <_printf_float+0xe8>
 800a9c0:	2900      	cmp	r1, #0
 800a9c2:	d1b9      	bne.n	800a938 <_printf_float+0xe8>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e7b6      	b.n	800a936 <_printf_float+0xe6>
 800a9c8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a9cc:	d119      	bne.n	800aa02 <_printf_float+0x1b2>
 800a9ce:	2900      	cmp	r1, #0
 800a9d0:	6863      	ldr	r3, [r4, #4]
 800a9d2:	dd0c      	ble.n	800a9ee <_printf_float+0x19e>
 800a9d4:	6121      	str	r1, [r4, #16]
 800a9d6:	b913      	cbnz	r3, 800a9de <_printf_float+0x18e>
 800a9d8:	6822      	ldr	r2, [r4, #0]
 800a9da:	07d2      	lsls	r2, r2, #31
 800a9dc:	d502      	bpl.n	800a9e4 <_printf_float+0x194>
 800a9de:	3301      	adds	r3, #1
 800a9e0:	440b      	add	r3, r1
 800a9e2:	6123      	str	r3, [r4, #16]
 800a9e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e6:	65a3      	str	r3, [r4, #88]	; 0x58
 800a9e8:	f04f 0900 	mov.w	r9, #0
 800a9ec:	e7d9      	b.n	800a9a2 <_printf_float+0x152>
 800a9ee:	b913      	cbnz	r3, 800a9f6 <_printf_float+0x1a6>
 800a9f0:	6822      	ldr	r2, [r4, #0]
 800a9f2:	07d0      	lsls	r0, r2, #31
 800a9f4:	d501      	bpl.n	800a9fa <_printf_float+0x1aa>
 800a9f6:	3302      	adds	r3, #2
 800a9f8:	e7f3      	b.n	800a9e2 <_printf_float+0x192>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e7f1      	b.n	800a9e2 <_printf_float+0x192>
 800a9fe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800aa02:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aa06:	4293      	cmp	r3, r2
 800aa08:	db05      	blt.n	800aa16 <_printf_float+0x1c6>
 800aa0a:	6822      	ldr	r2, [r4, #0]
 800aa0c:	6123      	str	r3, [r4, #16]
 800aa0e:	07d1      	lsls	r1, r2, #31
 800aa10:	d5e8      	bpl.n	800a9e4 <_printf_float+0x194>
 800aa12:	3301      	adds	r3, #1
 800aa14:	e7e5      	b.n	800a9e2 <_printf_float+0x192>
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bfd4      	ite	le
 800aa1a:	f1c3 0302 	rsble	r3, r3, #2
 800aa1e:	2301      	movgt	r3, #1
 800aa20:	4413      	add	r3, r2
 800aa22:	e7de      	b.n	800a9e2 <_printf_float+0x192>
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	055a      	lsls	r2, r3, #21
 800aa28:	d407      	bmi.n	800aa3a <_printf_float+0x1ea>
 800aa2a:	6923      	ldr	r3, [r4, #16]
 800aa2c:	4642      	mov	r2, r8
 800aa2e:	4631      	mov	r1, r6
 800aa30:	4628      	mov	r0, r5
 800aa32:	47b8      	blx	r7
 800aa34:	3001      	adds	r0, #1
 800aa36:	d12b      	bne.n	800aa90 <_printf_float+0x240>
 800aa38:	e767      	b.n	800a90a <_printf_float+0xba>
 800aa3a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800aa3e:	f240 80dc 	bls.w	800abfa <_printf_float+0x3aa>
 800aa42:	2200      	movs	r2, #0
 800aa44:	2300      	movs	r3, #0
 800aa46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa4a:	f7f6 f83d 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d033      	beq.n	800aaba <_printf_float+0x26a>
 800aa52:	2301      	movs	r3, #1
 800aa54:	4a41      	ldr	r2, [pc, #260]	; (800ab5c <_printf_float+0x30c>)
 800aa56:	4631      	mov	r1, r6
 800aa58:	4628      	mov	r0, r5
 800aa5a:	47b8      	blx	r7
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	f43f af54 	beq.w	800a90a <_printf_float+0xba>
 800aa62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa66:	429a      	cmp	r2, r3
 800aa68:	db02      	blt.n	800aa70 <_printf_float+0x220>
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	07d8      	lsls	r0, r3, #31
 800aa6e:	d50f      	bpl.n	800aa90 <_printf_float+0x240>
 800aa70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa74:	4631      	mov	r1, r6
 800aa76:	4628      	mov	r0, r5
 800aa78:	47b8      	blx	r7
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	f43f af45 	beq.w	800a90a <_printf_float+0xba>
 800aa80:	f04f 0800 	mov.w	r8, #0
 800aa84:	f104 091a 	add.w	r9, r4, #26
 800aa88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	4543      	cmp	r3, r8
 800aa8e:	dc09      	bgt.n	800aaa4 <_printf_float+0x254>
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	079b      	lsls	r3, r3, #30
 800aa94:	f100 8103 	bmi.w	800ac9e <_printf_float+0x44e>
 800aa98:	68e0      	ldr	r0, [r4, #12]
 800aa9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa9c:	4298      	cmp	r0, r3
 800aa9e:	bfb8      	it	lt
 800aaa0:	4618      	movlt	r0, r3
 800aaa2:	e734      	b.n	800a90e <_printf_float+0xbe>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	464a      	mov	r2, r9
 800aaa8:	4631      	mov	r1, r6
 800aaaa:	4628      	mov	r0, r5
 800aaac:	47b8      	blx	r7
 800aaae:	3001      	adds	r0, #1
 800aab0:	f43f af2b 	beq.w	800a90a <_printf_float+0xba>
 800aab4:	f108 0801 	add.w	r8, r8, #1
 800aab8:	e7e6      	b.n	800aa88 <_printf_float+0x238>
 800aaba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dc2b      	bgt.n	800ab18 <_printf_float+0x2c8>
 800aac0:	2301      	movs	r3, #1
 800aac2:	4a26      	ldr	r2, [pc, #152]	; (800ab5c <_printf_float+0x30c>)
 800aac4:	4631      	mov	r1, r6
 800aac6:	4628      	mov	r0, r5
 800aac8:	47b8      	blx	r7
 800aaca:	3001      	adds	r0, #1
 800aacc:	f43f af1d 	beq.w	800a90a <_printf_float+0xba>
 800aad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aad2:	b923      	cbnz	r3, 800aade <_printf_float+0x28e>
 800aad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aad6:	b913      	cbnz	r3, 800aade <_printf_float+0x28e>
 800aad8:	6823      	ldr	r3, [r4, #0]
 800aada:	07d9      	lsls	r1, r3, #31
 800aadc:	d5d8      	bpl.n	800aa90 <_printf_float+0x240>
 800aade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aae2:	4631      	mov	r1, r6
 800aae4:	4628      	mov	r0, r5
 800aae6:	47b8      	blx	r7
 800aae8:	3001      	adds	r0, #1
 800aaea:	f43f af0e 	beq.w	800a90a <_printf_float+0xba>
 800aaee:	f04f 0900 	mov.w	r9, #0
 800aaf2:	f104 0a1a 	add.w	sl, r4, #26
 800aaf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf8:	425b      	negs	r3, r3
 800aafa:	454b      	cmp	r3, r9
 800aafc:	dc01      	bgt.n	800ab02 <_printf_float+0x2b2>
 800aafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab00:	e794      	b.n	800aa2c <_printf_float+0x1dc>
 800ab02:	2301      	movs	r3, #1
 800ab04:	4652      	mov	r2, sl
 800ab06:	4631      	mov	r1, r6
 800ab08:	4628      	mov	r0, r5
 800ab0a:	47b8      	blx	r7
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	f43f aefc 	beq.w	800a90a <_printf_float+0xba>
 800ab12:	f109 0901 	add.w	r9, r9, #1
 800ab16:	e7ee      	b.n	800aaf6 <_printf_float+0x2a6>
 800ab18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	bfa8      	it	ge
 800ab20:	461a      	movge	r2, r3
 800ab22:	2a00      	cmp	r2, #0
 800ab24:	4691      	mov	r9, r2
 800ab26:	dd07      	ble.n	800ab38 <_printf_float+0x2e8>
 800ab28:	4613      	mov	r3, r2
 800ab2a:	4631      	mov	r1, r6
 800ab2c:	4642      	mov	r2, r8
 800ab2e:	4628      	mov	r0, r5
 800ab30:	47b8      	blx	r7
 800ab32:	3001      	adds	r0, #1
 800ab34:	f43f aee9 	beq.w	800a90a <_printf_float+0xba>
 800ab38:	f104 031a 	add.w	r3, r4, #26
 800ab3c:	f04f 0b00 	mov.w	fp, #0
 800ab40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab44:	9306      	str	r3, [sp, #24]
 800ab46:	e015      	b.n	800ab74 <_printf_float+0x324>
 800ab48:	7fefffff 	.word	0x7fefffff
 800ab4c:	0800ee2c 	.word	0x0800ee2c
 800ab50:	0800ee28 	.word	0x0800ee28
 800ab54:	0800ee34 	.word	0x0800ee34
 800ab58:	0800ee30 	.word	0x0800ee30
 800ab5c:	0800ee38 	.word	0x0800ee38
 800ab60:	2301      	movs	r3, #1
 800ab62:	9a06      	ldr	r2, [sp, #24]
 800ab64:	4631      	mov	r1, r6
 800ab66:	4628      	mov	r0, r5
 800ab68:	47b8      	blx	r7
 800ab6a:	3001      	adds	r0, #1
 800ab6c:	f43f aecd 	beq.w	800a90a <_printf_float+0xba>
 800ab70:	f10b 0b01 	add.w	fp, fp, #1
 800ab74:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ab78:	ebaa 0309 	sub.w	r3, sl, r9
 800ab7c:	455b      	cmp	r3, fp
 800ab7e:	dcef      	bgt.n	800ab60 <_printf_float+0x310>
 800ab80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab84:	429a      	cmp	r2, r3
 800ab86:	44d0      	add	r8, sl
 800ab88:	db15      	blt.n	800abb6 <_printf_float+0x366>
 800ab8a:	6823      	ldr	r3, [r4, #0]
 800ab8c:	07da      	lsls	r2, r3, #31
 800ab8e:	d412      	bmi.n	800abb6 <_printf_float+0x366>
 800ab90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab94:	eba3 020a 	sub.w	r2, r3, sl
 800ab98:	eba3 0a01 	sub.w	sl, r3, r1
 800ab9c:	4592      	cmp	sl, r2
 800ab9e:	bfa8      	it	ge
 800aba0:	4692      	movge	sl, r2
 800aba2:	f1ba 0f00 	cmp.w	sl, #0
 800aba6:	dc0e      	bgt.n	800abc6 <_printf_float+0x376>
 800aba8:	f04f 0800 	mov.w	r8, #0
 800abac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abb0:	f104 091a 	add.w	r9, r4, #26
 800abb4:	e019      	b.n	800abea <_printf_float+0x39a>
 800abb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abba:	4631      	mov	r1, r6
 800abbc:	4628      	mov	r0, r5
 800abbe:	47b8      	blx	r7
 800abc0:	3001      	adds	r0, #1
 800abc2:	d1e5      	bne.n	800ab90 <_printf_float+0x340>
 800abc4:	e6a1      	b.n	800a90a <_printf_float+0xba>
 800abc6:	4653      	mov	r3, sl
 800abc8:	4642      	mov	r2, r8
 800abca:	4631      	mov	r1, r6
 800abcc:	4628      	mov	r0, r5
 800abce:	47b8      	blx	r7
 800abd0:	3001      	adds	r0, #1
 800abd2:	d1e9      	bne.n	800aba8 <_printf_float+0x358>
 800abd4:	e699      	b.n	800a90a <_printf_float+0xba>
 800abd6:	2301      	movs	r3, #1
 800abd8:	464a      	mov	r2, r9
 800abda:	4631      	mov	r1, r6
 800abdc:	4628      	mov	r0, r5
 800abde:	47b8      	blx	r7
 800abe0:	3001      	adds	r0, #1
 800abe2:	f43f ae92 	beq.w	800a90a <_printf_float+0xba>
 800abe6:	f108 0801 	add.w	r8, r8, #1
 800abea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abee:	1a9b      	subs	r3, r3, r2
 800abf0:	eba3 030a 	sub.w	r3, r3, sl
 800abf4:	4543      	cmp	r3, r8
 800abf6:	dcee      	bgt.n	800abd6 <_printf_float+0x386>
 800abf8:	e74a      	b.n	800aa90 <_printf_float+0x240>
 800abfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abfc:	2a01      	cmp	r2, #1
 800abfe:	dc01      	bgt.n	800ac04 <_printf_float+0x3b4>
 800ac00:	07db      	lsls	r3, r3, #31
 800ac02:	d53a      	bpl.n	800ac7a <_printf_float+0x42a>
 800ac04:	2301      	movs	r3, #1
 800ac06:	4642      	mov	r2, r8
 800ac08:	4631      	mov	r1, r6
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	47b8      	blx	r7
 800ac0e:	3001      	adds	r0, #1
 800ac10:	f43f ae7b 	beq.w	800a90a <_printf_float+0xba>
 800ac14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac18:	4631      	mov	r1, r6
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	47b8      	blx	r7
 800ac1e:	3001      	adds	r0, #1
 800ac20:	f108 0801 	add.w	r8, r8, #1
 800ac24:	f43f ae71 	beq.w	800a90a <_printf_float+0xba>
 800ac28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f103 3aff 	add.w	sl, r3, #4294967295
 800ac30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac34:	2300      	movs	r3, #0
 800ac36:	f7f5 ff47 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac3a:	b9c8      	cbnz	r0, 800ac70 <_printf_float+0x420>
 800ac3c:	4653      	mov	r3, sl
 800ac3e:	4642      	mov	r2, r8
 800ac40:	4631      	mov	r1, r6
 800ac42:	4628      	mov	r0, r5
 800ac44:	47b8      	blx	r7
 800ac46:	3001      	adds	r0, #1
 800ac48:	d10e      	bne.n	800ac68 <_printf_float+0x418>
 800ac4a:	e65e      	b.n	800a90a <_printf_float+0xba>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	4652      	mov	r2, sl
 800ac50:	4631      	mov	r1, r6
 800ac52:	4628      	mov	r0, r5
 800ac54:	47b8      	blx	r7
 800ac56:	3001      	adds	r0, #1
 800ac58:	f43f ae57 	beq.w	800a90a <_printf_float+0xba>
 800ac5c:	f108 0801 	add.w	r8, r8, #1
 800ac60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac62:	3b01      	subs	r3, #1
 800ac64:	4543      	cmp	r3, r8
 800ac66:	dcf1      	bgt.n	800ac4c <_printf_float+0x3fc>
 800ac68:	464b      	mov	r3, r9
 800ac6a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac6e:	e6de      	b.n	800aa2e <_printf_float+0x1de>
 800ac70:	f04f 0800 	mov.w	r8, #0
 800ac74:	f104 0a1a 	add.w	sl, r4, #26
 800ac78:	e7f2      	b.n	800ac60 <_printf_float+0x410>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e7df      	b.n	800ac3e <_printf_float+0x3ee>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	464a      	mov	r2, r9
 800ac82:	4631      	mov	r1, r6
 800ac84:	4628      	mov	r0, r5
 800ac86:	47b8      	blx	r7
 800ac88:	3001      	adds	r0, #1
 800ac8a:	f43f ae3e 	beq.w	800a90a <_printf_float+0xba>
 800ac8e:	f108 0801 	add.w	r8, r8, #1
 800ac92:	68e3      	ldr	r3, [r4, #12]
 800ac94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac96:	1a9b      	subs	r3, r3, r2
 800ac98:	4543      	cmp	r3, r8
 800ac9a:	dcf0      	bgt.n	800ac7e <_printf_float+0x42e>
 800ac9c:	e6fc      	b.n	800aa98 <_printf_float+0x248>
 800ac9e:	f04f 0800 	mov.w	r8, #0
 800aca2:	f104 0919 	add.w	r9, r4, #25
 800aca6:	e7f4      	b.n	800ac92 <_printf_float+0x442>
 800aca8:	2900      	cmp	r1, #0
 800acaa:	f43f ae8b 	beq.w	800a9c4 <_printf_float+0x174>
 800acae:	2300      	movs	r3, #0
 800acb0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800acb4:	ab09      	add	r3, sp, #36	; 0x24
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	ec49 8b10 	vmov	d0, r8, r9
 800acbc:	6022      	str	r2, [r4, #0]
 800acbe:	f8cd a004 	str.w	sl, [sp, #4]
 800acc2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800acc6:	4628      	mov	r0, r5
 800acc8:	f7ff fd2d 	bl	800a726 <__cvt>
 800accc:	4680      	mov	r8, r0
 800acce:	e648      	b.n	800a962 <_printf_float+0x112>

0800acd0 <_printf_common>:
 800acd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd4:	4691      	mov	r9, r2
 800acd6:	461f      	mov	r7, r3
 800acd8:	688a      	ldr	r2, [r1, #8]
 800acda:	690b      	ldr	r3, [r1, #16]
 800acdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ace0:	4293      	cmp	r3, r2
 800ace2:	bfb8      	it	lt
 800ace4:	4613      	movlt	r3, r2
 800ace6:	f8c9 3000 	str.w	r3, [r9]
 800acea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acee:	4606      	mov	r6, r0
 800acf0:	460c      	mov	r4, r1
 800acf2:	b112      	cbz	r2, 800acfa <_printf_common+0x2a>
 800acf4:	3301      	adds	r3, #1
 800acf6:	f8c9 3000 	str.w	r3, [r9]
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	0699      	lsls	r1, r3, #26
 800acfe:	bf42      	ittt	mi
 800ad00:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ad04:	3302      	addmi	r3, #2
 800ad06:	f8c9 3000 	strmi.w	r3, [r9]
 800ad0a:	6825      	ldr	r5, [r4, #0]
 800ad0c:	f015 0506 	ands.w	r5, r5, #6
 800ad10:	d107      	bne.n	800ad22 <_printf_common+0x52>
 800ad12:	f104 0a19 	add.w	sl, r4, #25
 800ad16:	68e3      	ldr	r3, [r4, #12]
 800ad18:	f8d9 2000 	ldr.w	r2, [r9]
 800ad1c:	1a9b      	subs	r3, r3, r2
 800ad1e:	42ab      	cmp	r3, r5
 800ad20:	dc28      	bgt.n	800ad74 <_printf_common+0xa4>
 800ad22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ad26:	6822      	ldr	r2, [r4, #0]
 800ad28:	3300      	adds	r3, #0
 800ad2a:	bf18      	it	ne
 800ad2c:	2301      	movne	r3, #1
 800ad2e:	0692      	lsls	r2, r2, #26
 800ad30:	d42d      	bmi.n	800ad8e <_printf_common+0xbe>
 800ad32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad36:	4639      	mov	r1, r7
 800ad38:	4630      	mov	r0, r6
 800ad3a:	47c0      	blx	r8
 800ad3c:	3001      	adds	r0, #1
 800ad3e:	d020      	beq.n	800ad82 <_printf_common+0xb2>
 800ad40:	6823      	ldr	r3, [r4, #0]
 800ad42:	68e5      	ldr	r5, [r4, #12]
 800ad44:	f8d9 2000 	ldr.w	r2, [r9]
 800ad48:	f003 0306 	and.w	r3, r3, #6
 800ad4c:	2b04      	cmp	r3, #4
 800ad4e:	bf08      	it	eq
 800ad50:	1aad      	subeq	r5, r5, r2
 800ad52:	68a3      	ldr	r3, [r4, #8]
 800ad54:	6922      	ldr	r2, [r4, #16]
 800ad56:	bf0c      	ite	eq
 800ad58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad5c:	2500      	movne	r5, #0
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	bfc4      	itt	gt
 800ad62:	1a9b      	subgt	r3, r3, r2
 800ad64:	18ed      	addgt	r5, r5, r3
 800ad66:	f04f 0900 	mov.w	r9, #0
 800ad6a:	341a      	adds	r4, #26
 800ad6c:	454d      	cmp	r5, r9
 800ad6e:	d11a      	bne.n	800ada6 <_printf_common+0xd6>
 800ad70:	2000      	movs	r0, #0
 800ad72:	e008      	b.n	800ad86 <_printf_common+0xb6>
 800ad74:	2301      	movs	r3, #1
 800ad76:	4652      	mov	r2, sl
 800ad78:	4639      	mov	r1, r7
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	47c0      	blx	r8
 800ad7e:	3001      	adds	r0, #1
 800ad80:	d103      	bne.n	800ad8a <_printf_common+0xba>
 800ad82:	f04f 30ff 	mov.w	r0, #4294967295
 800ad86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad8a:	3501      	adds	r5, #1
 800ad8c:	e7c3      	b.n	800ad16 <_printf_common+0x46>
 800ad8e:	18e1      	adds	r1, r4, r3
 800ad90:	1c5a      	adds	r2, r3, #1
 800ad92:	2030      	movs	r0, #48	; 0x30
 800ad94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad98:	4422      	add	r2, r4
 800ad9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ada2:	3302      	adds	r3, #2
 800ada4:	e7c5      	b.n	800ad32 <_printf_common+0x62>
 800ada6:	2301      	movs	r3, #1
 800ada8:	4622      	mov	r2, r4
 800adaa:	4639      	mov	r1, r7
 800adac:	4630      	mov	r0, r6
 800adae:	47c0      	blx	r8
 800adb0:	3001      	adds	r0, #1
 800adb2:	d0e6      	beq.n	800ad82 <_printf_common+0xb2>
 800adb4:	f109 0901 	add.w	r9, r9, #1
 800adb8:	e7d8      	b.n	800ad6c <_printf_common+0x9c>
	...

0800adbc <_printf_i>:
 800adbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adc0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800adc4:	460c      	mov	r4, r1
 800adc6:	7e09      	ldrb	r1, [r1, #24]
 800adc8:	b085      	sub	sp, #20
 800adca:	296e      	cmp	r1, #110	; 0x6e
 800adcc:	4617      	mov	r7, r2
 800adce:	4606      	mov	r6, r0
 800add0:	4698      	mov	r8, r3
 800add2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800add4:	f000 80b3 	beq.w	800af3e <_printf_i+0x182>
 800add8:	d822      	bhi.n	800ae20 <_printf_i+0x64>
 800adda:	2963      	cmp	r1, #99	; 0x63
 800addc:	d036      	beq.n	800ae4c <_printf_i+0x90>
 800adde:	d80a      	bhi.n	800adf6 <_printf_i+0x3a>
 800ade0:	2900      	cmp	r1, #0
 800ade2:	f000 80b9 	beq.w	800af58 <_printf_i+0x19c>
 800ade6:	2958      	cmp	r1, #88	; 0x58
 800ade8:	f000 8083 	beq.w	800aef2 <_printf_i+0x136>
 800adec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adf0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800adf4:	e032      	b.n	800ae5c <_printf_i+0xa0>
 800adf6:	2964      	cmp	r1, #100	; 0x64
 800adf8:	d001      	beq.n	800adfe <_printf_i+0x42>
 800adfa:	2969      	cmp	r1, #105	; 0x69
 800adfc:	d1f6      	bne.n	800adec <_printf_i+0x30>
 800adfe:	6820      	ldr	r0, [r4, #0]
 800ae00:	6813      	ldr	r3, [r2, #0]
 800ae02:	0605      	lsls	r5, r0, #24
 800ae04:	f103 0104 	add.w	r1, r3, #4
 800ae08:	d52a      	bpl.n	800ae60 <_printf_i+0xa4>
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	6011      	str	r1, [r2, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	da03      	bge.n	800ae1a <_printf_i+0x5e>
 800ae12:	222d      	movs	r2, #45	; 0x2d
 800ae14:	425b      	negs	r3, r3
 800ae16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ae1a:	486f      	ldr	r0, [pc, #444]	; (800afd8 <_printf_i+0x21c>)
 800ae1c:	220a      	movs	r2, #10
 800ae1e:	e039      	b.n	800ae94 <_printf_i+0xd8>
 800ae20:	2973      	cmp	r1, #115	; 0x73
 800ae22:	f000 809d 	beq.w	800af60 <_printf_i+0x1a4>
 800ae26:	d808      	bhi.n	800ae3a <_printf_i+0x7e>
 800ae28:	296f      	cmp	r1, #111	; 0x6f
 800ae2a:	d020      	beq.n	800ae6e <_printf_i+0xb2>
 800ae2c:	2970      	cmp	r1, #112	; 0x70
 800ae2e:	d1dd      	bne.n	800adec <_printf_i+0x30>
 800ae30:	6823      	ldr	r3, [r4, #0]
 800ae32:	f043 0320 	orr.w	r3, r3, #32
 800ae36:	6023      	str	r3, [r4, #0]
 800ae38:	e003      	b.n	800ae42 <_printf_i+0x86>
 800ae3a:	2975      	cmp	r1, #117	; 0x75
 800ae3c:	d017      	beq.n	800ae6e <_printf_i+0xb2>
 800ae3e:	2978      	cmp	r1, #120	; 0x78
 800ae40:	d1d4      	bne.n	800adec <_printf_i+0x30>
 800ae42:	2378      	movs	r3, #120	; 0x78
 800ae44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae48:	4864      	ldr	r0, [pc, #400]	; (800afdc <_printf_i+0x220>)
 800ae4a:	e055      	b.n	800aef8 <_printf_i+0x13c>
 800ae4c:	6813      	ldr	r3, [r2, #0]
 800ae4e:	1d19      	adds	r1, r3, #4
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	6011      	str	r1, [r2, #0]
 800ae54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e08c      	b.n	800af7a <_printf_i+0x1be>
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	6011      	str	r1, [r2, #0]
 800ae64:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae68:	bf18      	it	ne
 800ae6a:	b21b      	sxthne	r3, r3
 800ae6c:	e7cf      	b.n	800ae0e <_printf_i+0x52>
 800ae6e:	6813      	ldr	r3, [r2, #0]
 800ae70:	6825      	ldr	r5, [r4, #0]
 800ae72:	1d18      	adds	r0, r3, #4
 800ae74:	6010      	str	r0, [r2, #0]
 800ae76:	0628      	lsls	r0, r5, #24
 800ae78:	d501      	bpl.n	800ae7e <_printf_i+0xc2>
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	e002      	b.n	800ae84 <_printf_i+0xc8>
 800ae7e:	0668      	lsls	r0, r5, #25
 800ae80:	d5fb      	bpl.n	800ae7a <_printf_i+0xbe>
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	4854      	ldr	r0, [pc, #336]	; (800afd8 <_printf_i+0x21c>)
 800ae86:	296f      	cmp	r1, #111	; 0x6f
 800ae88:	bf14      	ite	ne
 800ae8a:	220a      	movne	r2, #10
 800ae8c:	2208      	moveq	r2, #8
 800ae8e:	2100      	movs	r1, #0
 800ae90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae94:	6865      	ldr	r5, [r4, #4]
 800ae96:	60a5      	str	r5, [r4, #8]
 800ae98:	2d00      	cmp	r5, #0
 800ae9a:	f2c0 8095 	blt.w	800afc8 <_printf_i+0x20c>
 800ae9e:	6821      	ldr	r1, [r4, #0]
 800aea0:	f021 0104 	bic.w	r1, r1, #4
 800aea4:	6021      	str	r1, [r4, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d13d      	bne.n	800af26 <_printf_i+0x16a>
 800aeaa:	2d00      	cmp	r5, #0
 800aeac:	f040 808e 	bne.w	800afcc <_printf_i+0x210>
 800aeb0:	4665      	mov	r5, ip
 800aeb2:	2a08      	cmp	r2, #8
 800aeb4:	d10b      	bne.n	800aece <_printf_i+0x112>
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	07db      	lsls	r3, r3, #31
 800aeba:	d508      	bpl.n	800aece <_printf_i+0x112>
 800aebc:	6923      	ldr	r3, [r4, #16]
 800aebe:	6862      	ldr	r2, [r4, #4]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	bfde      	ittt	le
 800aec4:	2330      	movle	r3, #48	; 0x30
 800aec6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aeca:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aece:	ebac 0305 	sub.w	r3, ip, r5
 800aed2:	6123      	str	r3, [r4, #16]
 800aed4:	f8cd 8000 	str.w	r8, [sp]
 800aed8:	463b      	mov	r3, r7
 800aeda:	aa03      	add	r2, sp, #12
 800aedc:	4621      	mov	r1, r4
 800aede:	4630      	mov	r0, r6
 800aee0:	f7ff fef6 	bl	800acd0 <_printf_common>
 800aee4:	3001      	adds	r0, #1
 800aee6:	d14d      	bne.n	800af84 <_printf_i+0x1c8>
 800aee8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeec:	b005      	add	sp, #20
 800aeee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aef2:	4839      	ldr	r0, [pc, #228]	; (800afd8 <_printf_i+0x21c>)
 800aef4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aef8:	6813      	ldr	r3, [r2, #0]
 800aefa:	6821      	ldr	r1, [r4, #0]
 800aefc:	1d1d      	adds	r5, r3, #4
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6015      	str	r5, [r2, #0]
 800af02:	060a      	lsls	r2, r1, #24
 800af04:	d50b      	bpl.n	800af1e <_printf_i+0x162>
 800af06:	07ca      	lsls	r2, r1, #31
 800af08:	bf44      	itt	mi
 800af0a:	f041 0120 	orrmi.w	r1, r1, #32
 800af0e:	6021      	strmi	r1, [r4, #0]
 800af10:	b91b      	cbnz	r3, 800af1a <_printf_i+0x15e>
 800af12:	6822      	ldr	r2, [r4, #0]
 800af14:	f022 0220 	bic.w	r2, r2, #32
 800af18:	6022      	str	r2, [r4, #0]
 800af1a:	2210      	movs	r2, #16
 800af1c:	e7b7      	b.n	800ae8e <_printf_i+0xd2>
 800af1e:	064d      	lsls	r5, r1, #25
 800af20:	bf48      	it	mi
 800af22:	b29b      	uxthmi	r3, r3
 800af24:	e7ef      	b.n	800af06 <_printf_i+0x14a>
 800af26:	4665      	mov	r5, ip
 800af28:	fbb3 f1f2 	udiv	r1, r3, r2
 800af2c:	fb02 3311 	mls	r3, r2, r1, r3
 800af30:	5cc3      	ldrb	r3, [r0, r3]
 800af32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800af36:	460b      	mov	r3, r1
 800af38:	2900      	cmp	r1, #0
 800af3a:	d1f5      	bne.n	800af28 <_printf_i+0x16c>
 800af3c:	e7b9      	b.n	800aeb2 <_printf_i+0xf6>
 800af3e:	6813      	ldr	r3, [r2, #0]
 800af40:	6825      	ldr	r5, [r4, #0]
 800af42:	6961      	ldr	r1, [r4, #20]
 800af44:	1d18      	adds	r0, r3, #4
 800af46:	6010      	str	r0, [r2, #0]
 800af48:	0628      	lsls	r0, r5, #24
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	d501      	bpl.n	800af52 <_printf_i+0x196>
 800af4e:	6019      	str	r1, [r3, #0]
 800af50:	e002      	b.n	800af58 <_printf_i+0x19c>
 800af52:	066a      	lsls	r2, r5, #25
 800af54:	d5fb      	bpl.n	800af4e <_printf_i+0x192>
 800af56:	8019      	strh	r1, [r3, #0]
 800af58:	2300      	movs	r3, #0
 800af5a:	6123      	str	r3, [r4, #16]
 800af5c:	4665      	mov	r5, ip
 800af5e:	e7b9      	b.n	800aed4 <_printf_i+0x118>
 800af60:	6813      	ldr	r3, [r2, #0]
 800af62:	1d19      	adds	r1, r3, #4
 800af64:	6011      	str	r1, [r2, #0]
 800af66:	681d      	ldr	r5, [r3, #0]
 800af68:	6862      	ldr	r2, [r4, #4]
 800af6a:	2100      	movs	r1, #0
 800af6c:	4628      	mov	r0, r5
 800af6e:	f7f5 f937 	bl	80001e0 <memchr>
 800af72:	b108      	cbz	r0, 800af78 <_printf_i+0x1bc>
 800af74:	1b40      	subs	r0, r0, r5
 800af76:	6060      	str	r0, [r4, #4]
 800af78:	6863      	ldr	r3, [r4, #4]
 800af7a:	6123      	str	r3, [r4, #16]
 800af7c:	2300      	movs	r3, #0
 800af7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af82:	e7a7      	b.n	800aed4 <_printf_i+0x118>
 800af84:	6923      	ldr	r3, [r4, #16]
 800af86:	462a      	mov	r2, r5
 800af88:	4639      	mov	r1, r7
 800af8a:	4630      	mov	r0, r6
 800af8c:	47c0      	blx	r8
 800af8e:	3001      	adds	r0, #1
 800af90:	d0aa      	beq.n	800aee8 <_printf_i+0x12c>
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	079b      	lsls	r3, r3, #30
 800af96:	d413      	bmi.n	800afc0 <_printf_i+0x204>
 800af98:	68e0      	ldr	r0, [r4, #12]
 800af9a:	9b03      	ldr	r3, [sp, #12]
 800af9c:	4298      	cmp	r0, r3
 800af9e:	bfb8      	it	lt
 800afa0:	4618      	movlt	r0, r3
 800afa2:	e7a3      	b.n	800aeec <_printf_i+0x130>
 800afa4:	2301      	movs	r3, #1
 800afa6:	464a      	mov	r2, r9
 800afa8:	4639      	mov	r1, r7
 800afaa:	4630      	mov	r0, r6
 800afac:	47c0      	blx	r8
 800afae:	3001      	adds	r0, #1
 800afb0:	d09a      	beq.n	800aee8 <_printf_i+0x12c>
 800afb2:	3501      	adds	r5, #1
 800afb4:	68e3      	ldr	r3, [r4, #12]
 800afb6:	9a03      	ldr	r2, [sp, #12]
 800afb8:	1a9b      	subs	r3, r3, r2
 800afba:	42ab      	cmp	r3, r5
 800afbc:	dcf2      	bgt.n	800afa4 <_printf_i+0x1e8>
 800afbe:	e7eb      	b.n	800af98 <_printf_i+0x1dc>
 800afc0:	2500      	movs	r5, #0
 800afc2:	f104 0919 	add.w	r9, r4, #25
 800afc6:	e7f5      	b.n	800afb4 <_printf_i+0x1f8>
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1ac      	bne.n	800af26 <_printf_i+0x16a>
 800afcc:	7803      	ldrb	r3, [r0, #0]
 800afce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afd6:	e76c      	b.n	800aeb2 <_printf_i+0xf6>
 800afd8:	0800ee3a 	.word	0x0800ee3a
 800afdc:	0800ee4b 	.word	0x0800ee4b

0800afe0 <_scanf_float>:
 800afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe4:	469a      	mov	sl, r3
 800afe6:	688b      	ldr	r3, [r1, #8]
 800afe8:	4616      	mov	r6, r2
 800afea:	1e5a      	subs	r2, r3, #1
 800afec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aff0:	b087      	sub	sp, #28
 800aff2:	bf83      	ittte	hi
 800aff4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800aff8:	189b      	addhi	r3, r3, r2
 800affa:	9301      	strhi	r3, [sp, #4]
 800affc:	2300      	movls	r3, #0
 800affe:	bf86      	itte	hi
 800b000:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b004:	608b      	strhi	r3, [r1, #8]
 800b006:	9301      	strls	r3, [sp, #4]
 800b008:	680b      	ldr	r3, [r1, #0]
 800b00a:	4688      	mov	r8, r1
 800b00c:	f04f 0b00 	mov.w	fp, #0
 800b010:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b014:	f848 3b1c 	str.w	r3, [r8], #28
 800b018:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b01c:	4607      	mov	r7, r0
 800b01e:	460c      	mov	r4, r1
 800b020:	4645      	mov	r5, r8
 800b022:	465a      	mov	r2, fp
 800b024:	46d9      	mov	r9, fp
 800b026:	f8cd b008 	str.w	fp, [sp, #8]
 800b02a:	68a1      	ldr	r1, [r4, #8]
 800b02c:	b181      	cbz	r1, 800b050 <_scanf_float+0x70>
 800b02e:	6833      	ldr	r3, [r6, #0]
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	2b49      	cmp	r3, #73	; 0x49
 800b034:	d071      	beq.n	800b11a <_scanf_float+0x13a>
 800b036:	d84d      	bhi.n	800b0d4 <_scanf_float+0xf4>
 800b038:	2b39      	cmp	r3, #57	; 0x39
 800b03a:	d840      	bhi.n	800b0be <_scanf_float+0xde>
 800b03c:	2b31      	cmp	r3, #49	; 0x31
 800b03e:	f080 8088 	bcs.w	800b152 <_scanf_float+0x172>
 800b042:	2b2d      	cmp	r3, #45	; 0x2d
 800b044:	f000 8090 	beq.w	800b168 <_scanf_float+0x188>
 800b048:	d815      	bhi.n	800b076 <_scanf_float+0x96>
 800b04a:	2b2b      	cmp	r3, #43	; 0x2b
 800b04c:	f000 808c 	beq.w	800b168 <_scanf_float+0x188>
 800b050:	f1b9 0f00 	cmp.w	r9, #0
 800b054:	d003      	beq.n	800b05e <_scanf_float+0x7e>
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	3a01      	subs	r2, #1
 800b060:	2a01      	cmp	r2, #1
 800b062:	f200 80ea 	bhi.w	800b23a <_scanf_float+0x25a>
 800b066:	4545      	cmp	r5, r8
 800b068:	f200 80dc 	bhi.w	800b224 <_scanf_float+0x244>
 800b06c:	2601      	movs	r6, #1
 800b06e:	4630      	mov	r0, r6
 800b070:	b007      	add	sp, #28
 800b072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b076:	2b2e      	cmp	r3, #46	; 0x2e
 800b078:	f000 809f 	beq.w	800b1ba <_scanf_float+0x1da>
 800b07c:	2b30      	cmp	r3, #48	; 0x30
 800b07e:	d1e7      	bne.n	800b050 <_scanf_float+0x70>
 800b080:	6820      	ldr	r0, [r4, #0]
 800b082:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b086:	d064      	beq.n	800b152 <_scanf_float+0x172>
 800b088:	9b01      	ldr	r3, [sp, #4]
 800b08a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b08e:	6020      	str	r0, [r4, #0]
 800b090:	f109 0901 	add.w	r9, r9, #1
 800b094:	b11b      	cbz	r3, 800b09e <_scanf_float+0xbe>
 800b096:	3b01      	subs	r3, #1
 800b098:	3101      	adds	r1, #1
 800b09a:	9301      	str	r3, [sp, #4]
 800b09c:	60a1      	str	r1, [r4, #8]
 800b09e:	68a3      	ldr	r3, [r4, #8]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	60a3      	str	r3, [r4, #8]
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	6123      	str	r3, [r4, #16]
 800b0aa:	6873      	ldr	r3, [r6, #4]
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	6073      	str	r3, [r6, #4]
 800b0b2:	f340 80ac 	ble.w	800b20e <_scanf_float+0x22e>
 800b0b6:	6833      	ldr	r3, [r6, #0]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	6033      	str	r3, [r6, #0]
 800b0bc:	e7b5      	b.n	800b02a <_scanf_float+0x4a>
 800b0be:	2b45      	cmp	r3, #69	; 0x45
 800b0c0:	f000 8085 	beq.w	800b1ce <_scanf_float+0x1ee>
 800b0c4:	2b46      	cmp	r3, #70	; 0x46
 800b0c6:	d06a      	beq.n	800b19e <_scanf_float+0x1be>
 800b0c8:	2b41      	cmp	r3, #65	; 0x41
 800b0ca:	d1c1      	bne.n	800b050 <_scanf_float+0x70>
 800b0cc:	2a01      	cmp	r2, #1
 800b0ce:	d1bf      	bne.n	800b050 <_scanf_float+0x70>
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	e046      	b.n	800b162 <_scanf_float+0x182>
 800b0d4:	2b65      	cmp	r3, #101	; 0x65
 800b0d6:	d07a      	beq.n	800b1ce <_scanf_float+0x1ee>
 800b0d8:	d818      	bhi.n	800b10c <_scanf_float+0x12c>
 800b0da:	2b54      	cmp	r3, #84	; 0x54
 800b0dc:	d066      	beq.n	800b1ac <_scanf_float+0x1cc>
 800b0de:	d811      	bhi.n	800b104 <_scanf_float+0x124>
 800b0e0:	2b4e      	cmp	r3, #78	; 0x4e
 800b0e2:	d1b5      	bne.n	800b050 <_scanf_float+0x70>
 800b0e4:	2a00      	cmp	r2, #0
 800b0e6:	d146      	bne.n	800b176 <_scanf_float+0x196>
 800b0e8:	f1b9 0f00 	cmp.w	r9, #0
 800b0ec:	d145      	bne.n	800b17a <_scanf_float+0x19a>
 800b0ee:	6821      	ldr	r1, [r4, #0]
 800b0f0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b0f4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b0f8:	d13f      	bne.n	800b17a <_scanf_float+0x19a>
 800b0fa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b0fe:	6021      	str	r1, [r4, #0]
 800b100:	2201      	movs	r2, #1
 800b102:	e02e      	b.n	800b162 <_scanf_float+0x182>
 800b104:	2b59      	cmp	r3, #89	; 0x59
 800b106:	d01e      	beq.n	800b146 <_scanf_float+0x166>
 800b108:	2b61      	cmp	r3, #97	; 0x61
 800b10a:	e7de      	b.n	800b0ca <_scanf_float+0xea>
 800b10c:	2b6e      	cmp	r3, #110	; 0x6e
 800b10e:	d0e9      	beq.n	800b0e4 <_scanf_float+0x104>
 800b110:	d815      	bhi.n	800b13e <_scanf_float+0x15e>
 800b112:	2b66      	cmp	r3, #102	; 0x66
 800b114:	d043      	beq.n	800b19e <_scanf_float+0x1be>
 800b116:	2b69      	cmp	r3, #105	; 0x69
 800b118:	d19a      	bne.n	800b050 <_scanf_float+0x70>
 800b11a:	f1bb 0f00 	cmp.w	fp, #0
 800b11e:	d138      	bne.n	800b192 <_scanf_float+0x1b2>
 800b120:	f1b9 0f00 	cmp.w	r9, #0
 800b124:	d197      	bne.n	800b056 <_scanf_float+0x76>
 800b126:	6821      	ldr	r1, [r4, #0]
 800b128:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b12c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b130:	d195      	bne.n	800b05e <_scanf_float+0x7e>
 800b132:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b136:	6021      	str	r1, [r4, #0]
 800b138:	f04f 0b01 	mov.w	fp, #1
 800b13c:	e011      	b.n	800b162 <_scanf_float+0x182>
 800b13e:	2b74      	cmp	r3, #116	; 0x74
 800b140:	d034      	beq.n	800b1ac <_scanf_float+0x1cc>
 800b142:	2b79      	cmp	r3, #121	; 0x79
 800b144:	d184      	bne.n	800b050 <_scanf_float+0x70>
 800b146:	f1bb 0f07 	cmp.w	fp, #7
 800b14a:	d181      	bne.n	800b050 <_scanf_float+0x70>
 800b14c:	f04f 0b08 	mov.w	fp, #8
 800b150:	e007      	b.n	800b162 <_scanf_float+0x182>
 800b152:	eb12 0f0b 	cmn.w	r2, fp
 800b156:	f47f af7b 	bne.w	800b050 <_scanf_float+0x70>
 800b15a:	6821      	ldr	r1, [r4, #0]
 800b15c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b160:	6021      	str	r1, [r4, #0]
 800b162:	702b      	strb	r3, [r5, #0]
 800b164:	3501      	adds	r5, #1
 800b166:	e79a      	b.n	800b09e <_scanf_float+0xbe>
 800b168:	6821      	ldr	r1, [r4, #0]
 800b16a:	0608      	lsls	r0, r1, #24
 800b16c:	f57f af70 	bpl.w	800b050 <_scanf_float+0x70>
 800b170:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b174:	e7f4      	b.n	800b160 <_scanf_float+0x180>
 800b176:	2a02      	cmp	r2, #2
 800b178:	d047      	beq.n	800b20a <_scanf_float+0x22a>
 800b17a:	f1bb 0f01 	cmp.w	fp, #1
 800b17e:	d003      	beq.n	800b188 <_scanf_float+0x1a8>
 800b180:	f1bb 0f04 	cmp.w	fp, #4
 800b184:	f47f af64 	bne.w	800b050 <_scanf_float+0x70>
 800b188:	f10b 0b01 	add.w	fp, fp, #1
 800b18c:	fa5f fb8b 	uxtb.w	fp, fp
 800b190:	e7e7      	b.n	800b162 <_scanf_float+0x182>
 800b192:	f1bb 0f03 	cmp.w	fp, #3
 800b196:	d0f7      	beq.n	800b188 <_scanf_float+0x1a8>
 800b198:	f1bb 0f05 	cmp.w	fp, #5
 800b19c:	e7f2      	b.n	800b184 <_scanf_float+0x1a4>
 800b19e:	f1bb 0f02 	cmp.w	fp, #2
 800b1a2:	f47f af55 	bne.w	800b050 <_scanf_float+0x70>
 800b1a6:	f04f 0b03 	mov.w	fp, #3
 800b1aa:	e7da      	b.n	800b162 <_scanf_float+0x182>
 800b1ac:	f1bb 0f06 	cmp.w	fp, #6
 800b1b0:	f47f af4e 	bne.w	800b050 <_scanf_float+0x70>
 800b1b4:	f04f 0b07 	mov.w	fp, #7
 800b1b8:	e7d3      	b.n	800b162 <_scanf_float+0x182>
 800b1ba:	6821      	ldr	r1, [r4, #0]
 800b1bc:	0588      	lsls	r0, r1, #22
 800b1be:	f57f af47 	bpl.w	800b050 <_scanf_float+0x70>
 800b1c2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b1c6:	6021      	str	r1, [r4, #0]
 800b1c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800b1cc:	e7c9      	b.n	800b162 <_scanf_float+0x182>
 800b1ce:	6821      	ldr	r1, [r4, #0]
 800b1d0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b1d4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b1d8:	d006      	beq.n	800b1e8 <_scanf_float+0x208>
 800b1da:	0548      	lsls	r0, r1, #21
 800b1dc:	f57f af38 	bpl.w	800b050 <_scanf_float+0x70>
 800b1e0:	f1b9 0f00 	cmp.w	r9, #0
 800b1e4:	f43f af3b 	beq.w	800b05e <_scanf_float+0x7e>
 800b1e8:	0588      	lsls	r0, r1, #22
 800b1ea:	bf58      	it	pl
 800b1ec:	9802      	ldrpl	r0, [sp, #8]
 800b1ee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b1f2:	bf58      	it	pl
 800b1f4:	eba9 0000 	subpl.w	r0, r9, r0
 800b1f8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b1fc:	bf58      	it	pl
 800b1fe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b202:	6021      	str	r1, [r4, #0]
 800b204:	f04f 0900 	mov.w	r9, #0
 800b208:	e7ab      	b.n	800b162 <_scanf_float+0x182>
 800b20a:	2203      	movs	r2, #3
 800b20c:	e7a9      	b.n	800b162 <_scanf_float+0x182>
 800b20e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b212:	9205      	str	r2, [sp, #20]
 800b214:	4631      	mov	r1, r6
 800b216:	4638      	mov	r0, r7
 800b218:	4798      	blx	r3
 800b21a:	9a05      	ldr	r2, [sp, #20]
 800b21c:	2800      	cmp	r0, #0
 800b21e:	f43f af04 	beq.w	800b02a <_scanf_float+0x4a>
 800b222:	e715      	b.n	800b050 <_scanf_float+0x70>
 800b224:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b228:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b22c:	4632      	mov	r2, r6
 800b22e:	4638      	mov	r0, r7
 800b230:	4798      	blx	r3
 800b232:	6923      	ldr	r3, [r4, #16]
 800b234:	3b01      	subs	r3, #1
 800b236:	6123      	str	r3, [r4, #16]
 800b238:	e715      	b.n	800b066 <_scanf_float+0x86>
 800b23a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b23e:	2b06      	cmp	r3, #6
 800b240:	d80a      	bhi.n	800b258 <_scanf_float+0x278>
 800b242:	f1bb 0f02 	cmp.w	fp, #2
 800b246:	d968      	bls.n	800b31a <_scanf_float+0x33a>
 800b248:	f1ab 0b03 	sub.w	fp, fp, #3
 800b24c:	fa5f fb8b 	uxtb.w	fp, fp
 800b250:	eba5 0b0b 	sub.w	fp, r5, fp
 800b254:	455d      	cmp	r5, fp
 800b256:	d14b      	bne.n	800b2f0 <_scanf_float+0x310>
 800b258:	6823      	ldr	r3, [r4, #0]
 800b25a:	05da      	lsls	r2, r3, #23
 800b25c:	d51f      	bpl.n	800b29e <_scanf_float+0x2be>
 800b25e:	055b      	lsls	r3, r3, #21
 800b260:	d468      	bmi.n	800b334 <_scanf_float+0x354>
 800b262:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b266:	6923      	ldr	r3, [r4, #16]
 800b268:	2965      	cmp	r1, #101	; 0x65
 800b26a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b26e:	f105 3bff 	add.w	fp, r5, #4294967295
 800b272:	6123      	str	r3, [r4, #16]
 800b274:	d00d      	beq.n	800b292 <_scanf_float+0x2b2>
 800b276:	2945      	cmp	r1, #69	; 0x45
 800b278:	d00b      	beq.n	800b292 <_scanf_float+0x2b2>
 800b27a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b27e:	4632      	mov	r2, r6
 800b280:	4638      	mov	r0, r7
 800b282:	4798      	blx	r3
 800b284:	6923      	ldr	r3, [r4, #16]
 800b286:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b28a:	3b01      	subs	r3, #1
 800b28c:	f1a5 0b02 	sub.w	fp, r5, #2
 800b290:	6123      	str	r3, [r4, #16]
 800b292:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b296:	4632      	mov	r2, r6
 800b298:	4638      	mov	r0, r7
 800b29a:	4798      	blx	r3
 800b29c:	465d      	mov	r5, fp
 800b29e:	6826      	ldr	r6, [r4, #0]
 800b2a0:	f016 0610 	ands.w	r6, r6, #16
 800b2a4:	d17a      	bne.n	800b39c <_scanf_float+0x3bc>
 800b2a6:	702e      	strb	r6, [r5, #0]
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b2ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2b2:	d142      	bne.n	800b33a <_scanf_float+0x35a>
 800b2b4:	9b02      	ldr	r3, [sp, #8]
 800b2b6:	eba9 0303 	sub.w	r3, r9, r3
 800b2ba:	425a      	negs	r2, r3
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d149      	bne.n	800b354 <_scanf_float+0x374>
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	4641      	mov	r1, r8
 800b2c4:	4638      	mov	r0, r7
 800b2c6:	f000 fea3 	bl	800c010 <_strtod_r>
 800b2ca:	6825      	ldr	r5, [r4, #0]
 800b2cc:	f8da 3000 	ldr.w	r3, [sl]
 800b2d0:	f015 0f02 	tst.w	r5, #2
 800b2d4:	f103 0204 	add.w	r2, r3, #4
 800b2d8:	ec59 8b10 	vmov	r8, r9, d0
 800b2dc:	f8ca 2000 	str.w	r2, [sl]
 800b2e0:	d043      	beq.n	800b36a <_scanf_float+0x38a>
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	e9c3 8900 	strd	r8, r9, [r3]
 800b2e8:	68e3      	ldr	r3, [r4, #12]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	60e3      	str	r3, [r4, #12]
 800b2ee:	e6be      	b.n	800b06e <_scanf_float+0x8e>
 800b2f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b2f8:	4632      	mov	r2, r6
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	4798      	blx	r3
 800b2fe:	6923      	ldr	r3, [r4, #16]
 800b300:	3b01      	subs	r3, #1
 800b302:	6123      	str	r3, [r4, #16]
 800b304:	e7a6      	b.n	800b254 <_scanf_float+0x274>
 800b306:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b30a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b30e:	4632      	mov	r2, r6
 800b310:	4638      	mov	r0, r7
 800b312:	4798      	blx	r3
 800b314:	6923      	ldr	r3, [r4, #16]
 800b316:	3b01      	subs	r3, #1
 800b318:	6123      	str	r3, [r4, #16]
 800b31a:	4545      	cmp	r5, r8
 800b31c:	d8f3      	bhi.n	800b306 <_scanf_float+0x326>
 800b31e:	e6a5      	b.n	800b06c <_scanf_float+0x8c>
 800b320:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b324:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b328:	4632      	mov	r2, r6
 800b32a:	4638      	mov	r0, r7
 800b32c:	4798      	blx	r3
 800b32e:	6923      	ldr	r3, [r4, #16]
 800b330:	3b01      	subs	r3, #1
 800b332:	6123      	str	r3, [r4, #16]
 800b334:	4545      	cmp	r5, r8
 800b336:	d8f3      	bhi.n	800b320 <_scanf_float+0x340>
 800b338:	e698      	b.n	800b06c <_scanf_float+0x8c>
 800b33a:	9b03      	ldr	r3, [sp, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d0bf      	beq.n	800b2c0 <_scanf_float+0x2e0>
 800b340:	9904      	ldr	r1, [sp, #16]
 800b342:	230a      	movs	r3, #10
 800b344:	4632      	mov	r2, r6
 800b346:	3101      	adds	r1, #1
 800b348:	4638      	mov	r0, r7
 800b34a:	f000 feed 	bl	800c128 <_strtol_r>
 800b34e:	9b03      	ldr	r3, [sp, #12]
 800b350:	9d04      	ldr	r5, [sp, #16]
 800b352:	1ac2      	subs	r2, r0, r3
 800b354:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b358:	429d      	cmp	r5, r3
 800b35a:	bf28      	it	cs
 800b35c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b360:	490f      	ldr	r1, [pc, #60]	; (800b3a0 <_scanf_float+0x3c0>)
 800b362:	4628      	mov	r0, r5
 800b364:	f000 f824 	bl	800b3b0 <siprintf>
 800b368:	e7aa      	b.n	800b2c0 <_scanf_float+0x2e0>
 800b36a:	f015 0504 	ands.w	r5, r5, #4
 800b36e:	d1b8      	bne.n	800b2e2 <_scanf_float+0x302>
 800b370:	681f      	ldr	r7, [r3, #0]
 800b372:	ee10 2a10 	vmov	r2, s0
 800b376:	464b      	mov	r3, r9
 800b378:	ee10 0a10 	vmov	r0, s0
 800b37c:	4649      	mov	r1, r9
 800b37e:	f7f5 fbd5 	bl	8000b2c <__aeabi_dcmpun>
 800b382:	b128      	cbz	r0, 800b390 <_scanf_float+0x3b0>
 800b384:	4628      	mov	r0, r5
 800b386:	f000 f80d 	bl	800b3a4 <nanf>
 800b38a:	ed87 0a00 	vstr	s0, [r7]
 800b38e:	e7ab      	b.n	800b2e8 <_scanf_float+0x308>
 800b390:	4640      	mov	r0, r8
 800b392:	4649      	mov	r1, r9
 800b394:	f7f5 fc28 	bl	8000be8 <__aeabi_d2f>
 800b398:	6038      	str	r0, [r7, #0]
 800b39a:	e7a5      	b.n	800b2e8 <_scanf_float+0x308>
 800b39c:	2600      	movs	r6, #0
 800b39e:	e666      	b.n	800b06e <_scanf_float+0x8e>
 800b3a0:	0800ee5c 	.word	0x0800ee5c

0800b3a4 <nanf>:
 800b3a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b3ac <nanf+0x8>
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	7fc00000 	.word	0x7fc00000

0800b3b0 <siprintf>:
 800b3b0:	b40e      	push	{r1, r2, r3}
 800b3b2:	b500      	push	{lr}
 800b3b4:	b09c      	sub	sp, #112	; 0x70
 800b3b6:	ab1d      	add	r3, sp, #116	; 0x74
 800b3b8:	9002      	str	r0, [sp, #8]
 800b3ba:	9006      	str	r0, [sp, #24]
 800b3bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3c0:	4809      	ldr	r0, [pc, #36]	; (800b3e8 <siprintf+0x38>)
 800b3c2:	9107      	str	r1, [sp, #28]
 800b3c4:	9104      	str	r1, [sp, #16]
 800b3c6:	4909      	ldr	r1, [pc, #36]	; (800b3ec <siprintf+0x3c>)
 800b3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3cc:	9105      	str	r1, [sp, #20]
 800b3ce:	6800      	ldr	r0, [r0, #0]
 800b3d0:	9301      	str	r3, [sp, #4]
 800b3d2:	a902      	add	r1, sp, #8
 800b3d4:	f002 fd84 	bl	800dee0 <_svfiprintf_r>
 800b3d8:	9b02      	ldr	r3, [sp, #8]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	701a      	strb	r2, [r3, #0]
 800b3de:	b01c      	add	sp, #112	; 0x70
 800b3e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3e4:	b003      	add	sp, #12
 800b3e6:	4770      	bx	lr
 800b3e8:	2000000c 	.word	0x2000000c
 800b3ec:	ffff0208 	.word	0xffff0208

0800b3f0 <sulp>:
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	460d      	mov	r5, r1
 800b3f6:	ec45 4b10 	vmov	d0, r4, r5
 800b3fa:	4616      	mov	r6, r2
 800b3fc:	f002 fb2c 	bl	800da58 <__ulp>
 800b400:	ec51 0b10 	vmov	r0, r1, d0
 800b404:	b17e      	cbz	r6, 800b426 <sulp+0x36>
 800b406:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b40a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b40e:	2b00      	cmp	r3, #0
 800b410:	dd09      	ble.n	800b426 <sulp+0x36>
 800b412:	051b      	lsls	r3, r3, #20
 800b414:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b418:	2400      	movs	r4, #0
 800b41a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b41e:	4622      	mov	r2, r4
 800b420:	462b      	mov	r3, r5
 800b422:	f7f5 f8e9 	bl	80005f8 <__aeabi_dmul>
 800b426:	bd70      	pop	{r4, r5, r6, pc}

0800b428 <_strtod_l>:
 800b428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42c:	461f      	mov	r7, r3
 800b42e:	b0a1      	sub	sp, #132	; 0x84
 800b430:	2300      	movs	r3, #0
 800b432:	4681      	mov	r9, r0
 800b434:	4638      	mov	r0, r7
 800b436:	460e      	mov	r6, r1
 800b438:	9217      	str	r2, [sp, #92]	; 0x5c
 800b43a:	931c      	str	r3, [sp, #112]	; 0x70
 800b43c:	f002 f815 	bl	800d46a <__localeconv_l>
 800b440:	4680      	mov	r8, r0
 800b442:	6800      	ldr	r0, [r0, #0]
 800b444:	f7f4 fec4 	bl	80001d0 <strlen>
 800b448:	f04f 0a00 	mov.w	sl, #0
 800b44c:	4604      	mov	r4, r0
 800b44e:	f04f 0b00 	mov.w	fp, #0
 800b452:	961b      	str	r6, [sp, #108]	; 0x6c
 800b454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b456:	781a      	ldrb	r2, [r3, #0]
 800b458:	2a0d      	cmp	r2, #13
 800b45a:	d832      	bhi.n	800b4c2 <_strtod_l+0x9a>
 800b45c:	2a09      	cmp	r2, #9
 800b45e:	d236      	bcs.n	800b4ce <_strtod_l+0xa6>
 800b460:	2a00      	cmp	r2, #0
 800b462:	d03e      	beq.n	800b4e2 <_strtod_l+0xba>
 800b464:	2300      	movs	r3, #0
 800b466:	930d      	str	r3, [sp, #52]	; 0x34
 800b468:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b46a:	782b      	ldrb	r3, [r5, #0]
 800b46c:	2b30      	cmp	r3, #48	; 0x30
 800b46e:	f040 80ac 	bne.w	800b5ca <_strtod_l+0x1a2>
 800b472:	786b      	ldrb	r3, [r5, #1]
 800b474:	2b58      	cmp	r3, #88	; 0x58
 800b476:	d001      	beq.n	800b47c <_strtod_l+0x54>
 800b478:	2b78      	cmp	r3, #120	; 0x78
 800b47a:	d167      	bne.n	800b54c <_strtod_l+0x124>
 800b47c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b47e:	9301      	str	r3, [sp, #4]
 800b480:	ab1c      	add	r3, sp, #112	; 0x70
 800b482:	9300      	str	r3, [sp, #0]
 800b484:	9702      	str	r7, [sp, #8]
 800b486:	ab1d      	add	r3, sp, #116	; 0x74
 800b488:	4a88      	ldr	r2, [pc, #544]	; (800b6ac <_strtod_l+0x284>)
 800b48a:	a91b      	add	r1, sp, #108	; 0x6c
 800b48c:	4648      	mov	r0, r9
 800b48e:	f001 fd12 	bl	800ceb6 <__gethex>
 800b492:	f010 0407 	ands.w	r4, r0, #7
 800b496:	4606      	mov	r6, r0
 800b498:	d005      	beq.n	800b4a6 <_strtod_l+0x7e>
 800b49a:	2c06      	cmp	r4, #6
 800b49c:	d12b      	bne.n	800b4f6 <_strtod_l+0xce>
 800b49e:	3501      	adds	r5, #1
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	951b      	str	r5, [sp, #108]	; 0x6c
 800b4a4:	930d      	str	r3, [sp, #52]	; 0x34
 800b4a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f040 859a 	bne.w	800bfe2 <_strtod_l+0xbba>
 800b4ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4b0:	b1e3      	cbz	r3, 800b4ec <_strtod_l+0xc4>
 800b4b2:	4652      	mov	r2, sl
 800b4b4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b4b8:	ec43 2b10 	vmov	d0, r2, r3
 800b4bc:	b021      	add	sp, #132	; 0x84
 800b4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c2:	2a2b      	cmp	r2, #43	; 0x2b
 800b4c4:	d015      	beq.n	800b4f2 <_strtod_l+0xca>
 800b4c6:	2a2d      	cmp	r2, #45	; 0x2d
 800b4c8:	d004      	beq.n	800b4d4 <_strtod_l+0xac>
 800b4ca:	2a20      	cmp	r2, #32
 800b4cc:	d1ca      	bne.n	800b464 <_strtod_l+0x3c>
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	931b      	str	r3, [sp, #108]	; 0x6c
 800b4d2:	e7bf      	b.n	800b454 <_strtod_l+0x2c>
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	920d      	str	r2, [sp, #52]	; 0x34
 800b4d8:	1c5a      	adds	r2, r3, #1
 800b4da:	921b      	str	r2, [sp, #108]	; 0x6c
 800b4dc:	785b      	ldrb	r3, [r3, #1]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1c2      	bne.n	800b468 <_strtod_l+0x40>
 800b4e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4e4:	961b      	str	r6, [sp, #108]	; 0x6c
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f040 8579 	bne.w	800bfde <_strtod_l+0xbb6>
 800b4ec:	4652      	mov	r2, sl
 800b4ee:	465b      	mov	r3, fp
 800b4f0:	e7e2      	b.n	800b4b8 <_strtod_l+0x90>
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	e7ef      	b.n	800b4d6 <_strtod_l+0xae>
 800b4f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b4f8:	b13a      	cbz	r2, 800b50a <_strtod_l+0xe2>
 800b4fa:	2135      	movs	r1, #53	; 0x35
 800b4fc:	a81e      	add	r0, sp, #120	; 0x78
 800b4fe:	f002 fba3 	bl	800dc48 <__copybits>
 800b502:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b504:	4648      	mov	r0, r9
 800b506:	f002 f80f 	bl	800d528 <_Bfree>
 800b50a:	3c01      	subs	r4, #1
 800b50c:	2c04      	cmp	r4, #4
 800b50e:	d806      	bhi.n	800b51e <_strtod_l+0xf6>
 800b510:	e8df f004 	tbb	[pc, r4]
 800b514:	1714030a 	.word	0x1714030a
 800b518:	0a          	.byte	0x0a
 800b519:	00          	.byte	0x00
 800b51a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800b51e:	0730      	lsls	r0, r6, #28
 800b520:	d5c1      	bpl.n	800b4a6 <_strtod_l+0x7e>
 800b522:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b526:	e7be      	b.n	800b4a6 <_strtod_l+0x7e>
 800b528:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800b52c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b52e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b532:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b536:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b53a:	e7f0      	b.n	800b51e <_strtod_l+0xf6>
 800b53c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b6b0 <_strtod_l+0x288>
 800b540:	e7ed      	b.n	800b51e <_strtod_l+0xf6>
 800b542:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b546:	f04f 3aff 	mov.w	sl, #4294967295
 800b54a:	e7e8      	b.n	800b51e <_strtod_l+0xf6>
 800b54c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b54e:	1c5a      	adds	r2, r3, #1
 800b550:	921b      	str	r2, [sp, #108]	; 0x6c
 800b552:	785b      	ldrb	r3, [r3, #1]
 800b554:	2b30      	cmp	r3, #48	; 0x30
 800b556:	d0f9      	beq.n	800b54c <_strtod_l+0x124>
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d0a4      	beq.n	800b4a6 <_strtod_l+0x7e>
 800b55c:	2301      	movs	r3, #1
 800b55e:	2500      	movs	r5, #0
 800b560:	9306      	str	r3, [sp, #24]
 800b562:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b564:	9308      	str	r3, [sp, #32]
 800b566:	9507      	str	r5, [sp, #28]
 800b568:	9505      	str	r5, [sp, #20]
 800b56a:	220a      	movs	r2, #10
 800b56c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b56e:	7807      	ldrb	r7, [r0, #0]
 800b570:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b574:	b2d9      	uxtb	r1, r3
 800b576:	2909      	cmp	r1, #9
 800b578:	d929      	bls.n	800b5ce <_strtod_l+0x1a6>
 800b57a:	4622      	mov	r2, r4
 800b57c:	f8d8 1000 	ldr.w	r1, [r8]
 800b580:	f002 fdb6 	bl	800e0f0 <strncmp>
 800b584:	2800      	cmp	r0, #0
 800b586:	d031      	beq.n	800b5ec <_strtod_l+0x1c4>
 800b588:	2000      	movs	r0, #0
 800b58a:	9c05      	ldr	r4, [sp, #20]
 800b58c:	9004      	str	r0, [sp, #16]
 800b58e:	463b      	mov	r3, r7
 800b590:	4602      	mov	r2, r0
 800b592:	2b65      	cmp	r3, #101	; 0x65
 800b594:	d001      	beq.n	800b59a <_strtod_l+0x172>
 800b596:	2b45      	cmp	r3, #69	; 0x45
 800b598:	d114      	bne.n	800b5c4 <_strtod_l+0x19c>
 800b59a:	b924      	cbnz	r4, 800b5a6 <_strtod_l+0x17e>
 800b59c:	b910      	cbnz	r0, 800b5a4 <_strtod_l+0x17c>
 800b59e:	9b06      	ldr	r3, [sp, #24]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d09e      	beq.n	800b4e2 <_strtod_l+0xba>
 800b5a4:	2400      	movs	r4, #0
 800b5a6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b5a8:	1c73      	adds	r3, r6, #1
 800b5aa:	931b      	str	r3, [sp, #108]	; 0x6c
 800b5ac:	7873      	ldrb	r3, [r6, #1]
 800b5ae:	2b2b      	cmp	r3, #43	; 0x2b
 800b5b0:	d078      	beq.n	800b6a4 <_strtod_l+0x27c>
 800b5b2:	2b2d      	cmp	r3, #45	; 0x2d
 800b5b4:	d070      	beq.n	800b698 <_strtod_l+0x270>
 800b5b6:	f04f 0c00 	mov.w	ip, #0
 800b5ba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b5be:	2f09      	cmp	r7, #9
 800b5c0:	d97c      	bls.n	800b6bc <_strtod_l+0x294>
 800b5c2:	961b      	str	r6, [sp, #108]	; 0x6c
 800b5c4:	f04f 0e00 	mov.w	lr, #0
 800b5c8:	e09a      	b.n	800b700 <_strtod_l+0x2d8>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e7c7      	b.n	800b55e <_strtod_l+0x136>
 800b5ce:	9905      	ldr	r1, [sp, #20]
 800b5d0:	2908      	cmp	r1, #8
 800b5d2:	bfdd      	ittte	le
 800b5d4:	9907      	ldrle	r1, [sp, #28]
 800b5d6:	fb02 3301 	mlale	r3, r2, r1, r3
 800b5da:	9307      	strle	r3, [sp, #28]
 800b5dc:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b5e0:	9b05      	ldr	r3, [sp, #20]
 800b5e2:	3001      	adds	r0, #1
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	9305      	str	r3, [sp, #20]
 800b5e8:	901b      	str	r0, [sp, #108]	; 0x6c
 800b5ea:	e7bf      	b.n	800b56c <_strtod_l+0x144>
 800b5ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b5ee:	191a      	adds	r2, r3, r4
 800b5f0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b5f2:	9a05      	ldr	r2, [sp, #20]
 800b5f4:	5d1b      	ldrb	r3, [r3, r4]
 800b5f6:	2a00      	cmp	r2, #0
 800b5f8:	d037      	beq.n	800b66a <_strtod_l+0x242>
 800b5fa:	9c05      	ldr	r4, [sp, #20]
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b602:	2909      	cmp	r1, #9
 800b604:	d913      	bls.n	800b62e <_strtod_l+0x206>
 800b606:	2101      	movs	r1, #1
 800b608:	9104      	str	r1, [sp, #16]
 800b60a:	e7c2      	b.n	800b592 <_strtod_l+0x16a>
 800b60c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b60e:	1c5a      	adds	r2, r3, #1
 800b610:	921b      	str	r2, [sp, #108]	; 0x6c
 800b612:	785b      	ldrb	r3, [r3, #1]
 800b614:	3001      	adds	r0, #1
 800b616:	2b30      	cmp	r3, #48	; 0x30
 800b618:	d0f8      	beq.n	800b60c <_strtod_l+0x1e4>
 800b61a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b61e:	2a08      	cmp	r2, #8
 800b620:	f200 84e4 	bhi.w	800bfec <_strtod_l+0xbc4>
 800b624:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b626:	9208      	str	r2, [sp, #32]
 800b628:	4602      	mov	r2, r0
 800b62a:	2000      	movs	r0, #0
 800b62c:	4604      	mov	r4, r0
 800b62e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b632:	f100 0101 	add.w	r1, r0, #1
 800b636:	d012      	beq.n	800b65e <_strtod_l+0x236>
 800b638:	440a      	add	r2, r1
 800b63a:	eb00 0c04 	add.w	ip, r0, r4
 800b63e:	4621      	mov	r1, r4
 800b640:	270a      	movs	r7, #10
 800b642:	458c      	cmp	ip, r1
 800b644:	d113      	bne.n	800b66e <_strtod_l+0x246>
 800b646:	1821      	adds	r1, r4, r0
 800b648:	2908      	cmp	r1, #8
 800b64a:	f104 0401 	add.w	r4, r4, #1
 800b64e:	4404      	add	r4, r0
 800b650:	dc19      	bgt.n	800b686 <_strtod_l+0x25e>
 800b652:	9b07      	ldr	r3, [sp, #28]
 800b654:	210a      	movs	r1, #10
 800b656:	fb01 e303 	mla	r3, r1, r3, lr
 800b65a:	9307      	str	r3, [sp, #28]
 800b65c:	2100      	movs	r1, #0
 800b65e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b660:	1c58      	adds	r0, r3, #1
 800b662:	901b      	str	r0, [sp, #108]	; 0x6c
 800b664:	785b      	ldrb	r3, [r3, #1]
 800b666:	4608      	mov	r0, r1
 800b668:	e7c9      	b.n	800b5fe <_strtod_l+0x1d6>
 800b66a:	9805      	ldr	r0, [sp, #20]
 800b66c:	e7d3      	b.n	800b616 <_strtod_l+0x1ee>
 800b66e:	2908      	cmp	r1, #8
 800b670:	f101 0101 	add.w	r1, r1, #1
 800b674:	dc03      	bgt.n	800b67e <_strtod_l+0x256>
 800b676:	9b07      	ldr	r3, [sp, #28]
 800b678:	437b      	muls	r3, r7
 800b67a:	9307      	str	r3, [sp, #28]
 800b67c:	e7e1      	b.n	800b642 <_strtod_l+0x21a>
 800b67e:	2910      	cmp	r1, #16
 800b680:	bfd8      	it	le
 800b682:	437d      	mulle	r5, r7
 800b684:	e7dd      	b.n	800b642 <_strtod_l+0x21a>
 800b686:	2c10      	cmp	r4, #16
 800b688:	bfdc      	itt	le
 800b68a:	210a      	movle	r1, #10
 800b68c:	fb01 e505 	mlale	r5, r1, r5, lr
 800b690:	e7e4      	b.n	800b65c <_strtod_l+0x234>
 800b692:	2301      	movs	r3, #1
 800b694:	9304      	str	r3, [sp, #16]
 800b696:	e781      	b.n	800b59c <_strtod_l+0x174>
 800b698:	f04f 0c01 	mov.w	ip, #1
 800b69c:	1cb3      	adds	r3, r6, #2
 800b69e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b6a0:	78b3      	ldrb	r3, [r6, #2]
 800b6a2:	e78a      	b.n	800b5ba <_strtod_l+0x192>
 800b6a4:	f04f 0c00 	mov.w	ip, #0
 800b6a8:	e7f8      	b.n	800b69c <_strtod_l+0x274>
 800b6aa:	bf00      	nop
 800b6ac:	0800ee64 	.word	0x0800ee64
 800b6b0:	7ff00000 	.word	0x7ff00000
 800b6b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b6b6:	1c5f      	adds	r7, r3, #1
 800b6b8:	971b      	str	r7, [sp, #108]	; 0x6c
 800b6ba:	785b      	ldrb	r3, [r3, #1]
 800b6bc:	2b30      	cmp	r3, #48	; 0x30
 800b6be:	d0f9      	beq.n	800b6b4 <_strtod_l+0x28c>
 800b6c0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b6c4:	2f08      	cmp	r7, #8
 800b6c6:	f63f af7d 	bhi.w	800b5c4 <_strtod_l+0x19c>
 800b6ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b6ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b6d0:	930a      	str	r3, [sp, #40]	; 0x28
 800b6d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b6d4:	1c5f      	adds	r7, r3, #1
 800b6d6:	971b      	str	r7, [sp, #108]	; 0x6c
 800b6d8:	785b      	ldrb	r3, [r3, #1]
 800b6da:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b6de:	f1b8 0f09 	cmp.w	r8, #9
 800b6e2:	d937      	bls.n	800b754 <_strtod_l+0x32c>
 800b6e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b6e6:	1a7f      	subs	r7, r7, r1
 800b6e8:	2f08      	cmp	r7, #8
 800b6ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b6ee:	dc37      	bgt.n	800b760 <_strtod_l+0x338>
 800b6f0:	45be      	cmp	lr, r7
 800b6f2:	bfa8      	it	ge
 800b6f4:	46be      	movge	lr, r7
 800b6f6:	f1bc 0f00 	cmp.w	ip, #0
 800b6fa:	d001      	beq.n	800b700 <_strtod_l+0x2d8>
 800b6fc:	f1ce 0e00 	rsb	lr, lr, #0
 800b700:	2c00      	cmp	r4, #0
 800b702:	d151      	bne.n	800b7a8 <_strtod_l+0x380>
 800b704:	2800      	cmp	r0, #0
 800b706:	f47f aece 	bne.w	800b4a6 <_strtod_l+0x7e>
 800b70a:	9a06      	ldr	r2, [sp, #24]
 800b70c:	2a00      	cmp	r2, #0
 800b70e:	f47f aeca 	bne.w	800b4a6 <_strtod_l+0x7e>
 800b712:	9a04      	ldr	r2, [sp, #16]
 800b714:	2a00      	cmp	r2, #0
 800b716:	f47f aee4 	bne.w	800b4e2 <_strtod_l+0xba>
 800b71a:	2b4e      	cmp	r3, #78	; 0x4e
 800b71c:	d027      	beq.n	800b76e <_strtod_l+0x346>
 800b71e:	dc21      	bgt.n	800b764 <_strtod_l+0x33c>
 800b720:	2b49      	cmp	r3, #73	; 0x49
 800b722:	f47f aede 	bne.w	800b4e2 <_strtod_l+0xba>
 800b726:	49a0      	ldr	r1, [pc, #640]	; (800b9a8 <_strtod_l+0x580>)
 800b728:	a81b      	add	r0, sp, #108	; 0x6c
 800b72a:	f001 fdf7 	bl	800d31c <__match>
 800b72e:	2800      	cmp	r0, #0
 800b730:	f43f aed7 	beq.w	800b4e2 <_strtod_l+0xba>
 800b734:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b736:	499d      	ldr	r1, [pc, #628]	; (800b9ac <_strtod_l+0x584>)
 800b738:	3b01      	subs	r3, #1
 800b73a:	a81b      	add	r0, sp, #108	; 0x6c
 800b73c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b73e:	f001 fded 	bl	800d31c <__match>
 800b742:	b910      	cbnz	r0, 800b74a <_strtod_l+0x322>
 800b744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b746:	3301      	adds	r3, #1
 800b748:	931b      	str	r3, [sp, #108]	; 0x6c
 800b74a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b9c0 <_strtod_l+0x598>
 800b74e:	f04f 0a00 	mov.w	sl, #0
 800b752:	e6a8      	b.n	800b4a6 <_strtod_l+0x7e>
 800b754:	210a      	movs	r1, #10
 800b756:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b75a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b75e:	e7b8      	b.n	800b6d2 <_strtod_l+0x2aa>
 800b760:	46be      	mov	lr, r7
 800b762:	e7c8      	b.n	800b6f6 <_strtod_l+0x2ce>
 800b764:	2b69      	cmp	r3, #105	; 0x69
 800b766:	d0de      	beq.n	800b726 <_strtod_l+0x2fe>
 800b768:	2b6e      	cmp	r3, #110	; 0x6e
 800b76a:	f47f aeba 	bne.w	800b4e2 <_strtod_l+0xba>
 800b76e:	4990      	ldr	r1, [pc, #576]	; (800b9b0 <_strtod_l+0x588>)
 800b770:	a81b      	add	r0, sp, #108	; 0x6c
 800b772:	f001 fdd3 	bl	800d31c <__match>
 800b776:	2800      	cmp	r0, #0
 800b778:	f43f aeb3 	beq.w	800b4e2 <_strtod_l+0xba>
 800b77c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	2b28      	cmp	r3, #40	; 0x28
 800b782:	d10e      	bne.n	800b7a2 <_strtod_l+0x37a>
 800b784:	aa1e      	add	r2, sp, #120	; 0x78
 800b786:	498b      	ldr	r1, [pc, #556]	; (800b9b4 <_strtod_l+0x58c>)
 800b788:	a81b      	add	r0, sp, #108	; 0x6c
 800b78a:	f001 fddb 	bl	800d344 <__hexnan>
 800b78e:	2805      	cmp	r0, #5
 800b790:	d107      	bne.n	800b7a2 <_strtod_l+0x37a>
 800b792:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b794:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b798:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b79c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b7a0:	e681      	b.n	800b4a6 <_strtod_l+0x7e>
 800b7a2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b9c8 <_strtod_l+0x5a0>
 800b7a6:	e7d2      	b.n	800b74e <_strtod_l+0x326>
 800b7a8:	ebae 0302 	sub.w	r3, lr, r2
 800b7ac:	9306      	str	r3, [sp, #24]
 800b7ae:	9b05      	ldr	r3, [sp, #20]
 800b7b0:	9807      	ldr	r0, [sp, #28]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	bf08      	it	eq
 800b7b6:	4623      	moveq	r3, r4
 800b7b8:	2c10      	cmp	r4, #16
 800b7ba:	9305      	str	r3, [sp, #20]
 800b7bc:	46a0      	mov	r8, r4
 800b7be:	bfa8      	it	ge
 800b7c0:	f04f 0810 	movge.w	r8, #16
 800b7c4:	f7f4 fe9e 	bl	8000504 <__aeabi_ui2d>
 800b7c8:	2c09      	cmp	r4, #9
 800b7ca:	4682      	mov	sl, r0
 800b7cc:	468b      	mov	fp, r1
 800b7ce:	dc13      	bgt.n	800b7f8 <_strtod_l+0x3d0>
 800b7d0:	9b06      	ldr	r3, [sp, #24]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f43f ae67 	beq.w	800b4a6 <_strtod_l+0x7e>
 800b7d8:	9b06      	ldr	r3, [sp, #24]
 800b7da:	dd7a      	ble.n	800b8d2 <_strtod_l+0x4aa>
 800b7dc:	2b16      	cmp	r3, #22
 800b7de:	dc61      	bgt.n	800b8a4 <_strtod_l+0x47c>
 800b7e0:	4a75      	ldr	r2, [pc, #468]	; (800b9b8 <_strtod_l+0x590>)
 800b7e2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b7e6:	e9de 0100 	ldrd	r0, r1, [lr]
 800b7ea:	4652      	mov	r2, sl
 800b7ec:	465b      	mov	r3, fp
 800b7ee:	f7f4 ff03 	bl	80005f8 <__aeabi_dmul>
 800b7f2:	4682      	mov	sl, r0
 800b7f4:	468b      	mov	fp, r1
 800b7f6:	e656      	b.n	800b4a6 <_strtod_l+0x7e>
 800b7f8:	4b6f      	ldr	r3, [pc, #444]	; (800b9b8 <_strtod_l+0x590>)
 800b7fa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b7fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b802:	f7f4 fef9 	bl	80005f8 <__aeabi_dmul>
 800b806:	4606      	mov	r6, r0
 800b808:	4628      	mov	r0, r5
 800b80a:	460f      	mov	r7, r1
 800b80c:	f7f4 fe7a 	bl	8000504 <__aeabi_ui2d>
 800b810:	4602      	mov	r2, r0
 800b812:	460b      	mov	r3, r1
 800b814:	4630      	mov	r0, r6
 800b816:	4639      	mov	r1, r7
 800b818:	f7f4 fd38 	bl	800028c <__adddf3>
 800b81c:	2c0f      	cmp	r4, #15
 800b81e:	4682      	mov	sl, r0
 800b820:	468b      	mov	fp, r1
 800b822:	ddd5      	ble.n	800b7d0 <_strtod_l+0x3a8>
 800b824:	9b06      	ldr	r3, [sp, #24]
 800b826:	eba4 0808 	sub.w	r8, r4, r8
 800b82a:	4498      	add	r8, r3
 800b82c:	f1b8 0f00 	cmp.w	r8, #0
 800b830:	f340 8096 	ble.w	800b960 <_strtod_l+0x538>
 800b834:	f018 030f 	ands.w	r3, r8, #15
 800b838:	d00a      	beq.n	800b850 <_strtod_l+0x428>
 800b83a:	495f      	ldr	r1, [pc, #380]	; (800b9b8 <_strtod_l+0x590>)
 800b83c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b840:	4652      	mov	r2, sl
 800b842:	465b      	mov	r3, fp
 800b844:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b848:	f7f4 fed6 	bl	80005f8 <__aeabi_dmul>
 800b84c:	4682      	mov	sl, r0
 800b84e:	468b      	mov	fp, r1
 800b850:	f038 080f 	bics.w	r8, r8, #15
 800b854:	d073      	beq.n	800b93e <_strtod_l+0x516>
 800b856:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b85a:	dd47      	ble.n	800b8ec <_strtod_l+0x4c4>
 800b85c:	2400      	movs	r4, #0
 800b85e:	46a0      	mov	r8, r4
 800b860:	9407      	str	r4, [sp, #28]
 800b862:	9405      	str	r4, [sp, #20]
 800b864:	2322      	movs	r3, #34	; 0x22
 800b866:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b9c0 <_strtod_l+0x598>
 800b86a:	f8c9 3000 	str.w	r3, [r9]
 800b86e:	f04f 0a00 	mov.w	sl, #0
 800b872:	9b07      	ldr	r3, [sp, #28]
 800b874:	2b00      	cmp	r3, #0
 800b876:	f43f ae16 	beq.w	800b4a6 <_strtod_l+0x7e>
 800b87a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b87c:	4648      	mov	r0, r9
 800b87e:	f001 fe53 	bl	800d528 <_Bfree>
 800b882:	9905      	ldr	r1, [sp, #20]
 800b884:	4648      	mov	r0, r9
 800b886:	f001 fe4f 	bl	800d528 <_Bfree>
 800b88a:	4641      	mov	r1, r8
 800b88c:	4648      	mov	r0, r9
 800b88e:	f001 fe4b 	bl	800d528 <_Bfree>
 800b892:	9907      	ldr	r1, [sp, #28]
 800b894:	4648      	mov	r0, r9
 800b896:	f001 fe47 	bl	800d528 <_Bfree>
 800b89a:	4621      	mov	r1, r4
 800b89c:	4648      	mov	r0, r9
 800b89e:	f001 fe43 	bl	800d528 <_Bfree>
 800b8a2:	e600      	b.n	800b4a6 <_strtod_l+0x7e>
 800b8a4:	9a06      	ldr	r2, [sp, #24]
 800b8a6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	dbba      	blt.n	800b824 <_strtod_l+0x3fc>
 800b8ae:	4d42      	ldr	r5, [pc, #264]	; (800b9b8 <_strtod_l+0x590>)
 800b8b0:	f1c4 040f 	rsb	r4, r4, #15
 800b8b4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b8b8:	4652      	mov	r2, sl
 800b8ba:	465b      	mov	r3, fp
 800b8bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8c0:	f7f4 fe9a 	bl	80005f8 <__aeabi_dmul>
 800b8c4:	9b06      	ldr	r3, [sp, #24]
 800b8c6:	1b1c      	subs	r4, r3, r4
 800b8c8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b8cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8d0:	e78d      	b.n	800b7ee <_strtod_l+0x3c6>
 800b8d2:	f113 0f16 	cmn.w	r3, #22
 800b8d6:	dba5      	blt.n	800b824 <_strtod_l+0x3fc>
 800b8d8:	4a37      	ldr	r2, [pc, #220]	; (800b9b8 <_strtod_l+0x590>)
 800b8da:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b8de:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b8e2:	4650      	mov	r0, sl
 800b8e4:	4659      	mov	r1, fp
 800b8e6:	f7f4 ffb1 	bl	800084c <__aeabi_ddiv>
 800b8ea:	e782      	b.n	800b7f2 <_strtod_l+0x3ca>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	4e33      	ldr	r6, [pc, #204]	; (800b9bc <_strtod_l+0x594>)
 800b8f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b8f4:	4650      	mov	r0, sl
 800b8f6:	4659      	mov	r1, fp
 800b8f8:	461d      	mov	r5, r3
 800b8fa:	f1b8 0f01 	cmp.w	r8, #1
 800b8fe:	dc21      	bgt.n	800b944 <_strtod_l+0x51c>
 800b900:	b10b      	cbz	r3, 800b906 <_strtod_l+0x4de>
 800b902:	4682      	mov	sl, r0
 800b904:	468b      	mov	fp, r1
 800b906:	4b2d      	ldr	r3, [pc, #180]	; (800b9bc <_strtod_l+0x594>)
 800b908:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b90c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b910:	4652      	mov	r2, sl
 800b912:	465b      	mov	r3, fp
 800b914:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b918:	f7f4 fe6e 	bl	80005f8 <__aeabi_dmul>
 800b91c:	4b28      	ldr	r3, [pc, #160]	; (800b9c0 <_strtod_l+0x598>)
 800b91e:	460a      	mov	r2, r1
 800b920:	400b      	ands	r3, r1
 800b922:	4928      	ldr	r1, [pc, #160]	; (800b9c4 <_strtod_l+0x59c>)
 800b924:	428b      	cmp	r3, r1
 800b926:	4682      	mov	sl, r0
 800b928:	d898      	bhi.n	800b85c <_strtod_l+0x434>
 800b92a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b92e:	428b      	cmp	r3, r1
 800b930:	bf86      	itte	hi
 800b932:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b9cc <_strtod_l+0x5a4>
 800b936:	f04f 3aff 	movhi.w	sl, #4294967295
 800b93a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b93e:	2300      	movs	r3, #0
 800b940:	9304      	str	r3, [sp, #16]
 800b942:	e077      	b.n	800ba34 <_strtod_l+0x60c>
 800b944:	f018 0f01 	tst.w	r8, #1
 800b948:	d006      	beq.n	800b958 <_strtod_l+0x530>
 800b94a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b952:	f7f4 fe51 	bl	80005f8 <__aeabi_dmul>
 800b956:	2301      	movs	r3, #1
 800b958:	3501      	adds	r5, #1
 800b95a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b95e:	e7cc      	b.n	800b8fa <_strtod_l+0x4d2>
 800b960:	d0ed      	beq.n	800b93e <_strtod_l+0x516>
 800b962:	f1c8 0800 	rsb	r8, r8, #0
 800b966:	f018 020f 	ands.w	r2, r8, #15
 800b96a:	d00a      	beq.n	800b982 <_strtod_l+0x55a>
 800b96c:	4b12      	ldr	r3, [pc, #72]	; (800b9b8 <_strtod_l+0x590>)
 800b96e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b972:	4650      	mov	r0, sl
 800b974:	4659      	mov	r1, fp
 800b976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97a:	f7f4 ff67 	bl	800084c <__aeabi_ddiv>
 800b97e:	4682      	mov	sl, r0
 800b980:	468b      	mov	fp, r1
 800b982:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b986:	d0da      	beq.n	800b93e <_strtod_l+0x516>
 800b988:	f1b8 0f1f 	cmp.w	r8, #31
 800b98c:	dd20      	ble.n	800b9d0 <_strtod_l+0x5a8>
 800b98e:	2400      	movs	r4, #0
 800b990:	46a0      	mov	r8, r4
 800b992:	9407      	str	r4, [sp, #28]
 800b994:	9405      	str	r4, [sp, #20]
 800b996:	2322      	movs	r3, #34	; 0x22
 800b998:	f04f 0a00 	mov.w	sl, #0
 800b99c:	f04f 0b00 	mov.w	fp, #0
 800b9a0:	f8c9 3000 	str.w	r3, [r9]
 800b9a4:	e765      	b.n	800b872 <_strtod_l+0x44a>
 800b9a6:	bf00      	nop
 800b9a8:	0800ee2d 	.word	0x0800ee2d
 800b9ac:	0800eebb 	.word	0x0800eebb
 800b9b0:	0800ee35 	.word	0x0800ee35
 800b9b4:	0800ee78 	.word	0x0800ee78
 800b9b8:	0800eef8 	.word	0x0800eef8
 800b9bc:	0800eed0 	.word	0x0800eed0
 800b9c0:	7ff00000 	.word	0x7ff00000
 800b9c4:	7ca00000 	.word	0x7ca00000
 800b9c8:	fff80000 	.word	0xfff80000
 800b9cc:	7fefffff 	.word	0x7fefffff
 800b9d0:	f018 0310 	ands.w	r3, r8, #16
 800b9d4:	bf18      	it	ne
 800b9d6:	236a      	movne	r3, #106	; 0x6a
 800b9d8:	4da0      	ldr	r5, [pc, #640]	; (800bc5c <_strtod_l+0x834>)
 800b9da:	9304      	str	r3, [sp, #16]
 800b9dc:	4650      	mov	r0, sl
 800b9de:	4659      	mov	r1, fp
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	f1b8 0f00 	cmp.w	r8, #0
 800b9e6:	f300 810a 	bgt.w	800bbfe <_strtod_l+0x7d6>
 800b9ea:	b10b      	cbz	r3, 800b9f0 <_strtod_l+0x5c8>
 800b9ec:	4682      	mov	sl, r0
 800b9ee:	468b      	mov	fp, r1
 800b9f0:	9b04      	ldr	r3, [sp, #16]
 800b9f2:	b1bb      	cbz	r3, 800ba24 <_strtod_l+0x5fc>
 800b9f4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b9f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	4659      	mov	r1, fp
 800ba00:	dd10      	ble.n	800ba24 <_strtod_l+0x5fc>
 800ba02:	2b1f      	cmp	r3, #31
 800ba04:	f340 8107 	ble.w	800bc16 <_strtod_l+0x7ee>
 800ba08:	2b34      	cmp	r3, #52	; 0x34
 800ba0a:	bfde      	ittt	le
 800ba0c:	3b20      	suble	r3, #32
 800ba0e:	f04f 32ff 	movle.w	r2, #4294967295
 800ba12:	fa02 f303 	lslle.w	r3, r2, r3
 800ba16:	f04f 0a00 	mov.w	sl, #0
 800ba1a:	bfcc      	ite	gt
 800ba1c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ba20:	ea03 0b01 	andle.w	fp, r3, r1
 800ba24:	2200      	movs	r2, #0
 800ba26:	2300      	movs	r3, #0
 800ba28:	4650      	mov	r0, sl
 800ba2a:	4659      	mov	r1, fp
 800ba2c:	f7f5 f84c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	d1ac      	bne.n	800b98e <_strtod_l+0x566>
 800ba34:	9b07      	ldr	r3, [sp, #28]
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	9a05      	ldr	r2, [sp, #20]
 800ba3a:	9908      	ldr	r1, [sp, #32]
 800ba3c:	4623      	mov	r3, r4
 800ba3e:	4648      	mov	r0, r9
 800ba40:	f001 fdc4 	bl	800d5cc <__s2b>
 800ba44:	9007      	str	r0, [sp, #28]
 800ba46:	2800      	cmp	r0, #0
 800ba48:	f43f af08 	beq.w	800b85c <_strtod_l+0x434>
 800ba4c:	9a06      	ldr	r2, [sp, #24]
 800ba4e:	9b06      	ldr	r3, [sp, #24]
 800ba50:	2a00      	cmp	r2, #0
 800ba52:	f1c3 0300 	rsb	r3, r3, #0
 800ba56:	bfa8      	it	ge
 800ba58:	2300      	movge	r3, #0
 800ba5a:	930e      	str	r3, [sp, #56]	; 0x38
 800ba5c:	2400      	movs	r4, #0
 800ba5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ba62:	9316      	str	r3, [sp, #88]	; 0x58
 800ba64:	46a0      	mov	r8, r4
 800ba66:	9b07      	ldr	r3, [sp, #28]
 800ba68:	4648      	mov	r0, r9
 800ba6a:	6859      	ldr	r1, [r3, #4]
 800ba6c:	f001 fd28 	bl	800d4c0 <_Balloc>
 800ba70:	9005      	str	r0, [sp, #20]
 800ba72:	2800      	cmp	r0, #0
 800ba74:	f43f aef6 	beq.w	800b864 <_strtod_l+0x43c>
 800ba78:	9b07      	ldr	r3, [sp, #28]
 800ba7a:	691a      	ldr	r2, [r3, #16]
 800ba7c:	3202      	adds	r2, #2
 800ba7e:	f103 010c 	add.w	r1, r3, #12
 800ba82:	0092      	lsls	r2, r2, #2
 800ba84:	300c      	adds	r0, #12
 800ba86:	f7fe fe3b 	bl	800a700 <memcpy>
 800ba8a:	aa1e      	add	r2, sp, #120	; 0x78
 800ba8c:	a91d      	add	r1, sp, #116	; 0x74
 800ba8e:	ec4b ab10 	vmov	d0, sl, fp
 800ba92:	4648      	mov	r0, r9
 800ba94:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ba98:	f002 f854 	bl	800db44 <__d2b>
 800ba9c:	901c      	str	r0, [sp, #112]	; 0x70
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	f43f aee0 	beq.w	800b864 <_strtod_l+0x43c>
 800baa4:	2101      	movs	r1, #1
 800baa6:	4648      	mov	r0, r9
 800baa8:	f001 fe1c 	bl	800d6e4 <__i2b>
 800baac:	4680      	mov	r8, r0
 800baae:	2800      	cmp	r0, #0
 800bab0:	f43f aed8 	beq.w	800b864 <_strtod_l+0x43c>
 800bab4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800bab6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bab8:	2e00      	cmp	r6, #0
 800baba:	bfab      	itete	ge
 800babc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800babe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800bac0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800bac2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800bac4:	bfac      	ite	ge
 800bac6:	18f7      	addge	r7, r6, r3
 800bac8:	1b9d      	sublt	r5, r3, r6
 800baca:	9b04      	ldr	r3, [sp, #16]
 800bacc:	1af6      	subs	r6, r6, r3
 800bace:	4416      	add	r6, r2
 800bad0:	4b63      	ldr	r3, [pc, #396]	; (800bc60 <_strtod_l+0x838>)
 800bad2:	3e01      	subs	r6, #1
 800bad4:	429e      	cmp	r6, r3
 800bad6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bada:	f280 80af 	bge.w	800bc3c <_strtod_l+0x814>
 800bade:	1b9b      	subs	r3, r3, r6
 800bae0:	2b1f      	cmp	r3, #31
 800bae2:	eba2 0203 	sub.w	r2, r2, r3
 800bae6:	f04f 0101 	mov.w	r1, #1
 800baea:	f300 809b 	bgt.w	800bc24 <_strtod_l+0x7fc>
 800baee:	fa01 f303 	lsl.w	r3, r1, r3
 800baf2:	930f      	str	r3, [sp, #60]	; 0x3c
 800baf4:	2300      	movs	r3, #0
 800baf6:	930a      	str	r3, [sp, #40]	; 0x28
 800baf8:	18be      	adds	r6, r7, r2
 800bafa:	9b04      	ldr	r3, [sp, #16]
 800bafc:	42b7      	cmp	r7, r6
 800bafe:	4415      	add	r5, r2
 800bb00:	441d      	add	r5, r3
 800bb02:	463b      	mov	r3, r7
 800bb04:	bfa8      	it	ge
 800bb06:	4633      	movge	r3, r6
 800bb08:	42ab      	cmp	r3, r5
 800bb0a:	bfa8      	it	ge
 800bb0c:	462b      	movge	r3, r5
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	bfc2      	ittt	gt
 800bb12:	1af6      	subgt	r6, r6, r3
 800bb14:	1aed      	subgt	r5, r5, r3
 800bb16:	1aff      	subgt	r7, r7, r3
 800bb18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb1a:	b1bb      	cbz	r3, 800bb4c <_strtod_l+0x724>
 800bb1c:	4641      	mov	r1, r8
 800bb1e:	461a      	mov	r2, r3
 800bb20:	4648      	mov	r0, r9
 800bb22:	f001 fe7f 	bl	800d824 <__pow5mult>
 800bb26:	4680      	mov	r8, r0
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	f43f ae9b 	beq.w	800b864 <_strtod_l+0x43c>
 800bb2e:	4601      	mov	r1, r0
 800bb30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bb32:	4648      	mov	r0, r9
 800bb34:	f001 fddf 	bl	800d6f6 <__multiply>
 800bb38:	900c      	str	r0, [sp, #48]	; 0x30
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	f43f ae92 	beq.w	800b864 <_strtod_l+0x43c>
 800bb40:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bb42:	4648      	mov	r0, r9
 800bb44:	f001 fcf0 	bl	800d528 <_Bfree>
 800bb48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb4a:	931c      	str	r3, [sp, #112]	; 0x70
 800bb4c:	2e00      	cmp	r6, #0
 800bb4e:	dc7a      	bgt.n	800bc46 <_strtod_l+0x81e>
 800bb50:	9b06      	ldr	r3, [sp, #24]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	dd08      	ble.n	800bb68 <_strtod_l+0x740>
 800bb56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bb58:	9905      	ldr	r1, [sp, #20]
 800bb5a:	4648      	mov	r0, r9
 800bb5c:	f001 fe62 	bl	800d824 <__pow5mult>
 800bb60:	9005      	str	r0, [sp, #20]
 800bb62:	2800      	cmp	r0, #0
 800bb64:	f43f ae7e 	beq.w	800b864 <_strtod_l+0x43c>
 800bb68:	2d00      	cmp	r5, #0
 800bb6a:	dd08      	ble.n	800bb7e <_strtod_l+0x756>
 800bb6c:	462a      	mov	r2, r5
 800bb6e:	9905      	ldr	r1, [sp, #20]
 800bb70:	4648      	mov	r0, r9
 800bb72:	f001 fea5 	bl	800d8c0 <__lshift>
 800bb76:	9005      	str	r0, [sp, #20]
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	f43f ae73 	beq.w	800b864 <_strtod_l+0x43c>
 800bb7e:	2f00      	cmp	r7, #0
 800bb80:	dd08      	ble.n	800bb94 <_strtod_l+0x76c>
 800bb82:	4641      	mov	r1, r8
 800bb84:	463a      	mov	r2, r7
 800bb86:	4648      	mov	r0, r9
 800bb88:	f001 fe9a 	bl	800d8c0 <__lshift>
 800bb8c:	4680      	mov	r8, r0
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	f43f ae68 	beq.w	800b864 <_strtod_l+0x43c>
 800bb94:	9a05      	ldr	r2, [sp, #20]
 800bb96:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bb98:	4648      	mov	r0, r9
 800bb9a:	f001 feff 	bl	800d99c <__mdiff>
 800bb9e:	4604      	mov	r4, r0
 800bba0:	2800      	cmp	r0, #0
 800bba2:	f43f ae5f 	beq.w	800b864 <_strtod_l+0x43c>
 800bba6:	68c3      	ldr	r3, [r0, #12]
 800bba8:	930c      	str	r3, [sp, #48]	; 0x30
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60c3      	str	r3, [r0, #12]
 800bbae:	4641      	mov	r1, r8
 800bbb0:	f001 feda 	bl	800d968 <__mcmp>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	da55      	bge.n	800bc64 <_strtod_l+0x83c>
 800bbb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbba:	b9e3      	cbnz	r3, 800bbf6 <_strtod_l+0x7ce>
 800bbbc:	f1ba 0f00 	cmp.w	sl, #0
 800bbc0:	d119      	bne.n	800bbf6 <_strtod_l+0x7ce>
 800bbc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbc6:	b9b3      	cbnz	r3, 800bbf6 <_strtod_l+0x7ce>
 800bbc8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bbcc:	0d1b      	lsrs	r3, r3, #20
 800bbce:	051b      	lsls	r3, r3, #20
 800bbd0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bbd4:	d90f      	bls.n	800bbf6 <_strtod_l+0x7ce>
 800bbd6:	6963      	ldr	r3, [r4, #20]
 800bbd8:	b913      	cbnz	r3, 800bbe0 <_strtod_l+0x7b8>
 800bbda:	6923      	ldr	r3, [r4, #16]
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	dd0a      	ble.n	800bbf6 <_strtod_l+0x7ce>
 800bbe0:	4621      	mov	r1, r4
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	4648      	mov	r0, r9
 800bbe6:	f001 fe6b 	bl	800d8c0 <__lshift>
 800bbea:	4641      	mov	r1, r8
 800bbec:	4604      	mov	r4, r0
 800bbee:	f001 febb 	bl	800d968 <__mcmp>
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	dc67      	bgt.n	800bcc6 <_strtod_l+0x89e>
 800bbf6:	9b04      	ldr	r3, [sp, #16]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d171      	bne.n	800bce0 <_strtod_l+0x8b8>
 800bbfc:	e63d      	b.n	800b87a <_strtod_l+0x452>
 800bbfe:	f018 0f01 	tst.w	r8, #1
 800bc02:	d004      	beq.n	800bc0e <_strtod_l+0x7e6>
 800bc04:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc08:	f7f4 fcf6 	bl	80005f8 <__aeabi_dmul>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bc12:	3508      	adds	r5, #8
 800bc14:	e6e5      	b.n	800b9e2 <_strtod_l+0x5ba>
 800bc16:	f04f 32ff 	mov.w	r2, #4294967295
 800bc1a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc1e:	ea03 0a0a 	and.w	sl, r3, sl
 800bc22:	e6ff      	b.n	800ba24 <_strtod_l+0x5fc>
 800bc24:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bc28:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800bc2c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bc30:	36e2      	adds	r6, #226	; 0xe2
 800bc32:	fa01 f306 	lsl.w	r3, r1, r6
 800bc36:	930a      	str	r3, [sp, #40]	; 0x28
 800bc38:	910f      	str	r1, [sp, #60]	; 0x3c
 800bc3a:	e75d      	b.n	800baf8 <_strtod_l+0x6d0>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	930a      	str	r3, [sp, #40]	; 0x28
 800bc40:	2301      	movs	r3, #1
 800bc42:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc44:	e758      	b.n	800baf8 <_strtod_l+0x6d0>
 800bc46:	4632      	mov	r2, r6
 800bc48:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bc4a:	4648      	mov	r0, r9
 800bc4c:	f001 fe38 	bl	800d8c0 <__lshift>
 800bc50:	901c      	str	r0, [sp, #112]	; 0x70
 800bc52:	2800      	cmp	r0, #0
 800bc54:	f47f af7c 	bne.w	800bb50 <_strtod_l+0x728>
 800bc58:	e604      	b.n	800b864 <_strtod_l+0x43c>
 800bc5a:	bf00      	nop
 800bc5c:	0800ee90 	.word	0x0800ee90
 800bc60:	fffffc02 	.word	0xfffffc02
 800bc64:	465d      	mov	r5, fp
 800bc66:	f040 8086 	bne.w	800bd76 <_strtod_l+0x94e>
 800bc6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc70:	b32a      	cbz	r2, 800bcbe <_strtod_l+0x896>
 800bc72:	4aaf      	ldr	r2, [pc, #700]	; (800bf30 <_strtod_l+0xb08>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d153      	bne.n	800bd20 <_strtod_l+0x8f8>
 800bc78:	9b04      	ldr	r3, [sp, #16]
 800bc7a:	4650      	mov	r0, sl
 800bc7c:	b1d3      	cbz	r3, 800bcb4 <_strtod_l+0x88c>
 800bc7e:	4aad      	ldr	r2, [pc, #692]	; (800bf34 <_strtod_l+0xb0c>)
 800bc80:	402a      	ands	r2, r5
 800bc82:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800bc86:	f04f 31ff 	mov.w	r1, #4294967295
 800bc8a:	d816      	bhi.n	800bcba <_strtod_l+0x892>
 800bc8c:	0d12      	lsrs	r2, r2, #20
 800bc8e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bc92:	fa01 f303 	lsl.w	r3, r1, r3
 800bc96:	4298      	cmp	r0, r3
 800bc98:	d142      	bne.n	800bd20 <_strtod_l+0x8f8>
 800bc9a:	4ba7      	ldr	r3, [pc, #668]	; (800bf38 <_strtod_l+0xb10>)
 800bc9c:	429d      	cmp	r5, r3
 800bc9e:	d102      	bne.n	800bca6 <_strtod_l+0x87e>
 800bca0:	3001      	adds	r0, #1
 800bca2:	f43f addf 	beq.w	800b864 <_strtod_l+0x43c>
 800bca6:	4ba3      	ldr	r3, [pc, #652]	; (800bf34 <_strtod_l+0xb0c>)
 800bca8:	402b      	ands	r3, r5
 800bcaa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bcae:	f04f 0a00 	mov.w	sl, #0
 800bcb2:	e7a0      	b.n	800bbf6 <_strtod_l+0x7ce>
 800bcb4:	f04f 33ff 	mov.w	r3, #4294967295
 800bcb8:	e7ed      	b.n	800bc96 <_strtod_l+0x86e>
 800bcba:	460b      	mov	r3, r1
 800bcbc:	e7eb      	b.n	800bc96 <_strtod_l+0x86e>
 800bcbe:	bb7b      	cbnz	r3, 800bd20 <_strtod_l+0x8f8>
 800bcc0:	f1ba 0f00 	cmp.w	sl, #0
 800bcc4:	d12c      	bne.n	800bd20 <_strtod_l+0x8f8>
 800bcc6:	9904      	ldr	r1, [sp, #16]
 800bcc8:	4a9a      	ldr	r2, [pc, #616]	; (800bf34 <_strtod_l+0xb0c>)
 800bcca:	465b      	mov	r3, fp
 800bccc:	b1f1      	cbz	r1, 800bd0c <_strtod_l+0x8e4>
 800bcce:	ea02 010b 	and.w	r1, r2, fp
 800bcd2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bcd6:	dc19      	bgt.n	800bd0c <_strtod_l+0x8e4>
 800bcd8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bcdc:	f77f ae5b 	ble.w	800b996 <_strtod_l+0x56e>
 800bce0:	4a96      	ldr	r2, [pc, #600]	; (800bf3c <_strtod_l+0xb14>)
 800bce2:	2300      	movs	r3, #0
 800bce4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800bce8:	4650      	mov	r0, sl
 800bcea:	4659      	mov	r1, fp
 800bcec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bcf0:	f7f4 fc82 	bl	80005f8 <__aeabi_dmul>
 800bcf4:	4682      	mov	sl, r0
 800bcf6:	468b      	mov	fp, r1
 800bcf8:	2900      	cmp	r1, #0
 800bcfa:	f47f adbe 	bne.w	800b87a <_strtod_l+0x452>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	f47f adbb 	bne.w	800b87a <_strtod_l+0x452>
 800bd04:	2322      	movs	r3, #34	; 0x22
 800bd06:	f8c9 3000 	str.w	r3, [r9]
 800bd0a:	e5b6      	b.n	800b87a <_strtod_l+0x452>
 800bd0c:	4013      	ands	r3, r2
 800bd0e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bd12:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bd16:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bd1a:	f04f 3aff 	mov.w	sl, #4294967295
 800bd1e:	e76a      	b.n	800bbf6 <_strtod_l+0x7ce>
 800bd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd22:	b193      	cbz	r3, 800bd4a <_strtod_l+0x922>
 800bd24:	422b      	tst	r3, r5
 800bd26:	f43f af66 	beq.w	800bbf6 <_strtod_l+0x7ce>
 800bd2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd2c:	9a04      	ldr	r2, [sp, #16]
 800bd2e:	4650      	mov	r0, sl
 800bd30:	4659      	mov	r1, fp
 800bd32:	b173      	cbz	r3, 800bd52 <_strtod_l+0x92a>
 800bd34:	f7ff fb5c 	bl	800b3f0 <sulp>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd40:	f7f4 faa4 	bl	800028c <__adddf3>
 800bd44:	4682      	mov	sl, r0
 800bd46:	468b      	mov	fp, r1
 800bd48:	e755      	b.n	800bbf6 <_strtod_l+0x7ce>
 800bd4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd4c:	ea13 0f0a 	tst.w	r3, sl
 800bd50:	e7e9      	b.n	800bd26 <_strtod_l+0x8fe>
 800bd52:	f7ff fb4d 	bl	800b3f0 <sulp>
 800bd56:	4602      	mov	r2, r0
 800bd58:	460b      	mov	r3, r1
 800bd5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd5e:	f7f4 fa93 	bl	8000288 <__aeabi_dsub>
 800bd62:	2200      	movs	r2, #0
 800bd64:	2300      	movs	r3, #0
 800bd66:	4682      	mov	sl, r0
 800bd68:	468b      	mov	fp, r1
 800bd6a:	f7f4 fead 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	f47f ae11 	bne.w	800b996 <_strtod_l+0x56e>
 800bd74:	e73f      	b.n	800bbf6 <_strtod_l+0x7ce>
 800bd76:	4641      	mov	r1, r8
 800bd78:	4620      	mov	r0, r4
 800bd7a:	f001 ff32 	bl	800dbe2 <__ratio>
 800bd7e:	ec57 6b10 	vmov	r6, r7, d0
 800bd82:	2200      	movs	r2, #0
 800bd84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd88:	ee10 0a10 	vmov	r0, s0
 800bd8c:	4639      	mov	r1, r7
 800bd8e:	f7f4 feaf 	bl	8000af0 <__aeabi_dcmple>
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d077      	beq.n	800be86 <_strtod_l+0xa5e>
 800bd96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d04a      	beq.n	800be32 <_strtod_l+0xa0a>
 800bd9c:	4b68      	ldr	r3, [pc, #416]	; (800bf40 <_strtod_l+0xb18>)
 800bd9e:	2200      	movs	r2, #0
 800bda0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bda4:	4f66      	ldr	r7, [pc, #408]	; (800bf40 <_strtod_l+0xb18>)
 800bda6:	2600      	movs	r6, #0
 800bda8:	4b62      	ldr	r3, [pc, #392]	; (800bf34 <_strtod_l+0xb0c>)
 800bdaa:	402b      	ands	r3, r5
 800bdac:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bdb0:	4b64      	ldr	r3, [pc, #400]	; (800bf44 <_strtod_l+0xb1c>)
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	f040 80ce 	bne.w	800bf54 <_strtod_l+0xb2c>
 800bdb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bdbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bdc0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800bdc4:	ec4b ab10 	vmov	d0, sl, fp
 800bdc8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800bdcc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bdd0:	f001 fe42 	bl	800da58 <__ulp>
 800bdd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bdd8:	ec53 2b10 	vmov	r2, r3, d0
 800bddc:	f7f4 fc0c 	bl	80005f8 <__aeabi_dmul>
 800bde0:	4652      	mov	r2, sl
 800bde2:	465b      	mov	r3, fp
 800bde4:	f7f4 fa52 	bl	800028c <__adddf3>
 800bde8:	460b      	mov	r3, r1
 800bdea:	4952      	ldr	r1, [pc, #328]	; (800bf34 <_strtod_l+0xb0c>)
 800bdec:	4a56      	ldr	r2, [pc, #344]	; (800bf48 <_strtod_l+0xb20>)
 800bdee:	4019      	ands	r1, r3
 800bdf0:	4291      	cmp	r1, r2
 800bdf2:	4682      	mov	sl, r0
 800bdf4:	d95b      	bls.n	800beae <_strtod_l+0xa86>
 800bdf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdf8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d103      	bne.n	800be08 <_strtod_l+0x9e0>
 800be00:	9b08      	ldr	r3, [sp, #32]
 800be02:	3301      	adds	r3, #1
 800be04:	f43f ad2e 	beq.w	800b864 <_strtod_l+0x43c>
 800be08:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800bf38 <_strtod_l+0xb10>
 800be0c:	f04f 3aff 	mov.w	sl, #4294967295
 800be10:	991c      	ldr	r1, [sp, #112]	; 0x70
 800be12:	4648      	mov	r0, r9
 800be14:	f001 fb88 	bl	800d528 <_Bfree>
 800be18:	9905      	ldr	r1, [sp, #20]
 800be1a:	4648      	mov	r0, r9
 800be1c:	f001 fb84 	bl	800d528 <_Bfree>
 800be20:	4641      	mov	r1, r8
 800be22:	4648      	mov	r0, r9
 800be24:	f001 fb80 	bl	800d528 <_Bfree>
 800be28:	4621      	mov	r1, r4
 800be2a:	4648      	mov	r0, r9
 800be2c:	f001 fb7c 	bl	800d528 <_Bfree>
 800be30:	e619      	b.n	800ba66 <_strtod_l+0x63e>
 800be32:	f1ba 0f00 	cmp.w	sl, #0
 800be36:	d11a      	bne.n	800be6e <_strtod_l+0xa46>
 800be38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be3c:	b9eb      	cbnz	r3, 800be7a <_strtod_l+0xa52>
 800be3e:	2200      	movs	r2, #0
 800be40:	4b3f      	ldr	r3, [pc, #252]	; (800bf40 <_strtod_l+0xb18>)
 800be42:	4630      	mov	r0, r6
 800be44:	4639      	mov	r1, r7
 800be46:	f7f4 fe49 	bl	8000adc <__aeabi_dcmplt>
 800be4a:	b9c8      	cbnz	r0, 800be80 <_strtod_l+0xa58>
 800be4c:	4630      	mov	r0, r6
 800be4e:	4639      	mov	r1, r7
 800be50:	2200      	movs	r2, #0
 800be52:	4b3e      	ldr	r3, [pc, #248]	; (800bf4c <_strtod_l+0xb24>)
 800be54:	f7f4 fbd0 	bl	80005f8 <__aeabi_dmul>
 800be58:	4606      	mov	r6, r0
 800be5a:	460f      	mov	r7, r1
 800be5c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800be60:	9618      	str	r6, [sp, #96]	; 0x60
 800be62:	9319      	str	r3, [sp, #100]	; 0x64
 800be64:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800be68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800be6c:	e79c      	b.n	800bda8 <_strtod_l+0x980>
 800be6e:	f1ba 0f01 	cmp.w	sl, #1
 800be72:	d102      	bne.n	800be7a <_strtod_l+0xa52>
 800be74:	2d00      	cmp	r5, #0
 800be76:	f43f ad8e 	beq.w	800b996 <_strtod_l+0x56e>
 800be7a:	2200      	movs	r2, #0
 800be7c:	4b34      	ldr	r3, [pc, #208]	; (800bf50 <_strtod_l+0xb28>)
 800be7e:	e78f      	b.n	800bda0 <_strtod_l+0x978>
 800be80:	2600      	movs	r6, #0
 800be82:	4f32      	ldr	r7, [pc, #200]	; (800bf4c <_strtod_l+0xb24>)
 800be84:	e7ea      	b.n	800be5c <_strtod_l+0xa34>
 800be86:	4b31      	ldr	r3, [pc, #196]	; (800bf4c <_strtod_l+0xb24>)
 800be88:	4630      	mov	r0, r6
 800be8a:	4639      	mov	r1, r7
 800be8c:	2200      	movs	r2, #0
 800be8e:	f7f4 fbb3 	bl	80005f8 <__aeabi_dmul>
 800be92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be94:	4606      	mov	r6, r0
 800be96:	460f      	mov	r7, r1
 800be98:	b933      	cbnz	r3, 800bea8 <_strtod_l+0xa80>
 800be9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be9e:	9010      	str	r0, [sp, #64]	; 0x40
 800bea0:	9311      	str	r3, [sp, #68]	; 0x44
 800bea2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bea6:	e7df      	b.n	800be68 <_strtod_l+0xa40>
 800bea8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800beac:	e7f9      	b.n	800bea2 <_strtod_l+0xa7a>
 800beae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800beb2:	9b04      	ldr	r3, [sp, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1ab      	bne.n	800be10 <_strtod_l+0x9e8>
 800beb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bebc:	0d1b      	lsrs	r3, r3, #20
 800bebe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bec0:	051b      	lsls	r3, r3, #20
 800bec2:	429a      	cmp	r2, r3
 800bec4:	465d      	mov	r5, fp
 800bec6:	d1a3      	bne.n	800be10 <_strtod_l+0x9e8>
 800bec8:	4639      	mov	r1, r7
 800beca:	4630      	mov	r0, r6
 800becc:	f7f4 fe44 	bl	8000b58 <__aeabi_d2iz>
 800bed0:	f7f4 fb28 	bl	8000524 <__aeabi_i2d>
 800bed4:	460b      	mov	r3, r1
 800bed6:	4602      	mov	r2, r0
 800bed8:	4639      	mov	r1, r7
 800beda:	4630      	mov	r0, r6
 800bedc:	f7f4 f9d4 	bl	8000288 <__aeabi_dsub>
 800bee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bee2:	4606      	mov	r6, r0
 800bee4:	460f      	mov	r7, r1
 800bee6:	b933      	cbnz	r3, 800bef6 <_strtod_l+0xace>
 800bee8:	f1ba 0f00 	cmp.w	sl, #0
 800beec:	d103      	bne.n	800bef6 <_strtod_l+0xace>
 800beee:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800bef2:	2d00      	cmp	r5, #0
 800bef4:	d06d      	beq.n	800bfd2 <_strtod_l+0xbaa>
 800bef6:	a30a      	add	r3, pc, #40	; (adr r3, 800bf20 <_strtod_l+0xaf8>)
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	4630      	mov	r0, r6
 800befe:	4639      	mov	r1, r7
 800bf00:	f7f4 fdec 	bl	8000adc <__aeabi_dcmplt>
 800bf04:	2800      	cmp	r0, #0
 800bf06:	f47f acb8 	bne.w	800b87a <_strtod_l+0x452>
 800bf0a:	a307      	add	r3, pc, #28	; (adr r3, 800bf28 <_strtod_l+0xb00>)
 800bf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf10:	4630      	mov	r0, r6
 800bf12:	4639      	mov	r1, r7
 800bf14:	f7f4 fe00 	bl	8000b18 <__aeabi_dcmpgt>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	f43f af79 	beq.w	800be10 <_strtod_l+0x9e8>
 800bf1e:	e4ac      	b.n	800b87a <_strtod_l+0x452>
 800bf20:	94a03595 	.word	0x94a03595
 800bf24:	3fdfffff 	.word	0x3fdfffff
 800bf28:	35afe535 	.word	0x35afe535
 800bf2c:	3fe00000 	.word	0x3fe00000
 800bf30:	000fffff 	.word	0x000fffff
 800bf34:	7ff00000 	.word	0x7ff00000
 800bf38:	7fefffff 	.word	0x7fefffff
 800bf3c:	39500000 	.word	0x39500000
 800bf40:	3ff00000 	.word	0x3ff00000
 800bf44:	7fe00000 	.word	0x7fe00000
 800bf48:	7c9fffff 	.word	0x7c9fffff
 800bf4c:	3fe00000 	.word	0x3fe00000
 800bf50:	bff00000 	.word	0xbff00000
 800bf54:	9b04      	ldr	r3, [sp, #16]
 800bf56:	b333      	cbz	r3, 800bfa6 <_strtod_l+0xb7e>
 800bf58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf5a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bf5e:	d822      	bhi.n	800bfa6 <_strtod_l+0xb7e>
 800bf60:	a327      	add	r3, pc, #156	; (adr r3, 800c000 <_strtod_l+0xbd8>)
 800bf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf66:	4630      	mov	r0, r6
 800bf68:	4639      	mov	r1, r7
 800bf6a:	f7f4 fdc1 	bl	8000af0 <__aeabi_dcmple>
 800bf6e:	b1a0      	cbz	r0, 800bf9a <_strtod_l+0xb72>
 800bf70:	4639      	mov	r1, r7
 800bf72:	4630      	mov	r0, r6
 800bf74:	f7f4 fe18 	bl	8000ba8 <__aeabi_d2uiz>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	bf08      	it	eq
 800bf7c:	2001      	moveq	r0, #1
 800bf7e:	f7f4 fac1 	bl	8000504 <__aeabi_ui2d>
 800bf82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf84:	4606      	mov	r6, r0
 800bf86:	460f      	mov	r7, r1
 800bf88:	bb03      	cbnz	r3, 800bfcc <_strtod_l+0xba4>
 800bf8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf8e:	9012      	str	r0, [sp, #72]	; 0x48
 800bf90:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf92:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800bf96:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bf9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf9e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bfa2:	1a9b      	subs	r3, r3, r2
 800bfa4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfa6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800bfaa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800bfae:	f001 fd53 	bl	800da58 <__ulp>
 800bfb2:	4650      	mov	r0, sl
 800bfb4:	ec53 2b10 	vmov	r2, r3, d0
 800bfb8:	4659      	mov	r1, fp
 800bfba:	f7f4 fb1d 	bl	80005f8 <__aeabi_dmul>
 800bfbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bfc2:	f7f4 f963 	bl	800028c <__adddf3>
 800bfc6:	4682      	mov	sl, r0
 800bfc8:	468b      	mov	fp, r1
 800bfca:	e772      	b.n	800beb2 <_strtod_l+0xa8a>
 800bfcc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800bfd0:	e7df      	b.n	800bf92 <_strtod_l+0xb6a>
 800bfd2:	a30d      	add	r3, pc, #52	; (adr r3, 800c008 <_strtod_l+0xbe0>)
 800bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd8:	f7f4 fd80 	bl	8000adc <__aeabi_dcmplt>
 800bfdc:	e79c      	b.n	800bf18 <_strtod_l+0xaf0>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	930d      	str	r3, [sp, #52]	; 0x34
 800bfe2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bfe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfe6:	6013      	str	r3, [r2, #0]
 800bfe8:	f7ff ba61 	b.w	800b4ae <_strtod_l+0x86>
 800bfec:	2b65      	cmp	r3, #101	; 0x65
 800bfee:	f04f 0200 	mov.w	r2, #0
 800bff2:	f43f ab4e 	beq.w	800b692 <_strtod_l+0x26a>
 800bff6:	2101      	movs	r1, #1
 800bff8:	4614      	mov	r4, r2
 800bffa:	9104      	str	r1, [sp, #16]
 800bffc:	f7ff bacb 	b.w	800b596 <_strtod_l+0x16e>
 800c000:	ffc00000 	.word	0xffc00000
 800c004:	41dfffff 	.word	0x41dfffff
 800c008:	94a03595 	.word	0x94a03595
 800c00c:	3fcfffff 	.word	0x3fcfffff

0800c010 <_strtod_r>:
 800c010:	4b05      	ldr	r3, [pc, #20]	; (800c028 <_strtod_r+0x18>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	b410      	push	{r4}
 800c016:	6a1b      	ldr	r3, [r3, #32]
 800c018:	4c04      	ldr	r4, [pc, #16]	; (800c02c <_strtod_r+0x1c>)
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	bf08      	it	eq
 800c01e:	4623      	moveq	r3, r4
 800c020:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c024:	f7ff ba00 	b.w	800b428 <_strtod_l>
 800c028:	2000000c 	.word	0x2000000c
 800c02c:	20000070 	.word	0x20000070

0800c030 <_strtol_l.isra.0>:
 800c030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c034:	4680      	mov	r8, r0
 800c036:	4689      	mov	r9, r1
 800c038:	4692      	mov	sl, r2
 800c03a:	461e      	mov	r6, r3
 800c03c:	460f      	mov	r7, r1
 800c03e:	463d      	mov	r5, r7
 800c040:	9808      	ldr	r0, [sp, #32]
 800c042:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c046:	f001 fa0d 	bl	800d464 <__locale_ctype_ptr_l>
 800c04a:	4420      	add	r0, r4
 800c04c:	7843      	ldrb	r3, [r0, #1]
 800c04e:	f013 0308 	ands.w	r3, r3, #8
 800c052:	d132      	bne.n	800c0ba <_strtol_l.isra.0+0x8a>
 800c054:	2c2d      	cmp	r4, #45	; 0x2d
 800c056:	d132      	bne.n	800c0be <_strtol_l.isra.0+0x8e>
 800c058:	787c      	ldrb	r4, [r7, #1]
 800c05a:	1cbd      	adds	r5, r7, #2
 800c05c:	2201      	movs	r2, #1
 800c05e:	2e00      	cmp	r6, #0
 800c060:	d05d      	beq.n	800c11e <_strtol_l.isra.0+0xee>
 800c062:	2e10      	cmp	r6, #16
 800c064:	d109      	bne.n	800c07a <_strtol_l.isra.0+0x4a>
 800c066:	2c30      	cmp	r4, #48	; 0x30
 800c068:	d107      	bne.n	800c07a <_strtol_l.isra.0+0x4a>
 800c06a:	782b      	ldrb	r3, [r5, #0]
 800c06c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c070:	2b58      	cmp	r3, #88	; 0x58
 800c072:	d14f      	bne.n	800c114 <_strtol_l.isra.0+0xe4>
 800c074:	786c      	ldrb	r4, [r5, #1]
 800c076:	2610      	movs	r6, #16
 800c078:	3502      	adds	r5, #2
 800c07a:	2a00      	cmp	r2, #0
 800c07c:	bf14      	ite	ne
 800c07e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c082:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c086:	2700      	movs	r7, #0
 800c088:	fbb1 fcf6 	udiv	ip, r1, r6
 800c08c:	4638      	mov	r0, r7
 800c08e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c092:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c096:	2b09      	cmp	r3, #9
 800c098:	d817      	bhi.n	800c0ca <_strtol_l.isra.0+0x9a>
 800c09a:	461c      	mov	r4, r3
 800c09c:	42a6      	cmp	r6, r4
 800c09e:	dd23      	ble.n	800c0e8 <_strtol_l.isra.0+0xb8>
 800c0a0:	1c7b      	adds	r3, r7, #1
 800c0a2:	d007      	beq.n	800c0b4 <_strtol_l.isra.0+0x84>
 800c0a4:	4584      	cmp	ip, r0
 800c0a6:	d31c      	bcc.n	800c0e2 <_strtol_l.isra.0+0xb2>
 800c0a8:	d101      	bne.n	800c0ae <_strtol_l.isra.0+0x7e>
 800c0aa:	45a6      	cmp	lr, r4
 800c0ac:	db19      	blt.n	800c0e2 <_strtol_l.isra.0+0xb2>
 800c0ae:	fb00 4006 	mla	r0, r0, r6, r4
 800c0b2:	2701      	movs	r7, #1
 800c0b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0b8:	e7eb      	b.n	800c092 <_strtol_l.isra.0+0x62>
 800c0ba:	462f      	mov	r7, r5
 800c0bc:	e7bf      	b.n	800c03e <_strtol_l.isra.0+0xe>
 800c0be:	2c2b      	cmp	r4, #43	; 0x2b
 800c0c0:	bf04      	itt	eq
 800c0c2:	1cbd      	addeq	r5, r7, #2
 800c0c4:	787c      	ldrbeq	r4, [r7, #1]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	e7c9      	b.n	800c05e <_strtol_l.isra.0+0x2e>
 800c0ca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c0ce:	2b19      	cmp	r3, #25
 800c0d0:	d801      	bhi.n	800c0d6 <_strtol_l.isra.0+0xa6>
 800c0d2:	3c37      	subs	r4, #55	; 0x37
 800c0d4:	e7e2      	b.n	800c09c <_strtol_l.isra.0+0x6c>
 800c0d6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c0da:	2b19      	cmp	r3, #25
 800c0dc:	d804      	bhi.n	800c0e8 <_strtol_l.isra.0+0xb8>
 800c0de:	3c57      	subs	r4, #87	; 0x57
 800c0e0:	e7dc      	b.n	800c09c <_strtol_l.isra.0+0x6c>
 800c0e2:	f04f 37ff 	mov.w	r7, #4294967295
 800c0e6:	e7e5      	b.n	800c0b4 <_strtol_l.isra.0+0x84>
 800c0e8:	1c7b      	adds	r3, r7, #1
 800c0ea:	d108      	bne.n	800c0fe <_strtol_l.isra.0+0xce>
 800c0ec:	2322      	movs	r3, #34	; 0x22
 800c0ee:	f8c8 3000 	str.w	r3, [r8]
 800c0f2:	4608      	mov	r0, r1
 800c0f4:	f1ba 0f00 	cmp.w	sl, #0
 800c0f8:	d107      	bne.n	800c10a <_strtol_l.isra.0+0xda>
 800c0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0fe:	b102      	cbz	r2, 800c102 <_strtol_l.isra.0+0xd2>
 800c100:	4240      	negs	r0, r0
 800c102:	f1ba 0f00 	cmp.w	sl, #0
 800c106:	d0f8      	beq.n	800c0fa <_strtol_l.isra.0+0xca>
 800c108:	b10f      	cbz	r7, 800c10e <_strtol_l.isra.0+0xde>
 800c10a:	f105 39ff 	add.w	r9, r5, #4294967295
 800c10e:	f8ca 9000 	str.w	r9, [sl]
 800c112:	e7f2      	b.n	800c0fa <_strtol_l.isra.0+0xca>
 800c114:	2430      	movs	r4, #48	; 0x30
 800c116:	2e00      	cmp	r6, #0
 800c118:	d1af      	bne.n	800c07a <_strtol_l.isra.0+0x4a>
 800c11a:	2608      	movs	r6, #8
 800c11c:	e7ad      	b.n	800c07a <_strtol_l.isra.0+0x4a>
 800c11e:	2c30      	cmp	r4, #48	; 0x30
 800c120:	d0a3      	beq.n	800c06a <_strtol_l.isra.0+0x3a>
 800c122:	260a      	movs	r6, #10
 800c124:	e7a9      	b.n	800c07a <_strtol_l.isra.0+0x4a>
	...

0800c128 <_strtol_r>:
 800c128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c12a:	4c06      	ldr	r4, [pc, #24]	; (800c144 <_strtol_r+0x1c>)
 800c12c:	4d06      	ldr	r5, [pc, #24]	; (800c148 <_strtol_r+0x20>)
 800c12e:	6824      	ldr	r4, [r4, #0]
 800c130:	6a24      	ldr	r4, [r4, #32]
 800c132:	2c00      	cmp	r4, #0
 800c134:	bf08      	it	eq
 800c136:	462c      	moveq	r4, r5
 800c138:	9400      	str	r4, [sp, #0]
 800c13a:	f7ff ff79 	bl	800c030 <_strtol_l.isra.0>
 800c13e:	b003      	add	sp, #12
 800c140:	bd30      	pop	{r4, r5, pc}
 800c142:	bf00      	nop
 800c144:	2000000c 	.word	0x2000000c
 800c148:	20000070 	.word	0x20000070

0800c14c <_vsiprintf_r>:
 800c14c:	b500      	push	{lr}
 800c14e:	b09b      	sub	sp, #108	; 0x6c
 800c150:	9100      	str	r1, [sp, #0]
 800c152:	9104      	str	r1, [sp, #16]
 800c154:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c158:	9105      	str	r1, [sp, #20]
 800c15a:	9102      	str	r1, [sp, #8]
 800c15c:	4905      	ldr	r1, [pc, #20]	; (800c174 <_vsiprintf_r+0x28>)
 800c15e:	9103      	str	r1, [sp, #12]
 800c160:	4669      	mov	r1, sp
 800c162:	f001 febd 	bl	800dee0 <_svfiprintf_r>
 800c166:	9b00      	ldr	r3, [sp, #0]
 800c168:	2200      	movs	r2, #0
 800c16a:	701a      	strb	r2, [r3, #0]
 800c16c:	b01b      	add	sp, #108	; 0x6c
 800c16e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c172:	bf00      	nop
 800c174:	ffff0208 	.word	0xffff0208

0800c178 <vsiprintf>:
 800c178:	4613      	mov	r3, r2
 800c17a:	460a      	mov	r2, r1
 800c17c:	4601      	mov	r1, r0
 800c17e:	4802      	ldr	r0, [pc, #8]	; (800c188 <vsiprintf+0x10>)
 800c180:	6800      	ldr	r0, [r0, #0]
 800c182:	f7ff bfe3 	b.w	800c14c <_vsiprintf_r>
 800c186:	bf00      	nop
 800c188:	2000000c 	.word	0x2000000c

0800c18c <quorem>:
 800c18c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c190:	6903      	ldr	r3, [r0, #16]
 800c192:	690c      	ldr	r4, [r1, #16]
 800c194:	42a3      	cmp	r3, r4
 800c196:	4680      	mov	r8, r0
 800c198:	f2c0 8082 	blt.w	800c2a0 <quorem+0x114>
 800c19c:	3c01      	subs	r4, #1
 800c19e:	f101 0714 	add.w	r7, r1, #20
 800c1a2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c1a6:	f100 0614 	add.w	r6, r0, #20
 800c1aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c1ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c1b2:	eb06 030c 	add.w	r3, r6, ip
 800c1b6:	3501      	adds	r5, #1
 800c1b8:	eb07 090c 	add.w	r9, r7, ip
 800c1bc:	9301      	str	r3, [sp, #4]
 800c1be:	fbb0 f5f5 	udiv	r5, r0, r5
 800c1c2:	b395      	cbz	r5, 800c22a <quorem+0x9e>
 800c1c4:	f04f 0a00 	mov.w	sl, #0
 800c1c8:	4638      	mov	r0, r7
 800c1ca:	46b6      	mov	lr, r6
 800c1cc:	46d3      	mov	fp, sl
 800c1ce:	f850 2b04 	ldr.w	r2, [r0], #4
 800c1d2:	b293      	uxth	r3, r2
 800c1d4:	fb05 a303 	mla	r3, r5, r3, sl
 800c1d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	ebab 0303 	sub.w	r3, fp, r3
 800c1e2:	0c12      	lsrs	r2, r2, #16
 800c1e4:	f8de b000 	ldr.w	fp, [lr]
 800c1e8:	fb05 a202 	mla	r2, r5, r2, sl
 800c1ec:	fa13 f38b 	uxtah	r3, r3, fp
 800c1f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c1f4:	fa1f fb82 	uxth.w	fp, r2
 800c1f8:	f8de 2000 	ldr.w	r2, [lr]
 800c1fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c200:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c204:	b29b      	uxth	r3, r3
 800c206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c20a:	4581      	cmp	r9, r0
 800c20c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c210:	f84e 3b04 	str.w	r3, [lr], #4
 800c214:	d2db      	bcs.n	800c1ce <quorem+0x42>
 800c216:	f856 300c 	ldr.w	r3, [r6, ip]
 800c21a:	b933      	cbnz	r3, 800c22a <quorem+0x9e>
 800c21c:	9b01      	ldr	r3, [sp, #4]
 800c21e:	3b04      	subs	r3, #4
 800c220:	429e      	cmp	r6, r3
 800c222:	461a      	mov	r2, r3
 800c224:	d330      	bcc.n	800c288 <quorem+0xfc>
 800c226:	f8c8 4010 	str.w	r4, [r8, #16]
 800c22a:	4640      	mov	r0, r8
 800c22c:	f001 fb9c 	bl	800d968 <__mcmp>
 800c230:	2800      	cmp	r0, #0
 800c232:	db25      	blt.n	800c280 <quorem+0xf4>
 800c234:	3501      	adds	r5, #1
 800c236:	4630      	mov	r0, r6
 800c238:	f04f 0c00 	mov.w	ip, #0
 800c23c:	f857 2b04 	ldr.w	r2, [r7], #4
 800c240:	f8d0 e000 	ldr.w	lr, [r0]
 800c244:	b293      	uxth	r3, r2
 800c246:	ebac 0303 	sub.w	r3, ip, r3
 800c24a:	0c12      	lsrs	r2, r2, #16
 800c24c:	fa13 f38e 	uxtah	r3, r3, lr
 800c250:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c254:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c258:	b29b      	uxth	r3, r3
 800c25a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c25e:	45b9      	cmp	r9, r7
 800c260:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c264:	f840 3b04 	str.w	r3, [r0], #4
 800c268:	d2e8      	bcs.n	800c23c <quorem+0xb0>
 800c26a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c26e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c272:	b92a      	cbnz	r2, 800c280 <quorem+0xf4>
 800c274:	3b04      	subs	r3, #4
 800c276:	429e      	cmp	r6, r3
 800c278:	461a      	mov	r2, r3
 800c27a:	d30b      	bcc.n	800c294 <quorem+0x108>
 800c27c:	f8c8 4010 	str.w	r4, [r8, #16]
 800c280:	4628      	mov	r0, r5
 800c282:	b003      	add	sp, #12
 800c284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c288:	6812      	ldr	r2, [r2, #0]
 800c28a:	3b04      	subs	r3, #4
 800c28c:	2a00      	cmp	r2, #0
 800c28e:	d1ca      	bne.n	800c226 <quorem+0x9a>
 800c290:	3c01      	subs	r4, #1
 800c292:	e7c5      	b.n	800c220 <quorem+0x94>
 800c294:	6812      	ldr	r2, [r2, #0]
 800c296:	3b04      	subs	r3, #4
 800c298:	2a00      	cmp	r2, #0
 800c29a:	d1ef      	bne.n	800c27c <quorem+0xf0>
 800c29c:	3c01      	subs	r4, #1
 800c29e:	e7ea      	b.n	800c276 <quorem+0xea>
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	e7ee      	b.n	800c282 <quorem+0xf6>
 800c2a4:	0000      	movs	r0, r0
	...

0800c2a8 <_dtoa_r>:
 800c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	ec57 6b10 	vmov	r6, r7, d0
 800c2b0:	b097      	sub	sp, #92	; 0x5c
 800c2b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c2b4:	9106      	str	r1, [sp, #24]
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	920b      	str	r2, [sp, #44]	; 0x2c
 800c2ba:	9312      	str	r3, [sp, #72]	; 0x48
 800c2bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c2c0:	e9cd 6700 	strd	r6, r7, [sp]
 800c2c4:	b93d      	cbnz	r5, 800c2d6 <_dtoa_r+0x2e>
 800c2c6:	2010      	movs	r0, #16
 800c2c8:	f001 f8e0 	bl	800d48c <malloc>
 800c2cc:	6260      	str	r0, [r4, #36]	; 0x24
 800c2ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c2d2:	6005      	str	r5, [r0, #0]
 800c2d4:	60c5      	str	r5, [r0, #12]
 800c2d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2d8:	6819      	ldr	r1, [r3, #0]
 800c2da:	b151      	cbz	r1, 800c2f2 <_dtoa_r+0x4a>
 800c2dc:	685a      	ldr	r2, [r3, #4]
 800c2de:	604a      	str	r2, [r1, #4]
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	4093      	lsls	r3, r2
 800c2e4:	608b      	str	r3, [r1, #8]
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	f001 f91e 	bl	800d528 <_Bfree>
 800c2ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	601a      	str	r2, [r3, #0]
 800c2f2:	1e3b      	subs	r3, r7, #0
 800c2f4:	bfbb      	ittet	lt
 800c2f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c2fa:	9301      	strlt	r3, [sp, #4]
 800c2fc:	2300      	movge	r3, #0
 800c2fe:	2201      	movlt	r2, #1
 800c300:	bfac      	ite	ge
 800c302:	f8c8 3000 	strge.w	r3, [r8]
 800c306:	f8c8 2000 	strlt.w	r2, [r8]
 800c30a:	4baf      	ldr	r3, [pc, #700]	; (800c5c8 <_dtoa_r+0x320>)
 800c30c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c310:	ea33 0308 	bics.w	r3, r3, r8
 800c314:	d114      	bne.n	800c340 <_dtoa_r+0x98>
 800c316:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c318:	f242 730f 	movw	r3, #9999	; 0x270f
 800c31c:	6013      	str	r3, [r2, #0]
 800c31e:	9b00      	ldr	r3, [sp, #0]
 800c320:	b923      	cbnz	r3, 800c32c <_dtoa_r+0x84>
 800c322:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c326:	2800      	cmp	r0, #0
 800c328:	f000 8542 	beq.w	800cdb0 <_dtoa_r+0xb08>
 800c32c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c32e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c5dc <_dtoa_r+0x334>
 800c332:	2b00      	cmp	r3, #0
 800c334:	f000 8544 	beq.w	800cdc0 <_dtoa_r+0xb18>
 800c338:	f10b 0303 	add.w	r3, fp, #3
 800c33c:	f000 bd3e 	b.w	800cdbc <_dtoa_r+0xb14>
 800c340:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c344:	2200      	movs	r2, #0
 800c346:	2300      	movs	r3, #0
 800c348:	4630      	mov	r0, r6
 800c34a:	4639      	mov	r1, r7
 800c34c:	f7f4 fbbc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c350:	4681      	mov	r9, r0
 800c352:	b168      	cbz	r0, 800c370 <_dtoa_r+0xc8>
 800c354:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c356:	2301      	movs	r3, #1
 800c358:	6013      	str	r3, [r2, #0]
 800c35a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f000 8524 	beq.w	800cdaa <_dtoa_r+0xb02>
 800c362:	4b9a      	ldr	r3, [pc, #616]	; (800c5cc <_dtoa_r+0x324>)
 800c364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c366:	f103 3bff 	add.w	fp, r3, #4294967295
 800c36a:	6013      	str	r3, [r2, #0]
 800c36c:	f000 bd28 	b.w	800cdc0 <_dtoa_r+0xb18>
 800c370:	aa14      	add	r2, sp, #80	; 0x50
 800c372:	a915      	add	r1, sp, #84	; 0x54
 800c374:	ec47 6b10 	vmov	d0, r6, r7
 800c378:	4620      	mov	r0, r4
 800c37a:	f001 fbe3 	bl	800db44 <__d2b>
 800c37e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c382:	9004      	str	r0, [sp, #16]
 800c384:	2d00      	cmp	r5, #0
 800c386:	d07c      	beq.n	800c482 <_dtoa_r+0x1da>
 800c388:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c38c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c390:	46b2      	mov	sl, r6
 800c392:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c396:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c39a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c39e:	2200      	movs	r2, #0
 800c3a0:	4b8b      	ldr	r3, [pc, #556]	; (800c5d0 <_dtoa_r+0x328>)
 800c3a2:	4650      	mov	r0, sl
 800c3a4:	4659      	mov	r1, fp
 800c3a6:	f7f3 ff6f 	bl	8000288 <__aeabi_dsub>
 800c3aa:	a381      	add	r3, pc, #516	; (adr r3, 800c5b0 <_dtoa_r+0x308>)
 800c3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b0:	f7f4 f922 	bl	80005f8 <__aeabi_dmul>
 800c3b4:	a380      	add	r3, pc, #512	; (adr r3, 800c5b8 <_dtoa_r+0x310>)
 800c3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ba:	f7f3 ff67 	bl	800028c <__adddf3>
 800c3be:	4606      	mov	r6, r0
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	460f      	mov	r7, r1
 800c3c4:	f7f4 f8ae 	bl	8000524 <__aeabi_i2d>
 800c3c8:	a37d      	add	r3, pc, #500	; (adr r3, 800c5c0 <_dtoa_r+0x318>)
 800c3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ce:	f7f4 f913 	bl	80005f8 <__aeabi_dmul>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	4639      	mov	r1, r7
 800c3da:	f7f3 ff57 	bl	800028c <__adddf3>
 800c3de:	4606      	mov	r6, r0
 800c3e0:	460f      	mov	r7, r1
 800c3e2:	f7f4 fbb9 	bl	8000b58 <__aeabi_d2iz>
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	4682      	mov	sl, r0
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	4639      	mov	r1, r7
 800c3f0:	f7f4 fb74 	bl	8000adc <__aeabi_dcmplt>
 800c3f4:	b148      	cbz	r0, 800c40a <_dtoa_r+0x162>
 800c3f6:	4650      	mov	r0, sl
 800c3f8:	f7f4 f894 	bl	8000524 <__aeabi_i2d>
 800c3fc:	4632      	mov	r2, r6
 800c3fe:	463b      	mov	r3, r7
 800c400:	f7f4 fb62 	bl	8000ac8 <__aeabi_dcmpeq>
 800c404:	b908      	cbnz	r0, 800c40a <_dtoa_r+0x162>
 800c406:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c40a:	f1ba 0f16 	cmp.w	sl, #22
 800c40e:	d859      	bhi.n	800c4c4 <_dtoa_r+0x21c>
 800c410:	4970      	ldr	r1, [pc, #448]	; (800c5d4 <_dtoa_r+0x32c>)
 800c412:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c416:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c41a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c41e:	f7f4 fb7b 	bl	8000b18 <__aeabi_dcmpgt>
 800c422:	2800      	cmp	r0, #0
 800c424:	d050      	beq.n	800c4c8 <_dtoa_r+0x220>
 800c426:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c42a:	2300      	movs	r3, #0
 800c42c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c42e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c430:	1b5d      	subs	r5, r3, r5
 800c432:	f1b5 0801 	subs.w	r8, r5, #1
 800c436:	bf49      	itett	mi
 800c438:	f1c5 0301 	rsbmi	r3, r5, #1
 800c43c:	2300      	movpl	r3, #0
 800c43e:	9305      	strmi	r3, [sp, #20]
 800c440:	f04f 0800 	movmi.w	r8, #0
 800c444:	bf58      	it	pl
 800c446:	9305      	strpl	r3, [sp, #20]
 800c448:	f1ba 0f00 	cmp.w	sl, #0
 800c44c:	db3e      	blt.n	800c4cc <_dtoa_r+0x224>
 800c44e:	2300      	movs	r3, #0
 800c450:	44d0      	add	r8, sl
 800c452:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c456:	9307      	str	r3, [sp, #28]
 800c458:	9b06      	ldr	r3, [sp, #24]
 800c45a:	2b09      	cmp	r3, #9
 800c45c:	f200 8090 	bhi.w	800c580 <_dtoa_r+0x2d8>
 800c460:	2b05      	cmp	r3, #5
 800c462:	bfc4      	itt	gt
 800c464:	3b04      	subgt	r3, #4
 800c466:	9306      	strgt	r3, [sp, #24]
 800c468:	9b06      	ldr	r3, [sp, #24]
 800c46a:	f1a3 0302 	sub.w	r3, r3, #2
 800c46e:	bfcc      	ite	gt
 800c470:	2500      	movgt	r5, #0
 800c472:	2501      	movle	r5, #1
 800c474:	2b03      	cmp	r3, #3
 800c476:	f200 808f 	bhi.w	800c598 <_dtoa_r+0x2f0>
 800c47a:	e8df f003 	tbb	[pc, r3]
 800c47e:	7f7d      	.short	0x7f7d
 800c480:	7131      	.short	0x7131
 800c482:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c486:	441d      	add	r5, r3
 800c488:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c48c:	2820      	cmp	r0, #32
 800c48e:	dd13      	ble.n	800c4b8 <_dtoa_r+0x210>
 800c490:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c494:	9b00      	ldr	r3, [sp, #0]
 800c496:	fa08 f800 	lsl.w	r8, r8, r0
 800c49a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c49e:	fa23 f000 	lsr.w	r0, r3, r0
 800c4a2:	ea48 0000 	orr.w	r0, r8, r0
 800c4a6:	f7f4 f82d 	bl	8000504 <__aeabi_ui2d>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	4682      	mov	sl, r0
 800c4ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c4b2:	3d01      	subs	r5, #1
 800c4b4:	9313      	str	r3, [sp, #76]	; 0x4c
 800c4b6:	e772      	b.n	800c39e <_dtoa_r+0xf6>
 800c4b8:	9b00      	ldr	r3, [sp, #0]
 800c4ba:	f1c0 0020 	rsb	r0, r0, #32
 800c4be:	fa03 f000 	lsl.w	r0, r3, r0
 800c4c2:	e7f0      	b.n	800c4a6 <_dtoa_r+0x1fe>
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	e7b1      	b.n	800c42c <_dtoa_r+0x184>
 800c4c8:	900f      	str	r0, [sp, #60]	; 0x3c
 800c4ca:	e7b0      	b.n	800c42e <_dtoa_r+0x186>
 800c4cc:	9b05      	ldr	r3, [sp, #20]
 800c4ce:	eba3 030a 	sub.w	r3, r3, sl
 800c4d2:	9305      	str	r3, [sp, #20]
 800c4d4:	f1ca 0300 	rsb	r3, sl, #0
 800c4d8:	9307      	str	r3, [sp, #28]
 800c4da:	2300      	movs	r3, #0
 800c4dc:	930e      	str	r3, [sp, #56]	; 0x38
 800c4de:	e7bb      	b.n	800c458 <_dtoa_r+0x1b0>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	930a      	str	r3, [sp, #40]	; 0x28
 800c4e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	dd59      	ble.n	800c59e <_dtoa_r+0x2f6>
 800c4ea:	9302      	str	r3, [sp, #8]
 800c4ec:	4699      	mov	r9, r3
 800c4ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	6072      	str	r2, [r6, #4]
 800c4f4:	2204      	movs	r2, #4
 800c4f6:	f102 0014 	add.w	r0, r2, #20
 800c4fa:	4298      	cmp	r0, r3
 800c4fc:	6871      	ldr	r1, [r6, #4]
 800c4fe:	d953      	bls.n	800c5a8 <_dtoa_r+0x300>
 800c500:	4620      	mov	r0, r4
 800c502:	f000 ffdd 	bl	800d4c0 <_Balloc>
 800c506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c508:	6030      	str	r0, [r6, #0]
 800c50a:	f1b9 0f0e 	cmp.w	r9, #14
 800c50e:	f8d3 b000 	ldr.w	fp, [r3]
 800c512:	f200 80e6 	bhi.w	800c6e2 <_dtoa_r+0x43a>
 800c516:	2d00      	cmp	r5, #0
 800c518:	f000 80e3 	beq.w	800c6e2 <_dtoa_r+0x43a>
 800c51c:	ed9d 7b00 	vldr	d7, [sp]
 800c520:	f1ba 0f00 	cmp.w	sl, #0
 800c524:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c528:	dd74      	ble.n	800c614 <_dtoa_r+0x36c>
 800c52a:	4a2a      	ldr	r2, [pc, #168]	; (800c5d4 <_dtoa_r+0x32c>)
 800c52c:	f00a 030f 	and.w	r3, sl, #15
 800c530:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c534:	ed93 7b00 	vldr	d7, [r3]
 800c538:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c53c:	06f0      	lsls	r0, r6, #27
 800c53e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c542:	d565      	bpl.n	800c610 <_dtoa_r+0x368>
 800c544:	4b24      	ldr	r3, [pc, #144]	; (800c5d8 <_dtoa_r+0x330>)
 800c546:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c54a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c54e:	f7f4 f97d 	bl	800084c <__aeabi_ddiv>
 800c552:	e9cd 0100 	strd	r0, r1, [sp]
 800c556:	f006 060f 	and.w	r6, r6, #15
 800c55a:	2503      	movs	r5, #3
 800c55c:	4f1e      	ldr	r7, [pc, #120]	; (800c5d8 <_dtoa_r+0x330>)
 800c55e:	e04c      	b.n	800c5fa <_dtoa_r+0x352>
 800c560:	2301      	movs	r3, #1
 800c562:	930a      	str	r3, [sp, #40]	; 0x28
 800c564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c566:	4453      	add	r3, sl
 800c568:	f103 0901 	add.w	r9, r3, #1
 800c56c:	9302      	str	r3, [sp, #8]
 800c56e:	464b      	mov	r3, r9
 800c570:	2b01      	cmp	r3, #1
 800c572:	bfb8      	it	lt
 800c574:	2301      	movlt	r3, #1
 800c576:	e7ba      	b.n	800c4ee <_dtoa_r+0x246>
 800c578:	2300      	movs	r3, #0
 800c57a:	e7b2      	b.n	800c4e2 <_dtoa_r+0x23a>
 800c57c:	2300      	movs	r3, #0
 800c57e:	e7f0      	b.n	800c562 <_dtoa_r+0x2ba>
 800c580:	2501      	movs	r5, #1
 800c582:	2300      	movs	r3, #0
 800c584:	9306      	str	r3, [sp, #24]
 800c586:	950a      	str	r5, [sp, #40]	; 0x28
 800c588:	f04f 33ff 	mov.w	r3, #4294967295
 800c58c:	9302      	str	r3, [sp, #8]
 800c58e:	4699      	mov	r9, r3
 800c590:	2200      	movs	r2, #0
 800c592:	2312      	movs	r3, #18
 800c594:	920b      	str	r2, [sp, #44]	; 0x2c
 800c596:	e7aa      	b.n	800c4ee <_dtoa_r+0x246>
 800c598:	2301      	movs	r3, #1
 800c59a:	930a      	str	r3, [sp, #40]	; 0x28
 800c59c:	e7f4      	b.n	800c588 <_dtoa_r+0x2e0>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	9302      	str	r3, [sp, #8]
 800c5a2:	4699      	mov	r9, r3
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	e7f5      	b.n	800c594 <_dtoa_r+0x2ec>
 800c5a8:	3101      	adds	r1, #1
 800c5aa:	6071      	str	r1, [r6, #4]
 800c5ac:	0052      	lsls	r2, r2, #1
 800c5ae:	e7a2      	b.n	800c4f6 <_dtoa_r+0x24e>
 800c5b0:	636f4361 	.word	0x636f4361
 800c5b4:	3fd287a7 	.word	0x3fd287a7
 800c5b8:	8b60c8b3 	.word	0x8b60c8b3
 800c5bc:	3fc68a28 	.word	0x3fc68a28
 800c5c0:	509f79fb 	.word	0x509f79fb
 800c5c4:	3fd34413 	.word	0x3fd34413
 800c5c8:	7ff00000 	.word	0x7ff00000
 800c5cc:	0800ee39 	.word	0x0800ee39
 800c5d0:	3ff80000 	.word	0x3ff80000
 800c5d4:	0800eef8 	.word	0x0800eef8
 800c5d8:	0800eed0 	.word	0x0800eed0
 800c5dc:	0800eec1 	.word	0x0800eec1
 800c5e0:	07f1      	lsls	r1, r6, #31
 800c5e2:	d508      	bpl.n	800c5f6 <_dtoa_r+0x34e>
 800c5e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5ec:	f7f4 f804 	bl	80005f8 <__aeabi_dmul>
 800c5f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c5f4:	3501      	adds	r5, #1
 800c5f6:	1076      	asrs	r6, r6, #1
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	2e00      	cmp	r6, #0
 800c5fc:	d1f0      	bne.n	800c5e0 <_dtoa_r+0x338>
 800c5fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c602:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c606:	f7f4 f921 	bl	800084c <__aeabi_ddiv>
 800c60a:	e9cd 0100 	strd	r0, r1, [sp]
 800c60e:	e01a      	b.n	800c646 <_dtoa_r+0x39e>
 800c610:	2502      	movs	r5, #2
 800c612:	e7a3      	b.n	800c55c <_dtoa_r+0x2b4>
 800c614:	f000 80a0 	beq.w	800c758 <_dtoa_r+0x4b0>
 800c618:	f1ca 0600 	rsb	r6, sl, #0
 800c61c:	4b9f      	ldr	r3, [pc, #636]	; (800c89c <_dtoa_r+0x5f4>)
 800c61e:	4fa0      	ldr	r7, [pc, #640]	; (800c8a0 <_dtoa_r+0x5f8>)
 800c620:	f006 020f 	and.w	r2, r6, #15
 800c624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c630:	f7f3 ffe2 	bl	80005f8 <__aeabi_dmul>
 800c634:	e9cd 0100 	strd	r0, r1, [sp]
 800c638:	1136      	asrs	r6, r6, #4
 800c63a:	2300      	movs	r3, #0
 800c63c:	2502      	movs	r5, #2
 800c63e:	2e00      	cmp	r6, #0
 800c640:	d17f      	bne.n	800c742 <_dtoa_r+0x49a>
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1e1      	bne.n	800c60a <_dtoa_r+0x362>
 800c646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f000 8087 	beq.w	800c75c <_dtoa_r+0x4b4>
 800c64e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c652:	2200      	movs	r2, #0
 800c654:	4b93      	ldr	r3, [pc, #588]	; (800c8a4 <_dtoa_r+0x5fc>)
 800c656:	4630      	mov	r0, r6
 800c658:	4639      	mov	r1, r7
 800c65a:	f7f4 fa3f 	bl	8000adc <__aeabi_dcmplt>
 800c65e:	2800      	cmp	r0, #0
 800c660:	d07c      	beq.n	800c75c <_dtoa_r+0x4b4>
 800c662:	f1b9 0f00 	cmp.w	r9, #0
 800c666:	d079      	beq.n	800c75c <_dtoa_r+0x4b4>
 800c668:	9b02      	ldr	r3, [sp, #8]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	dd35      	ble.n	800c6da <_dtoa_r+0x432>
 800c66e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c672:	9308      	str	r3, [sp, #32]
 800c674:	4639      	mov	r1, r7
 800c676:	2200      	movs	r2, #0
 800c678:	4b8b      	ldr	r3, [pc, #556]	; (800c8a8 <_dtoa_r+0x600>)
 800c67a:	4630      	mov	r0, r6
 800c67c:	f7f3 ffbc 	bl	80005f8 <__aeabi_dmul>
 800c680:	e9cd 0100 	strd	r0, r1, [sp]
 800c684:	9f02      	ldr	r7, [sp, #8]
 800c686:	3501      	adds	r5, #1
 800c688:	4628      	mov	r0, r5
 800c68a:	f7f3 ff4b 	bl	8000524 <__aeabi_i2d>
 800c68e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c692:	f7f3 ffb1 	bl	80005f8 <__aeabi_dmul>
 800c696:	2200      	movs	r2, #0
 800c698:	4b84      	ldr	r3, [pc, #528]	; (800c8ac <_dtoa_r+0x604>)
 800c69a:	f7f3 fdf7 	bl	800028c <__adddf3>
 800c69e:	4605      	mov	r5, r0
 800c6a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c6a4:	2f00      	cmp	r7, #0
 800c6a6:	d15d      	bne.n	800c764 <_dtoa_r+0x4bc>
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	4b81      	ldr	r3, [pc, #516]	; (800c8b0 <_dtoa_r+0x608>)
 800c6ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6b0:	f7f3 fdea 	bl	8000288 <__aeabi_dsub>
 800c6b4:	462a      	mov	r2, r5
 800c6b6:	4633      	mov	r3, r6
 800c6b8:	e9cd 0100 	strd	r0, r1, [sp]
 800c6bc:	f7f4 fa2c 	bl	8000b18 <__aeabi_dcmpgt>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	f040 8288 	bne.w	800cbd6 <_dtoa_r+0x92e>
 800c6c6:	462a      	mov	r2, r5
 800c6c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c6cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6d0:	f7f4 fa04 	bl	8000adc <__aeabi_dcmplt>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	f040 827c 	bne.w	800cbd2 <_dtoa_r+0x92a>
 800c6da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c6de:	e9cd 2300 	strd	r2, r3, [sp]
 800c6e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f2c0 8150 	blt.w	800c98a <_dtoa_r+0x6e2>
 800c6ea:	f1ba 0f0e 	cmp.w	sl, #14
 800c6ee:	f300 814c 	bgt.w	800c98a <_dtoa_r+0x6e2>
 800c6f2:	4b6a      	ldr	r3, [pc, #424]	; (800c89c <_dtoa_r+0x5f4>)
 800c6f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c6f8:	ed93 7b00 	vldr	d7, [r3]
 800c6fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c704:	f280 80d8 	bge.w	800c8b8 <_dtoa_r+0x610>
 800c708:	f1b9 0f00 	cmp.w	r9, #0
 800c70c:	f300 80d4 	bgt.w	800c8b8 <_dtoa_r+0x610>
 800c710:	f040 825e 	bne.w	800cbd0 <_dtoa_r+0x928>
 800c714:	2200      	movs	r2, #0
 800c716:	4b66      	ldr	r3, [pc, #408]	; (800c8b0 <_dtoa_r+0x608>)
 800c718:	ec51 0b17 	vmov	r0, r1, d7
 800c71c:	f7f3 ff6c 	bl	80005f8 <__aeabi_dmul>
 800c720:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c724:	f7f4 f9ee 	bl	8000b04 <__aeabi_dcmpge>
 800c728:	464f      	mov	r7, r9
 800c72a:	464e      	mov	r6, r9
 800c72c:	2800      	cmp	r0, #0
 800c72e:	f040 8234 	bne.w	800cb9a <_dtoa_r+0x8f2>
 800c732:	2331      	movs	r3, #49	; 0x31
 800c734:	f10b 0501 	add.w	r5, fp, #1
 800c738:	f88b 3000 	strb.w	r3, [fp]
 800c73c:	f10a 0a01 	add.w	sl, sl, #1
 800c740:	e22f      	b.n	800cba2 <_dtoa_r+0x8fa>
 800c742:	07f2      	lsls	r2, r6, #31
 800c744:	d505      	bpl.n	800c752 <_dtoa_r+0x4aa>
 800c746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c74a:	f7f3 ff55 	bl	80005f8 <__aeabi_dmul>
 800c74e:	3501      	adds	r5, #1
 800c750:	2301      	movs	r3, #1
 800c752:	1076      	asrs	r6, r6, #1
 800c754:	3708      	adds	r7, #8
 800c756:	e772      	b.n	800c63e <_dtoa_r+0x396>
 800c758:	2502      	movs	r5, #2
 800c75a:	e774      	b.n	800c646 <_dtoa_r+0x39e>
 800c75c:	f8cd a020 	str.w	sl, [sp, #32]
 800c760:	464f      	mov	r7, r9
 800c762:	e791      	b.n	800c688 <_dtoa_r+0x3e0>
 800c764:	4b4d      	ldr	r3, [pc, #308]	; (800c89c <_dtoa_r+0x5f4>)
 800c766:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c76a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c770:	2b00      	cmp	r3, #0
 800c772:	d047      	beq.n	800c804 <_dtoa_r+0x55c>
 800c774:	4602      	mov	r2, r0
 800c776:	460b      	mov	r3, r1
 800c778:	2000      	movs	r0, #0
 800c77a:	494e      	ldr	r1, [pc, #312]	; (800c8b4 <_dtoa_r+0x60c>)
 800c77c:	f7f4 f866 	bl	800084c <__aeabi_ddiv>
 800c780:	462a      	mov	r2, r5
 800c782:	4633      	mov	r3, r6
 800c784:	f7f3 fd80 	bl	8000288 <__aeabi_dsub>
 800c788:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c78c:	465d      	mov	r5, fp
 800c78e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c792:	f7f4 f9e1 	bl	8000b58 <__aeabi_d2iz>
 800c796:	4606      	mov	r6, r0
 800c798:	f7f3 fec4 	bl	8000524 <__aeabi_i2d>
 800c79c:	4602      	mov	r2, r0
 800c79e:	460b      	mov	r3, r1
 800c7a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7a4:	f7f3 fd70 	bl	8000288 <__aeabi_dsub>
 800c7a8:	3630      	adds	r6, #48	; 0x30
 800c7aa:	f805 6b01 	strb.w	r6, [r5], #1
 800c7ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c7b2:	e9cd 0100 	strd	r0, r1, [sp]
 800c7b6:	f7f4 f991 	bl	8000adc <__aeabi_dcmplt>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d163      	bne.n	800c886 <_dtoa_r+0x5de>
 800c7be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	4937      	ldr	r1, [pc, #220]	; (800c8a4 <_dtoa_r+0x5fc>)
 800c7c6:	f7f3 fd5f 	bl	8000288 <__aeabi_dsub>
 800c7ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c7ce:	f7f4 f985 	bl	8000adc <__aeabi_dcmplt>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	f040 80b7 	bne.w	800c946 <_dtoa_r+0x69e>
 800c7d8:	eba5 030b 	sub.w	r3, r5, fp
 800c7dc:	429f      	cmp	r7, r3
 800c7de:	f77f af7c 	ble.w	800c6da <_dtoa_r+0x432>
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	4b30      	ldr	r3, [pc, #192]	; (800c8a8 <_dtoa_r+0x600>)
 800c7e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c7ea:	f7f3 ff05 	bl	80005f8 <__aeabi_dmul>
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c7f4:	4b2c      	ldr	r3, [pc, #176]	; (800c8a8 <_dtoa_r+0x600>)
 800c7f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7fa:	f7f3 fefd 	bl	80005f8 <__aeabi_dmul>
 800c7fe:	e9cd 0100 	strd	r0, r1, [sp]
 800c802:	e7c4      	b.n	800c78e <_dtoa_r+0x4e6>
 800c804:	462a      	mov	r2, r5
 800c806:	4633      	mov	r3, r6
 800c808:	f7f3 fef6 	bl	80005f8 <__aeabi_dmul>
 800c80c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c810:	eb0b 0507 	add.w	r5, fp, r7
 800c814:	465e      	mov	r6, fp
 800c816:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c81a:	f7f4 f99d 	bl	8000b58 <__aeabi_d2iz>
 800c81e:	4607      	mov	r7, r0
 800c820:	f7f3 fe80 	bl	8000524 <__aeabi_i2d>
 800c824:	3730      	adds	r7, #48	; 0x30
 800c826:	4602      	mov	r2, r0
 800c828:	460b      	mov	r3, r1
 800c82a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c82e:	f7f3 fd2b 	bl	8000288 <__aeabi_dsub>
 800c832:	f806 7b01 	strb.w	r7, [r6], #1
 800c836:	42ae      	cmp	r6, r5
 800c838:	e9cd 0100 	strd	r0, r1, [sp]
 800c83c:	f04f 0200 	mov.w	r2, #0
 800c840:	d126      	bne.n	800c890 <_dtoa_r+0x5e8>
 800c842:	4b1c      	ldr	r3, [pc, #112]	; (800c8b4 <_dtoa_r+0x60c>)
 800c844:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c848:	f7f3 fd20 	bl	800028c <__adddf3>
 800c84c:	4602      	mov	r2, r0
 800c84e:	460b      	mov	r3, r1
 800c850:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c854:	f7f4 f960 	bl	8000b18 <__aeabi_dcmpgt>
 800c858:	2800      	cmp	r0, #0
 800c85a:	d174      	bne.n	800c946 <_dtoa_r+0x69e>
 800c85c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c860:	2000      	movs	r0, #0
 800c862:	4914      	ldr	r1, [pc, #80]	; (800c8b4 <_dtoa_r+0x60c>)
 800c864:	f7f3 fd10 	bl	8000288 <__aeabi_dsub>
 800c868:	4602      	mov	r2, r0
 800c86a:	460b      	mov	r3, r1
 800c86c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c870:	f7f4 f934 	bl	8000adc <__aeabi_dcmplt>
 800c874:	2800      	cmp	r0, #0
 800c876:	f43f af30 	beq.w	800c6da <_dtoa_r+0x432>
 800c87a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c87e:	2b30      	cmp	r3, #48	; 0x30
 800c880:	f105 32ff 	add.w	r2, r5, #4294967295
 800c884:	d002      	beq.n	800c88c <_dtoa_r+0x5e4>
 800c886:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c88a:	e04a      	b.n	800c922 <_dtoa_r+0x67a>
 800c88c:	4615      	mov	r5, r2
 800c88e:	e7f4      	b.n	800c87a <_dtoa_r+0x5d2>
 800c890:	4b05      	ldr	r3, [pc, #20]	; (800c8a8 <_dtoa_r+0x600>)
 800c892:	f7f3 feb1 	bl	80005f8 <__aeabi_dmul>
 800c896:	e9cd 0100 	strd	r0, r1, [sp]
 800c89a:	e7bc      	b.n	800c816 <_dtoa_r+0x56e>
 800c89c:	0800eef8 	.word	0x0800eef8
 800c8a0:	0800eed0 	.word	0x0800eed0
 800c8a4:	3ff00000 	.word	0x3ff00000
 800c8a8:	40240000 	.word	0x40240000
 800c8ac:	401c0000 	.word	0x401c0000
 800c8b0:	40140000 	.word	0x40140000
 800c8b4:	3fe00000 	.word	0x3fe00000
 800c8b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c8bc:	465d      	mov	r5, fp
 800c8be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	4639      	mov	r1, r7
 800c8c6:	f7f3 ffc1 	bl	800084c <__aeabi_ddiv>
 800c8ca:	f7f4 f945 	bl	8000b58 <__aeabi_d2iz>
 800c8ce:	4680      	mov	r8, r0
 800c8d0:	f7f3 fe28 	bl	8000524 <__aeabi_i2d>
 800c8d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8d8:	f7f3 fe8e 	bl	80005f8 <__aeabi_dmul>
 800c8dc:	4602      	mov	r2, r0
 800c8de:	460b      	mov	r3, r1
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	4639      	mov	r1, r7
 800c8e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c8e8:	f7f3 fcce 	bl	8000288 <__aeabi_dsub>
 800c8ec:	f805 6b01 	strb.w	r6, [r5], #1
 800c8f0:	eba5 060b 	sub.w	r6, r5, fp
 800c8f4:	45b1      	cmp	r9, r6
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	d139      	bne.n	800c970 <_dtoa_r+0x6c8>
 800c8fc:	f7f3 fcc6 	bl	800028c <__adddf3>
 800c900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c904:	4606      	mov	r6, r0
 800c906:	460f      	mov	r7, r1
 800c908:	f7f4 f906 	bl	8000b18 <__aeabi_dcmpgt>
 800c90c:	b9c8      	cbnz	r0, 800c942 <_dtoa_r+0x69a>
 800c90e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c912:	4630      	mov	r0, r6
 800c914:	4639      	mov	r1, r7
 800c916:	f7f4 f8d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c91a:	b110      	cbz	r0, 800c922 <_dtoa_r+0x67a>
 800c91c:	f018 0f01 	tst.w	r8, #1
 800c920:	d10f      	bne.n	800c942 <_dtoa_r+0x69a>
 800c922:	9904      	ldr	r1, [sp, #16]
 800c924:	4620      	mov	r0, r4
 800c926:	f000 fdff 	bl	800d528 <_Bfree>
 800c92a:	2300      	movs	r3, #0
 800c92c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c92e:	702b      	strb	r3, [r5, #0]
 800c930:	f10a 0301 	add.w	r3, sl, #1
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c938:	2b00      	cmp	r3, #0
 800c93a:	f000 8241 	beq.w	800cdc0 <_dtoa_r+0xb18>
 800c93e:	601d      	str	r5, [r3, #0]
 800c940:	e23e      	b.n	800cdc0 <_dtoa_r+0xb18>
 800c942:	f8cd a020 	str.w	sl, [sp, #32]
 800c946:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c94a:	2a39      	cmp	r2, #57	; 0x39
 800c94c:	f105 33ff 	add.w	r3, r5, #4294967295
 800c950:	d108      	bne.n	800c964 <_dtoa_r+0x6bc>
 800c952:	459b      	cmp	fp, r3
 800c954:	d10a      	bne.n	800c96c <_dtoa_r+0x6c4>
 800c956:	9b08      	ldr	r3, [sp, #32]
 800c958:	3301      	adds	r3, #1
 800c95a:	9308      	str	r3, [sp, #32]
 800c95c:	2330      	movs	r3, #48	; 0x30
 800c95e:	f88b 3000 	strb.w	r3, [fp]
 800c962:	465b      	mov	r3, fp
 800c964:	781a      	ldrb	r2, [r3, #0]
 800c966:	3201      	adds	r2, #1
 800c968:	701a      	strb	r2, [r3, #0]
 800c96a:	e78c      	b.n	800c886 <_dtoa_r+0x5de>
 800c96c:	461d      	mov	r5, r3
 800c96e:	e7ea      	b.n	800c946 <_dtoa_r+0x69e>
 800c970:	2200      	movs	r2, #0
 800c972:	4b9b      	ldr	r3, [pc, #620]	; (800cbe0 <_dtoa_r+0x938>)
 800c974:	f7f3 fe40 	bl	80005f8 <__aeabi_dmul>
 800c978:	2200      	movs	r2, #0
 800c97a:	2300      	movs	r3, #0
 800c97c:	4606      	mov	r6, r0
 800c97e:	460f      	mov	r7, r1
 800c980:	f7f4 f8a2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c984:	2800      	cmp	r0, #0
 800c986:	d09a      	beq.n	800c8be <_dtoa_r+0x616>
 800c988:	e7cb      	b.n	800c922 <_dtoa_r+0x67a>
 800c98a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c98c:	2a00      	cmp	r2, #0
 800c98e:	f000 808b 	beq.w	800caa8 <_dtoa_r+0x800>
 800c992:	9a06      	ldr	r2, [sp, #24]
 800c994:	2a01      	cmp	r2, #1
 800c996:	dc6e      	bgt.n	800ca76 <_dtoa_r+0x7ce>
 800c998:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c99a:	2a00      	cmp	r2, #0
 800c99c:	d067      	beq.n	800ca6e <_dtoa_r+0x7c6>
 800c99e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c9a2:	9f07      	ldr	r7, [sp, #28]
 800c9a4:	9d05      	ldr	r5, [sp, #20]
 800c9a6:	9a05      	ldr	r2, [sp, #20]
 800c9a8:	2101      	movs	r1, #1
 800c9aa:	441a      	add	r2, r3
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	9205      	str	r2, [sp, #20]
 800c9b0:	4498      	add	r8, r3
 800c9b2:	f000 fe97 	bl	800d6e4 <__i2b>
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	2d00      	cmp	r5, #0
 800c9ba:	dd0c      	ble.n	800c9d6 <_dtoa_r+0x72e>
 800c9bc:	f1b8 0f00 	cmp.w	r8, #0
 800c9c0:	dd09      	ble.n	800c9d6 <_dtoa_r+0x72e>
 800c9c2:	4545      	cmp	r5, r8
 800c9c4:	9a05      	ldr	r2, [sp, #20]
 800c9c6:	462b      	mov	r3, r5
 800c9c8:	bfa8      	it	ge
 800c9ca:	4643      	movge	r3, r8
 800c9cc:	1ad2      	subs	r2, r2, r3
 800c9ce:	9205      	str	r2, [sp, #20]
 800c9d0:	1aed      	subs	r5, r5, r3
 800c9d2:	eba8 0803 	sub.w	r8, r8, r3
 800c9d6:	9b07      	ldr	r3, [sp, #28]
 800c9d8:	b1eb      	cbz	r3, 800ca16 <_dtoa_r+0x76e>
 800c9da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d067      	beq.n	800cab0 <_dtoa_r+0x808>
 800c9e0:	b18f      	cbz	r7, 800ca06 <_dtoa_r+0x75e>
 800c9e2:	4631      	mov	r1, r6
 800c9e4:	463a      	mov	r2, r7
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f000 ff1c 	bl	800d824 <__pow5mult>
 800c9ec:	9a04      	ldr	r2, [sp, #16]
 800c9ee:	4601      	mov	r1, r0
 800c9f0:	4606      	mov	r6, r0
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	f000 fe7f 	bl	800d6f6 <__multiply>
 800c9f8:	9904      	ldr	r1, [sp, #16]
 800c9fa:	9008      	str	r0, [sp, #32]
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f000 fd93 	bl	800d528 <_Bfree>
 800ca02:	9b08      	ldr	r3, [sp, #32]
 800ca04:	9304      	str	r3, [sp, #16]
 800ca06:	9b07      	ldr	r3, [sp, #28]
 800ca08:	1bda      	subs	r2, r3, r7
 800ca0a:	d004      	beq.n	800ca16 <_dtoa_r+0x76e>
 800ca0c:	9904      	ldr	r1, [sp, #16]
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f000 ff08 	bl	800d824 <__pow5mult>
 800ca14:	9004      	str	r0, [sp, #16]
 800ca16:	2101      	movs	r1, #1
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f000 fe63 	bl	800d6e4 <__i2b>
 800ca1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca20:	4607      	mov	r7, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f000 81d0 	beq.w	800cdc8 <_dtoa_r+0xb20>
 800ca28:	461a      	mov	r2, r3
 800ca2a:	4601      	mov	r1, r0
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f000 fef9 	bl	800d824 <__pow5mult>
 800ca32:	9b06      	ldr	r3, [sp, #24]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	4607      	mov	r7, r0
 800ca38:	dc40      	bgt.n	800cabc <_dtoa_r+0x814>
 800ca3a:	9b00      	ldr	r3, [sp, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d139      	bne.n	800cab4 <_dtoa_r+0x80c>
 800ca40:	9b01      	ldr	r3, [sp, #4]
 800ca42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d136      	bne.n	800cab8 <_dtoa_r+0x810>
 800ca4a:	9b01      	ldr	r3, [sp, #4]
 800ca4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca50:	0d1b      	lsrs	r3, r3, #20
 800ca52:	051b      	lsls	r3, r3, #20
 800ca54:	b12b      	cbz	r3, 800ca62 <_dtoa_r+0x7ba>
 800ca56:	9b05      	ldr	r3, [sp, #20]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	9305      	str	r3, [sp, #20]
 800ca5c:	f108 0801 	add.w	r8, r8, #1
 800ca60:	2301      	movs	r3, #1
 800ca62:	9307      	str	r3, [sp, #28]
 800ca64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d12a      	bne.n	800cac0 <_dtoa_r+0x818>
 800ca6a:	2001      	movs	r0, #1
 800ca6c:	e030      	b.n	800cad0 <_dtoa_r+0x828>
 800ca6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ca74:	e795      	b.n	800c9a2 <_dtoa_r+0x6fa>
 800ca76:	9b07      	ldr	r3, [sp, #28]
 800ca78:	f109 37ff 	add.w	r7, r9, #4294967295
 800ca7c:	42bb      	cmp	r3, r7
 800ca7e:	bfbf      	itttt	lt
 800ca80:	9b07      	ldrlt	r3, [sp, #28]
 800ca82:	9707      	strlt	r7, [sp, #28]
 800ca84:	1afa      	sublt	r2, r7, r3
 800ca86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ca88:	bfbb      	ittet	lt
 800ca8a:	189b      	addlt	r3, r3, r2
 800ca8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ca8e:	1bdf      	subge	r7, r3, r7
 800ca90:	2700      	movlt	r7, #0
 800ca92:	f1b9 0f00 	cmp.w	r9, #0
 800ca96:	bfb5      	itete	lt
 800ca98:	9b05      	ldrlt	r3, [sp, #20]
 800ca9a:	9d05      	ldrge	r5, [sp, #20]
 800ca9c:	eba3 0509 	sublt.w	r5, r3, r9
 800caa0:	464b      	movge	r3, r9
 800caa2:	bfb8      	it	lt
 800caa4:	2300      	movlt	r3, #0
 800caa6:	e77e      	b.n	800c9a6 <_dtoa_r+0x6fe>
 800caa8:	9f07      	ldr	r7, [sp, #28]
 800caaa:	9d05      	ldr	r5, [sp, #20]
 800caac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800caae:	e783      	b.n	800c9b8 <_dtoa_r+0x710>
 800cab0:	9a07      	ldr	r2, [sp, #28]
 800cab2:	e7ab      	b.n	800ca0c <_dtoa_r+0x764>
 800cab4:	2300      	movs	r3, #0
 800cab6:	e7d4      	b.n	800ca62 <_dtoa_r+0x7ba>
 800cab8:	9b00      	ldr	r3, [sp, #0]
 800caba:	e7d2      	b.n	800ca62 <_dtoa_r+0x7ba>
 800cabc:	2300      	movs	r3, #0
 800cabe:	9307      	str	r3, [sp, #28]
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cac6:	6918      	ldr	r0, [r3, #16]
 800cac8:	f000 fdbe 	bl	800d648 <__hi0bits>
 800cacc:	f1c0 0020 	rsb	r0, r0, #32
 800cad0:	4440      	add	r0, r8
 800cad2:	f010 001f 	ands.w	r0, r0, #31
 800cad6:	d047      	beq.n	800cb68 <_dtoa_r+0x8c0>
 800cad8:	f1c0 0320 	rsb	r3, r0, #32
 800cadc:	2b04      	cmp	r3, #4
 800cade:	dd3b      	ble.n	800cb58 <_dtoa_r+0x8b0>
 800cae0:	9b05      	ldr	r3, [sp, #20]
 800cae2:	f1c0 001c 	rsb	r0, r0, #28
 800cae6:	4403      	add	r3, r0
 800cae8:	9305      	str	r3, [sp, #20]
 800caea:	4405      	add	r5, r0
 800caec:	4480      	add	r8, r0
 800caee:	9b05      	ldr	r3, [sp, #20]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dd05      	ble.n	800cb00 <_dtoa_r+0x858>
 800caf4:	461a      	mov	r2, r3
 800caf6:	9904      	ldr	r1, [sp, #16]
 800caf8:	4620      	mov	r0, r4
 800cafa:	f000 fee1 	bl	800d8c0 <__lshift>
 800cafe:	9004      	str	r0, [sp, #16]
 800cb00:	f1b8 0f00 	cmp.w	r8, #0
 800cb04:	dd05      	ble.n	800cb12 <_dtoa_r+0x86a>
 800cb06:	4639      	mov	r1, r7
 800cb08:	4642      	mov	r2, r8
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f000 fed8 	bl	800d8c0 <__lshift>
 800cb10:	4607      	mov	r7, r0
 800cb12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb14:	b353      	cbz	r3, 800cb6c <_dtoa_r+0x8c4>
 800cb16:	4639      	mov	r1, r7
 800cb18:	9804      	ldr	r0, [sp, #16]
 800cb1a:	f000 ff25 	bl	800d968 <__mcmp>
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	da24      	bge.n	800cb6c <_dtoa_r+0x8c4>
 800cb22:	2300      	movs	r3, #0
 800cb24:	220a      	movs	r2, #10
 800cb26:	9904      	ldr	r1, [sp, #16]
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f000 fd14 	bl	800d556 <__multadd>
 800cb2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb30:	9004      	str	r0, [sp, #16]
 800cb32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	f000 814d 	beq.w	800cdd6 <_dtoa_r+0xb2e>
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	4631      	mov	r1, r6
 800cb40:	220a      	movs	r2, #10
 800cb42:	4620      	mov	r0, r4
 800cb44:	f000 fd07 	bl	800d556 <__multadd>
 800cb48:	9b02      	ldr	r3, [sp, #8]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	4606      	mov	r6, r0
 800cb4e:	dc4f      	bgt.n	800cbf0 <_dtoa_r+0x948>
 800cb50:	9b06      	ldr	r3, [sp, #24]
 800cb52:	2b02      	cmp	r3, #2
 800cb54:	dd4c      	ble.n	800cbf0 <_dtoa_r+0x948>
 800cb56:	e011      	b.n	800cb7c <_dtoa_r+0x8d4>
 800cb58:	d0c9      	beq.n	800caee <_dtoa_r+0x846>
 800cb5a:	9a05      	ldr	r2, [sp, #20]
 800cb5c:	331c      	adds	r3, #28
 800cb5e:	441a      	add	r2, r3
 800cb60:	9205      	str	r2, [sp, #20]
 800cb62:	441d      	add	r5, r3
 800cb64:	4498      	add	r8, r3
 800cb66:	e7c2      	b.n	800caee <_dtoa_r+0x846>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	e7f6      	b.n	800cb5a <_dtoa_r+0x8b2>
 800cb6c:	f1b9 0f00 	cmp.w	r9, #0
 800cb70:	dc38      	bgt.n	800cbe4 <_dtoa_r+0x93c>
 800cb72:	9b06      	ldr	r3, [sp, #24]
 800cb74:	2b02      	cmp	r3, #2
 800cb76:	dd35      	ble.n	800cbe4 <_dtoa_r+0x93c>
 800cb78:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb7c:	9b02      	ldr	r3, [sp, #8]
 800cb7e:	b963      	cbnz	r3, 800cb9a <_dtoa_r+0x8f2>
 800cb80:	4639      	mov	r1, r7
 800cb82:	2205      	movs	r2, #5
 800cb84:	4620      	mov	r0, r4
 800cb86:	f000 fce6 	bl	800d556 <__multadd>
 800cb8a:	4601      	mov	r1, r0
 800cb8c:	4607      	mov	r7, r0
 800cb8e:	9804      	ldr	r0, [sp, #16]
 800cb90:	f000 feea 	bl	800d968 <__mcmp>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	f73f adcc 	bgt.w	800c732 <_dtoa_r+0x48a>
 800cb9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb9c:	465d      	mov	r5, fp
 800cb9e:	ea6f 0a03 	mvn.w	sl, r3
 800cba2:	f04f 0900 	mov.w	r9, #0
 800cba6:	4639      	mov	r1, r7
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f000 fcbd 	bl	800d528 <_Bfree>
 800cbae:	2e00      	cmp	r6, #0
 800cbb0:	f43f aeb7 	beq.w	800c922 <_dtoa_r+0x67a>
 800cbb4:	f1b9 0f00 	cmp.w	r9, #0
 800cbb8:	d005      	beq.n	800cbc6 <_dtoa_r+0x91e>
 800cbba:	45b1      	cmp	r9, r6
 800cbbc:	d003      	beq.n	800cbc6 <_dtoa_r+0x91e>
 800cbbe:	4649      	mov	r1, r9
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f000 fcb1 	bl	800d528 <_Bfree>
 800cbc6:	4631      	mov	r1, r6
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f000 fcad 	bl	800d528 <_Bfree>
 800cbce:	e6a8      	b.n	800c922 <_dtoa_r+0x67a>
 800cbd0:	2700      	movs	r7, #0
 800cbd2:	463e      	mov	r6, r7
 800cbd4:	e7e1      	b.n	800cb9a <_dtoa_r+0x8f2>
 800cbd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cbda:	463e      	mov	r6, r7
 800cbdc:	e5a9      	b.n	800c732 <_dtoa_r+0x48a>
 800cbde:	bf00      	nop
 800cbe0:	40240000 	.word	0x40240000
 800cbe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbe6:	f8cd 9008 	str.w	r9, [sp, #8]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f000 80fa 	beq.w	800cde4 <_dtoa_r+0xb3c>
 800cbf0:	2d00      	cmp	r5, #0
 800cbf2:	dd05      	ble.n	800cc00 <_dtoa_r+0x958>
 800cbf4:	4631      	mov	r1, r6
 800cbf6:	462a      	mov	r2, r5
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f000 fe61 	bl	800d8c0 <__lshift>
 800cbfe:	4606      	mov	r6, r0
 800cc00:	9b07      	ldr	r3, [sp, #28]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d04c      	beq.n	800cca0 <_dtoa_r+0x9f8>
 800cc06:	6871      	ldr	r1, [r6, #4]
 800cc08:	4620      	mov	r0, r4
 800cc0a:	f000 fc59 	bl	800d4c0 <_Balloc>
 800cc0e:	6932      	ldr	r2, [r6, #16]
 800cc10:	3202      	adds	r2, #2
 800cc12:	4605      	mov	r5, r0
 800cc14:	0092      	lsls	r2, r2, #2
 800cc16:	f106 010c 	add.w	r1, r6, #12
 800cc1a:	300c      	adds	r0, #12
 800cc1c:	f7fd fd70 	bl	800a700 <memcpy>
 800cc20:	2201      	movs	r2, #1
 800cc22:	4629      	mov	r1, r5
 800cc24:	4620      	mov	r0, r4
 800cc26:	f000 fe4b 	bl	800d8c0 <__lshift>
 800cc2a:	9b00      	ldr	r3, [sp, #0]
 800cc2c:	f8cd b014 	str.w	fp, [sp, #20]
 800cc30:	f003 0301 	and.w	r3, r3, #1
 800cc34:	46b1      	mov	r9, r6
 800cc36:	9307      	str	r3, [sp, #28]
 800cc38:	4606      	mov	r6, r0
 800cc3a:	4639      	mov	r1, r7
 800cc3c:	9804      	ldr	r0, [sp, #16]
 800cc3e:	f7ff faa5 	bl	800c18c <quorem>
 800cc42:	4649      	mov	r1, r9
 800cc44:	4605      	mov	r5, r0
 800cc46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cc4a:	9804      	ldr	r0, [sp, #16]
 800cc4c:	f000 fe8c 	bl	800d968 <__mcmp>
 800cc50:	4632      	mov	r2, r6
 800cc52:	9000      	str	r0, [sp, #0]
 800cc54:	4639      	mov	r1, r7
 800cc56:	4620      	mov	r0, r4
 800cc58:	f000 fea0 	bl	800d99c <__mdiff>
 800cc5c:	68c3      	ldr	r3, [r0, #12]
 800cc5e:	4602      	mov	r2, r0
 800cc60:	bb03      	cbnz	r3, 800cca4 <_dtoa_r+0x9fc>
 800cc62:	4601      	mov	r1, r0
 800cc64:	9008      	str	r0, [sp, #32]
 800cc66:	9804      	ldr	r0, [sp, #16]
 800cc68:	f000 fe7e 	bl	800d968 <__mcmp>
 800cc6c:	9a08      	ldr	r2, [sp, #32]
 800cc6e:	4603      	mov	r3, r0
 800cc70:	4611      	mov	r1, r2
 800cc72:	4620      	mov	r0, r4
 800cc74:	9308      	str	r3, [sp, #32]
 800cc76:	f000 fc57 	bl	800d528 <_Bfree>
 800cc7a:	9b08      	ldr	r3, [sp, #32]
 800cc7c:	b9a3      	cbnz	r3, 800cca8 <_dtoa_r+0xa00>
 800cc7e:	9a06      	ldr	r2, [sp, #24]
 800cc80:	b992      	cbnz	r2, 800cca8 <_dtoa_r+0xa00>
 800cc82:	9a07      	ldr	r2, [sp, #28]
 800cc84:	b982      	cbnz	r2, 800cca8 <_dtoa_r+0xa00>
 800cc86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cc8a:	d029      	beq.n	800cce0 <_dtoa_r+0xa38>
 800cc8c:	9b00      	ldr	r3, [sp, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	dd01      	ble.n	800cc96 <_dtoa_r+0x9ee>
 800cc92:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cc96:	9b05      	ldr	r3, [sp, #20]
 800cc98:	1c5d      	adds	r5, r3, #1
 800cc9a:	f883 8000 	strb.w	r8, [r3]
 800cc9e:	e782      	b.n	800cba6 <_dtoa_r+0x8fe>
 800cca0:	4630      	mov	r0, r6
 800cca2:	e7c2      	b.n	800cc2a <_dtoa_r+0x982>
 800cca4:	2301      	movs	r3, #1
 800cca6:	e7e3      	b.n	800cc70 <_dtoa_r+0x9c8>
 800cca8:	9a00      	ldr	r2, [sp, #0]
 800ccaa:	2a00      	cmp	r2, #0
 800ccac:	db04      	blt.n	800ccb8 <_dtoa_r+0xa10>
 800ccae:	d125      	bne.n	800ccfc <_dtoa_r+0xa54>
 800ccb0:	9a06      	ldr	r2, [sp, #24]
 800ccb2:	bb1a      	cbnz	r2, 800ccfc <_dtoa_r+0xa54>
 800ccb4:	9a07      	ldr	r2, [sp, #28]
 800ccb6:	bb0a      	cbnz	r2, 800ccfc <_dtoa_r+0xa54>
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	ddec      	ble.n	800cc96 <_dtoa_r+0x9ee>
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	9904      	ldr	r1, [sp, #16]
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f000 fdfd 	bl	800d8c0 <__lshift>
 800ccc6:	4639      	mov	r1, r7
 800ccc8:	9004      	str	r0, [sp, #16]
 800ccca:	f000 fe4d 	bl	800d968 <__mcmp>
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	dc03      	bgt.n	800ccda <_dtoa_r+0xa32>
 800ccd2:	d1e0      	bne.n	800cc96 <_dtoa_r+0x9ee>
 800ccd4:	f018 0f01 	tst.w	r8, #1
 800ccd8:	d0dd      	beq.n	800cc96 <_dtoa_r+0x9ee>
 800ccda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ccde:	d1d8      	bne.n	800cc92 <_dtoa_r+0x9ea>
 800cce0:	9b05      	ldr	r3, [sp, #20]
 800cce2:	9a05      	ldr	r2, [sp, #20]
 800cce4:	1c5d      	adds	r5, r3, #1
 800cce6:	2339      	movs	r3, #57	; 0x39
 800cce8:	7013      	strb	r3, [r2, #0]
 800ccea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ccee:	2b39      	cmp	r3, #57	; 0x39
 800ccf0:	f105 32ff 	add.w	r2, r5, #4294967295
 800ccf4:	d04f      	beq.n	800cd96 <_dtoa_r+0xaee>
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	7013      	strb	r3, [r2, #0]
 800ccfa:	e754      	b.n	800cba6 <_dtoa_r+0x8fe>
 800ccfc:	9a05      	ldr	r2, [sp, #20]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f102 0501 	add.w	r5, r2, #1
 800cd04:	dd06      	ble.n	800cd14 <_dtoa_r+0xa6c>
 800cd06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cd0a:	d0e9      	beq.n	800cce0 <_dtoa_r+0xa38>
 800cd0c:	f108 0801 	add.w	r8, r8, #1
 800cd10:	9b05      	ldr	r3, [sp, #20]
 800cd12:	e7c2      	b.n	800cc9a <_dtoa_r+0x9f2>
 800cd14:	9a02      	ldr	r2, [sp, #8]
 800cd16:	f805 8c01 	strb.w	r8, [r5, #-1]
 800cd1a:	eba5 030b 	sub.w	r3, r5, fp
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d021      	beq.n	800cd66 <_dtoa_r+0xabe>
 800cd22:	2300      	movs	r3, #0
 800cd24:	220a      	movs	r2, #10
 800cd26:	9904      	ldr	r1, [sp, #16]
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f000 fc14 	bl	800d556 <__multadd>
 800cd2e:	45b1      	cmp	r9, r6
 800cd30:	9004      	str	r0, [sp, #16]
 800cd32:	f04f 0300 	mov.w	r3, #0
 800cd36:	f04f 020a 	mov.w	r2, #10
 800cd3a:	4649      	mov	r1, r9
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	d105      	bne.n	800cd4c <_dtoa_r+0xaa4>
 800cd40:	f000 fc09 	bl	800d556 <__multadd>
 800cd44:	4681      	mov	r9, r0
 800cd46:	4606      	mov	r6, r0
 800cd48:	9505      	str	r5, [sp, #20]
 800cd4a:	e776      	b.n	800cc3a <_dtoa_r+0x992>
 800cd4c:	f000 fc03 	bl	800d556 <__multadd>
 800cd50:	4631      	mov	r1, r6
 800cd52:	4681      	mov	r9, r0
 800cd54:	2300      	movs	r3, #0
 800cd56:	220a      	movs	r2, #10
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f000 fbfc 	bl	800d556 <__multadd>
 800cd5e:	4606      	mov	r6, r0
 800cd60:	e7f2      	b.n	800cd48 <_dtoa_r+0xaa0>
 800cd62:	f04f 0900 	mov.w	r9, #0
 800cd66:	2201      	movs	r2, #1
 800cd68:	9904      	ldr	r1, [sp, #16]
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f000 fda8 	bl	800d8c0 <__lshift>
 800cd70:	4639      	mov	r1, r7
 800cd72:	9004      	str	r0, [sp, #16]
 800cd74:	f000 fdf8 	bl	800d968 <__mcmp>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	dcb6      	bgt.n	800ccea <_dtoa_r+0xa42>
 800cd7c:	d102      	bne.n	800cd84 <_dtoa_r+0xadc>
 800cd7e:	f018 0f01 	tst.w	r8, #1
 800cd82:	d1b2      	bne.n	800ccea <_dtoa_r+0xa42>
 800cd84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd88:	2b30      	cmp	r3, #48	; 0x30
 800cd8a:	f105 32ff 	add.w	r2, r5, #4294967295
 800cd8e:	f47f af0a 	bne.w	800cba6 <_dtoa_r+0x8fe>
 800cd92:	4615      	mov	r5, r2
 800cd94:	e7f6      	b.n	800cd84 <_dtoa_r+0xadc>
 800cd96:	4593      	cmp	fp, r2
 800cd98:	d105      	bne.n	800cda6 <_dtoa_r+0xafe>
 800cd9a:	2331      	movs	r3, #49	; 0x31
 800cd9c:	f10a 0a01 	add.w	sl, sl, #1
 800cda0:	f88b 3000 	strb.w	r3, [fp]
 800cda4:	e6ff      	b.n	800cba6 <_dtoa_r+0x8fe>
 800cda6:	4615      	mov	r5, r2
 800cda8:	e79f      	b.n	800ccea <_dtoa_r+0xa42>
 800cdaa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ce10 <_dtoa_r+0xb68>
 800cdae:	e007      	b.n	800cdc0 <_dtoa_r+0xb18>
 800cdb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdb2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ce14 <_dtoa_r+0xb6c>
 800cdb6:	b11b      	cbz	r3, 800cdc0 <_dtoa_r+0xb18>
 800cdb8:	f10b 0308 	add.w	r3, fp, #8
 800cdbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cdbe:	6013      	str	r3, [r2, #0]
 800cdc0:	4658      	mov	r0, fp
 800cdc2:	b017      	add	sp, #92	; 0x5c
 800cdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc8:	9b06      	ldr	r3, [sp, #24]
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	f77f ae35 	ble.w	800ca3a <_dtoa_r+0x792>
 800cdd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdd2:	9307      	str	r3, [sp, #28]
 800cdd4:	e649      	b.n	800ca6a <_dtoa_r+0x7c2>
 800cdd6:	9b02      	ldr	r3, [sp, #8]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	dc03      	bgt.n	800cde4 <_dtoa_r+0xb3c>
 800cddc:	9b06      	ldr	r3, [sp, #24]
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	f73f aecc 	bgt.w	800cb7c <_dtoa_r+0x8d4>
 800cde4:	465d      	mov	r5, fp
 800cde6:	4639      	mov	r1, r7
 800cde8:	9804      	ldr	r0, [sp, #16]
 800cdea:	f7ff f9cf 	bl	800c18c <quorem>
 800cdee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cdf2:	f805 8b01 	strb.w	r8, [r5], #1
 800cdf6:	9a02      	ldr	r2, [sp, #8]
 800cdf8:	eba5 030b 	sub.w	r3, r5, fp
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	ddb0      	ble.n	800cd62 <_dtoa_r+0xaba>
 800ce00:	2300      	movs	r3, #0
 800ce02:	220a      	movs	r2, #10
 800ce04:	9904      	ldr	r1, [sp, #16]
 800ce06:	4620      	mov	r0, r4
 800ce08:	f000 fba5 	bl	800d556 <__multadd>
 800ce0c:	9004      	str	r0, [sp, #16]
 800ce0e:	e7ea      	b.n	800cde6 <_dtoa_r+0xb3e>
 800ce10:	0800ee38 	.word	0x0800ee38
 800ce14:	0800eeb8 	.word	0x0800eeb8

0800ce18 <rshift>:
 800ce18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce1a:	6906      	ldr	r6, [r0, #16]
 800ce1c:	114b      	asrs	r3, r1, #5
 800ce1e:	429e      	cmp	r6, r3
 800ce20:	f100 0414 	add.w	r4, r0, #20
 800ce24:	dd30      	ble.n	800ce88 <rshift+0x70>
 800ce26:	f011 011f 	ands.w	r1, r1, #31
 800ce2a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ce2e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ce32:	d108      	bne.n	800ce46 <rshift+0x2e>
 800ce34:	4621      	mov	r1, r4
 800ce36:	42b2      	cmp	r2, r6
 800ce38:	460b      	mov	r3, r1
 800ce3a:	d211      	bcs.n	800ce60 <rshift+0x48>
 800ce3c:	f852 3b04 	ldr.w	r3, [r2], #4
 800ce40:	f841 3b04 	str.w	r3, [r1], #4
 800ce44:	e7f7      	b.n	800ce36 <rshift+0x1e>
 800ce46:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ce4a:	f1c1 0c20 	rsb	ip, r1, #32
 800ce4e:	40cd      	lsrs	r5, r1
 800ce50:	3204      	adds	r2, #4
 800ce52:	4623      	mov	r3, r4
 800ce54:	42b2      	cmp	r2, r6
 800ce56:	4617      	mov	r7, r2
 800ce58:	d30c      	bcc.n	800ce74 <rshift+0x5c>
 800ce5a:	601d      	str	r5, [r3, #0]
 800ce5c:	b105      	cbz	r5, 800ce60 <rshift+0x48>
 800ce5e:	3304      	adds	r3, #4
 800ce60:	1b1a      	subs	r2, r3, r4
 800ce62:	42a3      	cmp	r3, r4
 800ce64:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce68:	bf08      	it	eq
 800ce6a:	2300      	moveq	r3, #0
 800ce6c:	6102      	str	r2, [r0, #16]
 800ce6e:	bf08      	it	eq
 800ce70:	6143      	streq	r3, [r0, #20]
 800ce72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce74:	683f      	ldr	r7, [r7, #0]
 800ce76:	fa07 f70c 	lsl.w	r7, r7, ip
 800ce7a:	433d      	orrs	r5, r7
 800ce7c:	f843 5b04 	str.w	r5, [r3], #4
 800ce80:	f852 5b04 	ldr.w	r5, [r2], #4
 800ce84:	40cd      	lsrs	r5, r1
 800ce86:	e7e5      	b.n	800ce54 <rshift+0x3c>
 800ce88:	4623      	mov	r3, r4
 800ce8a:	e7e9      	b.n	800ce60 <rshift+0x48>

0800ce8c <__hexdig_fun>:
 800ce8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ce90:	2b09      	cmp	r3, #9
 800ce92:	d802      	bhi.n	800ce9a <__hexdig_fun+0xe>
 800ce94:	3820      	subs	r0, #32
 800ce96:	b2c0      	uxtb	r0, r0
 800ce98:	4770      	bx	lr
 800ce9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce9e:	2b05      	cmp	r3, #5
 800cea0:	d801      	bhi.n	800cea6 <__hexdig_fun+0x1a>
 800cea2:	3847      	subs	r0, #71	; 0x47
 800cea4:	e7f7      	b.n	800ce96 <__hexdig_fun+0xa>
 800cea6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ceaa:	2b05      	cmp	r3, #5
 800ceac:	d801      	bhi.n	800ceb2 <__hexdig_fun+0x26>
 800ceae:	3827      	subs	r0, #39	; 0x27
 800ceb0:	e7f1      	b.n	800ce96 <__hexdig_fun+0xa>
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	4770      	bx	lr

0800ceb6 <__gethex>:
 800ceb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceba:	b08b      	sub	sp, #44	; 0x2c
 800cebc:	468a      	mov	sl, r1
 800cebe:	9002      	str	r0, [sp, #8]
 800cec0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cec2:	9306      	str	r3, [sp, #24]
 800cec4:	4690      	mov	r8, r2
 800cec6:	f000 fad0 	bl	800d46a <__localeconv_l>
 800ceca:	6803      	ldr	r3, [r0, #0]
 800cecc:	9303      	str	r3, [sp, #12]
 800cece:	4618      	mov	r0, r3
 800ced0:	f7f3 f97e 	bl	80001d0 <strlen>
 800ced4:	9b03      	ldr	r3, [sp, #12]
 800ced6:	9001      	str	r0, [sp, #4]
 800ced8:	4403      	add	r3, r0
 800ceda:	f04f 0b00 	mov.w	fp, #0
 800cede:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cee2:	9307      	str	r3, [sp, #28]
 800cee4:	f8da 3000 	ldr.w	r3, [sl]
 800cee8:	3302      	adds	r3, #2
 800ceea:	461f      	mov	r7, r3
 800ceec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cef0:	2830      	cmp	r0, #48	; 0x30
 800cef2:	d06c      	beq.n	800cfce <__gethex+0x118>
 800cef4:	f7ff ffca 	bl	800ce8c <__hexdig_fun>
 800cef8:	4604      	mov	r4, r0
 800cefa:	2800      	cmp	r0, #0
 800cefc:	d16a      	bne.n	800cfd4 <__gethex+0x11e>
 800cefe:	9a01      	ldr	r2, [sp, #4]
 800cf00:	9903      	ldr	r1, [sp, #12]
 800cf02:	4638      	mov	r0, r7
 800cf04:	f001 f8f4 	bl	800e0f0 <strncmp>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d166      	bne.n	800cfda <__gethex+0x124>
 800cf0c:	9b01      	ldr	r3, [sp, #4]
 800cf0e:	5cf8      	ldrb	r0, [r7, r3]
 800cf10:	18fe      	adds	r6, r7, r3
 800cf12:	f7ff ffbb 	bl	800ce8c <__hexdig_fun>
 800cf16:	2800      	cmp	r0, #0
 800cf18:	d062      	beq.n	800cfe0 <__gethex+0x12a>
 800cf1a:	4633      	mov	r3, r6
 800cf1c:	7818      	ldrb	r0, [r3, #0]
 800cf1e:	2830      	cmp	r0, #48	; 0x30
 800cf20:	461f      	mov	r7, r3
 800cf22:	f103 0301 	add.w	r3, r3, #1
 800cf26:	d0f9      	beq.n	800cf1c <__gethex+0x66>
 800cf28:	f7ff ffb0 	bl	800ce8c <__hexdig_fun>
 800cf2c:	fab0 f580 	clz	r5, r0
 800cf30:	096d      	lsrs	r5, r5, #5
 800cf32:	4634      	mov	r4, r6
 800cf34:	f04f 0b01 	mov.w	fp, #1
 800cf38:	463a      	mov	r2, r7
 800cf3a:	4616      	mov	r6, r2
 800cf3c:	3201      	adds	r2, #1
 800cf3e:	7830      	ldrb	r0, [r6, #0]
 800cf40:	f7ff ffa4 	bl	800ce8c <__hexdig_fun>
 800cf44:	2800      	cmp	r0, #0
 800cf46:	d1f8      	bne.n	800cf3a <__gethex+0x84>
 800cf48:	9a01      	ldr	r2, [sp, #4]
 800cf4a:	9903      	ldr	r1, [sp, #12]
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	f001 f8cf 	bl	800e0f0 <strncmp>
 800cf52:	b950      	cbnz	r0, 800cf6a <__gethex+0xb4>
 800cf54:	b954      	cbnz	r4, 800cf6c <__gethex+0xb6>
 800cf56:	9b01      	ldr	r3, [sp, #4]
 800cf58:	18f4      	adds	r4, r6, r3
 800cf5a:	4622      	mov	r2, r4
 800cf5c:	4616      	mov	r6, r2
 800cf5e:	3201      	adds	r2, #1
 800cf60:	7830      	ldrb	r0, [r6, #0]
 800cf62:	f7ff ff93 	bl	800ce8c <__hexdig_fun>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	d1f8      	bne.n	800cf5c <__gethex+0xa6>
 800cf6a:	b10c      	cbz	r4, 800cf70 <__gethex+0xba>
 800cf6c:	1ba4      	subs	r4, r4, r6
 800cf6e:	00a4      	lsls	r4, r4, #2
 800cf70:	7833      	ldrb	r3, [r6, #0]
 800cf72:	2b50      	cmp	r3, #80	; 0x50
 800cf74:	d001      	beq.n	800cf7a <__gethex+0xc4>
 800cf76:	2b70      	cmp	r3, #112	; 0x70
 800cf78:	d140      	bne.n	800cffc <__gethex+0x146>
 800cf7a:	7873      	ldrb	r3, [r6, #1]
 800cf7c:	2b2b      	cmp	r3, #43	; 0x2b
 800cf7e:	d031      	beq.n	800cfe4 <__gethex+0x12e>
 800cf80:	2b2d      	cmp	r3, #45	; 0x2d
 800cf82:	d033      	beq.n	800cfec <__gethex+0x136>
 800cf84:	1c71      	adds	r1, r6, #1
 800cf86:	f04f 0900 	mov.w	r9, #0
 800cf8a:	7808      	ldrb	r0, [r1, #0]
 800cf8c:	f7ff ff7e 	bl	800ce8c <__hexdig_fun>
 800cf90:	1e43      	subs	r3, r0, #1
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	2b18      	cmp	r3, #24
 800cf96:	d831      	bhi.n	800cffc <__gethex+0x146>
 800cf98:	f1a0 0210 	sub.w	r2, r0, #16
 800cf9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cfa0:	f7ff ff74 	bl	800ce8c <__hexdig_fun>
 800cfa4:	1e43      	subs	r3, r0, #1
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	2b18      	cmp	r3, #24
 800cfaa:	d922      	bls.n	800cff2 <__gethex+0x13c>
 800cfac:	f1b9 0f00 	cmp.w	r9, #0
 800cfb0:	d000      	beq.n	800cfb4 <__gethex+0xfe>
 800cfb2:	4252      	negs	r2, r2
 800cfb4:	4414      	add	r4, r2
 800cfb6:	f8ca 1000 	str.w	r1, [sl]
 800cfba:	b30d      	cbz	r5, 800d000 <__gethex+0x14a>
 800cfbc:	f1bb 0f00 	cmp.w	fp, #0
 800cfc0:	bf0c      	ite	eq
 800cfc2:	2706      	moveq	r7, #6
 800cfc4:	2700      	movne	r7, #0
 800cfc6:	4638      	mov	r0, r7
 800cfc8:	b00b      	add	sp, #44	; 0x2c
 800cfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfce:	f10b 0b01 	add.w	fp, fp, #1
 800cfd2:	e78a      	b.n	800ceea <__gethex+0x34>
 800cfd4:	2500      	movs	r5, #0
 800cfd6:	462c      	mov	r4, r5
 800cfd8:	e7ae      	b.n	800cf38 <__gethex+0x82>
 800cfda:	463e      	mov	r6, r7
 800cfdc:	2501      	movs	r5, #1
 800cfde:	e7c7      	b.n	800cf70 <__gethex+0xba>
 800cfe0:	4604      	mov	r4, r0
 800cfe2:	e7fb      	b.n	800cfdc <__gethex+0x126>
 800cfe4:	f04f 0900 	mov.w	r9, #0
 800cfe8:	1cb1      	adds	r1, r6, #2
 800cfea:	e7ce      	b.n	800cf8a <__gethex+0xd4>
 800cfec:	f04f 0901 	mov.w	r9, #1
 800cff0:	e7fa      	b.n	800cfe8 <__gethex+0x132>
 800cff2:	230a      	movs	r3, #10
 800cff4:	fb03 0202 	mla	r2, r3, r2, r0
 800cff8:	3a10      	subs	r2, #16
 800cffa:	e7cf      	b.n	800cf9c <__gethex+0xe6>
 800cffc:	4631      	mov	r1, r6
 800cffe:	e7da      	b.n	800cfb6 <__gethex+0x100>
 800d000:	1bf3      	subs	r3, r6, r7
 800d002:	3b01      	subs	r3, #1
 800d004:	4629      	mov	r1, r5
 800d006:	2b07      	cmp	r3, #7
 800d008:	dc49      	bgt.n	800d09e <__gethex+0x1e8>
 800d00a:	9802      	ldr	r0, [sp, #8]
 800d00c:	f000 fa58 	bl	800d4c0 <_Balloc>
 800d010:	9b01      	ldr	r3, [sp, #4]
 800d012:	f100 0914 	add.w	r9, r0, #20
 800d016:	f04f 0b00 	mov.w	fp, #0
 800d01a:	f1c3 0301 	rsb	r3, r3, #1
 800d01e:	4605      	mov	r5, r0
 800d020:	f8cd 9010 	str.w	r9, [sp, #16]
 800d024:	46da      	mov	sl, fp
 800d026:	9308      	str	r3, [sp, #32]
 800d028:	42b7      	cmp	r7, r6
 800d02a:	d33b      	bcc.n	800d0a4 <__gethex+0x1ee>
 800d02c:	9804      	ldr	r0, [sp, #16]
 800d02e:	f840 ab04 	str.w	sl, [r0], #4
 800d032:	eba0 0009 	sub.w	r0, r0, r9
 800d036:	1080      	asrs	r0, r0, #2
 800d038:	6128      	str	r0, [r5, #16]
 800d03a:	0147      	lsls	r7, r0, #5
 800d03c:	4650      	mov	r0, sl
 800d03e:	f000 fb03 	bl	800d648 <__hi0bits>
 800d042:	f8d8 6000 	ldr.w	r6, [r8]
 800d046:	1a3f      	subs	r7, r7, r0
 800d048:	42b7      	cmp	r7, r6
 800d04a:	dd64      	ble.n	800d116 <__gethex+0x260>
 800d04c:	1bbf      	subs	r7, r7, r6
 800d04e:	4639      	mov	r1, r7
 800d050:	4628      	mov	r0, r5
 800d052:	f000 fe13 	bl	800dc7c <__any_on>
 800d056:	4682      	mov	sl, r0
 800d058:	b178      	cbz	r0, 800d07a <__gethex+0x1c4>
 800d05a:	1e7b      	subs	r3, r7, #1
 800d05c:	1159      	asrs	r1, r3, #5
 800d05e:	f003 021f 	and.w	r2, r3, #31
 800d062:	f04f 0a01 	mov.w	sl, #1
 800d066:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d06a:	fa0a f202 	lsl.w	r2, sl, r2
 800d06e:	420a      	tst	r2, r1
 800d070:	d003      	beq.n	800d07a <__gethex+0x1c4>
 800d072:	4553      	cmp	r3, sl
 800d074:	dc46      	bgt.n	800d104 <__gethex+0x24e>
 800d076:	f04f 0a02 	mov.w	sl, #2
 800d07a:	4639      	mov	r1, r7
 800d07c:	4628      	mov	r0, r5
 800d07e:	f7ff fecb 	bl	800ce18 <rshift>
 800d082:	443c      	add	r4, r7
 800d084:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d088:	42a3      	cmp	r3, r4
 800d08a:	da52      	bge.n	800d132 <__gethex+0x27c>
 800d08c:	4629      	mov	r1, r5
 800d08e:	9802      	ldr	r0, [sp, #8]
 800d090:	f000 fa4a 	bl	800d528 <_Bfree>
 800d094:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d096:	2300      	movs	r3, #0
 800d098:	6013      	str	r3, [r2, #0]
 800d09a:	27a3      	movs	r7, #163	; 0xa3
 800d09c:	e793      	b.n	800cfc6 <__gethex+0x110>
 800d09e:	3101      	adds	r1, #1
 800d0a0:	105b      	asrs	r3, r3, #1
 800d0a2:	e7b0      	b.n	800d006 <__gethex+0x150>
 800d0a4:	1e73      	subs	r3, r6, #1
 800d0a6:	9305      	str	r3, [sp, #20]
 800d0a8:	9a07      	ldr	r2, [sp, #28]
 800d0aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d018      	beq.n	800d0e4 <__gethex+0x22e>
 800d0b2:	f1bb 0f20 	cmp.w	fp, #32
 800d0b6:	d107      	bne.n	800d0c8 <__gethex+0x212>
 800d0b8:	9b04      	ldr	r3, [sp, #16]
 800d0ba:	f8c3 a000 	str.w	sl, [r3]
 800d0be:	3304      	adds	r3, #4
 800d0c0:	f04f 0a00 	mov.w	sl, #0
 800d0c4:	9304      	str	r3, [sp, #16]
 800d0c6:	46d3      	mov	fp, sl
 800d0c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d0cc:	f7ff fede 	bl	800ce8c <__hexdig_fun>
 800d0d0:	f000 000f 	and.w	r0, r0, #15
 800d0d4:	fa00 f00b 	lsl.w	r0, r0, fp
 800d0d8:	ea4a 0a00 	orr.w	sl, sl, r0
 800d0dc:	f10b 0b04 	add.w	fp, fp, #4
 800d0e0:	9b05      	ldr	r3, [sp, #20]
 800d0e2:	e00d      	b.n	800d100 <__gethex+0x24a>
 800d0e4:	9b05      	ldr	r3, [sp, #20]
 800d0e6:	9a08      	ldr	r2, [sp, #32]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	42bb      	cmp	r3, r7
 800d0ec:	d3e1      	bcc.n	800d0b2 <__gethex+0x1fc>
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	9a01      	ldr	r2, [sp, #4]
 800d0f2:	9903      	ldr	r1, [sp, #12]
 800d0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0f6:	f000 fffb 	bl	800e0f0 <strncmp>
 800d0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d1d8      	bne.n	800d0b2 <__gethex+0x1fc>
 800d100:	461e      	mov	r6, r3
 800d102:	e791      	b.n	800d028 <__gethex+0x172>
 800d104:	1eb9      	subs	r1, r7, #2
 800d106:	4628      	mov	r0, r5
 800d108:	f000 fdb8 	bl	800dc7c <__any_on>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d0b2      	beq.n	800d076 <__gethex+0x1c0>
 800d110:	f04f 0a03 	mov.w	sl, #3
 800d114:	e7b1      	b.n	800d07a <__gethex+0x1c4>
 800d116:	da09      	bge.n	800d12c <__gethex+0x276>
 800d118:	1bf7      	subs	r7, r6, r7
 800d11a:	4629      	mov	r1, r5
 800d11c:	463a      	mov	r2, r7
 800d11e:	9802      	ldr	r0, [sp, #8]
 800d120:	f000 fbce 	bl	800d8c0 <__lshift>
 800d124:	1be4      	subs	r4, r4, r7
 800d126:	4605      	mov	r5, r0
 800d128:	f100 0914 	add.w	r9, r0, #20
 800d12c:	f04f 0a00 	mov.w	sl, #0
 800d130:	e7a8      	b.n	800d084 <__gethex+0x1ce>
 800d132:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d136:	42a0      	cmp	r0, r4
 800d138:	dd6a      	ble.n	800d210 <__gethex+0x35a>
 800d13a:	1b04      	subs	r4, r0, r4
 800d13c:	42a6      	cmp	r6, r4
 800d13e:	dc2e      	bgt.n	800d19e <__gethex+0x2e8>
 800d140:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d144:	2b02      	cmp	r3, #2
 800d146:	d022      	beq.n	800d18e <__gethex+0x2d8>
 800d148:	2b03      	cmp	r3, #3
 800d14a:	d024      	beq.n	800d196 <__gethex+0x2e0>
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d115      	bne.n	800d17c <__gethex+0x2c6>
 800d150:	42a6      	cmp	r6, r4
 800d152:	d113      	bne.n	800d17c <__gethex+0x2c6>
 800d154:	2e01      	cmp	r6, #1
 800d156:	dc0b      	bgt.n	800d170 <__gethex+0x2ba>
 800d158:	9a06      	ldr	r2, [sp, #24]
 800d15a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d15e:	6013      	str	r3, [r2, #0]
 800d160:	2301      	movs	r3, #1
 800d162:	612b      	str	r3, [r5, #16]
 800d164:	f8c9 3000 	str.w	r3, [r9]
 800d168:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d16a:	2762      	movs	r7, #98	; 0x62
 800d16c:	601d      	str	r5, [r3, #0]
 800d16e:	e72a      	b.n	800cfc6 <__gethex+0x110>
 800d170:	1e71      	subs	r1, r6, #1
 800d172:	4628      	mov	r0, r5
 800d174:	f000 fd82 	bl	800dc7c <__any_on>
 800d178:	2800      	cmp	r0, #0
 800d17a:	d1ed      	bne.n	800d158 <__gethex+0x2a2>
 800d17c:	4629      	mov	r1, r5
 800d17e:	9802      	ldr	r0, [sp, #8]
 800d180:	f000 f9d2 	bl	800d528 <_Bfree>
 800d184:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d186:	2300      	movs	r3, #0
 800d188:	6013      	str	r3, [r2, #0]
 800d18a:	2750      	movs	r7, #80	; 0x50
 800d18c:	e71b      	b.n	800cfc6 <__gethex+0x110>
 800d18e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d190:	2b00      	cmp	r3, #0
 800d192:	d0e1      	beq.n	800d158 <__gethex+0x2a2>
 800d194:	e7f2      	b.n	800d17c <__gethex+0x2c6>
 800d196:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1dd      	bne.n	800d158 <__gethex+0x2a2>
 800d19c:	e7ee      	b.n	800d17c <__gethex+0x2c6>
 800d19e:	1e67      	subs	r7, r4, #1
 800d1a0:	f1ba 0f00 	cmp.w	sl, #0
 800d1a4:	d131      	bne.n	800d20a <__gethex+0x354>
 800d1a6:	b127      	cbz	r7, 800d1b2 <__gethex+0x2fc>
 800d1a8:	4639      	mov	r1, r7
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	f000 fd66 	bl	800dc7c <__any_on>
 800d1b0:	4682      	mov	sl, r0
 800d1b2:	117a      	asrs	r2, r7, #5
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	f007 071f 	and.w	r7, r7, #31
 800d1ba:	fa03 f707 	lsl.w	r7, r3, r7
 800d1be:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800d1c2:	4621      	mov	r1, r4
 800d1c4:	421f      	tst	r7, r3
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	bf18      	it	ne
 800d1ca:	f04a 0a02 	orrne.w	sl, sl, #2
 800d1ce:	1b36      	subs	r6, r6, r4
 800d1d0:	f7ff fe22 	bl	800ce18 <rshift>
 800d1d4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d1d8:	2702      	movs	r7, #2
 800d1da:	f1ba 0f00 	cmp.w	sl, #0
 800d1de:	d048      	beq.n	800d272 <__gethex+0x3bc>
 800d1e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1e4:	2b02      	cmp	r3, #2
 800d1e6:	d015      	beq.n	800d214 <__gethex+0x35e>
 800d1e8:	2b03      	cmp	r3, #3
 800d1ea:	d017      	beq.n	800d21c <__gethex+0x366>
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d109      	bne.n	800d204 <__gethex+0x34e>
 800d1f0:	f01a 0f02 	tst.w	sl, #2
 800d1f4:	d006      	beq.n	800d204 <__gethex+0x34e>
 800d1f6:	f8d9 3000 	ldr.w	r3, [r9]
 800d1fa:	ea4a 0a03 	orr.w	sl, sl, r3
 800d1fe:	f01a 0f01 	tst.w	sl, #1
 800d202:	d10e      	bne.n	800d222 <__gethex+0x36c>
 800d204:	f047 0710 	orr.w	r7, r7, #16
 800d208:	e033      	b.n	800d272 <__gethex+0x3bc>
 800d20a:	f04f 0a01 	mov.w	sl, #1
 800d20e:	e7d0      	b.n	800d1b2 <__gethex+0x2fc>
 800d210:	2701      	movs	r7, #1
 800d212:	e7e2      	b.n	800d1da <__gethex+0x324>
 800d214:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d216:	f1c3 0301 	rsb	r3, r3, #1
 800d21a:	9315      	str	r3, [sp, #84]	; 0x54
 800d21c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d0f0      	beq.n	800d204 <__gethex+0x34e>
 800d222:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d226:	f105 0314 	add.w	r3, r5, #20
 800d22a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800d22e:	eb03 010a 	add.w	r1, r3, sl
 800d232:	f04f 0c00 	mov.w	ip, #0
 800d236:	4618      	mov	r0, r3
 800d238:	f853 2b04 	ldr.w	r2, [r3], #4
 800d23c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d240:	d01c      	beq.n	800d27c <__gethex+0x3c6>
 800d242:	3201      	adds	r2, #1
 800d244:	6002      	str	r2, [r0, #0]
 800d246:	2f02      	cmp	r7, #2
 800d248:	f105 0314 	add.w	r3, r5, #20
 800d24c:	d138      	bne.n	800d2c0 <__gethex+0x40a>
 800d24e:	f8d8 2000 	ldr.w	r2, [r8]
 800d252:	3a01      	subs	r2, #1
 800d254:	42b2      	cmp	r2, r6
 800d256:	d10a      	bne.n	800d26e <__gethex+0x3b8>
 800d258:	1171      	asrs	r1, r6, #5
 800d25a:	2201      	movs	r2, #1
 800d25c:	f006 061f 	and.w	r6, r6, #31
 800d260:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d264:	fa02 f606 	lsl.w	r6, r2, r6
 800d268:	421e      	tst	r6, r3
 800d26a:	bf18      	it	ne
 800d26c:	4617      	movne	r7, r2
 800d26e:	f047 0720 	orr.w	r7, r7, #32
 800d272:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d274:	601d      	str	r5, [r3, #0]
 800d276:	9b06      	ldr	r3, [sp, #24]
 800d278:	601c      	str	r4, [r3, #0]
 800d27a:	e6a4      	b.n	800cfc6 <__gethex+0x110>
 800d27c:	4299      	cmp	r1, r3
 800d27e:	f843 cc04 	str.w	ip, [r3, #-4]
 800d282:	d8d8      	bhi.n	800d236 <__gethex+0x380>
 800d284:	68ab      	ldr	r3, [r5, #8]
 800d286:	4599      	cmp	r9, r3
 800d288:	db12      	blt.n	800d2b0 <__gethex+0x3fa>
 800d28a:	6869      	ldr	r1, [r5, #4]
 800d28c:	9802      	ldr	r0, [sp, #8]
 800d28e:	3101      	adds	r1, #1
 800d290:	f000 f916 	bl	800d4c0 <_Balloc>
 800d294:	692a      	ldr	r2, [r5, #16]
 800d296:	3202      	adds	r2, #2
 800d298:	f105 010c 	add.w	r1, r5, #12
 800d29c:	4683      	mov	fp, r0
 800d29e:	0092      	lsls	r2, r2, #2
 800d2a0:	300c      	adds	r0, #12
 800d2a2:	f7fd fa2d 	bl	800a700 <memcpy>
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	9802      	ldr	r0, [sp, #8]
 800d2aa:	f000 f93d 	bl	800d528 <_Bfree>
 800d2ae:	465d      	mov	r5, fp
 800d2b0:	692b      	ldr	r3, [r5, #16]
 800d2b2:	1c5a      	adds	r2, r3, #1
 800d2b4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d2b8:	612a      	str	r2, [r5, #16]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	615a      	str	r2, [r3, #20]
 800d2be:	e7c2      	b.n	800d246 <__gethex+0x390>
 800d2c0:	692a      	ldr	r2, [r5, #16]
 800d2c2:	454a      	cmp	r2, r9
 800d2c4:	dd0b      	ble.n	800d2de <__gethex+0x428>
 800d2c6:	2101      	movs	r1, #1
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	f7ff fda5 	bl	800ce18 <rshift>
 800d2ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2d2:	3401      	adds	r4, #1
 800d2d4:	42a3      	cmp	r3, r4
 800d2d6:	f6ff aed9 	blt.w	800d08c <__gethex+0x1d6>
 800d2da:	2701      	movs	r7, #1
 800d2dc:	e7c7      	b.n	800d26e <__gethex+0x3b8>
 800d2de:	f016 061f 	ands.w	r6, r6, #31
 800d2e2:	d0fa      	beq.n	800d2da <__gethex+0x424>
 800d2e4:	449a      	add	sl, r3
 800d2e6:	f1c6 0620 	rsb	r6, r6, #32
 800d2ea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d2ee:	f000 f9ab 	bl	800d648 <__hi0bits>
 800d2f2:	42b0      	cmp	r0, r6
 800d2f4:	dbe7      	blt.n	800d2c6 <__gethex+0x410>
 800d2f6:	e7f0      	b.n	800d2da <__gethex+0x424>

0800d2f8 <L_shift>:
 800d2f8:	f1c2 0208 	rsb	r2, r2, #8
 800d2fc:	0092      	lsls	r2, r2, #2
 800d2fe:	b570      	push	{r4, r5, r6, lr}
 800d300:	f1c2 0620 	rsb	r6, r2, #32
 800d304:	6843      	ldr	r3, [r0, #4]
 800d306:	6804      	ldr	r4, [r0, #0]
 800d308:	fa03 f506 	lsl.w	r5, r3, r6
 800d30c:	432c      	orrs	r4, r5
 800d30e:	40d3      	lsrs	r3, r2
 800d310:	6004      	str	r4, [r0, #0]
 800d312:	f840 3f04 	str.w	r3, [r0, #4]!
 800d316:	4288      	cmp	r0, r1
 800d318:	d3f4      	bcc.n	800d304 <L_shift+0xc>
 800d31a:	bd70      	pop	{r4, r5, r6, pc}

0800d31c <__match>:
 800d31c:	b530      	push	{r4, r5, lr}
 800d31e:	6803      	ldr	r3, [r0, #0]
 800d320:	3301      	adds	r3, #1
 800d322:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d326:	b914      	cbnz	r4, 800d32e <__match+0x12>
 800d328:	6003      	str	r3, [r0, #0]
 800d32a:	2001      	movs	r0, #1
 800d32c:	bd30      	pop	{r4, r5, pc}
 800d32e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d332:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d336:	2d19      	cmp	r5, #25
 800d338:	bf98      	it	ls
 800d33a:	3220      	addls	r2, #32
 800d33c:	42a2      	cmp	r2, r4
 800d33e:	d0f0      	beq.n	800d322 <__match+0x6>
 800d340:	2000      	movs	r0, #0
 800d342:	e7f3      	b.n	800d32c <__match+0x10>

0800d344 <__hexnan>:
 800d344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d348:	680b      	ldr	r3, [r1, #0]
 800d34a:	6801      	ldr	r1, [r0, #0]
 800d34c:	115f      	asrs	r7, r3, #5
 800d34e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d352:	f013 031f 	ands.w	r3, r3, #31
 800d356:	b087      	sub	sp, #28
 800d358:	bf18      	it	ne
 800d35a:	3704      	addne	r7, #4
 800d35c:	2500      	movs	r5, #0
 800d35e:	1f3e      	subs	r6, r7, #4
 800d360:	4682      	mov	sl, r0
 800d362:	4690      	mov	r8, r2
 800d364:	9301      	str	r3, [sp, #4]
 800d366:	f847 5c04 	str.w	r5, [r7, #-4]
 800d36a:	46b1      	mov	r9, r6
 800d36c:	4634      	mov	r4, r6
 800d36e:	9502      	str	r5, [sp, #8]
 800d370:	46ab      	mov	fp, r5
 800d372:	784a      	ldrb	r2, [r1, #1]
 800d374:	1c4b      	adds	r3, r1, #1
 800d376:	9303      	str	r3, [sp, #12]
 800d378:	b342      	cbz	r2, 800d3cc <__hexnan+0x88>
 800d37a:	4610      	mov	r0, r2
 800d37c:	9105      	str	r1, [sp, #20]
 800d37e:	9204      	str	r2, [sp, #16]
 800d380:	f7ff fd84 	bl	800ce8c <__hexdig_fun>
 800d384:	2800      	cmp	r0, #0
 800d386:	d143      	bne.n	800d410 <__hexnan+0xcc>
 800d388:	9a04      	ldr	r2, [sp, #16]
 800d38a:	9905      	ldr	r1, [sp, #20]
 800d38c:	2a20      	cmp	r2, #32
 800d38e:	d818      	bhi.n	800d3c2 <__hexnan+0x7e>
 800d390:	9b02      	ldr	r3, [sp, #8]
 800d392:	459b      	cmp	fp, r3
 800d394:	dd13      	ble.n	800d3be <__hexnan+0x7a>
 800d396:	454c      	cmp	r4, r9
 800d398:	d206      	bcs.n	800d3a8 <__hexnan+0x64>
 800d39a:	2d07      	cmp	r5, #7
 800d39c:	dc04      	bgt.n	800d3a8 <__hexnan+0x64>
 800d39e:	462a      	mov	r2, r5
 800d3a0:	4649      	mov	r1, r9
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f7ff ffa8 	bl	800d2f8 <L_shift>
 800d3a8:	4544      	cmp	r4, r8
 800d3aa:	d944      	bls.n	800d436 <__hexnan+0xf2>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	f1a4 0904 	sub.w	r9, r4, #4
 800d3b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3b6:	f8cd b008 	str.w	fp, [sp, #8]
 800d3ba:	464c      	mov	r4, r9
 800d3bc:	461d      	mov	r5, r3
 800d3be:	9903      	ldr	r1, [sp, #12]
 800d3c0:	e7d7      	b.n	800d372 <__hexnan+0x2e>
 800d3c2:	2a29      	cmp	r2, #41	; 0x29
 800d3c4:	d14a      	bne.n	800d45c <__hexnan+0x118>
 800d3c6:	3102      	adds	r1, #2
 800d3c8:	f8ca 1000 	str.w	r1, [sl]
 800d3cc:	f1bb 0f00 	cmp.w	fp, #0
 800d3d0:	d044      	beq.n	800d45c <__hexnan+0x118>
 800d3d2:	454c      	cmp	r4, r9
 800d3d4:	d206      	bcs.n	800d3e4 <__hexnan+0xa0>
 800d3d6:	2d07      	cmp	r5, #7
 800d3d8:	dc04      	bgt.n	800d3e4 <__hexnan+0xa0>
 800d3da:	462a      	mov	r2, r5
 800d3dc:	4649      	mov	r1, r9
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f7ff ff8a 	bl	800d2f8 <L_shift>
 800d3e4:	4544      	cmp	r4, r8
 800d3e6:	d928      	bls.n	800d43a <__hexnan+0xf6>
 800d3e8:	4643      	mov	r3, r8
 800d3ea:	f854 2b04 	ldr.w	r2, [r4], #4
 800d3ee:	f843 2b04 	str.w	r2, [r3], #4
 800d3f2:	42a6      	cmp	r6, r4
 800d3f4:	d2f9      	bcs.n	800d3ea <__hexnan+0xa6>
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f843 2b04 	str.w	r2, [r3], #4
 800d3fc:	429e      	cmp	r6, r3
 800d3fe:	d2fb      	bcs.n	800d3f8 <__hexnan+0xb4>
 800d400:	6833      	ldr	r3, [r6, #0]
 800d402:	b91b      	cbnz	r3, 800d40c <__hexnan+0xc8>
 800d404:	4546      	cmp	r6, r8
 800d406:	d127      	bne.n	800d458 <__hexnan+0x114>
 800d408:	2301      	movs	r3, #1
 800d40a:	6033      	str	r3, [r6, #0]
 800d40c:	2005      	movs	r0, #5
 800d40e:	e026      	b.n	800d45e <__hexnan+0x11a>
 800d410:	3501      	adds	r5, #1
 800d412:	2d08      	cmp	r5, #8
 800d414:	f10b 0b01 	add.w	fp, fp, #1
 800d418:	dd06      	ble.n	800d428 <__hexnan+0xe4>
 800d41a:	4544      	cmp	r4, r8
 800d41c:	d9cf      	bls.n	800d3be <__hexnan+0x7a>
 800d41e:	2300      	movs	r3, #0
 800d420:	f844 3c04 	str.w	r3, [r4, #-4]
 800d424:	2501      	movs	r5, #1
 800d426:	3c04      	subs	r4, #4
 800d428:	6822      	ldr	r2, [r4, #0]
 800d42a:	f000 000f 	and.w	r0, r0, #15
 800d42e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d432:	6020      	str	r0, [r4, #0]
 800d434:	e7c3      	b.n	800d3be <__hexnan+0x7a>
 800d436:	2508      	movs	r5, #8
 800d438:	e7c1      	b.n	800d3be <__hexnan+0x7a>
 800d43a:	9b01      	ldr	r3, [sp, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d0df      	beq.n	800d400 <__hexnan+0xbc>
 800d440:	f04f 32ff 	mov.w	r2, #4294967295
 800d444:	f1c3 0320 	rsb	r3, r3, #32
 800d448:	fa22 f303 	lsr.w	r3, r2, r3
 800d44c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d450:	401a      	ands	r2, r3
 800d452:	f847 2c04 	str.w	r2, [r7, #-4]
 800d456:	e7d3      	b.n	800d400 <__hexnan+0xbc>
 800d458:	3e04      	subs	r6, #4
 800d45a:	e7d1      	b.n	800d400 <__hexnan+0xbc>
 800d45c:	2004      	movs	r0, #4
 800d45e:	b007      	add	sp, #28
 800d460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d464 <__locale_ctype_ptr_l>:
 800d464:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d468:	4770      	bx	lr

0800d46a <__localeconv_l>:
 800d46a:	30f0      	adds	r0, #240	; 0xf0
 800d46c:	4770      	bx	lr
	...

0800d470 <_localeconv_r>:
 800d470:	4b04      	ldr	r3, [pc, #16]	; (800d484 <_localeconv_r+0x14>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	6a18      	ldr	r0, [r3, #32]
 800d476:	4b04      	ldr	r3, [pc, #16]	; (800d488 <_localeconv_r+0x18>)
 800d478:	2800      	cmp	r0, #0
 800d47a:	bf08      	it	eq
 800d47c:	4618      	moveq	r0, r3
 800d47e:	30f0      	adds	r0, #240	; 0xf0
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	2000000c 	.word	0x2000000c
 800d488:	20000070 	.word	0x20000070

0800d48c <malloc>:
 800d48c:	4b02      	ldr	r3, [pc, #8]	; (800d498 <malloc+0xc>)
 800d48e:	4601      	mov	r1, r0
 800d490:	6818      	ldr	r0, [r3, #0]
 800d492:	f000 bc71 	b.w	800dd78 <_malloc_r>
 800d496:	bf00      	nop
 800d498:	2000000c 	.word	0x2000000c

0800d49c <__ascii_mbtowc>:
 800d49c:	b082      	sub	sp, #8
 800d49e:	b901      	cbnz	r1, 800d4a2 <__ascii_mbtowc+0x6>
 800d4a0:	a901      	add	r1, sp, #4
 800d4a2:	b142      	cbz	r2, 800d4b6 <__ascii_mbtowc+0x1a>
 800d4a4:	b14b      	cbz	r3, 800d4ba <__ascii_mbtowc+0x1e>
 800d4a6:	7813      	ldrb	r3, [r2, #0]
 800d4a8:	600b      	str	r3, [r1, #0]
 800d4aa:	7812      	ldrb	r2, [r2, #0]
 800d4ac:	1c10      	adds	r0, r2, #0
 800d4ae:	bf18      	it	ne
 800d4b0:	2001      	movne	r0, #1
 800d4b2:	b002      	add	sp, #8
 800d4b4:	4770      	bx	lr
 800d4b6:	4610      	mov	r0, r2
 800d4b8:	e7fb      	b.n	800d4b2 <__ascii_mbtowc+0x16>
 800d4ba:	f06f 0001 	mvn.w	r0, #1
 800d4be:	e7f8      	b.n	800d4b2 <__ascii_mbtowc+0x16>

0800d4c0 <_Balloc>:
 800d4c0:	b570      	push	{r4, r5, r6, lr}
 800d4c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4c4:	4604      	mov	r4, r0
 800d4c6:	460e      	mov	r6, r1
 800d4c8:	b93d      	cbnz	r5, 800d4da <_Balloc+0x1a>
 800d4ca:	2010      	movs	r0, #16
 800d4cc:	f7ff ffde 	bl	800d48c <malloc>
 800d4d0:	6260      	str	r0, [r4, #36]	; 0x24
 800d4d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4d6:	6005      	str	r5, [r0, #0]
 800d4d8:	60c5      	str	r5, [r0, #12]
 800d4da:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d4dc:	68eb      	ldr	r3, [r5, #12]
 800d4de:	b183      	cbz	r3, 800d502 <_Balloc+0x42>
 800d4e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d4e8:	b9b8      	cbnz	r0, 800d51a <_Balloc+0x5a>
 800d4ea:	2101      	movs	r1, #1
 800d4ec:	fa01 f506 	lsl.w	r5, r1, r6
 800d4f0:	1d6a      	adds	r2, r5, #5
 800d4f2:	0092      	lsls	r2, r2, #2
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f000 fbe2 	bl	800dcbe <_calloc_r>
 800d4fa:	b160      	cbz	r0, 800d516 <_Balloc+0x56>
 800d4fc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d500:	e00e      	b.n	800d520 <_Balloc+0x60>
 800d502:	2221      	movs	r2, #33	; 0x21
 800d504:	2104      	movs	r1, #4
 800d506:	4620      	mov	r0, r4
 800d508:	f000 fbd9 	bl	800dcbe <_calloc_r>
 800d50c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d50e:	60e8      	str	r0, [r5, #12]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d1e4      	bne.n	800d4e0 <_Balloc+0x20>
 800d516:	2000      	movs	r0, #0
 800d518:	bd70      	pop	{r4, r5, r6, pc}
 800d51a:	6802      	ldr	r2, [r0, #0]
 800d51c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d520:	2300      	movs	r3, #0
 800d522:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d526:	e7f7      	b.n	800d518 <_Balloc+0x58>

0800d528 <_Bfree>:
 800d528:	b570      	push	{r4, r5, r6, lr}
 800d52a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d52c:	4606      	mov	r6, r0
 800d52e:	460d      	mov	r5, r1
 800d530:	b93c      	cbnz	r4, 800d542 <_Bfree+0x1a>
 800d532:	2010      	movs	r0, #16
 800d534:	f7ff ffaa 	bl	800d48c <malloc>
 800d538:	6270      	str	r0, [r6, #36]	; 0x24
 800d53a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d53e:	6004      	str	r4, [r0, #0]
 800d540:	60c4      	str	r4, [r0, #12]
 800d542:	b13d      	cbz	r5, 800d554 <_Bfree+0x2c>
 800d544:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d546:	686a      	ldr	r2, [r5, #4]
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d54e:	6029      	str	r1, [r5, #0]
 800d550:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d554:	bd70      	pop	{r4, r5, r6, pc}

0800d556 <__multadd>:
 800d556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d55a:	690d      	ldr	r5, [r1, #16]
 800d55c:	461f      	mov	r7, r3
 800d55e:	4606      	mov	r6, r0
 800d560:	460c      	mov	r4, r1
 800d562:	f101 0c14 	add.w	ip, r1, #20
 800d566:	2300      	movs	r3, #0
 800d568:	f8dc 0000 	ldr.w	r0, [ip]
 800d56c:	b281      	uxth	r1, r0
 800d56e:	fb02 7101 	mla	r1, r2, r1, r7
 800d572:	0c0f      	lsrs	r7, r1, #16
 800d574:	0c00      	lsrs	r0, r0, #16
 800d576:	fb02 7000 	mla	r0, r2, r0, r7
 800d57a:	b289      	uxth	r1, r1
 800d57c:	3301      	adds	r3, #1
 800d57e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d582:	429d      	cmp	r5, r3
 800d584:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d588:	f84c 1b04 	str.w	r1, [ip], #4
 800d58c:	dcec      	bgt.n	800d568 <__multadd+0x12>
 800d58e:	b1d7      	cbz	r7, 800d5c6 <__multadd+0x70>
 800d590:	68a3      	ldr	r3, [r4, #8]
 800d592:	42ab      	cmp	r3, r5
 800d594:	dc12      	bgt.n	800d5bc <__multadd+0x66>
 800d596:	6861      	ldr	r1, [r4, #4]
 800d598:	4630      	mov	r0, r6
 800d59a:	3101      	adds	r1, #1
 800d59c:	f7ff ff90 	bl	800d4c0 <_Balloc>
 800d5a0:	6922      	ldr	r2, [r4, #16]
 800d5a2:	3202      	adds	r2, #2
 800d5a4:	f104 010c 	add.w	r1, r4, #12
 800d5a8:	4680      	mov	r8, r0
 800d5aa:	0092      	lsls	r2, r2, #2
 800d5ac:	300c      	adds	r0, #12
 800d5ae:	f7fd f8a7 	bl	800a700 <memcpy>
 800d5b2:	4621      	mov	r1, r4
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	f7ff ffb7 	bl	800d528 <_Bfree>
 800d5ba:	4644      	mov	r4, r8
 800d5bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5c0:	3501      	adds	r5, #1
 800d5c2:	615f      	str	r7, [r3, #20]
 800d5c4:	6125      	str	r5, [r4, #16]
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d5cc <__s2b>:
 800d5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5d0:	460c      	mov	r4, r1
 800d5d2:	4615      	mov	r5, r2
 800d5d4:	461f      	mov	r7, r3
 800d5d6:	2209      	movs	r2, #9
 800d5d8:	3308      	adds	r3, #8
 800d5da:	4606      	mov	r6, r0
 800d5dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	db20      	blt.n	800d62a <__s2b+0x5e>
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f7ff ff69 	bl	800d4c0 <_Balloc>
 800d5ee:	9b08      	ldr	r3, [sp, #32]
 800d5f0:	6143      	str	r3, [r0, #20]
 800d5f2:	2d09      	cmp	r5, #9
 800d5f4:	f04f 0301 	mov.w	r3, #1
 800d5f8:	6103      	str	r3, [r0, #16]
 800d5fa:	dd19      	ble.n	800d630 <__s2b+0x64>
 800d5fc:	f104 0809 	add.w	r8, r4, #9
 800d600:	46c1      	mov	r9, r8
 800d602:	442c      	add	r4, r5
 800d604:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d608:	4601      	mov	r1, r0
 800d60a:	3b30      	subs	r3, #48	; 0x30
 800d60c:	220a      	movs	r2, #10
 800d60e:	4630      	mov	r0, r6
 800d610:	f7ff ffa1 	bl	800d556 <__multadd>
 800d614:	45a1      	cmp	r9, r4
 800d616:	d1f5      	bne.n	800d604 <__s2b+0x38>
 800d618:	eb08 0405 	add.w	r4, r8, r5
 800d61c:	3c08      	subs	r4, #8
 800d61e:	1b2d      	subs	r5, r5, r4
 800d620:	1963      	adds	r3, r4, r5
 800d622:	42bb      	cmp	r3, r7
 800d624:	db07      	blt.n	800d636 <__s2b+0x6a>
 800d626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d62a:	0052      	lsls	r2, r2, #1
 800d62c:	3101      	adds	r1, #1
 800d62e:	e7d9      	b.n	800d5e4 <__s2b+0x18>
 800d630:	340a      	adds	r4, #10
 800d632:	2509      	movs	r5, #9
 800d634:	e7f3      	b.n	800d61e <__s2b+0x52>
 800d636:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d63a:	4601      	mov	r1, r0
 800d63c:	3b30      	subs	r3, #48	; 0x30
 800d63e:	220a      	movs	r2, #10
 800d640:	4630      	mov	r0, r6
 800d642:	f7ff ff88 	bl	800d556 <__multadd>
 800d646:	e7eb      	b.n	800d620 <__s2b+0x54>

0800d648 <__hi0bits>:
 800d648:	0c02      	lsrs	r2, r0, #16
 800d64a:	0412      	lsls	r2, r2, #16
 800d64c:	4603      	mov	r3, r0
 800d64e:	b9b2      	cbnz	r2, 800d67e <__hi0bits+0x36>
 800d650:	0403      	lsls	r3, r0, #16
 800d652:	2010      	movs	r0, #16
 800d654:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d658:	bf04      	itt	eq
 800d65a:	021b      	lsleq	r3, r3, #8
 800d65c:	3008      	addeq	r0, #8
 800d65e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d662:	bf04      	itt	eq
 800d664:	011b      	lsleq	r3, r3, #4
 800d666:	3004      	addeq	r0, #4
 800d668:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d66c:	bf04      	itt	eq
 800d66e:	009b      	lsleq	r3, r3, #2
 800d670:	3002      	addeq	r0, #2
 800d672:	2b00      	cmp	r3, #0
 800d674:	db06      	blt.n	800d684 <__hi0bits+0x3c>
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	d503      	bpl.n	800d682 <__hi0bits+0x3a>
 800d67a:	3001      	adds	r0, #1
 800d67c:	4770      	bx	lr
 800d67e:	2000      	movs	r0, #0
 800d680:	e7e8      	b.n	800d654 <__hi0bits+0xc>
 800d682:	2020      	movs	r0, #32
 800d684:	4770      	bx	lr

0800d686 <__lo0bits>:
 800d686:	6803      	ldr	r3, [r0, #0]
 800d688:	f013 0207 	ands.w	r2, r3, #7
 800d68c:	4601      	mov	r1, r0
 800d68e:	d00b      	beq.n	800d6a8 <__lo0bits+0x22>
 800d690:	07da      	lsls	r2, r3, #31
 800d692:	d423      	bmi.n	800d6dc <__lo0bits+0x56>
 800d694:	0798      	lsls	r0, r3, #30
 800d696:	bf49      	itett	mi
 800d698:	085b      	lsrmi	r3, r3, #1
 800d69a:	089b      	lsrpl	r3, r3, #2
 800d69c:	2001      	movmi	r0, #1
 800d69e:	600b      	strmi	r3, [r1, #0]
 800d6a0:	bf5c      	itt	pl
 800d6a2:	600b      	strpl	r3, [r1, #0]
 800d6a4:	2002      	movpl	r0, #2
 800d6a6:	4770      	bx	lr
 800d6a8:	b298      	uxth	r0, r3
 800d6aa:	b9a8      	cbnz	r0, 800d6d8 <__lo0bits+0x52>
 800d6ac:	0c1b      	lsrs	r3, r3, #16
 800d6ae:	2010      	movs	r0, #16
 800d6b0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d6b4:	bf04      	itt	eq
 800d6b6:	0a1b      	lsreq	r3, r3, #8
 800d6b8:	3008      	addeq	r0, #8
 800d6ba:	071a      	lsls	r2, r3, #28
 800d6bc:	bf04      	itt	eq
 800d6be:	091b      	lsreq	r3, r3, #4
 800d6c0:	3004      	addeq	r0, #4
 800d6c2:	079a      	lsls	r2, r3, #30
 800d6c4:	bf04      	itt	eq
 800d6c6:	089b      	lsreq	r3, r3, #2
 800d6c8:	3002      	addeq	r0, #2
 800d6ca:	07da      	lsls	r2, r3, #31
 800d6cc:	d402      	bmi.n	800d6d4 <__lo0bits+0x4e>
 800d6ce:	085b      	lsrs	r3, r3, #1
 800d6d0:	d006      	beq.n	800d6e0 <__lo0bits+0x5a>
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	600b      	str	r3, [r1, #0]
 800d6d6:	4770      	bx	lr
 800d6d8:	4610      	mov	r0, r2
 800d6da:	e7e9      	b.n	800d6b0 <__lo0bits+0x2a>
 800d6dc:	2000      	movs	r0, #0
 800d6de:	4770      	bx	lr
 800d6e0:	2020      	movs	r0, #32
 800d6e2:	4770      	bx	lr

0800d6e4 <__i2b>:
 800d6e4:	b510      	push	{r4, lr}
 800d6e6:	460c      	mov	r4, r1
 800d6e8:	2101      	movs	r1, #1
 800d6ea:	f7ff fee9 	bl	800d4c0 <_Balloc>
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	6144      	str	r4, [r0, #20]
 800d6f2:	6102      	str	r2, [r0, #16]
 800d6f4:	bd10      	pop	{r4, pc}

0800d6f6 <__multiply>:
 800d6f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6fa:	4614      	mov	r4, r2
 800d6fc:	690a      	ldr	r2, [r1, #16]
 800d6fe:	6923      	ldr	r3, [r4, #16]
 800d700:	429a      	cmp	r2, r3
 800d702:	bfb8      	it	lt
 800d704:	460b      	movlt	r3, r1
 800d706:	4688      	mov	r8, r1
 800d708:	bfbc      	itt	lt
 800d70a:	46a0      	movlt	r8, r4
 800d70c:	461c      	movlt	r4, r3
 800d70e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d712:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d716:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d71a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d71e:	eb07 0609 	add.w	r6, r7, r9
 800d722:	42b3      	cmp	r3, r6
 800d724:	bfb8      	it	lt
 800d726:	3101      	addlt	r1, #1
 800d728:	f7ff feca 	bl	800d4c0 <_Balloc>
 800d72c:	f100 0514 	add.w	r5, r0, #20
 800d730:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d734:	462b      	mov	r3, r5
 800d736:	2200      	movs	r2, #0
 800d738:	4573      	cmp	r3, lr
 800d73a:	d316      	bcc.n	800d76a <__multiply+0x74>
 800d73c:	f104 0214 	add.w	r2, r4, #20
 800d740:	f108 0114 	add.w	r1, r8, #20
 800d744:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d748:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	9b00      	ldr	r3, [sp, #0]
 800d750:	9201      	str	r2, [sp, #4]
 800d752:	4293      	cmp	r3, r2
 800d754:	d80c      	bhi.n	800d770 <__multiply+0x7a>
 800d756:	2e00      	cmp	r6, #0
 800d758:	dd03      	ble.n	800d762 <__multiply+0x6c>
 800d75a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d05d      	beq.n	800d81e <__multiply+0x128>
 800d762:	6106      	str	r6, [r0, #16]
 800d764:	b003      	add	sp, #12
 800d766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76a:	f843 2b04 	str.w	r2, [r3], #4
 800d76e:	e7e3      	b.n	800d738 <__multiply+0x42>
 800d770:	f8b2 b000 	ldrh.w	fp, [r2]
 800d774:	f1bb 0f00 	cmp.w	fp, #0
 800d778:	d023      	beq.n	800d7c2 <__multiply+0xcc>
 800d77a:	4689      	mov	r9, r1
 800d77c:	46ac      	mov	ip, r5
 800d77e:	f04f 0800 	mov.w	r8, #0
 800d782:	f859 4b04 	ldr.w	r4, [r9], #4
 800d786:	f8dc a000 	ldr.w	sl, [ip]
 800d78a:	b2a3      	uxth	r3, r4
 800d78c:	fa1f fa8a 	uxth.w	sl, sl
 800d790:	fb0b a303 	mla	r3, fp, r3, sl
 800d794:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d798:	f8dc 4000 	ldr.w	r4, [ip]
 800d79c:	4443      	add	r3, r8
 800d79e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d7a2:	fb0b 840a 	mla	r4, fp, sl, r8
 800d7a6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d7aa:	46e2      	mov	sl, ip
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d7b2:	454f      	cmp	r7, r9
 800d7b4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d7b8:	f84a 3b04 	str.w	r3, [sl], #4
 800d7bc:	d82b      	bhi.n	800d816 <__multiply+0x120>
 800d7be:	f8cc 8004 	str.w	r8, [ip, #4]
 800d7c2:	9b01      	ldr	r3, [sp, #4]
 800d7c4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d7c8:	3204      	adds	r2, #4
 800d7ca:	f1ba 0f00 	cmp.w	sl, #0
 800d7ce:	d020      	beq.n	800d812 <__multiply+0x11c>
 800d7d0:	682b      	ldr	r3, [r5, #0]
 800d7d2:	4689      	mov	r9, r1
 800d7d4:	46a8      	mov	r8, r5
 800d7d6:	f04f 0b00 	mov.w	fp, #0
 800d7da:	f8b9 c000 	ldrh.w	ip, [r9]
 800d7de:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d7e2:	fb0a 440c 	mla	r4, sl, ip, r4
 800d7e6:	445c      	add	r4, fp
 800d7e8:	46c4      	mov	ip, r8
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d7f0:	f84c 3b04 	str.w	r3, [ip], #4
 800d7f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d7f8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d7fc:	0c1b      	lsrs	r3, r3, #16
 800d7fe:	fb0a b303 	mla	r3, sl, r3, fp
 800d802:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d806:	454f      	cmp	r7, r9
 800d808:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d80c:	d805      	bhi.n	800d81a <__multiply+0x124>
 800d80e:	f8c8 3004 	str.w	r3, [r8, #4]
 800d812:	3504      	adds	r5, #4
 800d814:	e79b      	b.n	800d74e <__multiply+0x58>
 800d816:	46d4      	mov	ip, sl
 800d818:	e7b3      	b.n	800d782 <__multiply+0x8c>
 800d81a:	46e0      	mov	r8, ip
 800d81c:	e7dd      	b.n	800d7da <__multiply+0xe4>
 800d81e:	3e01      	subs	r6, #1
 800d820:	e799      	b.n	800d756 <__multiply+0x60>
	...

0800d824 <__pow5mult>:
 800d824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d828:	4615      	mov	r5, r2
 800d82a:	f012 0203 	ands.w	r2, r2, #3
 800d82e:	4606      	mov	r6, r0
 800d830:	460f      	mov	r7, r1
 800d832:	d007      	beq.n	800d844 <__pow5mult+0x20>
 800d834:	3a01      	subs	r2, #1
 800d836:	4c21      	ldr	r4, [pc, #132]	; (800d8bc <__pow5mult+0x98>)
 800d838:	2300      	movs	r3, #0
 800d83a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d83e:	f7ff fe8a 	bl	800d556 <__multadd>
 800d842:	4607      	mov	r7, r0
 800d844:	10ad      	asrs	r5, r5, #2
 800d846:	d035      	beq.n	800d8b4 <__pow5mult+0x90>
 800d848:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d84a:	b93c      	cbnz	r4, 800d85c <__pow5mult+0x38>
 800d84c:	2010      	movs	r0, #16
 800d84e:	f7ff fe1d 	bl	800d48c <malloc>
 800d852:	6270      	str	r0, [r6, #36]	; 0x24
 800d854:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d858:	6004      	str	r4, [r0, #0]
 800d85a:	60c4      	str	r4, [r0, #12]
 800d85c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d860:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d864:	b94c      	cbnz	r4, 800d87a <__pow5mult+0x56>
 800d866:	f240 2171 	movw	r1, #625	; 0x271
 800d86a:	4630      	mov	r0, r6
 800d86c:	f7ff ff3a 	bl	800d6e4 <__i2b>
 800d870:	2300      	movs	r3, #0
 800d872:	f8c8 0008 	str.w	r0, [r8, #8]
 800d876:	4604      	mov	r4, r0
 800d878:	6003      	str	r3, [r0, #0]
 800d87a:	f04f 0800 	mov.w	r8, #0
 800d87e:	07eb      	lsls	r3, r5, #31
 800d880:	d50a      	bpl.n	800d898 <__pow5mult+0x74>
 800d882:	4639      	mov	r1, r7
 800d884:	4622      	mov	r2, r4
 800d886:	4630      	mov	r0, r6
 800d888:	f7ff ff35 	bl	800d6f6 <__multiply>
 800d88c:	4639      	mov	r1, r7
 800d88e:	4681      	mov	r9, r0
 800d890:	4630      	mov	r0, r6
 800d892:	f7ff fe49 	bl	800d528 <_Bfree>
 800d896:	464f      	mov	r7, r9
 800d898:	106d      	asrs	r5, r5, #1
 800d89a:	d00b      	beq.n	800d8b4 <__pow5mult+0x90>
 800d89c:	6820      	ldr	r0, [r4, #0]
 800d89e:	b938      	cbnz	r0, 800d8b0 <__pow5mult+0x8c>
 800d8a0:	4622      	mov	r2, r4
 800d8a2:	4621      	mov	r1, r4
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	f7ff ff26 	bl	800d6f6 <__multiply>
 800d8aa:	6020      	str	r0, [r4, #0]
 800d8ac:	f8c0 8000 	str.w	r8, [r0]
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	e7e4      	b.n	800d87e <__pow5mult+0x5a>
 800d8b4:	4638      	mov	r0, r7
 800d8b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8ba:	bf00      	nop
 800d8bc:	0800efc0 	.word	0x0800efc0

0800d8c0 <__lshift>:
 800d8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c4:	460c      	mov	r4, r1
 800d8c6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d8ca:	6923      	ldr	r3, [r4, #16]
 800d8cc:	6849      	ldr	r1, [r1, #4]
 800d8ce:	eb0a 0903 	add.w	r9, sl, r3
 800d8d2:	68a3      	ldr	r3, [r4, #8]
 800d8d4:	4607      	mov	r7, r0
 800d8d6:	4616      	mov	r6, r2
 800d8d8:	f109 0501 	add.w	r5, r9, #1
 800d8dc:	42ab      	cmp	r3, r5
 800d8de:	db32      	blt.n	800d946 <__lshift+0x86>
 800d8e0:	4638      	mov	r0, r7
 800d8e2:	f7ff fded 	bl	800d4c0 <_Balloc>
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	4680      	mov	r8, r0
 800d8ea:	f100 0114 	add.w	r1, r0, #20
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	4553      	cmp	r3, sl
 800d8f2:	db2b      	blt.n	800d94c <__lshift+0x8c>
 800d8f4:	6920      	ldr	r0, [r4, #16]
 800d8f6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d8fa:	f104 0314 	add.w	r3, r4, #20
 800d8fe:	f016 021f 	ands.w	r2, r6, #31
 800d902:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d906:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d90a:	d025      	beq.n	800d958 <__lshift+0x98>
 800d90c:	f1c2 0e20 	rsb	lr, r2, #32
 800d910:	2000      	movs	r0, #0
 800d912:	681e      	ldr	r6, [r3, #0]
 800d914:	468a      	mov	sl, r1
 800d916:	4096      	lsls	r6, r2
 800d918:	4330      	orrs	r0, r6
 800d91a:	f84a 0b04 	str.w	r0, [sl], #4
 800d91e:	f853 0b04 	ldr.w	r0, [r3], #4
 800d922:	459c      	cmp	ip, r3
 800d924:	fa20 f00e 	lsr.w	r0, r0, lr
 800d928:	d814      	bhi.n	800d954 <__lshift+0x94>
 800d92a:	6048      	str	r0, [r1, #4]
 800d92c:	b108      	cbz	r0, 800d932 <__lshift+0x72>
 800d92e:	f109 0502 	add.w	r5, r9, #2
 800d932:	3d01      	subs	r5, #1
 800d934:	4638      	mov	r0, r7
 800d936:	f8c8 5010 	str.w	r5, [r8, #16]
 800d93a:	4621      	mov	r1, r4
 800d93c:	f7ff fdf4 	bl	800d528 <_Bfree>
 800d940:	4640      	mov	r0, r8
 800d942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d946:	3101      	adds	r1, #1
 800d948:	005b      	lsls	r3, r3, #1
 800d94a:	e7c7      	b.n	800d8dc <__lshift+0x1c>
 800d94c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d950:	3301      	adds	r3, #1
 800d952:	e7cd      	b.n	800d8f0 <__lshift+0x30>
 800d954:	4651      	mov	r1, sl
 800d956:	e7dc      	b.n	800d912 <__lshift+0x52>
 800d958:	3904      	subs	r1, #4
 800d95a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d95e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d962:	459c      	cmp	ip, r3
 800d964:	d8f9      	bhi.n	800d95a <__lshift+0x9a>
 800d966:	e7e4      	b.n	800d932 <__lshift+0x72>

0800d968 <__mcmp>:
 800d968:	6903      	ldr	r3, [r0, #16]
 800d96a:	690a      	ldr	r2, [r1, #16]
 800d96c:	1a9b      	subs	r3, r3, r2
 800d96e:	b530      	push	{r4, r5, lr}
 800d970:	d10c      	bne.n	800d98c <__mcmp+0x24>
 800d972:	0092      	lsls	r2, r2, #2
 800d974:	3014      	adds	r0, #20
 800d976:	3114      	adds	r1, #20
 800d978:	1884      	adds	r4, r0, r2
 800d97a:	4411      	add	r1, r2
 800d97c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d980:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d984:	4295      	cmp	r5, r2
 800d986:	d003      	beq.n	800d990 <__mcmp+0x28>
 800d988:	d305      	bcc.n	800d996 <__mcmp+0x2e>
 800d98a:	2301      	movs	r3, #1
 800d98c:	4618      	mov	r0, r3
 800d98e:	bd30      	pop	{r4, r5, pc}
 800d990:	42a0      	cmp	r0, r4
 800d992:	d3f3      	bcc.n	800d97c <__mcmp+0x14>
 800d994:	e7fa      	b.n	800d98c <__mcmp+0x24>
 800d996:	f04f 33ff 	mov.w	r3, #4294967295
 800d99a:	e7f7      	b.n	800d98c <__mcmp+0x24>

0800d99c <__mdiff>:
 800d99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9a0:	460d      	mov	r5, r1
 800d9a2:	4607      	mov	r7, r0
 800d9a4:	4611      	mov	r1, r2
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	4614      	mov	r4, r2
 800d9aa:	f7ff ffdd 	bl	800d968 <__mcmp>
 800d9ae:	1e06      	subs	r6, r0, #0
 800d9b0:	d108      	bne.n	800d9c4 <__mdiff+0x28>
 800d9b2:	4631      	mov	r1, r6
 800d9b4:	4638      	mov	r0, r7
 800d9b6:	f7ff fd83 	bl	800d4c0 <_Balloc>
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c4:	bfa4      	itt	ge
 800d9c6:	4623      	movge	r3, r4
 800d9c8:	462c      	movge	r4, r5
 800d9ca:	4638      	mov	r0, r7
 800d9cc:	6861      	ldr	r1, [r4, #4]
 800d9ce:	bfa6      	itte	ge
 800d9d0:	461d      	movge	r5, r3
 800d9d2:	2600      	movge	r6, #0
 800d9d4:	2601      	movlt	r6, #1
 800d9d6:	f7ff fd73 	bl	800d4c0 <_Balloc>
 800d9da:	692b      	ldr	r3, [r5, #16]
 800d9dc:	60c6      	str	r6, [r0, #12]
 800d9de:	6926      	ldr	r6, [r4, #16]
 800d9e0:	f105 0914 	add.w	r9, r5, #20
 800d9e4:	f104 0214 	add.w	r2, r4, #20
 800d9e8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d9ec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d9f0:	f100 0514 	add.w	r5, r0, #20
 800d9f4:	f04f 0e00 	mov.w	lr, #0
 800d9f8:	f852 ab04 	ldr.w	sl, [r2], #4
 800d9fc:	f859 4b04 	ldr.w	r4, [r9], #4
 800da00:	fa1e f18a 	uxtah	r1, lr, sl
 800da04:	b2a3      	uxth	r3, r4
 800da06:	1ac9      	subs	r1, r1, r3
 800da08:	0c23      	lsrs	r3, r4, #16
 800da0a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800da0e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800da12:	b289      	uxth	r1, r1
 800da14:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800da18:	45c8      	cmp	r8, r9
 800da1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800da1e:	4694      	mov	ip, r2
 800da20:	f845 3b04 	str.w	r3, [r5], #4
 800da24:	d8e8      	bhi.n	800d9f8 <__mdiff+0x5c>
 800da26:	45bc      	cmp	ip, r7
 800da28:	d304      	bcc.n	800da34 <__mdiff+0x98>
 800da2a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800da2e:	b183      	cbz	r3, 800da52 <__mdiff+0xb6>
 800da30:	6106      	str	r6, [r0, #16]
 800da32:	e7c5      	b.n	800d9c0 <__mdiff+0x24>
 800da34:	f85c 1b04 	ldr.w	r1, [ip], #4
 800da38:	fa1e f381 	uxtah	r3, lr, r1
 800da3c:	141a      	asrs	r2, r3, #16
 800da3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800da42:	b29b      	uxth	r3, r3
 800da44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da48:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800da4c:	f845 3b04 	str.w	r3, [r5], #4
 800da50:	e7e9      	b.n	800da26 <__mdiff+0x8a>
 800da52:	3e01      	subs	r6, #1
 800da54:	e7e9      	b.n	800da2a <__mdiff+0x8e>
	...

0800da58 <__ulp>:
 800da58:	4b12      	ldr	r3, [pc, #72]	; (800daa4 <__ulp+0x4c>)
 800da5a:	ee10 2a90 	vmov	r2, s1
 800da5e:	401a      	ands	r2, r3
 800da60:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800da64:	2b00      	cmp	r3, #0
 800da66:	dd04      	ble.n	800da72 <__ulp+0x1a>
 800da68:	2000      	movs	r0, #0
 800da6a:	4619      	mov	r1, r3
 800da6c:	ec41 0b10 	vmov	d0, r0, r1
 800da70:	4770      	bx	lr
 800da72:	425b      	negs	r3, r3
 800da74:	151b      	asrs	r3, r3, #20
 800da76:	2b13      	cmp	r3, #19
 800da78:	f04f 0000 	mov.w	r0, #0
 800da7c:	f04f 0100 	mov.w	r1, #0
 800da80:	dc04      	bgt.n	800da8c <__ulp+0x34>
 800da82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800da86:	fa42 f103 	asr.w	r1, r2, r3
 800da8a:	e7ef      	b.n	800da6c <__ulp+0x14>
 800da8c:	3b14      	subs	r3, #20
 800da8e:	2b1e      	cmp	r3, #30
 800da90:	f04f 0201 	mov.w	r2, #1
 800da94:	bfda      	itte	le
 800da96:	f1c3 031f 	rsble	r3, r3, #31
 800da9a:	fa02 f303 	lslle.w	r3, r2, r3
 800da9e:	4613      	movgt	r3, r2
 800daa0:	4618      	mov	r0, r3
 800daa2:	e7e3      	b.n	800da6c <__ulp+0x14>
 800daa4:	7ff00000 	.word	0x7ff00000

0800daa8 <__b2d>:
 800daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daaa:	6905      	ldr	r5, [r0, #16]
 800daac:	f100 0714 	add.w	r7, r0, #20
 800dab0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dab4:	1f2e      	subs	r6, r5, #4
 800dab6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800daba:	4620      	mov	r0, r4
 800dabc:	f7ff fdc4 	bl	800d648 <__hi0bits>
 800dac0:	f1c0 0320 	rsb	r3, r0, #32
 800dac4:	280a      	cmp	r0, #10
 800dac6:	600b      	str	r3, [r1, #0]
 800dac8:	f8df c074 	ldr.w	ip, [pc, #116]	; 800db40 <__b2d+0x98>
 800dacc:	dc14      	bgt.n	800daf8 <__b2d+0x50>
 800dace:	f1c0 0e0b 	rsb	lr, r0, #11
 800dad2:	fa24 f10e 	lsr.w	r1, r4, lr
 800dad6:	42b7      	cmp	r7, r6
 800dad8:	ea41 030c 	orr.w	r3, r1, ip
 800dadc:	bf34      	ite	cc
 800dade:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dae2:	2100      	movcs	r1, #0
 800dae4:	3015      	adds	r0, #21
 800dae6:	fa04 f000 	lsl.w	r0, r4, r0
 800daea:	fa21 f10e 	lsr.w	r1, r1, lr
 800daee:	ea40 0201 	orr.w	r2, r0, r1
 800daf2:	ec43 2b10 	vmov	d0, r2, r3
 800daf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daf8:	42b7      	cmp	r7, r6
 800dafa:	bf3a      	itte	cc
 800dafc:	f1a5 0608 	subcc.w	r6, r5, #8
 800db00:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800db04:	2100      	movcs	r1, #0
 800db06:	380b      	subs	r0, #11
 800db08:	d015      	beq.n	800db36 <__b2d+0x8e>
 800db0a:	4084      	lsls	r4, r0
 800db0c:	f1c0 0520 	rsb	r5, r0, #32
 800db10:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800db14:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800db18:	42be      	cmp	r6, r7
 800db1a:	fa21 fc05 	lsr.w	ip, r1, r5
 800db1e:	ea44 030c 	orr.w	r3, r4, ip
 800db22:	bf8c      	ite	hi
 800db24:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800db28:	2400      	movls	r4, #0
 800db2a:	fa01 f000 	lsl.w	r0, r1, r0
 800db2e:	40ec      	lsrs	r4, r5
 800db30:	ea40 0204 	orr.w	r2, r0, r4
 800db34:	e7dd      	b.n	800daf2 <__b2d+0x4a>
 800db36:	ea44 030c 	orr.w	r3, r4, ip
 800db3a:	460a      	mov	r2, r1
 800db3c:	e7d9      	b.n	800daf2 <__b2d+0x4a>
 800db3e:	bf00      	nop
 800db40:	3ff00000 	.word	0x3ff00000

0800db44 <__d2b>:
 800db44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db48:	460e      	mov	r6, r1
 800db4a:	2101      	movs	r1, #1
 800db4c:	ec59 8b10 	vmov	r8, r9, d0
 800db50:	4615      	mov	r5, r2
 800db52:	f7ff fcb5 	bl	800d4c0 <_Balloc>
 800db56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800db5a:	4607      	mov	r7, r0
 800db5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db60:	bb34      	cbnz	r4, 800dbb0 <__d2b+0x6c>
 800db62:	9301      	str	r3, [sp, #4]
 800db64:	f1b8 0300 	subs.w	r3, r8, #0
 800db68:	d027      	beq.n	800dbba <__d2b+0x76>
 800db6a:	a802      	add	r0, sp, #8
 800db6c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800db70:	f7ff fd89 	bl	800d686 <__lo0bits>
 800db74:	9900      	ldr	r1, [sp, #0]
 800db76:	b1f0      	cbz	r0, 800dbb6 <__d2b+0x72>
 800db78:	9a01      	ldr	r2, [sp, #4]
 800db7a:	f1c0 0320 	rsb	r3, r0, #32
 800db7e:	fa02 f303 	lsl.w	r3, r2, r3
 800db82:	430b      	orrs	r3, r1
 800db84:	40c2      	lsrs	r2, r0
 800db86:	617b      	str	r3, [r7, #20]
 800db88:	9201      	str	r2, [sp, #4]
 800db8a:	9b01      	ldr	r3, [sp, #4]
 800db8c:	61bb      	str	r3, [r7, #24]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	bf14      	ite	ne
 800db92:	2102      	movne	r1, #2
 800db94:	2101      	moveq	r1, #1
 800db96:	6139      	str	r1, [r7, #16]
 800db98:	b1c4      	cbz	r4, 800dbcc <__d2b+0x88>
 800db9a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800db9e:	4404      	add	r4, r0
 800dba0:	6034      	str	r4, [r6, #0]
 800dba2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dba6:	6028      	str	r0, [r5, #0]
 800dba8:	4638      	mov	r0, r7
 800dbaa:	b003      	add	sp, #12
 800dbac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbb4:	e7d5      	b.n	800db62 <__d2b+0x1e>
 800dbb6:	6179      	str	r1, [r7, #20]
 800dbb8:	e7e7      	b.n	800db8a <__d2b+0x46>
 800dbba:	a801      	add	r0, sp, #4
 800dbbc:	f7ff fd63 	bl	800d686 <__lo0bits>
 800dbc0:	9b01      	ldr	r3, [sp, #4]
 800dbc2:	617b      	str	r3, [r7, #20]
 800dbc4:	2101      	movs	r1, #1
 800dbc6:	6139      	str	r1, [r7, #16]
 800dbc8:	3020      	adds	r0, #32
 800dbca:	e7e5      	b.n	800db98 <__d2b+0x54>
 800dbcc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800dbd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dbd4:	6030      	str	r0, [r6, #0]
 800dbd6:	6918      	ldr	r0, [r3, #16]
 800dbd8:	f7ff fd36 	bl	800d648 <__hi0bits>
 800dbdc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800dbe0:	e7e1      	b.n	800dba6 <__d2b+0x62>

0800dbe2 <__ratio>:
 800dbe2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe6:	4688      	mov	r8, r1
 800dbe8:	4669      	mov	r1, sp
 800dbea:	4681      	mov	r9, r0
 800dbec:	f7ff ff5c 	bl	800daa8 <__b2d>
 800dbf0:	a901      	add	r1, sp, #4
 800dbf2:	4640      	mov	r0, r8
 800dbf4:	ec57 6b10 	vmov	r6, r7, d0
 800dbf8:	f7ff ff56 	bl	800daa8 <__b2d>
 800dbfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc00:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dc04:	eba3 0c02 	sub.w	ip, r3, r2
 800dc08:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dc0c:	1a9b      	subs	r3, r3, r2
 800dc0e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dc12:	ec5b ab10 	vmov	sl, fp, d0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	bfce      	itee	gt
 800dc1a:	463a      	movgt	r2, r7
 800dc1c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dc20:	465a      	movle	r2, fp
 800dc22:	4659      	mov	r1, fp
 800dc24:	463d      	mov	r5, r7
 800dc26:	bfd4      	ite	le
 800dc28:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800dc2c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800dc30:	4630      	mov	r0, r6
 800dc32:	ee10 2a10 	vmov	r2, s0
 800dc36:	460b      	mov	r3, r1
 800dc38:	4629      	mov	r1, r5
 800dc3a:	f7f2 fe07 	bl	800084c <__aeabi_ddiv>
 800dc3e:	ec41 0b10 	vmov	d0, r0, r1
 800dc42:	b003      	add	sp, #12
 800dc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc48 <__copybits>:
 800dc48:	3901      	subs	r1, #1
 800dc4a:	b510      	push	{r4, lr}
 800dc4c:	1149      	asrs	r1, r1, #5
 800dc4e:	6914      	ldr	r4, [r2, #16]
 800dc50:	3101      	adds	r1, #1
 800dc52:	f102 0314 	add.w	r3, r2, #20
 800dc56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dc5e:	42a3      	cmp	r3, r4
 800dc60:	4602      	mov	r2, r0
 800dc62:	d303      	bcc.n	800dc6c <__copybits+0x24>
 800dc64:	2300      	movs	r3, #0
 800dc66:	428a      	cmp	r2, r1
 800dc68:	d305      	bcc.n	800dc76 <__copybits+0x2e>
 800dc6a:	bd10      	pop	{r4, pc}
 800dc6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc70:	f840 2b04 	str.w	r2, [r0], #4
 800dc74:	e7f3      	b.n	800dc5e <__copybits+0x16>
 800dc76:	f842 3b04 	str.w	r3, [r2], #4
 800dc7a:	e7f4      	b.n	800dc66 <__copybits+0x1e>

0800dc7c <__any_on>:
 800dc7c:	f100 0214 	add.w	r2, r0, #20
 800dc80:	6900      	ldr	r0, [r0, #16]
 800dc82:	114b      	asrs	r3, r1, #5
 800dc84:	4298      	cmp	r0, r3
 800dc86:	b510      	push	{r4, lr}
 800dc88:	db11      	blt.n	800dcae <__any_on+0x32>
 800dc8a:	dd0a      	ble.n	800dca2 <__any_on+0x26>
 800dc8c:	f011 011f 	ands.w	r1, r1, #31
 800dc90:	d007      	beq.n	800dca2 <__any_on+0x26>
 800dc92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dc96:	fa24 f001 	lsr.w	r0, r4, r1
 800dc9a:	fa00 f101 	lsl.w	r1, r0, r1
 800dc9e:	428c      	cmp	r4, r1
 800dca0:	d10b      	bne.n	800dcba <__any_on+0x3e>
 800dca2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d803      	bhi.n	800dcb2 <__any_on+0x36>
 800dcaa:	2000      	movs	r0, #0
 800dcac:	bd10      	pop	{r4, pc}
 800dcae:	4603      	mov	r3, r0
 800dcb0:	e7f7      	b.n	800dca2 <__any_on+0x26>
 800dcb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dcb6:	2900      	cmp	r1, #0
 800dcb8:	d0f5      	beq.n	800dca6 <__any_on+0x2a>
 800dcba:	2001      	movs	r0, #1
 800dcbc:	e7f6      	b.n	800dcac <__any_on+0x30>

0800dcbe <_calloc_r>:
 800dcbe:	b538      	push	{r3, r4, r5, lr}
 800dcc0:	fb02 f401 	mul.w	r4, r2, r1
 800dcc4:	4621      	mov	r1, r4
 800dcc6:	f000 f857 	bl	800dd78 <_malloc_r>
 800dcca:	4605      	mov	r5, r0
 800dccc:	b118      	cbz	r0, 800dcd6 <_calloc_r+0x18>
 800dcce:	4622      	mov	r2, r4
 800dcd0:	2100      	movs	r1, #0
 800dcd2:	f7fc fd20 	bl	800a716 <memset>
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dcdc <_free_r>:
 800dcdc:	b538      	push	{r3, r4, r5, lr}
 800dcde:	4605      	mov	r5, r0
 800dce0:	2900      	cmp	r1, #0
 800dce2:	d045      	beq.n	800dd70 <_free_r+0x94>
 800dce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dce8:	1f0c      	subs	r4, r1, #4
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	bfb8      	it	lt
 800dcee:	18e4      	addlt	r4, r4, r3
 800dcf0:	f000 fa36 	bl	800e160 <__malloc_lock>
 800dcf4:	4a1f      	ldr	r2, [pc, #124]	; (800dd74 <_free_r+0x98>)
 800dcf6:	6813      	ldr	r3, [r2, #0]
 800dcf8:	4610      	mov	r0, r2
 800dcfa:	b933      	cbnz	r3, 800dd0a <_free_r+0x2e>
 800dcfc:	6063      	str	r3, [r4, #4]
 800dcfe:	6014      	str	r4, [r2, #0]
 800dd00:	4628      	mov	r0, r5
 800dd02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd06:	f000 ba2c 	b.w	800e162 <__malloc_unlock>
 800dd0a:	42a3      	cmp	r3, r4
 800dd0c:	d90c      	bls.n	800dd28 <_free_r+0x4c>
 800dd0e:	6821      	ldr	r1, [r4, #0]
 800dd10:	1862      	adds	r2, r4, r1
 800dd12:	4293      	cmp	r3, r2
 800dd14:	bf04      	itt	eq
 800dd16:	681a      	ldreq	r2, [r3, #0]
 800dd18:	685b      	ldreq	r3, [r3, #4]
 800dd1a:	6063      	str	r3, [r4, #4]
 800dd1c:	bf04      	itt	eq
 800dd1e:	1852      	addeq	r2, r2, r1
 800dd20:	6022      	streq	r2, [r4, #0]
 800dd22:	6004      	str	r4, [r0, #0]
 800dd24:	e7ec      	b.n	800dd00 <_free_r+0x24>
 800dd26:	4613      	mov	r3, r2
 800dd28:	685a      	ldr	r2, [r3, #4]
 800dd2a:	b10a      	cbz	r2, 800dd30 <_free_r+0x54>
 800dd2c:	42a2      	cmp	r2, r4
 800dd2e:	d9fa      	bls.n	800dd26 <_free_r+0x4a>
 800dd30:	6819      	ldr	r1, [r3, #0]
 800dd32:	1858      	adds	r0, r3, r1
 800dd34:	42a0      	cmp	r0, r4
 800dd36:	d10b      	bne.n	800dd50 <_free_r+0x74>
 800dd38:	6820      	ldr	r0, [r4, #0]
 800dd3a:	4401      	add	r1, r0
 800dd3c:	1858      	adds	r0, r3, r1
 800dd3e:	4282      	cmp	r2, r0
 800dd40:	6019      	str	r1, [r3, #0]
 800dd42:	d1dd      	bne.n	800dd00 <_free_r+0x24>
 800dd44:	6810      	ldr	r0, [r2, #0]
 800dd46:	6852      	ldr	r2, [r2, #4]
 800dd48:	605a      	str	r2, [r3, #4]
 800dd4a:	4401      	add	r1, r0
 800dd4c:	6019      	str	r1, [r3, #0]
 800dd4e:	e7d7      	b.n	800dd00 <_free_r+0x24>
 800dd50:	d902      	bls.n	800dd58 <_free_r+0x7c>
 800dd52:	230c      	movs	r3, #12
 800dd54:	602b      	str	r3, [r5, #0]
 800dd56:	e7d3      	b.n	800dd00 <_free_r+0x24>
 800dd58:	6820      	ldr	r0, [r4, #0]
 800dd5a:	1821      	adds	r1, r4, r0
 800dd5c:	428a      	cmp	r2, r1
 800dd5e:	bf04      	itt	eq
 800dd60:	6811      	ldreq	r1, [r2, #0]
 800dd62:	6852      	ldreq	r2, [r2, #4]
 800dd64:	6062      	str	r2, [r4, #4]
 800dd66:	bf04      	itt	eq
 800dd68:	1809      	addeq	r1, r1, r0
 800dd6a:	6021      	streq	r1, [r4, #0]
 800dd6c:	605c      	str	r4, [r3, #4]
 800dd6e:	e7c7      	b.n	800dd00 <_free_r+0x24>
 800dd70:	bd38      	pop	{r3, r4, r5, pc}
 800dd72:	bf00      	nop
 800dd74:	20000280 	.word	0x20000280

0800dd78 <_malloc_r>:
 800dd78:	b570      	push	{r4, r5, r6, lr}
 800dd7a:	1ccd      	adds	r5, r1, #3
 800dd7c:	f025 0503 	bic.w	r5, r5, #3
 800dd80:	3508      	adds	r5, #8
 800dd82:	2d0c      	cmp	r5, #12
 800dd84:	bf38      	it	cc
 800dd86:	250c      	movcc	r5, #12
 800dd88:	2d00      	cmp	r5, #0
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	db01      	blt.n	800dd92 <_malloc_r+0x1a>
 800dd8e:	42a9      	cmp	r1, r5
 800dd90:	d903      	bls.n	800dd9a <_malloc_r+0x22>
 800dd92:	230c      	movs	r3, #12
 800dd94:	6033      	str	r3, [r6, #0]
 800dd96:	2000      	movs	r0, #0
 800dd98:	bd70      	pop	{r4, r5, r6, pc}
 800dd9a:	f000 f9e1 	bl	800e160 <__malloc_lock>
 800dd9e:	4a21      	ldr	r2, [pc, #132]	; (800de24 <_malloc_r+0xac>)
 800dda0:	6814      	ldr	r4, [r2, #0]
 800dda2:	4621      	mov	r1, r4
 800dda4:	b991      	cbnz	r1, 800ddcc <_malloc_r+0x54>
 800dda6:	4c20      	ldr	r4, [pc, #128]	; (800de28 <_malloc_r+0xb0>)
 800dda8:	6823      	ldr	r3, [r4, #0]
 800ddaa:	b91b      	cbnz	r3, 800ddb4 <_malloc_r+0x3c>
 800ddac:	4630      	mov	r0, r6
 800ddae:	f000 f98f 	bl	800e0d0 <_sbrk_r>
 800ddb2:	6020      	str	r0, [r4, #0]
 800ddb4:	4629      	mov	r1, r5
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	f000 f98a 	bl	800e0d0 <_sbrk_r>
 800ddbc:	1c43      	adds	r3, r0, #1
 800ddbe:	d124      	bne.n	800de0a <_malloc_r+0x92>
 800ddc0:	230c      	movs	r3, #12
 800ddc2:	6033      	str	r3, [r6, #0]
 800ddc4:	4630      	mov	r0, r6
 800ddc6:	f000 f9cc 	bl	800e162 <__malloc_unlock>
 800ddca:	e7e4      	b.n	800dd96 <_malloc_r+0x1e>
 800ddcc:	680b      	ldr	r3, [r1, #0]
 800ddce:	1b5b      	subs	r3, r3, r5
 800ddd0:	d418      	bmi.n	800de04 <_malloc_r+0x8c>
 800ddd2:	2b0b      	cmp	r3, #11
 800ddd4:	d90f      	bls.n	800ddf6 <_malloc_r+0x7e>
 800ddd6:	600b      	str	r3, [r1, #0]
 800ddd8:	50cd      	str	r5, [r1, r3]
 800ddda:	18cc      	adds	r4, r1, r3
 800dddc:	4630      	mov	r0, r6
 800ddde:	f000 f9c0 	bl	800e162 <__malloc_unlock>
 800dde2:	f104 000b 	add.w	r0, r4, #11
 800dde6:	1d23      	adds	r3, r4, #4
 800dde8:	f020 0007 	bic.w	r0, r0, #7
 800ddec:	1ac3      	subs	r3, r0, r3
 800ddee:	d0d3      	beq.n	800dd98 <_malloc_r+0x20>
 800ddf0:	425a      	negs	r2, r3
 800ddf2:	50e2      	str	r2, [r4, r3]
 800ddf4:	e7d0      	b.n	800dd98 <_malloc_r+0x20>
 800ddf6:	428c      	cmp	r4, r1
 800ddf8:	684b      	ldr	r3, [r1, #4]
 800ddfa:	bf16      	itet	ne
 800ddfc:	6063      	strne	r3, [r4, #4]
 800ddfe:	6013      	streq	r3, [r2, #0]
 800de00:	460c      	movne	r4, r1
 800de02:	e7eb      	b.n	800dddc <_malloc_r+0x64>
 800de04:	460c      	mov	r4, r1
 800de06:	6849      	ldr	r1, [r1, #4]
 800de08:	e7cc      	b.n	800dda4 <_malloc_r+0x2c>
 800de0a:	1cc4      	adds	r4, r0, #3
 800de0c:	f024 0403 	bic.w	r4, r4, #3
 800de10:	42a0      	cmp	r0, r4
 800de12:	d005      	beq.n	800de20 <_malloc_r+0xa8>
 800de14:	1a21      	subs	r1, r4, r0
 800de16:	4630      	mov	r0, r6
 800de18:	f000 f95a 	bl	800e0d0 <_sbrk_r>
 800de1c:	3001      	adds	r0, #1
 800de1e:	d0cf      	beq.n	800ddc0 <_malloc_r+0x48>
 800de20:	6025      	str	r5, [r4, #0]
 800de22:	e7db      	b.n	800dddc <_malloc_r+0x64>
 800de24:	20000280 	.word	0x20000280
 800de28:	20000284 	.word	0x20000284

0800de2c <__ssputs_r>:
 800de2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de30:	688e      	ldr	r6, [r1, #8]
 800de32:	429e      	cmp	r6, r3
 800de34:	4682      	mov	sl, r0
 800de36:	460c      	mov	r4, r1
 800de38:	4690      	mov	r8, r2
 800de3a:	4699      	mov	r9, r3
 800de3c:	d837      	bhi.n	800deae <__ssputs_r+0x82>
 800de3e:	898a      	ldrh	r2, [r1, #12]
 800de40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800de44:	d031      	beq.n	800deaa <__ssputs_r+0x7e>
 800de46:	6825      	ldr	r5, [r4, #0]
 800de48:	6909      	ldr	r1, [r1, #16]
 800de4a:	1a6f      	subs	r7, r5, r1
 800de4c:	6965      	ldr	r5, [r4, #20]
 800de4e:	2302      	movs	r3, #2
 800de50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de54:	fb95 f5f3 	sdiv	r5, r5, r3
 800de58:	f109 0301 	add.w	r3, r9, #1
 800de5c:	443b      	add	r3, r7
 800de5e:	429d      	cmp	r5, r3
 800de60:	bf38      	it	cc
 800de62:	461d      	movcc	r5, r3
 800de64:	0553      	lsls	r3, r2, #21
 800de66:	d530      	bpl.n	800deca <__ssputs_r+0x9e>
 800de68:	4629      	mov	r1, r5
 800de6a:	f7ff ff85 	bl	800dd78 <_malloc_r>
 800de6e:	4606      	mov	r6, r0
 800de70:	b950      	cbnz	r0, 800de88 <__ssputs_r+0x5c>
 800de72:	230c      	movs	r3, #12
 800de74:	f8ca 3000 	str.w	r3, [sl]
 800de78:	89a3      	ldrh	r3, [r4, #12]
 800de7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de7e:	81a3      	strh	r3, [r4, #12]
 800de80:	f04f 30ff 	mov.w	r0, #4294967295
 800de84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de88:	463a      	mov	r2, r7
 800de8a:	6921      	ldr	r1, [r4, #16]
 800de8c:	f7fc fc38 	bl	800a700 <memcpy>
 800de90:	89a3      	ldrh	r3, [r4, #12]
 800de92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800de96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de9a:	81a3      	strh	r3, [r4, #12]
 800de9c:	6126      	str	r6, [r4, #16]
 800de9e:	6165      	str	r5, [r4, #20]
 800dea0:	443e      	add	r6, r7
 800dea2:	1bed      	subs	r5, r5, r7
 800dea4:	6026      	str	r6, [r4, #0]
 800dea6:	60a5      	str	r5, [r4, #8]
 800dea8:	464e      	mov	r6, r9
 800deaa:	454e      	cmp	r6, r9
 800deac:	d900      	bls.n	800deb0 <__ssputs_r+0x84>
 800deae:	464e      	mov	r6, r9
 800deb0:	4632      	mov	r2, r6
 800deb2:	4641      	mov	r1, r8
 800deb4:	6820      	ldr	r0, [r4, #0]
 800deb6:	f000 f93a 	bl	800e12e <memmove>
 800deba:	68a3      	ldr	r3, [r4, #8]
 800debc:	1b9b      	subs	r3, r3, r6
 800debe:	60a3      	str	r3, [r4, #8]
 800dec0:	6823      	ldr	r3, [r4, #0]
 800dec2:	441e      	add	r6, r3
 800dec4:	6026      	str	r6, [r4, #0]
 800dec6:	2000      	movs	r0, #0
 800dec8:	e7dc      	b.n	800de84 <__ssputs_r+0x58>
 800deca:	462a      	mov	r2, r5
 800decc:	f000 f94a 	bl	800e164 <_realloc_r>
 800ded0:	4606      	mov	r6, r0
 800ded2:	2800      	cmp	r0, #0
 800ded4:	d1e2      	bne.n	800de9c <__ssputs_r+0x70>
 800ded6:	6921      	ldr	r1, [r4, #16]
 800ded8:	4650      	mov	r0, sl
 800deda:	f7ff feff 	bl	800dcdc <_free_r>
 800dede:	e7c8      	b.n	800de72 <__ssputs_r+0x46>

0800dee0 <_svfiprintf_r>:
 800dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee4:	461d      	mov	r5, r3
 800dee6:	898b      	ldrh	r3, [r1, #12]
 800dee8:	061f      	lsls	r7, r3, #24
 800deea:	b09d      	sub	sp, #116	; 0x74
 800deec:	4680      	mov	r8, r0
 800deee:	460c      	mov	r4, r1
 800def0:	4616      	mov	r6, r2
 800def2:	d50f      	bpl.n	800df14 <_svfiprintf_r+0x34>
 800def4:	690b      	ldr	r3, [r1, #16]
 800def6:	b96b      	cbnz	r3, 800df14 <_svfiprintf_r+0x34>
 800def8:	2140      	movs	r1, #64	; 0x40
 800defa:	f7ff ff3d 	bl	800dd78 <_malloc_r>
 800defe:	6020      	str	r0, [r4, #0]
 800df00:	6120      	str	r0, [r4, #16]
 800df02:	b928      	cbnz	r0, 800df10 <_svfiprintf_r+0x30>
 800df04:	230c      	movs	r3, #12
 800df06:	f8c8 3000 	str.w	r3, [r8]
 800df0a:	f04f 30ff 	mov.w	r0, #4294967295
 800df0e:	e0c8      	b.n	800e0a2 <_svfiprintf_r+0x1c2>
 800df10:	2340      	movs	r3, #64	; 0x40
 800df12:	6163      	str	r3, [r4, #20]
 800df14:	2300      	movs	r3, #0
 800df16:	9309      	str	r3, [sp, #36]	; 0x24
 800df18:	2320      	movs	r3, #32
 800df1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df1e:	2330      	movs	r3, #48	; 0x30
 800df20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df24:	9503      	str	r5, [sp, #12]
 800df26:	f04f 0b01 	mov.w	fp, #1
 800df2a:	4637      	mov	r7, r6
 800df2c:	463d      	mov	r5, r7
 800df2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800df32:	b10b      	cbz	r3, 800df38 <_svfiprintf_r+0x58>
 800df34:	2b25      	cmp	r3, #37	; 0x25
 800df36:	d13e      	bne.n	800dfb6 <_svfiprintf_r+0xd6>
 800df38:	ebb7 0a06 	subs.w	sl, r7, r6
 800df3c:	d00b      	beq.n	800df56 <_svfiprintf_r+0x76>
 800df3e:	4653      	mov	r3, sl
 800df40:	4632      	mov	r2, r6
 800df42:	4621      	mov	r1, r4
 800df44:	4640      	mov	r0, r8
 800df46:	f7ff ff71 	bl	800de2c <__ssputs_r>
 800df4a:	3001      	adds	r0, #1
 800df4c:	f000 80a4 	beq.w	800e098 <_svfiprintf_r+0x1b8>
 800df50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df52:	4453      	add	r3, sl
 800df54:	9309      	str	r3, [sp, #36]	; 0x24
 800df56:	783b      	ldrb	r3, [r7, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f000 809d 	beq.w	800e098 <_svfiprintf_r+0x1b8>
 800df5e:	2300      	movs	r3, #0
 800df60:	f04f 32ff 	mov.w	r2, #4294967295
 800df64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df68:	9304      	str	r3, [sp, #16]
 800df6a:	9307      	str	r3, [sp, #28]
 800df6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df70:	931a      	str	r3, [sp, #104]	; 0x68
 800df72:	462f      	mov	r7, r5
 800df74:	2205      	movs	r2, #5
 800df76:	f817 1b01 	ldrb.w	r1, [r7], #1
 800df7a:	4850      	ldr	r0, [pc, #320]	; (800e0bc <_svfiprintf_r+0x1dc>)
 800df7c:	f7f2 f930 	bl	80001e0 <memchr>
 800df80:	9b04      	ldr	r3, [sp, #16]
 800df82:	b9d0      	cbnz	r0, 800dfba <_svfiprintf_r+0xda>
 800df84:	06d9      	lsls	r1, r3, #27
 800df86:	bf44      	itt	mi
 800df88:	2220      	movmi	r2, #32
 800df8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df8e:	071a      	lsls	r2, r3, #28
 800df90:	bf44      	itt	mi
 800df92:	222b      	movmi	r2, #43	; 0x2b
 800df94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df98:	782a      	ldrb	r2, [r5, #0]
 800df9a:	2a2a      	cmp	r2, #42	; 0x2a
 800df9c:	d015      	beq.n	800dfca <_svfiprintf_r+0xea>
 800df9e:	9a07      	ldr	r2, [sp, #28]
 800dfa0:	462f      	mov	r7, r5
 800dfa2:	2000      	movs	r0, #0
 800dfa4:	250a      	movs	r5, #10
 800dfa6:	4639      	mov	r1, r7
 800dfa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfac:	3b30      	subs	r3, #48	; 0x30
 800dfae:	2b09      	cmp	r3, #9
 800dfb0:	d94d      	bls.n	800e04e <_svfiprintf_r+0x16e>
 800dfb2:	b1b8      	cbz	r0, 800dfe4 <_svfiprintf_r+0x104>
 800dfb4:	e00f      	b.n	800dfd6 <_svfiprintf_r+0xf6>
 800dfb6:	462f      	mov	r7, r5
 800dfb8:	e7b8      	b.n	800df2c <_svfiprintf_r+0x4c>
 800dfba:	4a40      	ldr	r2, [pc, #256]	; (800e0bc <_svfiprintf_r+0x1dc>)
 800dfbc:	1a80      	subs	r0, r0, r2
 800dfbe:	fa0b f000 	lsl.w	r0, fp, r0
 800dfc2:	4318      	orrs	r0, r3
 800dfc4:	9004      	str	r0, [sp, #16]
 800dfc6:	463d      	mov	r5, r7
 800dfc8:	e7d3      	b.n	800df72 <_svfiprintf_r+0x92>
 800dfca:	9a03      	ldr	r2, [sp, #12]
 800dfcc:	1d11      	adds	r1, r2, #4
 800dfce:	6812      	ldr	r2, [r2, #0]
 800dfd0:	9103      	str	r1, [sp, #12]
 800dfd2:	2a00      	cmp	r2, #0
 800dfd4:	db01      	blt.n	800dfda <_svfiprintf_r+0xfa>
 800dfd6:	9207      	str	r2, [sp, #28]
 800dfd8:	e004      	b.n	800dfe4 <_svfiprintf_r+0x104>
 800dfda:	4252      	negs	r2, r2
 800dfdc:	f043 0302 	orr.w	r3, r3, #2
 800dfe0:	9207      	str	r2, [sp, #28]
 800dfe2:	9304      	str	r3, [sp, #16]
 800dfe4:	783b      	ldrb	r3, [r7, #0]
 800dfe6:	2b2e      	cmp	r3, #46	; 0x2e
 800dfe8:	d10c      	bne.n	800e004 <_svfiprintf_r+0x124>
 800dfea:	787b      	ldrb	r3, [r7, #1]
 800dfec:	2b2a      	cmp	r3, #42	; 0x2a
 800dfee:	d133      	bne.n	800e058 <_svfiprintf_r+0x178>
 800dff0:	9b03      	ldr	r3, [sp, #12]
 800dff2:	1d1a      	adds	r2, r3, #4
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	9203      	str	r2, [sp, #12]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	bfb8      	it	lt
 800dffc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e000:	3702      	adds	r7, #2
 800e002:	9305      	str	r3, [sp, #20]
 800e004:	4d2e      	ldr	r5, [pc, #184]	; (800e0c0 <_svfiprintf_r+0x1e0>)
 800e006:	7839      	ldrb	r1, [r7, #0]
 800e008:	2203      	movs	r2, #3
 800e00a:	4628      	mov	r0, r5
 800e00c:	f7f2 f8e8 	bl	80001e0 <memchr>
 800e010:	b138      	cbz	r0, 800e022 <_svfiprintf_r+0x142>
 800e012:	2340      	movs	r3, #64	; 0x40
 800e014:	1b40      	subs	r0, r0, r5
 800e016:	fa03 f000 	lsl.w	r0, r3, r0
 800e01a:	9b04      	ldr	r3, [sp, #16]
 800e01c:	4303      	orrs	r3, r0
 800e01e:	3701      	adds	r7, #1
 800e020:	9304      	str	r3, [sp, #16]
 800e022:	7839      	ldrb	r1, [r7, #0]
 800e024:	4827      	ldr	r0, [pc, #156]	; (800e0c4 <_svfiprintf_r+0x1e4>)
 800e026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e02a:	2206      	movs	r2, #6
 800e02c:	1c7e      	adds	r6, r7, #1
 800e02e:	f7f2 f8d7 	bl	80001e0 <memchr>
 800e032:	2800      	cmp	r0, #0
 800e034:	d038      	beq.n	800e0a8 <_svfiprintf_r+0x1c8>
 800e036:	4b24      	ldr	r3, [pc, #144]	; (800e0c8 <_svfiprintf_r+0x1e8>)
 800e038:	bb13      	cbnz	r3, 800e080 <_svfiprintf_r+0x1a0>
 800e03a:	9b03      	ldr	r3, [sp, #12]
 800e03c:	3307      	adds	r3, #7
 800e03e:	f023 0307 	bic.w	r3, r3, #7
 800e042:	3308      	adds	r3, #8
 800e044:	9303      	str	r3, [sp, #12]
 800e046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e048:	444b      	add	r3, r9
 800e04a:	9309      	str	r3, [sp, #36]	; 0x24
 800e04c:	e76d      	b.n	800df2a <_svfiprintf_r+0x4a>
 800e04e:	fb05 3202 	mla	r2, r5, r2, r3
 800e052:	2001      	movs	r0, #1
 800e054:	460f      	mov	r7, r1
 800e056:	e7a6      	b.n	800dfa6 <_svfiprintf_r+0xc6>
 800e058:	2300      	movs	r3, #0
 800e05a:	3701      	adds	r7, #1
 800e05c:	9305      	str	r3, [sp, #20]
 800e05e:	4619      	mov	r1, r3
 800e060:	250a      	movs	r5, #10
 800e062:	4638      	mov	r0, r7
 800e064:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e068:	3a30      	subs	r2, #48	; 0x30
 800e06a:	2a09      	cmp	r2, #9
 800e06c:	d903      	bls.n	800e076 <_svfiprintf_r+0x196>
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d0c8      	beq.n	800e004 <_svfiprintf_r+0x124>
 800e072:	9105      	str	r1, [sp, #20]
 800e074:	e7c6      	b.n	800e004 <_svfiprintf_r+0x124>
 800e076:	fb05 2101 	mla	r1, r5, r1, r2
 800e07a:	2301      	movs	r3, #1
 800e07c:	4607      	mov	r7, r0
 800e07e:	e7f0      	b.n	800e062 <_svfiprintf_r+0x182>
 800e080:	ab03      	add	r3, sp, #12
 800e082:	9300      	str	r3, [sp, #0]
 800e084:	4622      	mov	r2, r4
 800e086:	4b11      	ldr	r3, [pc, #68]	; (800e0cc <_svfiprintf_r+0x1ec>)
 800e088:	a904      	add	r1, sp, #16
 800e08a:	4640      	mov	r0, r8
 800e08c:	f7fc fbe0 	bl	800a850 <_printf_float>
 800e090:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e094:	4681      	mov	r9, r0
 800e096:	d1d6      	bne.n	800e046 <_svfiprintf_r+0x166>
 800e098:	89a3      	ldrh	r3, [r4, #12]
 800e09a:	065b      	lsls	r3, r3, #25
 800e09c:	f53f af35 	bmi.w	800df0a <_svfiprintf_r+0x2a>
 800e0a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0a2:	b01d      	add	sp, #116	; 0x74
 800e0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a8:	ab03      	add	r3, sp, #12
 800e0aa:	9300      	str	r3, [sp, #0]
 800e0ac:	4622      	mov	r2, r4
 800e0ae:	4b07      	ldr	r3, [pc, #28]	; (800e0cc <_svfiprintf_r+0x1ec>)
 800e0b0:	a904      	add	r1, sp, #16
 800e0b2:	4640      	mov	r0, r8
 800e0b4:	f7fc fe82 	bl	800adbc <_printf_i>
 800e0b8:	e7ea      	b.n	800e090 <_svfiprintf_r+0x1b0>
 800e0ba:	bf00      	nop
 800e0bc:	0800efcc 	.word	0x0800efcc
 800e0c0:	0800efd2 	.word	0x0800efd2
 800e0c4:	0800efd6 	.word	0x0800efd6
 800e0c8:	0800a851 	.word	0x0800a851
 800e0cc:	0800de2d 	.word	0x0800de2d

0800e0d0 <_sbrk_r>:
 800e0d0:	b538      	push	{r3, r4, r5, lr}
 800e0d2:	4c06      	ldr	r4, [pc, #24]	; (800e0ec <_sbrk_r+0x1c>)
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	4605      	mov	r5, r0
 800e0d8:	4608      	mov	r0, r1
 800e0da:	6023      	str	r3, [r4, #0]
 800e0dc:	f7f7 fa5c 	bl	8005598 <_sbrk>
 800e0e0:	1c43      	adds	r3, r0, #1
 800e0e2:	d102      	bne.n	800e0ea <_sbrk_r+0x1a>
 800e0e4:	6823      	ldr	r3, [r4, #0]
 800e0e6:	b103      	cbz	r3, 800e0ea <_sbrk_r+0x1a>
 800e0e8:	602b      	str	r3, [r5, #0]
 800e0ea:	bd38      	pop	{r3, r4, r5, pc}
 800e0ec:	2000c280 	.word	0x2000c280

0800e0f0 <strncmp>:
 800e0f0:	b510      	push	{r4, lr}
 800e0f2:	b16a      	cbz	r2, 800e110 <strncmp+0x20>
 800e0f4:	3901      	subs	r1, #1
 800e0f6:	1884      	adds	r4, r0, r2
 800e0f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e0fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e100:	4293      	cmp	r3, r2
 800e102:	d103      	bne.n	800e10c <strncmp+0x1c>
 800e104:	42a0      	cmp	r0, r4
 800e106:	d001      	beq.n	800e10c <strncmp+0x1c>
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d1f5      	bne.n	800e0f8 <strncmp+0x8>
 800e10c:	1a98      	subs	r0, r3, r2
 800e10e:	bd10      	pop	{r4, pc}
 800e110:	4610      	mov	r0, r2
 800e112:	e7fc      	b.n	800e10e <strncmp+0x1e>

0800e114 <__ascii_wctomb>:
 800e114:	b149      	cbz	r1, 800e12a <__ascii_wctomb+0x16>
 800e116:	2aff      	cmp	r2, #255	; 0xff
 800e118:	bf85      	ittet	hi
 800e11a:	238a      	movhi	r3, #138	; 0x8a
 800e11c:	6003      	strhi	r3, [r0, #0]
 800e11e:	700a      	strbls	r2, [r1, #0]
 800e120:	f04f 30ff 	movhi.w	r0, #4294967295
 800e124:	bf98      	it	ls
 800e126:	2001      	movls	r0, #1
 800e128:	4770      	bx	lr
 800e12a:	4608      	mov	r0, r1
 800e12c:	4770      	bx	lr

0800e12e <memmove>:
 800e12e:	4288      	cmp	r0, r1
 800e130:	b510      	push	{r4, lr}
 800e132:	eb01 0302 	add.w	r3, r1, r2
 800e136:	d807      	bhi.n	800e148 <memmove+0x1a>
 800e138:	1e42      	subs	r2, r0, #1
 800e13a:	4299      	cmp	r1, r3
 800e13c:	d00a      	beq.n	800e154 <memmove+0x26>
 800e13e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e142:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e146:	e7f8      	b.n	800e13a <memmove+0xc>
 800e148:	4283      	cmp	r3, r0
 800e14a:	d9f5      	bls.n	800e138 <memmove+0xa>
 800e14c:	1881      	adds	r1, r0, r2
 800e14e:	1ad2      	subs	r2, r2, r3
 800e150:	42d3      	cmn	r3, r2
 800e152:	d100      	bne.n	800e156 <memmove+0x28>
 800e154:	bd10      	pop	{r4, pc}
 800e156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e15a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e15e:	e7f7      	b.n	800e150 <memmove+0x22>

0800e160 <__malloc_lock>:
 800e160:	4770      	bx	lr

0800e162 <__malloc_unlock>:
 800e162:	4770      	bx	lr

0800e164 <_realloc_r>:
 800e164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e166:	4607      	mov	r7, r0
 800e168:	4614      	mov	r4, r2
 800e16a:	460e      	mov	r6, r1
 800e16c:	b921      	cbnz	r1, 800e178 <_realloc_r+0x14>
 800e16e:	4611      	mov	r1, r2
 800e170:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e174:	f7ff be00 	b.w	800dd78 <_malloc_r>
 800e178:	b922      	cbnz	r2, 800e184 <_realloc_r+0x20>
 800e17a:	f7ff fdaf 	bl	800dcdc <_free_r>
 800e17e:	4625      	mov	r5, r4
 800e180:	4628      	mov	r0, r5
 800e182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e184:	f000 f814 	bl	800e1b0 <_malloc_usable_size_r>
 800e188:	42a0      	cmp	r0, r4
 800e18a:	d20f      	bcs.n	800e1ac <_realloc_r+0x48>
 800e18c:	4621      	mov	r1, r4
 800e18e:	4638      	mov	r0, r7
 800e190:	f7ff fdf2 	bl	800dd78 <_malloc_r>
 800e194:	4605      	mov	r5, r0
 800e196:	2800      	cmp	r0, #0
 800e198:	d0f2      	beq.n	800e180 <_realloc_r+0x1c>
 800e19a:	4631      	mov	r1, r6
 800e19c:	4622      	mov	r2, r4
 800e19e:	f7fc faaf 	bl	800a700 <memcpy>
 800e1a2:	4631      	mov	r1, r6
 800e1a4:	4638      	mov	r0, r7
 800e1a6:	f7ff fd99 	bl	800dcdc <_free_r>
 800e1aa:	e7e9      	b.n	800e180 <_realloc_r+0x1c>
 800e1ac:	4635      	mov	r5, r6
 800e1ae:	e7e7      	b.n	800e180 <_realloc_r+0x1c>

0800e1b0 <_malloc_usable_size_r>:
 800e1b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1b4:	1f18      	subs	r0, r3, #4
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	bfbc      	itt	lt
 800e1ba:	580b      	ldrlt	r3, [r1, r0]
 800e1bc:	18c0      	addlt	r0, r0, r3
 800e1be:	4770      	bx	lr

0800e1c0 <powf>:
 800e1c0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800e1c4:	ed2d 8b04 	vpush	{d8-d9}
 800e1c8:	4ca7      	ldr	r4, [pc, #668]	; (800e468 <powf+0x2a8>)
 800e1ca:	b08a      	sub	sp, #40	; 0x28
 800e1cc:	eef0 8a40 	vmov.f32	s17, s0
 800e1d0:	eeb0 8a60 	vmov.f32	s16, s1
 800e1d4:	f000 f9a8 	bl	800e528 <__ieee754_powf>
 800e1d8:	f994 5000 	ldrsb.w	r5, [r4]
 800e1dc:	1c6b      	adds	r3, r5, #1
 800e1de:	eeb0 9a40 	vmov.f32	s18, s0
 800e1e2:	4626      	mov	r6, r4
 800e1e4:	d05f      	beq.n	800e2a6 <powf+0xe6>
 800e1e6:	eeb4 8a48 	vcmp.f32	s16, s16
 800e1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ee:	d65a      	bvs.n	800e2a6 <powf+0xe6>
 800e1f0:	eef4 8a68 	vcmp.f32	s17, s17
 800e1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f8:	d721      	bvc.n	800e23e <powf+0x7e>
 800e1fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e202:	d150      	bne.n	800e2a6 <powf+0xe6>
 800e204:	2301      	movs	r3, #1
 800e206:	9300      	str	r3, [sp, #0]
 800e208:	4b98      	ldr	r3, [pc, #608]	; (800e46c <powf+0x2ac>)
 800e20a:	9301      	str	r3, [sp, #4]
 800e20c:	ee18 0a90 	vmov	r0, s17
 800e210:	2300      	movs	r3, #0
 800e212:	9308      	str	r3, [sp, #32]
 800e214:	f7f2 f998 	bl	8000548 <__aeabi_f2d>
 800e218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e21c:	ee18 0a10 	vmov	r0, s16
 800e220:	f7f2 f992 	bl	8000548 <__aeabi_f2d>
 800e224:	4b92      	ldr	r3, [pc, #584]	; (800e470 <powf+0x2b0>)
 800e226:	2200      	movs	r2, #0
 800e228:	2d02      	cmp	r5, #2
 800e22a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e22e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e232:	d032      	beq.n	800e29a <powf+0xda>
 800e234:	4668      	mov	r0, sp
 800e236:	f000 fc3a 	bl	800eaae <matherr>
 800e23a:	bb40      	cbnz	r0, 800e28e <powf+0xce>
 800e23c:	e065      	b.n	800e30a <powf+0x14a>
 800e23e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800e474 <powf+0x2b4>
 800e242:	eef4 8a69 	vcmp.f32	s17, s19
 800e246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e24a:	d163      	bne.n	800e314 <powf+0x154>
 800e24c:	eeb4 8a69 	vcmp.f32	s16, s19
 800e250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e254:	d12e      	bne.n	800e2b4 <powf+0xf4>
 800e256:	2301      	movs	r3, #1
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	4b84      	ldr	r3, [pc, #528]	; (800e46c <powf+0x2ac>)
 800e25c:	9301      	str	r3, [sp, #4]
 800e25e:	ee18 0a90 	vmov	r0, s17
 800e262:	2300      	movs	r3, #0
 800e264:	9308      	str	r3, [sp, #32]
 800e266:	f7f2 f96f 	bl	8000548 <__aeabi_f2d>
 800e26a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e26e:	ee18 0a10 	vmov	r0, s16
 800e272:	f7f2 f969 	bl	8000548 <__aeabi_f2d>
 800e276:	2200      	movs	r2, #0
 800e278:	2300      	movs	r3, #0
 800e27a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e27e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e282:	2d00      	cmp	r5, #0
 800e284:	d0d6      	beq.n	800e234 <powf+0x74>
 800e286:	4b7a      	ldr	r3, [pc, #488]	; (800e470 <powf+0x2b0>)
 800e288:	2200      	movs	r2, #0
 800e28a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e28e:	9b08      	ldr	r3, [sp, #32]
 800e290:	b11b      	cbz	r3, 800e29a <powf+0xda>
 800e292:	f7fc fa0b 	bl	800a6ac <__errno>
 800e296:	9b08      	ldr	r3, [sp, #32]
 800e298:	6003      	str	r3, [r0, #0]
 800e29a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e29e:	f7f2 fca3 	bl	8000be8 <__aeabi_d2f>
 800e2a2:	ee09 0a10 	vmov	s18, r0
 800e2a6:	eeb0 0a49 	vmov.f32	s0, s18
 800e2aa:	b00a      	add	sp, #40	; 0x28
 800e2ac:	ecbd 8b04 	vpop	{d8-d9}
 800e2b0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800e2b4:	eeb0 0a48 	vmov.f32	s0, s16
 800e2b8:	f000 fc02 	bl	800eac0 <finitef>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d0f2      	beq.n	800e2a6 <powf+0xe6>
 800e2c0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c8:	d5ed      	bpl.n	800e2a6 <powf+0xe6>
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	4b67      	ldr	r3, [pc, #412]	; (800e46c <powf+0x2ac>)
 800e2d0:	9301      	str	r3, [sp, #4]
 800e2d2:	ee18 0a90 	vmov	r0, s17
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	9308      	str	r3, [sp, #32]
 800e2da:	f7f2 f935 	bl	8000548 <__aeabi_f2d>
 800e2de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2e2:	ee18 0a10 	vmov	r0, s16
 800e2e6:	f7f2 f92f 	bl	8000548 <__aeabi_f2d>
 800e2ea:	f994 3000 	ldrsb.w	r3, [r4]
 800e2ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2f2:	b923      	cbnz	r3, 800e2fe <powf+0x13e>
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e2fc:	e79a      	b.n	800e234 <powf+0x74>
 800e2fe:	495e      	ldr	r1, [pc, #376]	; (800e478 <powf+0x2b8>)
 800e300:	2000      	movs	r0, #0
 800e302:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e306:	2b02      	cmp	r3, #2
 800e308:	d194      	bne.n	800e234 <powf+0x74>
 800e30a:	f7fc f9cf 	bl	800a6ac <__errno>
 800e30e:	2321      	movs	r3, #33	; 0x21
 800e310:	6003      	str	r3, [r0, #0]
 800e312:	e7bc      	b.n	800e28e <powf+0xce>
 800e314:	f000 fbd4 	bl	800eac0 <finitef>
 800e318:	4605      	mov	r5, r0
 800e31a:	2800      	cmp	r0, #0
 800e31c:	d173      	bne.n	800e406 <powf+0x246>
 800e31e:	eeb0 0a68 	vmov.f32	s0, s17
 800e322:	f000 fbcd 	bl	800eac0 <finitef>
 800e326:	2800      	cmp	r0, #0
 800e328:	d06d      	beq.n	800e406 <powf+0x246>
 800e32a:	eeb0 0a48 	vmov.f32	s0, s16
 800e32e:	f000 fbc7 	bl	800eac0 <finitef>
 800e332:	2800      	cmp	r0, #0
 800e334:	d067      	beq.n	800e406 <powf+0x246>
 800e336:	ee18 0a90 	vmov	r0, s17
 800e33a:	f7f2 f905 	bl	8000548 <__aeabi_f2d>
 800e33e:	4680      	mov	r8, r0
 800e340:	ee18 0a10 	vmov	r0, s16
 800e344:	4689      	mov	r9, r1
 800e346:	f7f2 f8ff 	bl	8000548 <__aeabi_f2d>
 800e34a:	eeb4 9a49 	vcmp.f32	s18, s18
 800e34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e352:	f994 4000 	ldrsb.w	r4, [r4]
 800e356:	4b45      	ldr	r3, [pc, #276]	; (800e46c <powf+0x2ac>)
 800e358:	d713      	bvc.n	800e382 <powf+0x1c2>
 800e35a:	2201      	movs	r2, #1
 800e35c:	e9cd 2300 	strd	r2, r3, [sp]
 800e360:	9508      	str	r5, [sp, #32]
 800e362:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e366:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e36a:	2c00      	cmp	r4, #0
 800e36c:	d0c2      	beq.n	800e2f4 <powf+0x134>
 800e36e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800e372:	ee17 0a90 	vmov	r0, s15
 800e376:	f7f2 f8e7 	bl	8000548 <__aeabi_f2d>
 800e37a:	2c02      	cmp	r4, #2
 800e37c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e380:	e7c2      	b.n	800e308 <powf+0x148>
 800e382:	2203      	movs	r2, #3
 800e384:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e388:	e9cd 2300 	strd	r2, r3, [sp]
 800e38c:	9508      	str	r5, [sp, #32]
 800e38e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e392:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e396:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e39a:	b9fc      	cbnz	r4, 800e3dc <powf+0x21c>
 800e39c:	4b37      	ldr	r3, [pc, #220]	; (800e47c <powf+0x2bc>)
 800e39e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800e3a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e3ae:	d553      	bpl.n	800e458 <powf+0x298>
 800e3b0:	eeb0 0a48 	vmov.f32	s0, s16
 800e3b4:	f000 fb8e 	bl	800ead4 <rintf>
 800e3b8:	eeb4 0a48 	vcmp.f32	s0, s16
 800e3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c0:	d004      	beq.n	800e3cc <powf+0x20c>
 800e3c2:	4b2f      	ldr	r3, [pc, #188]	; (800e480 <powf+0x2c0>)
 800e3c4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e3c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e3cc:	f996 3000 	ldrsb.w	r3, [r6]
 800e3d0:	2b02      	cmp	r3, #2
 800e3d2:	d141      	bne.n	800e458 <powf+0x298>
 800e3d4:	f7fc f96a 	bl	800a6ac <__errno>
 800e3d8:	2322      	movs	r3, #34	; 0x22
 800e3da:	e799      	b.n	800e310 <powf+0x150>
 800e3dc:	4b29      	ldr	r3, [pc, #164]	; (800e484 <powf+0x2c4>)
 800e3de:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e3ec:	d5ee      	bpl.n	800e3cc <powf+0x20c>
 800e3ee:	eeb0 0a48 	vmov.f32	s0, s16
 800e3f2:	f000 fb6f 	bl	800ead4 <rintf>
 800e3f6:	eeb4 0a48 	vcmp.f32	s0, s16
 800e3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3fe:	d0e5      	beq.n	800e3cc <powf+0x20c>
 800e400:	2200      	movs	r2, #0
 800e402:	4b1d      	ldr	r3, [pc, #116]	; (800e478 <powf+0x2b8>)
 800e404:	e7e0      	b.n	800e3c8 <powf+0x208>
 800e406:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40e:	f47f af4a 	bne.w	800e2a6 <powf+0xe6>
 800e412:	eeb0 0a68 	vmov.f32	s0, s17
 800e416:	f000 fb53 	bl	800eac0 <finitef>
 800e41a:	2800      	cmp	r0, #0
 800e41c:	f43f af43 	beq.w	800e2a6 <powf+0xe6>
 800e420:	eeb0 0a48 	vmov.f32	s0, s16
 800e424:	f000 fb4c 	bl	800eac0 <finitef>
 800e428:	2800      	cmp	r0, #0
 800e42a:	f43f af3c 	beq.w	800e2a6 <powf+0xe6>
 800e42e:	2304      	movs	r3, #4
 800e430:	9300      	str	r3, [sp, #0]
 800e432:	4b0e      	ldr	r3, [pc, #56]	; (800e46c <powf+0x2ac>)
 800e434:	9301      	str	r3, [sp, #4]
 800e436:	ee18 0a90 	vmov	r0, s17
 800e43a:	2300      	movs	r3, #0
 800e43c:	9308      	str	r3, [sp, #32]
 800e43e:	f7f2 f883 	bl	8000548 <__aeabi_f2d>
 800e442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e446:	ee18 0a10 	vmov	r0, s16
 800e44a:	f7f2 f87d 	bl	8000548 <__aeabi_f2d>
 800e44e:	2200      	movs	r2, #0
 800e450:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e454:	2300      	movs	r3, #0
 800e456:	e7b7      	b.n	800e3c8 <powf+0x208>
 800e458:	4668      	mov	r0, sp
 800e45a:	f000 fb28 	bl	800eaae <matherr>
 800e45e:	2800      	cmp	r0, #0
 800e460:	f47f af15 	bne.w	800e28e <powf+0xce>
 800e464:	e7b6      	b.n	800e3d4 <powf+0x214>
 800e466:	bf00      	nop
 800e468:	200001dc 	.word	0x200001dc
 800e46c:	0800f0de 	.word	0x0800f0de
 800e470:	3ff00000 	.word	0x3ff00000
 800e474:	00000000 	.word	0x00000000
 800e478:	fff00000 	.word	0xfff00000
 800e47c:	47efffff 	.word	0x47efffff
 800e480:	c7efffff 	.word	0xc7efffff
 800e484:	7ff00000 	.word	0x7ff00000

0800e488 <sqrtf>:
 800e488:	b510      	push	{r4, lr}
 800e48a:	ed2d 8b02 	vpush	{d8}
 800e48e:	b08a      	sub	sp, #40	; 0x28
 800e490:	eeb0 8a40 	vmov.f32	s16, s0
 800e494:	f000 fb08 	bl	800eaa8 <__ieee754_sqrtf>
 800e498:	4b21      	ldr	r3, [pc, #132]	; (800e520 <sqrtf+0x98>)
 800e49a:	f993 4000 	ldrsb.w	r4, [r3]
 800e49e:	1c63      	adds	r3, r4, #1
 800e4a0:	d02c      	beq.n	800e4fc <sqrtf+0x74>
 800e4a2:	eeb4 8a48 	vcmp.f32	s16, s16
 800e4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4aa:	d627      	bvs.n	800e4fc <sqrtf+0x74>
 800e4ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b4:	d522      	bpl.n	800e4fc <sqrtf+0x74>
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	4b1a      	ldr	r3, [pc, #104]	; (800e524 <sqrtf+0x9c>)
 800e4bc:	9301      	str	r3, [sp, #4]
 800e4be:	ee18 0a10 	vmov	r0, s16
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	9308      	str	r3, [sp, #32]
 800e4c6:	f7f2 f83f 	bl	8000548 <__aeabi_f2d>
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	b9ac      	cbnz	r4, 800e504 <sqrtf+0x7c>
 800e4d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e4dc:	4668      	mov	r0, sp
 800e4de:	f000 fae6 	bl	800eaae <matherr>
 800e4e2:	b1b8      	cbz	r0, 800e514 <sqrtf+0x8c>
 800e4e4:	9b08      	ldr	r3, [sp, #32]
 800e4e6:	b11b      	cbz	r3, 800e4f0 <sqrtf+0x68>
 800e4e8:	f7fc f8e0 	bl	800a6ac <__errno>
 800e4ec:	9b08      	ldr	r3, [sp, #32]
 800e4ee:	6003      	str	r3, [r0, #0]
 800e4f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4f4:	f7f2 fb78 	bl	8000be8 <__aeabi_d2f>
 800e4f8:	ee00 0a10 	vmov	s0, r0
 800e4fc:	b00a      	add	sp, #40	; 0x28
 800e4fe:	ecbd 8b02 	vpop	{d8}
 800e502:	bd10      	pop	{r4, pc}
 800e504:	4610      	mov	r0, r2
 800e506:	4619      	mov	r1, r3
 800e508:	f7f2 f9a0 	bl	800084c <__aeabi_ddiv>
 800e50c:	2c02      	cmp	r4, #2
 800e50e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e512:	d1e3      	bne.n	800e4dc <sqrtf+0x54>
 800e514:	f7fc f8ca 	bl	800a6ac <__errno>
 800e518:	2321      	movs	r3, #33	; 0x21
 800e51a:	6003      	str	r3, [r0, #0]
 800e51c:	e7e2      	b.n	800e4e4 <sqrtf+0x5c>
 800e51e:	bf00      	nop
 800e520:	200001dc 	.word	0x200001dc
 800e524:	0800f0e3 	.word	0x0800f0e3

0800e528 <__ieee754_powf>:
 800e528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e52c:	ee10 5a90 	vmov	r5, s1
 800e530:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800e534:	ed2d 8b02 	vpush	{d8}
 800e538:	eeb0 8a40 	vmov.f32	s16, s0
 800e53c:	eef0 8a60 	vmov.f32	s17, s1
 800e540:	f000 8293 	beq.w	800ea6a <__ieee754_powf+0x542>
 800e544:	ee10 8a10 	vmov	r8, s0
 800e548:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800e54c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e550:	dc06      	bgt.n	800e560 <__ieee754_powf+0x38>
 800e552:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e556:	dd0a      	ble.n	800e56e <__ieee754_powf+0x46>
 800e558:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e55c:	f000 8285 	beq.w	800ea6a <__ieee754_powf+0x542>
 800e560:	ecbd 8b02 	vpop	{d8}
 800e564:	48d9      	ldr	r0, [pc, #868]	; (800e8cc <__ieee754_powf+0x3a4>)
 800e566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e56a:	f7fc bf1b 	b.w	800b3a4 <nanf>
 800e56e:	f1b8 0f00 	cmp.w	r8, #0
 800e572:	da1d      	bge.n	800e5b0 <__ieee754_powf+0x88>
 800e574:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800e578:	da2c      	bge.n	800e5d4 <__ieee754_powf+0xac>
 800e57a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e57e:	db30      	blt.n	800e5e2 <__ieee754_powf+0xba>
 800e580:	15fb      	asrs	r3, r7, #23
 800e582:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800e586:	fa47 f603 	asr.w	r6, r7, r3
 800e58a:	fa06 f303 	lsl.w	r3, r6, r3
 800e58e:	42bb      	cmp	r3, r7
 800e590:	d127      	bne.n	800e5e2 <__ieee754_powf+0xba>
 800e592:	f006 0601 	and.w	r6, r6, #1
 800e596:	f1c6 0602 	rsb	r6, r6, #2
 800e59a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e59e:	d122      	bne.n	800e5e6 <__ieee754_powf+0xbe>
 800e5a0:	2d00      	cmp	r5, #0
 800e5a2:	f280 8268 	bge.w	800ea76 <__ieee754_powf+0x54e>
 800e5a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e5aa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e5ae:	e00d      	b.n	800e5cc <__ieee754_powf+0xa4>
 800e5b0:	2600      	movs	r6, #0
 800e5b2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e5b6:	d1f0      	bne.n	800e59a <__ieee754_powf+0x72>
 800e5b8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e5bc:	f000 8255 	beq.w	800ea6a <__ieee754_powf+0x542>
 800e5c0:	dd0a      	ble.n	800e5d8 <__ieee754_powf+0xb0>
 800e5c2:	2d00      	cmp	r5, #0
 800e5c4:	f280 8254 	bge.w	800ea70 <__ieee754_powf+0x548>
 800e5c8:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800e8d0 <__ieee754_powf+0x3a8>
 800e5cc:	ecbd 8b02 	vpop	{d8}
 800e5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5d4:	2602      	movs	r6, #2
 800e5d6:	e7ec      	b.n	800e5b2 <__ieee754_powf+0x8a>
 800e5d8:	2d00      	cmp	r5, #0
 800e5da:	daf5      	bge.n	800e5c8 <__ieee754_powf+0xa0>
 800e5dc:	eeb1 0a68 	vneg.f32	s0, s17
 800e5e0:	e7f4      	b.n	800e5cc <__ieee754_powf+0xa4>
 800e5e2:	2600      	movs	r6, #0
 800e5e4:	e7d9      	b.n	800e59a <__ieee754_powf+0x72>
 800e5e6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800e5ea:	d102      	bne.n	800e5f2 <__ieee754_powf+0xca>
 800e5ec:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e5f0:	e7ec      	b.n	800e5cc <__ieee754_powf+0xa4>
 800e5f2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800e5f6:	eeb0 0a48 	vmov.f32	s0, s16
 800e5fa:	d108      	bne.n	800e60e <__ieee754_powf+0xe6>
 800e5fc:	f1b8 0f00 	cmp.w	r8, #0
 800e600:	db05      	blt.n	800e60e <__ieee754_powf+0xe6>
 800e602:	ecbd 8b02 	vpop	{d8}
 800e606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e60a:	f000 ba4d 	b.w	800eaa8 <__ieee754_sqrtf>
 800e60e:	f000 fa50 	bl	800eab2 <fabsf>
 800e612:	b124      	cbz	r4, 800e61e <__ieee754_powf+0xf6>
 800e614:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800e618:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e61c:	d117      	bne.n	800e64e <__ieee754_powf+0x126>
 800e61e:	2d00      	cmp	r5, #0
 800e620:	bfbc      	itt	lt
 800e622:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800e626:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e62a:	f1b8 0f00 	cmp.w	r8, #0
 800e62e:	dacd      	bge.n	800e5cc <__ieee754_powf+0xa4>
 800e630:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800e634:	ea54 0306 	orrs.w	r3, r4, r6
 800e638:	d104      	bne.n	800e644 <__ieee754_powf+0x11c>
 800e63a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e63e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e642:	e7c3      	b.n	800e5cc <__ieee754_powf+0xa4>
 800e644:	2e01      	cmp	r6, #1
 800e646:	d1c1      	bne.n	800e5cc <__ieee754_powf+0xa4>
 800e648:	eeb1 0a40 	vneg.f32	s0, s0
 800e64c:	e7be      	b.n	800e5cc <__ieee754_powf+0xa4>
 800e64e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800e652:	3801      	subs	r0, #1
 800e654:	ea56 0300 	orrs.w	r3, r6, r0
 800e658:	d104      	bne.n	800e664 <__ieee754_powf+0x13c>
 800e65a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e65e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e662:	e7b3      	b.n	800e5cc <__ieee754_powf+0xa4>
 800e664:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800e668:	dd6d      	ble.n	800e746 <__ieee754_powf+0x21e>
 800e66a:	4b9a      	ldr	r3, [pc, #616]	; (800e8d4 <__ieee754_powf+0x3ac>)
 800e66c:	429c      	cmp	r4, r3
 800e66e:	dc06      	bgt.n	800e67e <__ieee754_powf+0x156>
 800e670:	2d00      	cmp	r5, #0
 800e672:	daa9      	bge.n	800e5c8 <__ieee754_powf+0xa0>
 800e674:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800e8d8 <__ieee754_powf+0x3b0>
 800e678:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e67c:	e7a6      	b.n	800e5cc <__ieee754_powf+0xa4>
 800e67e:	4b97      	ldr	r3, [pc, #604]	; (800e8dc <__ieee754_powf+0x3b4>)
 800e680:	429c      	cmp	r4, r3
 800e682:	dd02      	ble.n	800e68a <__ieee754_powf+0x162>
 800e684:	2d00      	cmp	r5, #0
 800e686:	dcf5      	bgt.n	800e674 <__ieee754_powf+0x14c>
 800e688:	e79e      	b.n	800e5c8 <__ieee754_powf+0xa0>
 800e68a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e68e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e692:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800e8e0 <__ieee754_powf+0x3b8>
 800e696:	eef1 6a40 	vneg.f32	s13, s0
 800e69a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e69e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e6a6:	eee7 7a40 	vfms.f32	s15, s14, s0
 800e6aa:	ee60 0a00 	vmul.f32	s1, s0, s0
 800e6ae:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800e8e4 <__ieee754_powf+0x3bc>
 800e6b2:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800e6b6:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800e8e8 <__ieee754_powf+0x3c0>
 800e6ba:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800e6be:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e6c2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e8ec <__ieee754_powf+0x3c4>
 800e6c6:	eeb0 6a67 	vmov.f32	s12, s15
 800e6ca:	eea0 6a07 	vfma.f32	s12, s0, s14
 800e6ce:	ee16 3a10 	vmov	r3, s12
 800e6d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e6d6:	f023 030f 	bic.w	r3, r3, #15
 800e6da:	ee00 3a90 	vmov	s1, r3
 800e6de:	eee6 0a87 	vfma.f32	s1, s13, s14
 800e6e2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e6e6:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800e6ea:	f025 050f 	bic.w	r5, r5, #15
 800e6ee:	ee07 5a10 	vmov	s14, r5
 800e6f2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e6f6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e6fa:	ee07 3a90 	vmov	s15, r3
 800e6fe:	eee7 0a27 	vfma.f32	s1, s14, s15
 800e702:	3e01      	subs	r6, #1
 800e704:	ea56 0200 	orrs.w	r2, r6, r0
 800e708:	ee07 5a10 	vmov	s14, r5
 800e70c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e710:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e714:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e718:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e71c:	ee17 4a10 	vmov	r4, s14
 800e720:	bf08      	it	eq
 800e722:	eeb0 8a40 	vmoveq.f32	s16, s0
 800e726:	2c00      	cmp	r4, #0
 800e728:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e72c:	f340 8184 	ble.w	800ea38 <__ieee754_powf+0x510>
 800e730:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800e734:	f340 80fc 	ble.w	800e930 <__ieee754_powf+0x408>
 800e738:	eddf 7a67 	vldr	s15, [pc, #412]	; 800e8d8 <__ieee754_powf+0x3b0>
 800e73c:	ee28 0a27 	vmul.f32	s0, s16, s15
 800e740:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e744:	e742      	b.n	800e5cc <__ieee754_powf+0xa4>
 800e746:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800e74a:	bfbf      	itttt	lt
 800e74c:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800e8f0 <__ieee754_powf+0x3c8>
 800e750:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e754:	f06f 0217 	mvnlt.w	r2, #23
 800e758:	ee17 4a90 	vmovlt	r4, s15
 800e75c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800e760:	bfa8      	it	ge
 800e762:	2200      	movge	r2, #0
 800e764:	3b7f      	subs	r3, #127	; 0x7f
 800e766:	4413      	add	r3, r2
 800e768:	4a62      	ldr	r2, [pc, #392]	; (800e8f4 <__ieee754_powf+0x3cc>)
 800e76a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800e76e:	4294      	cmp	r4, r2
 800e770:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800e774:	dd06      	ble.n	800e784 <__ieee754_powf+0x25c>
 800e776:	4a60      	ldr	r2, [pc, #384]	; (800e8f8 <__ieee754_powf+0x3d0>)
 800e778:	4294      	cmp	r4, r2
 800e77a:	f340 80a5 	ble.w	800e8c8 <__ieee754_powf+0x3a0>
 800e77e:	3301      	adds	r3, #1
 800e780:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e784:	2400      	movs	r4, #0
 800e786:	4a5d      	ldr	r2, [pc, #372]	; (800e8fc <__ieee754_powf+0x3d4>)
 800e788:	00a7      	lsls	r7, r4, #2
 800e78a:	443a      	add	r2, r7
 800e78c:	ee07 1a90 	vmov	s15, r1
 800e790:	ed92 7a00 	vldr	s14, [r2]
 800e794:	4a5a      	ldr	r2, [pc, #360]	; (800e900 <__ieee754_powf+0x3d8>)
 800e796:	ee37 6a27 	vadd.f32	s12, s14, s15
 800e79a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e79e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800e7a2:	1049      	asrs	r1, r1, #1
 800e7a4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800e7a8:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800e7ac:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800e7b0:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800e7b4:	ee06 1a10 	vmov	s12, r1
 800e7b8:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800e7bc:	ee14 ca90 	vmov	ip, s9
 800e7c0:	ea02 0c0c 	and.w	ip, r2, ip
 800e7c4:	ee05 ca10 	vmov	s10, ip
 800e7c8:	eeb1 4a45 	vneg.f32	s8, s10
 800e7cc:	eee4 5a06 	vfma.f32	s11, s8, s12
 800e7d0:	ee36 6a47 	vsub.f32	s12, s12, s14
 800e7d4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800e904 <__ieee754_powf+0x3dc>
 800e7d8:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800e7dc:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800e7e0:	eee4 5a06 	vfma.f32	s11, s8, s12
 800e7e4:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800e7e8:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800e7ec:	eddf 5a46 	vldr	s11, [pc, #280]	; 800e908 <__ieee754_powf+0x3e0>
 800e7f0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e7f4:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e90c <__ieee754_powf+0x3e4>
 800e7f8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e7fc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e8e0 <__ieee754_powf+0x3b8>
 800e800:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e804:	eddf 5a42 	vldr	s11, [pc, #264]	; 800e910 <__ieee754_powf+0x3e8>
 800e808:	eee7 5a27 	vfma.f32	s11, s14, s15
 800e80c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800e914 <__ieee754_powf+0x3ec>
 800e810:	ee75 6a24 	vadd.f32	s13, s10, s9
 800e814:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e818:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e81c:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800e820:	eef0 7a65 	vmov.f32	s15, s11
 800e824:	eee3 6a87 	vfma.f32	s13, s7, s14
 800e828:	eee5 7a05 	vfma.f32	s15, s10, s10
 800e82c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e830:	ee17 1a90 	vmov	r1, s15
 800e834:	4011      	ands	r1, r2
 800e836:	ee07 1a90 	vmov	s15, r1
 800e83a:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800e83e:	eddf 5a36 	vldr	s11, [pc, #216]	; 800e918 <__ieee754_powf+0x3f0>
 800e842:	eea4 7a05 	vfma.f32	s14, s8, s10
 800e846:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e84a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800e84e:	eea7 7a86 	vfma.f32	s14, s15, s12
 800e852:	eeb0 6a47 	vmov.f32	s12, s14
 800e856:	eea5 6a27 	vfma.f32	s12, s10, s15
 800e85a:	ee16 1a10 	vmov	r1, s12
 800e85e:	4011      	ands	r1, r2
 800e860:	ee06 1a90 	vmov	s13, r1
 800e864:	eee4 6a27 	vfma.f32	s13, s8, s15
 800e868:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800e91c <__ieee754_powf+0x3f4>
 800e86c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e870:	ee06 1a10 	vmov	s12, r1
 800e874:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e878:	eddf 7a29 	vldr	s15, [pc, #164]	; 800e920 <__ieee754_powf+0x3f8>
 800e87c:	4929      	ldr	r1, [pc, #164]	; (800e924 <__ieee754_powf+0x3fc>)
 800e87e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e882:	4439      	add	r1, r7
 800e884:	edd1 7a00 	vldr	s15, [r1]
 800e888:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e88c:	ee07 3a90 	vmov	s15, r3
 800e890:	eef0 0a47 	vmov.f32	s1, s14
 800e894:	4b24      	ldr	r3, [pc, #144]	; (800e928 <__ieee754_powf+0x400>)
 800e896:	eee6 0a25 	vfma.f32	s1, s12, s11
 800e89a:	443b      	add	r3, r7
 800e89c:	ed93 5a00 	vldr	s10, [r3]
 800e8a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e8a4:	ee70 0a85 	vadd.f32	s1, s1, s10
 800e8a8:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800e8ac:	ee17 3a90 	vmov	r3, s15
 800e8b0:	4013      	ands	r3, r2
 800e8b2:	ee07 3a90 	vmov	s15, r3
 800e8b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e8ba:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800e8be:	eee6 7a65 	vfms.f32	s15, s12, s11
 800e8c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e8c6:	e70e      	b.n	800e6e6 <__ieee754_powf+0x1be>
 800e8c8:	2401      	movs	r4, #1
 800e8ca:	e75c      	b.n	800e786 <__ieee754_powf+0x25e>
 800e8cc:	0800efd1 	.word	0x0800efd1
 800e8d0:	00000000 	.word	0x00000000
 800e8d4:	3f7ffff7 	.word	0x3f7ffff7
 800e8d8:	7149f2ca 	.word	0x7149f2ca
 800e8dc:	3f800007 	.word	0x3f800007
 800e8e0:	3eaaaaab 	.word	0x3eaaaaab
 800e8e4:	36eca570 	.word	0x36eca570
 800e8e8:	3fb8aa3b 	.word	0x3fb8aa3b
 800e8ec:	3fb8aa00 	.word	0x3fb8aa00
 800e8f0:	4b800000 	.word	0x4b800000
 800e8f4:	001cc471 	.word	0x001cc471
 800e8f8:	005db3d6 	.word	0x005db3d6
 800e8fc:	0800f0ec 	.word	0x0800f0ec
 800e900:	fffff000 	.word	0xfffff000
 800e904:	3e6c3255 	.word	0x3e6c3255
 800e908:	3e53f142 	.word	0x3e53f142
 800e90c:	3e8ba305 	.word	0x3e8ba305
 800e910:	3edb6db7 	.word	0x3edb6db7
 800e914:	3f19999a 	.word	0x3f19999a
 800e918:	3f763800 	.word	0x3f763800
 800e91c:	3f76384f 	.word	0x3f76384f
 800e920:	369dc3a0 	.word	0x369dc3a0
 800e924:	0800f0fc 	.word	0x0800f0fc
 800e928:	0800f0f4 	.word	0x0800f0f4
 800e92c:	3338aa3c 	.word	0x3338aa3c
 800e930:	f040 8092 	bne.w	800ea58 <__ieee754_powf+0x530>
 800e934:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800e92c <__ieee754_powf+0x404>
 800e938:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e93c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e940:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e948:	f73f aef6 	bgt.w	800e738 <__ieee754_powf+0x210>
 800e94c:	15db      	asrs	r3, r3, #23
 800e94e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800e952:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e956:	4103      	asrs	r3, r0
 800e958:	4423      	add	r3, r4
 800e95a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e95e:	4947      	ldr	r1, [pc, #284]	; (800ea7c <__ieee754_powf+0x554>)
 800e960:	3a7f      	subs	r2, #127	; 0x7f
 800e962:	4111      	asrs	r1, r2
 800e964:	ea23 0101 	bic.w	r1, r3, r1
 800e968:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800e96c:	ee07 1a10 	vmov	s14, r1
 800e970:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e974:	f1c2 0217 	rsb	r2, r2, #23
 800e978:	4110      	asrs	r0, r2
 800e97a:	2c00      	cmp	r4, #0
 800e97c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e980:	bfb8      	it	lt
 800e982:	4240      	neglt	r0, r0
 800e984:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e988:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ea80 <__ieee754_powf+0x558>
 800e98c:	ee17 3a10 	vmov	r3, s14
 800e990:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e994:	f023 030f 	bic.w	r3, r3, #15
 800e998:	ee07 3a10 	vmov	s14, r3
 800e99c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9a0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e9a4:	eddf 7a37 	vldr	s15, [pc, #220]	; 800ea84 <__ieee754_powf+0x55c>
 800e9a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9ac:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800e9b0:	eddf 6a35 	vldr	s13, [pc, #212]	; 800ea88 <__ieee754_powf+0x560>
 800e9b4:	eeb0 0a67 	vmov.f32	s0, s15
 800e9b8:	eea7 0a26 	vfma.f32	s0, s14, s13
 800e9bc:	eeb0 6a40 	vmov.f32	s12, s0
 800e9c0:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e9c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e9c8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e9cc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800ea8c <__ieee754_powf+0x564>
 800e9d0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800ea90 <__ieee754_powf+0x568>
 800e9d4:	eea7 6a26 	vfma.f32	s12, s14, s13
 800e9d8:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800ea94 <__ieee754_powf+0x56c>
 800e9dc:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e9e0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800ea98 <__ieee754_powf+0x570>
 800e9e4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e9e8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800ea9c <__ieee754_powf+0x574>
 800e9ec:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e9f0:	eeb0 6a40 	vmov.f32	s12, s0
 800e9f4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e9f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e9fc:	eeb0 7a46 	vmov.f32	s14, s12
 800ea00:	ee77 6a66 	vsub.f32	s13, s14, s13
 800ea04:	ee20 6a06 	vmul.f32	s12, s0, s12
 800ea08:	eee0 7a27 	vfma.f32	s15, s0, s15
 800ea0c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ea10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea14:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ea18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ea1c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ea20:	ee10 3a10 	vmov	r3, s0
 800ea24:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ea28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ea2c:	da1a      	bge.n	800ea64 <__ieee754_powf+0x53c>
 800ea2e:	f000 f8ab 	bl	800eb88 <scalbnf>
 800ea32:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ea36:	e5c9      	b.n	800e5cc <__ieee754_powf+0xa4>
 800ea38:	4a19      	ldr	r2, [pc, #100]	; (800eaa0 <__ieee754_powf+0x578>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	dd02      	ble.n	800ea44 <__ieee754_powf+0x51c>
 800ea3e:	eddf 7a19 	vldr	s15, [pc, #100]	; 800eaa4 <__ieee754_powf+0x57c>
 800ea42:	e67b      	b.n	800e73c <__ieee754_powf+0x214>
 800ea44:	d108      	bne.n	800ea58 <__ieee754_powf+0x530>
 800ea46:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ea4a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ea4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea52:	f6ff af7b 	blt.w	800e94c <__ieee754_powf+0x424>
 800ea56:	e7f2      	b.n	800ea3e <__ieee754_powf+0x516>
 800ea58:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800ea5c:	f73f af76 	bgt.w	800e94c <__ieee754_powf+0x424>
 800ea60:	2000      	movs	r0, #0
 800ea62:	e78f      	b.n	800e984 <__ieee754_powf+0x45c>
 800ea64:	ee00 3a10 	vmov	s0, r3
 800ea68:	e7e3      	b.n	800ea32 <__ieee754_powf+0x50a>
 800ea6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ea6e:	e5ad      	b.n	800e5cc <__ieee754_powf+0xa4>
 800ea70:	eeb0 0a68 	vmov.f32	s0, s17
 800ea74:	e5aa      	b.n	800e5cc <__ieee754_powf+0xa4>
 800ea76:	eeb0 0a48 	vmov.f32	s0, s16
 800ea7a:	e5a7      	b.n	800e5cc <__ieee754_powf+0xa4>
 800ea7c:	007fffff 	.word	0x007fffff
 800ea80:	3f317218 	.word	0x3f317218
 800ea84:	35bfbe8c 	.word	0x35bfbe8c
 800ea88:	3f317200 	.word	0x3f317200
 800ea8c:	3331bb4c 	.word	0x3331bb4c
 800ea90:	b5ddea0e 	.word	0xb5ddea0e
 800ea94:	388ab355 	.word	0x388ab355
 800ea98:	bb360b61 	.word	0xbb360b61
 800ea9c:	3e2aaaab 	.word	0x3e2aaaab
 800eaa0:	43160000 	.word	0x43160000
 800eaa4:	0da24260 	.word	0x0da24260

0800eaa8 <__ieee754_sqrtf>:
 800eaa8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800eaac:	4770      	bx	lr

0800eaae <matherr>:
 800eaae:	2000      	movs	r0, #0
 800eab0:	4770      	bx	lr

0800eab2 <fabsf>:
 800eab2:	ee10 3a10 	vmov	r3, s0
 800eab6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eaba:	ee00 3a10 	vmov	s0, r3
 800eabe:	4770      	bx	lr

0800eac0 <finitef>:
 800eac0:	ee10 3a10 	vmov	r3, s0
 800eac4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800eac8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800eacc:	bfac      	ite	ge
 800eace:	2000      	movge	r0, #0
 800ead0:	2001      	movlt	r0, #1
 800ead2:	4770      	bx	lr

0800ead4 <rintf>:
 800ead4:	b513      	push	{r0, r1, r4, lr}
 800ead6:	ee10 1a10 	vmov	r1, s0
 800eada:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eade:	0ddc      	lsrs	r4, r3, #23
 800eae0:	3c7f      	subs	r4, #127	; 0x7f
 800eae2:	2c16      	cmp	r4, #22
 800eae4:	dc46      	bgt.n	800eb74 <rintf+0xa0>
 800eae6:	b32b      	cbz	r3, 800eb34 <rintf+0x60>
 800eae8:	2c00      	cmp	r4, #0
 800eaea:	ee10 2a10 	vmov	r2, s0
 800eaee:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800eaf2:	da21      	bge.n	800eb38 <rintf+0x64>
 800eaf4:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800eaf8:	425b      	negs	r3, r3
 800eafa:	4a21      	ldr	r2, [pc, #132]	; (800eb80 <rintf+0xac>)
 800eafc:	0a5b      	lsrs	r3, r3, #9
 800eafe:	0d09      	lsrs	r1, r1, #20
 800eb00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb04:	0509      	lsls	r1, r1, #20
 800eb06:	430b      	orrs	r3, r1
 800eb08:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800eb0c:	ee07 3a90 	vmov	s15, r3
 800eb10:	edd2 6a00 	vldr	s13, [r2]
 800eb14:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800eb18:	ed8d 7a01 	vstr	s14, [sp, #4]
 800eb1c:	eddd 7a01 	vldr	s15, [sp, #4]
 800eb20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eb24:	ee17 3a90 	vmov	r3, s15
 800eb28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eb2c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800eb30:	ee00 3a10 	vmov	s0, r3
 800eb34:	b002      	add	sp, #8
 800eb36:	bd10      	pop	{r4, pc}
 800eb38:	4b12      	ldr	r3, [pc, #72]	; (800eb84 <rintf+0xb0>)
 800eb3a:	4123      	asrs	r3, r4
 800eb3c:	4219      	tst	r1, r3
 800eb3e:	d0f9      	beq.n	800eb34 <rintf+0x60>
 800eb40:	085b      	lsrs	r3, r3, #1
 800eb42:	4219      	tst	r1, r3
 800eb44:	d006      	beq.n	800eb54 <rintf+0x80>
 800eb46:	ea21 0203 	bic.w	r2, r1, r3
 800eb4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800eb4e:	fa43 f404 	asr.w	r4, r3, r4
 800eb52:	4322      	orrs	r2, r4
 800eb54:	4b0a      	ldr	r3, [pc, #40]	; (800eb80 <rintf+0xac>)
 800eb56:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800eb5a:	ed90 7a00 	vldr	s14, [r0]
 800eb5e:	ee07 2a90 	vmov	s15, r2
 800eb62:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb66:	edcd 7a01 	vstr	s15, [sp, #4]
 800eb6a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800eb6e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800eb72:	e7df      	b.n	800eb34 <rintf+0x60>
 800eb74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800eb78:	d3dc      	bcc.n	800eb34 <rintf+0x60>
 800eb7a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eb7e:	e7d9      	b.n	800eb34 <rintf+0x60>
 800eb80:	0800f104 	.word	0x0800f104
 800eb84:	007fffff 	.word	0x007fffff

0800eb88 <scalbnf>:
 800eb88:	b508      	push	{r3, lr}
 800eb8a:	ee10 2a10 	vmov	r2, s0
 800eb8e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800eb92:	ed2d 8b02 	vpush	{d8}
 800eb96:	eef0 0a40 	vmov.f32	s1, s0
 800eb9a:	d004      	beq.n	800eba6 <scalbnf+0x1e>
 800eb9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800eba0:	d306      	bcc.n	800ebb0 <scalbnf+0x28>
 800eba2:	ee70 0a00 	vadd.f32	s1, s0, s0
 800eba6:	ecbd 8b02 	vpop	{d8}
 800ebaa:	eeb0 0a60 	vmov.f32	s0, s1
 800ebae:	bd08      	pop	{r3, pc}
 800ebb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ebb4:	d21c      	bcs.n	800ebf0 <scalbnf+0x68>
 800ebb6:	4b1f      	ldr	r3, [pc, #124]	; (800ec34 <scalbnf+0xac>)
 800ebb8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ec38 <scalbnf+0xb0>
 800ebbc:	4298      	cmp	r0, r3
 800ebbe:	ee60 0a27 	vmul.f32	s1, s0, s15
 800ebc2:	db10      	blt.n	800ebe6 <scalbnf+0x5e>
 800ebc4:	ee10 2a90 	vmov	r2, s1
 800ebc8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800ebcc:	3b19      	subs	r3, #25
 800ebce:	4403      	add	r3, r0
 800ebd0:	2bfe      	cmp	r3, #254	; 0xfe
 800ebd2:	dd0f      	ble.n	800ebf4 <scalbnf+0x6c>
 800ebd4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800ec3c <scalbnf+0xb4>
 800ebd8:	eeb0 0a48 	vmov.f32	s0, s16
 800ebdc:	f000 f834 	bl	800ec48 <copysignf>
 800ebe0:	ee60 0a08 	vmul.f32	s1, s0, s16
 800ebe4:	e7df      	b.n	800eba6 <scalbnf+0x1e>
 800ebe6:	eddf 7a16 	vldr	s15, [pc, #88]	; 800ec40 <scalbnf+0xb8>
 800ebea:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800ebee:	e7da      	b.n	800eba6 <scalbnf+0x1e>
 800ebf0:	0ddb      	lsrs	r3, r3, #23
 800ebf2:	e7ec      	b.n	800ebce <scalbnf+0x46>
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	dd06      	ble.n	800ec06 <scalbnf+0x7e>
 800ebf8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800ebfc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800ec00:	ee00 3a90 	vmov	s1, r3
 800ec04:	e7cf      	b.n	800eba6 <scalbnf+0x1e>
 800ec06:	f113 0f16 	cmn.w	r3, #22
 800ec0a:	da06      	bge.n	800ec1a <scalbnf+0x92>
 800ec0c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ec10:	4298      	cmp	r0, r3
 800ec12:	dcdf      	bgt.n	800ebd4 <scalbnf+0x4c>
 800ec14:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800ec40 <scalbnf+0xb8>
 800ec18:	e7de      	b.n	800ebd8 <scalbnf+0x50>
 800ec1a:	3319      	adds	r3, #25
 800ec1c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800ec20:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800ec24:	eddf 7a07 	vldr	s15, [pc, #28]	; 800ec44 <scalbnf+0xbc>
 800ec28:	ee07 3a10 	vmov	s14, r3
 800ec2c:	ee67 0a27 	vmul.f32	s1, s14, s15
 800ec30:	e7b9      	b.n	800eba6 <scalbnf+0x1e>
 800ec32:	bf00      	nop
 800ec34:	ffff3cb0 	.word	0xffff3cb0
 800ec38:	4c000000 	.word	0x4c000000
 800ec3c:	7149f2ca 	.word	0x7149f2ca
 800ec40:	0da24260 	.word	0x0da24260
 800ec44:	33000000 	.word	0x33000000

0800ec48 <copysignf>:
 800ec48:	ee10 3a10 	vmov	r3, s0
 800ec4c:	ee10 2a90 	vmov	r2, s1
 800ec50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec54:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ec58:	4313      	orrs	r3, r2
 800ec5a:	ee00 3a10 	vmov	s0, r3
 800ec5e:	4770      	bx	lr

0800ec60 <_init>:
 800ec60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec62:	bf00      	nop
 800ec64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec66:	bc08      	pop	{r3}
 800ec68:	469e      	mov	lr, r3
 800ec6a:	4770      	bx	lr

0800ec6c <_fini>:
 800ec6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec6e:	bf00      	nop
 800ec70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec72:	bc08      	pop	{r3}
 800ec74:	469e      	mov	lr, r3
 800ec76:	4770      	bx	lr
