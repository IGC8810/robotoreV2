
robotoreV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08008758  08008758  00018758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008908  08008908  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008908  08008908  00018908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008910  08008910  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008910  08008910  00018910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008914  08008914  00018914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000070  08008988  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08008988  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4e8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003466  00000000  00000000  0003a588  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001520  00000000  00000000  0003d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a8  00000000  00000000  0003ef10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000224ae  00000000  00000000  000402b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e95  00000000  00000000  00062766  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c93c2  00000000  00000000  000745fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d9bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c1c  00000000  00000000  0013da38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008740 	.word	0x08008740

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008740 	.word	0x08008740

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_frsub>:
 80005e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005ec:	e002      	b.n	80005f4 <__addsf3>
 80005ee:	bf00      	nop

080005f0 <__aeabi_fsub>:
 80005f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005f4 <__addsf3>:
 80005f4:	0042      	lsls	r2, r0, #1
 80005f6:	bf1f      	itttt	ne
 80005f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005fc:	ea92 0f03 	teqne	r2, r3
 8000600:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000604:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000608:	d06a      	beq.n	80006e0 <__addsf3+0xec>
 800060a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800060e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000612:	bfc1      	itttt	gt
 8000614:	18d2      	addgt	r2, r2, r3
 8000616:	4041      	eorgt	r1, r0
 8000618:	4048      	eorgt	r0, r1
 800061a:	4041      	eorgt	r1, r0
 800061c:	bfb8      	it	lt
 800061e:	425b      	neglt	r3, r3
 8000620:	2b19      	cmp	r3, #25
 8000622:	bf88      	it	hi
 8000624:	4770      	bxhi	lr
 8000626:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800062a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800062e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4240      	negne	r0, r0
 8000636:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800063e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000642:	bf18      	it	ne
 8000644:	4249      	negne	r1, r1
 8000646:	ea92 0f03 	teq	r2, r3
 800064a:	d03f      	beq.n	80006cc <__addsf3+0xd8>
 800064c:	f1a2 0201 	sub.w	r2, r2, #1
 8000650:	fa41 fc03 	asr.w	ip, r1, r3
 8000654:	eb10 000c 	adds.w	r0, r0, ip
 8000658:	f1c3 0320 	rsb	r3, r3, #32
 800065c:	fa01 f103 	lsl.w	r1, r1, r3
 8000660:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000664:	d502      	bpl.n	800066c <__addsf3+0x78>
 8000666:	4249      	negs	r1, r1
 8000668:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800066c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000670:	d313      	bcc.n	800069a <__addsf3+0xa6>
 8000672:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000676:	d306      	bcc.n	8000686 <__addsf3+0x92>
 8000678:	0840      	lsrs	r0, r0, #1
 800067a:	ea4f 0131 	mov.w	r1, r1, rrx
 800067e:	f102 0201 	add.w	r2, r2, #1
 8000682:	2afe      	cmp	r2, #254	; 0xfe
 8000684:	d251      	bcs.n	800072a <__addsf3+0x136>
 8000686:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800068a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800068e:	bf08      	it	eq
 8000690:	f020 0001 	biceq.w	r0, r0, #1
 8000694:	ea40 0003 	orr.w	r0, r0, r3
 8000698:	4770      	bx	lr
 800069a:	0049      	lsls	r1, r1, #1
 800069c:	eb40 0000 	adc.w	r0, r0, r0
 80006a0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80006a4:	f1a2 0201 	sub.w	r2, r2, #1
 80006a8:	d1ed      	bne.n	8000686 <__addsf3+0x92>
 80006aa:	fab0 fc80 	clz	ip, r0
 80006ae:	f1ac 0c08 	sub.w	ip, ip, #8
 80006b2:	ebb2 020c 	subs.w	r2, r2, ip
 80006b6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006ba:	bfaa      	itet	ge
 80006bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006c0:	4252      	neglt	r2, r2
 80006c2:	4318      	orrge	r0, r3
 80006c4:	bfbc      	itt	lt
 80006c6:	40d0      	lsrlt	r0, r2
 80006c8:	4318      	orrlt	r0, r3
 80006ca:	4770      	bx	lr
 80006cc:	f092 0f00 	teq	r2, #0
 80006d0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006d4:	bf06      	itte	eq
 80006d6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006da:	3201      	addeq	r2, #1
 80006dc:	3b01      	subne	r3, #1
 80006de:	e7b5      	b.n	800064c <__addsf3+0x58>
 80006e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006e8:	bf18      	it	ne
 80006ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006ee:	d021      	beq.n	8000734 <__addsf3+0x140>
 80006f0:	ea92 0f03 	teq	r2, r3
 80006f4:	d004      	beq.n	8000700 <__addsf3+0x10c>
 80006f6:	f092 0f00 	teq	r2, #0
 80006fa:	bf08      	it	eq
 80006fc:	4608      	moveq	r0, r1
 80006fe:	4770      	bx	lr
 8000700:	ea90 0f01 	teq	r0, r1
 8000704:	bf1c      	itt	ne
 8000706:	2000      	movne	r0, #0
 8000708:	4770      	bxne	lr
 800070a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800070e:	d104      	bne.n	800071a <__addsf3+0x126>
 8000710:	0040      	lsls	r0, r0, #1
 8000712:	bf28      	it	cs
 8000714:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000718:	4770      	bx	lr
 800071a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800071e:	bf3c      	itt	cc
 8000720:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000724:	4770      	bxcc	lr
 8000726:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800072a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800072e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000732:	4770      	bx	lr
 8000734:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000738:	bf16      	itet	ne
 800073a:	4608      	movne	r0, r1
 800073c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000740:	4601      	movne	r1, r0
 8000742:	0242      	lsls	r2, r0, #9
 8000744:	bf06      	itte	eq
 8000746:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800074a:	ea90 0f01 	teqeq	r0, r1
 800074e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000752:	4770      	bx	lr

08000754 <__aeabi_ui2f>:
 8000754:	f04f 0300 	mov.w	r3, #0
 8000758:	e004      	b.n	8000764 <__aeabi_i2f+0x8>
 800075a:	bf00      	nop

0800075c <__aeabi_i2f>:
 800075c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000760:	bf48      	it	mi
 8000762:	4240      	negmi	r0, r0
 8000764:	ea5f 0c00 	movs.w	ip, r0
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000770:	4601      	mov	r1, r0
 8000772:	f04f 0000 	mov.w	r0, #0
 8000776:	e01c      	b.n	80007b2 <__aeabi_l2f+0x2a>

08000778 <__aeabi_ul2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f04f 0300 	mov.w	r3, #0
 8000784:	e00a      	b.n	800079c <__aeabi_l2f+0x14>
 8000786:	bf00      	nop

08000788 <__aeabi_l2f>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000794:	d502      	bpl.n	800079c <__aeabi_l2f+0x14>
 8000796:	4240      	negs	r0, r0
 8000798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079c:	ea5f 0c01 	movs.w	ip, r1
 80007a0:	bf02      	ittt	eq
 80007a2:	4684      	moveq	ip, r0
 80007a4:	4601      	moveq	r1, r0
 80007a6:	2000      	moveq	r0, #0
 80007a8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ac:	bf08      	it	eq
 80007ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007b2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007b6:	fabc f28c 	clz	r2, ip
 80007ba:	3a08      	subs	r2, #8
 80007bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007c0:	db10      	blt.n	80007e4 <__aeabi_l2f+0x5c>
 80007c2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007c6:	4463      	add	r3, ip
 80007c8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007cc:	f1c2 0220 	rsb	r2, r2, #32
 80007d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007d4:	fa20 f202 	lsr.w	r2, r0, r2
 80007d8:	eb43 0002 	adc.w	r0, r3, r2
 80007dc:	bf08      	it	eq
 80007de:	f020 0001 	biceq.w	r0, r0, #1
 80007e2:	4770      	bx	lr
 80007e4:	f102 0220 	add.w	r2, r2, #32
 80007e8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007ec:	f1c2 0220 	rsb	r2, r2, #32
 80007f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007f4:	fa21 f202 	lsr.w	r2, r1, r2
 80007f8:	eb43 0002 	adc.w	r0, r3, r2
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000802:	4770      	bx	lr

08000804 <__aeabi_uldivmod>:
 8000804:	b953      	cbnz	r3, 800081c <__aeabi_uldivmod+0x18>
 8000806:	b94a      	cbnz	r2, 800081c <__aeabi_uldivmod+0x18>
 8000808:	2900      	cmp	r1, #0
 800080a:	bf08      	it	eq
 800080c:	2800      	cmpeq	r0, #0
 800080e:	bf1c      	itt	ne
 8000810:	f04f 31ff 	movne.w	r1, #4294967295
 8000814:	f04f 30ff 	movne.w	r0, #4294967295
 8000818:	f000 b972 	b.w	8000b00 <__aeabi_idiv0>
 800081c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000820:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000824:	f000 f806 	bl	8000834 <__udivmoddi4>
 8000828:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000830:	b004      	add	sp, #16
 8000832:	4770      	bx	lr

08000834 <__udivmoddi4>:
 8000834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000838:	9e08      	ldr	r6, [sp, #32]
 800083a:	4604      	mov	r4, r0
 800083c:	4688      	mov	r8, r1
 800083e:	2b00      	cmp	r3, #0
 8000840:	d14b      	bne.n	80008da <__udivmoddi4+0xa6>
 8000842:	428a      	cmp	r2, r1
 8000844:	4615      	mov	r5, r2
 8000846:	d967      	bls.n	8000918 <__udivmoddi4+0xe4>
 8000848:	fab2 f282 	clz	r2, r2
 800084c:	b14a      	cbz	r2, 8000862 <__udivmoddi4+0x2e>
 800084e:	f1c2 0720 	rsb	r7, r2, #32
 8000852:	fa01 f302 	lsl.w	r3, r1, r2
 8000856:	fa20 f707 	lsr.w	r7, r0, r7
 800085a:	4095      	lsls	r5, r2
 800085c:	ea47 0803 	orr.w	r8, r7, r3
 8000860:	4094      	lsls	r4, r2
 8000862:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000866:	0c23      	lsrs	r3, r4, #16
 8000868:	fbb8 f7fe 	udiv	r7, r8, lr
 800086c:	fa1f fc85 	uxth.w	ip, r5
 8000870:	fb0e 8817 	mls	r8, lr, r7, r8
 8000874:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000878:	fb07 f10c 	mul.w	r1, r7, ip
 800087c:	4299      	cmp	r1, r3
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x60>
 8000880:	18eb      	adds	r3, r5, r3
 8000882:	f107 30ff 	add.w	r0, r7, #4294967295
 8000886:	f080 811b 	bcs.w	8000ac0 <__udivmoddi4+0x28c>
 800088a:	4299      	cmp	r1, r3
 800088c:	f240 8118 	bls.w	8000ac0 <__udivmoddi4+0x28c>
 8000890:	3f02      	subs	r7, #2
 8000892:	442b      	add	r3, r5
 8000894:	1a5b      	subs	r3, r3, r1
 8000896:	b2a4      	uxth	r4, r4
 8000898:	fbb3 f0fe 	udiv	r0, r3, lr
 800089c:	fb0e 3310 	mls	r3, lr, r0, r3
 80008a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80008a8:	45a4      	cmp	ip, r4
 80008aa:	d909      	bls.n	80008c0 <__udivmoddi4+0x8c>
 80008ac:	192c      	adds	r4, r5, r4
 80008ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80008b2:	f080 8107 	bcs.w	8000ac4 <__udivmoddi4+0x290>
 80008b6:	45a4      	cmp	ip, r4
 80008b8:	f240 8104 	bls.w	8000ac4 <__udivmoddi4+0x290>
 80008bc:	3802      	subs	r0, #2
 80008be:	442c      	add	r4, r5
 80008c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80008c4:	eba4 040c 	sub.w	r4, r4, ip
 80008c8:	2700      	movs	r7, #0
 80008ca:	b11e      	cbz	r6, 80008d4 <__udivmoddi4+0xa0>
 80008cc:	40d4      	lsrs	r4, r2
 80008ce:	2300      	movs	r3, #0
 80008d0:	e9c6 4300 	strd	r4, r3, [r6]
 80008d4:	4639      	mov	r1, r7
 80008d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008da:	428b      	cmp	r3, r1
 80008dc:	d909      	bls.n	80008f2 <__udivmoddi4+0xbe>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	f000 80eb 	beq.w	8000aba <__udivmoddi4+0x286>
 80008e4:	2700      	movs	r7, #0
 80008e6:	e9c6 0100 	strd	r0, r1, [r6]
 80008ea:	4638      	mov	r0, r7
 80008ec:	4639      	mov	r1, r7
 80008ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f2:	fab3 f783 	clz	r7, r3
 80008f6:	2f00      	cmp	r7, #0
 80008f8:	d147      	bne.n	800098a <__udivmoddi4+0x156>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d302      	bcc.n	8000904 <__udivmoddi4+0xd0>
 80008fe:	4282      	cmp	r2, r0
 8000900:	f200 80fa 	bhi.w	8000af8 <__udivmoddi4+0x2c4>
 8000904:	1a84      	subs	r4, r0, r2
 8000906:	eb61 0303 	sbc.w	r3, r1, r3
 800090a:	2001      	movs	r0, #1
 800090c:	4698      	mov	r8, r3
 800090e:	2e00      	cmp	r6, #0
 8000910:	d0e0      	beq.n	80008d4 <__udivmoddi4+0xa0>
 8000912:	e9c6 4800 	strd	r4, r8, [r6]
 8000916:	e7dd      	b.n	80008d4 <__udivmoddi4+0xa0>
 8000918:	b902      	cbnz	r2, 800091c <__udivmoddi4+0xe8>
 800091a:	deff      	udf	#255	; 0xff
 800091c:	fab2 f282 	clz	r2, r2
 8000920:	2a00      	cmp	r2, #0
 8000922:	f040 808f 	bne.w	8000a44 <__udivmoddi4+0x210>
 8000926:	1b49      	subs	r1, r1, r5
 8000928:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800092c:	fa1f f885 	uxth.w	r8, r5
 8000930:	2701      	movs	r7, #1
 8000932:	fbb1 fcfe 	udiv	ip, r1, lr
 8000936:	0c23      	lsrs	r3, r4, #16
 8000938:	fb0e 111c 	mls	r1, lr, ip, r1
 800093c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000940:	fb08 f10c 	mul.w	r1, r8, ip
 8000944:	4299      	cmp	r1, r3
 8000946:	d907      	bls.n	8000958 <__udivmoddi4+0x124>
 8000948:	18eb      	adds	r3, r5, r3
 800094a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800094e:	d202      	bcs.n	8000956 <__udivmoddi4+0x122>
 8000950:	4299      	cmp	r1, r3
 8000952:	f200 80cd 	bhi.w	8000af0 <__udivmoddi4+0x2bc>
 8000956:	4684      	mov	ip, r0
 8000958:	1a59      	subs	r1, r3, r1
 800095a:	b2a3      	uxth	r3, r4
 800095c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000960:	fb0e 1410 	mls	r4, lr, r0, r1
 8000964:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000968:	fb08 f800 	mul.w	r8, r8, r0
 800096c:	45a0      	cmp	r8, r4
 800096e:	d907      	bls.n	8000980 <__udivmoddi4+0x14c>
 8000970:	192c      	adds	r4, r5, r4
 8000972:	f100 33ff 	add.w	r3, r0, #4294967295
 8000976:	d202      	bcs.n	800097e <__udivmoddi4+0x14a>
 8000978:	45a0      	cmp	r8, r4
 800097a:	f200 80b6 	bhi.w	8000aea <__udivmoddi4+0x2b6>
 800097e:	4618      	mov	r0, r3
 8000980:	eba4 0408 	sub.w	r4, r4, r8
 8000984:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000988:	e79f      	b.n	80008ca <__udivmoddi4+0x96>
 800098a:	f1c7 0c20 	rsb	ip, r7, #32
 800098e:	40bb      	lsls	r3, r7
 8000990:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000994:	ea4e 0e03 	orr.w	lr, lr, r3
 8000998:	fa01 f407 	lsl.w	r4, r1, r7
 800099c:	fa20 f50c 	lsr.w	r5, r0, ip
 80009a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80009a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80009a8:	4325      	orrs	r5, r4
 80009aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80009ae:	0c2c      	lsrs	r4, r5, #16
 80009b0:	fb08 3319 	mls	r3, r8, r9, r3
 80009b4:	fa1f fa8e 	uxth.w	sl, lr
 80009b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80009bc:	fb09 f40a 	mul.w	r4, r9, sl
 80009c0:	429c      	cmp	r4, r3
 80009c2:	fa02 f207 	lsl.w	r2, r2, r7
 80009c6:	fa00 f107 	lsl.w	r1, r0, r7
 80009ca:	d90b      	bls.n	80009e4 <__udivmoddi4+0x1b0>
 80009cc:	eb1e 0303 	adds.w	r3, lr, r3
 80009d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80009d4:	f080 8087 	bcs.w	8000ae6 <__udivmoddi4+0x2b2>
 80009d8:	429c      	cmp	r4, r3
 80009da:	f240 8084 	bls.w	8000ae6 <__udivmoddi4+0x2b2>
 80009de:	f1a9 0902 	sub.w	r9, r9, #2
 80009e2:	4473      	add	r3, lr
 80009e4:	1b1b      	subs	r3, r3, r4
 80009e6:	b2ad      	uxth	r5, r5
 80009e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80009ec:	fb08 3310 	mls	r3, r8, r0, r3
 80009f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80009f8:	45a2      	cmp	sl, r4
 80009fa:	d908      	bls.n	8000a0e <__udivmoddi4+0x1da>
 80009fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000a00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a04:	d26b      	bcs.n	8000ade <__udivmoddi4+0x2aa>
 8000a06:	45a2      	cmp	sl, r4
 8000a08:	d969      	bls.n	8000ade <__udivmoddi4+0x2aa>
 8000a0a:	3802      	subs	r0, #2
 8000a0c:	4474      	add	r4, lr
 8000a0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a12:	fba0 8902 	umull	r8, r9, r0, r2
 8000a16:	eba4 040a 	sub.w	r4, r4, sl
 8000a1a:	454c      	cmp	r4, r9
 8000a1c:	46c2      	mov	sl, r8
 8000a1e:	464b      	mov	r3, r9
 8000a20:	d354      	bcc.n	8000acc <__udivmoddi4+0x298>
 8000a22:	d051      	beq.n	8000ac8 <__udivmoddi4+0x294>
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d069      	beq.n	8000afc <__udivmoddi4+0x2c8>
 8000a28:	ebb1 050a 	subs.w	r5, r1, sl
 8000a2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000a30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a34:	40fd      	lsrs	r5, r7
 8000a36:	40fc      	lsrs	r4, r7
 8000a38:	ea4c 0505 	orr.w	r5, ip, r5
 8000a3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000a40:	2700      	movs	r7, #0
 8000a42:	e747      	b.n	80008d4 <__udivmoddi4+0xa0>
 8000a44:	f1c2 0320 	rsb	r3, r2, #32
 8000a48:	fa20 f703 	lsr.w	r7, r0, r3
 8000a4c:	4095      	lsls	r5, r2
 8000a4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000a52:	fa21 f303 	lsr.w	r3, r1, r3
 8000a56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a5a:	4338      	orrs	r0, r7
 8000a5c:	0c01      	lsrs	r1, r0, #16
 8000a5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a62:	fa1f f885 	uxth.w	r8, r5
 8000a66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb07 f308 	mul.w	r3, r7, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	fa04 f402 	lsl.w	r4, r4, r2
 8000a78:	d907      	bls.n	8000a8a <__udivmoddi4+0x256>
 8000a7a:	1869      	adds	r1, r5, r1
 8000a7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a80:	d22f      	bcs.n	8000ae2 <__udivmoddi4+0x2ae>
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d92d      	bls.n	8000ae2 <__udivmoddi4+0x2ae>
 8000a86:	3f02      	subs	r7, #2
 8000a88:	4429      	add	r1, r5
 8000a8a:	1acb      	subs	r3, r1, r3
 8000a8c:	b281      	uxth	r1, r0
 8000a8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a9a:	fb00 f308 	mul.w	r3, r0, r8
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d907      	bls.n	8000ab2 <__udivmoddi4+0x27e>
 8000aa2:	1869      	adds	r1, r5, r1
 8000aa4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000aa8:	d217      	bcs.n	8000ada <__udivmoddi4+0x2a6>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d915      	bls.n	8000ada <__udivmoddi4+0x2a6>
 8000aae:	3802      	subs	r0, #2
 8000ab0:	4429      	add	r1, r5
 8000ab2:	1ac9      	subs	r1, r1, r3
 8000ab4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ab8:	e73b      	b.n	8000932 <__udivmoddi4+0xfe>
 8000aba:	4637      	mov	r7, r6
 8000abc:	4630      	mov	r0, r6
 8000abe:	e709      	b.n	80008d4 <__udivmoddi4+0xa0>
 8000ac0:	4607      	mov	r7, r0
 8000ac2:	e6e7      	b.n	8000894 <__udivmoddi4+0x60>
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	e6fb      	b.n	80008c0 <__udivmoddi4+0x8c>
 8000ac8:	4541      	cmp	r1, r8
 8000aca:	d2ab      	bcs.n	8000a24 <__udivmoddi4+0x1f0>
 8000acc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ad0:	eb69 020e 	sbc.w	r2, r9, lr
 8000ad4:	3801      	subs	r0, #1
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	e7a4      	b.n	8000a24 <__udivmoddi4+0x1f0>
 8000ada:	4660      	mov	r0, ip
 8000adc:	e7e9      	b.n	8000ab2 <__udivmoddi4+0x27e>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	e795      	b.n	8000a0e <__udivmoddi4+0x1da>
 8000ae2:	4667      	mov	r7, ip
 8000ae4:	e7d1      	b.n	8000a8a <__udivmoddi4+0x256>
 8000ae6:	4681      	mov	r9, r0
 8000ae8:	e77c      	b.n	80009e4 <__udivmoddi4+0x1b0>
 8000aea:	3802      	subs	r0, #2
 8000aec:	442c      	add	r4, r5
 8000aee:	e747      	b.n	8000980 <__udivmoddi4+0x14c>
 8000af0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000af4:	442b      	add	r3, r5
 8000af6:	e72f      	b.n	8000958 <__udivmoddi4+0x124>
 8000af8:	4638      	mov	r0, r7
 8000afa:	e708      	b.n	800090e <__udivmoddi4+0xda>
 8000afc:	4637      	mov	r7, r6
 8000afe:	e6e9      	b.n	80008d4 <__udivmoddi4+0xa0>

08000b00 <__aeabi_idiv0>:
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <lcd_cmd>:
//AQM0802.c Ver.1.0
#include "AQM0802.h"

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000b0e:	2300      	movs	r3, #0
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2,SLAVEADRESS,Txcmd,2,100);
 8000b16:	f107 020c 	add.w	r2, r7, #12
 8000b1a:	2364      	movs	r3, #100	; 0x64
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2302      	movs	r3, #2
 8000b20:	217c      	movs	r1, #124	; 0x7c
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <lcd_cmd+0x2c>)
 8000b24:	f003 ffaa 	bl	8004a7c <HAL_I2C_Master_Transmit>
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000158 	.word	0x20000158

08000b34 <lcd_data>:

void lcd_data(uint8_t data) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	733b      	strb	r3, [r7, #12]
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2,SLAVEADRESS,Txdata,2,100);
 8000b46:	f107 020c 	add.w	r2, r7, #12
 8000b4a:	2364      	movs	r3, #100	; 0x64
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2302      	movs	r3, #2
 8000b50:	217c      	movs	r1, #124	; 0x7c
 8000b52:	4803      	ldr	r0, [pc, #12]	; (8000b60 <lcd_data+0x2c>)
 8000b54:	f003 ff92 	bl	8004a7c <HAL_I2C_Master_Transmit>
}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000158 	.word	0x20000158

08000b64 <lcd_init>:

void lcd_init(){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
	HAL_Delay(40);
 8000b68:	2028      	movs	r0, #40	; 0x28
 8000b6a:	f002 fa03 	bl	8002f74 <HAL_Delay>
	lcd_cmd(0x38);
 8000b6e:	2038      	movs	r0, #56	; 0x38
 8000b70:	f7ff ffc8 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f002 f9fd 	bl	8002f74 <HAL_Delay>
	lcd_cmd(0x39);
 8000b7a:	2039      	movs	r0, #57	; 0x39
 8000b7c:	f7ff ffc2 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000b80:	2001      	movs	r0, #1
 8000b82:	f002 f9f7 	bl	8002f74 <HAL_Delay>
	lcd_cmd(0x14);
 8000b86:	2014      	movs	r0, #20
 8000b88:	f7ff ffbc 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f002 f9f1 	bl	8002f74 <HAL_Delay>
	lcd_cmd(0x70);
 8000b92:	2070      	movs	r0, #112	; 0x70
 8000b94:	f7ff ffb6 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f002 f9eb 	bl	8002f74 <HAL_Delay>
	lcd_cmd(0x56);
 8000b9e:	2056      	movs	r0, #86	; 0x56
 8000ba0:	f7ff ffb0 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f002 f9e5 	bl	8002f74 <HAL_Delay>
	lcd_cmd(0x6C);
 8000baa:	206c      	movs	r0, #108	; 0x6c
 8000bac:	f7ff ffaa 	bl	8000b04 <lcd_cmd>
	HAL_Delay(200);
 8000bb0:	20c8      	movs	r0, #200	; 0xc8
 8000bb2:	f002 f9df 	bl	8002f74 <HAL_Delay>
	lcd_cmd(0x38);
 8000bb6:	2038      	movs	r0, #56	; 0x38
 8000bb8:	f7ff ffa4 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f002 f9d9 	bl	8002f74 <HAL_Delay>
	lcd_cmd(0x0C);
 8000bc2:	200c      	movs	r0, #12
 8000bc4:	f7ff ff9e 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f002 f9d3 	bl	8002f74 <HAL_Delay>
	lcd_cmd(0x01);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff ff98 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f002 f9cd 	bl	8002f74 <HAL_Delay>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <lcd_locate>:
	HAL_Delay(1);
	lcd_cmd(0x02);
	HAL_Delay(1);
}

void lcd_locate(int x, int y) {
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	3302      	adds	r3, #2
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	019b      	lsls	r3, r3, #6
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff82 	bl	8000b04 <lcd_cmd>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <lcd_print>:

void lcd_print(const char *str) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 8000c10:	e007      	b.n	8000c22 <lcd_print+0x1a>
	{
			lcd_data(*str);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff8c 	bl	8000b34 <lcd_data>
			str++;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f3      	bne.n	8000c12 <lcd_print+0xa>
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8000c32:	b40f      	push	{r0, r1, r2, r3}
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

    va_start(argptr, format);
 8000c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3e:	61bb      	str	r3, [r7, #24]
    ret = vsprintf(lcd_bff, format, argptr);
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c46:	4618      	mov	r0, r3
 8000c48:	f007 f994 	bl	8007f74 <vsiprintf>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8000c50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	dd03      	ble.n	8000c60 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ffd4 	bl	8000c08 <lcd_print>
	}

	return ret;
 8000c60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c6e:	b004      	add	sp, #16
 8000c70:	4770      	bx	lr

08000c72 <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b088      	sub	sp, #32
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8000c7c:	f003 fa10 	bl	80040a0 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8000c94:	f107 0208 	add.w	r2, r7, #8
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 fac6 	bl	8004230 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000ca4:	f003 fa1e 	bl	80040e4 <HAL_FLASH_Lock>
}
 8000ca8:	bf00      	nop
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <read_byte>:
#include "ICM20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <read_byte+0x50>)
 8000cca:	f003 fd6d 	bl	80047a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8000cce:	f107 010f 	add.w	r1, r7, #15
 8000cd2:	2364      	movs	r3, #100	; 0x64
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	480b      	ldr	r0, [pc, #44]	; (8000d04 <read_byte+0x54>)
 8000cd8:	f005 f9c0 	bl	800605c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 8000cdc:	f107 010e 	add.w	r1, r7, #14
 8000ce0:	2364      	movs	r3, #100	; 0x64
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4807      	ldr	r0, [pc, #28]	; (8000d04 <read_byte+0x54>)
 8000ce6:	f005 faed 	bl	80062c4 <HAL_SPI_Receive>
	CS_SET;
 8000cea:	2201      	movs	r2, #1
 8000cec:	2104      	movs	r1, #4
 8000cee:	4804      	ldr	r0, [pc, #16]	; (8000d00 <read_byte+0x50>)
 8000cf0:	f003 fd5a 	bl	80047a8 <HAL_GPIO_WritePin>

	return val;
 8000cf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	200001ec 	.word	0x200001ec

08000d08 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	460a      	mov	r2, r1
 8000d12:	71fb      	strb	r3, [r7, #7]
 8000d14:	4613      	mov	r3, r2
 8000d16:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8000d22:	2200      	movs	r2, #0
 8000d24:	2104      	movs	r1, #4
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <write_byte+0x50>)
 8000d28:	f003 fd3e 	bl	80047a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8000d2c:	f107 010f 	add.w	r1, r7, #15
 8000d30:	2364      	movs	r3, #100	; 0x64
 8000d32:	2201      	movs	r2, #1
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <write_byte+0x54>)
 8000d36:	f005 f991 	bl	800605c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 8000d3a:	1db9      	adds	r1, r7, #6
 8000d3c:	2364      	movs	r3, #100	; 0x64
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4806      	ldr	r0, [pc, #24]	; (8000d5c <write_byte+0x54>)
 8000d42:	f005 f98b 	bl	800605c <HAL_SPI_Transmit>
	CS_SET;
 8000d46:	2201      	movs	r2, #1
 8000d48:	2104      	movs	r1, #4
 8000d4a:	4803      	ldr	r0, [pc, #12]	; (8000d58 <write_byte+0x50>)
 8000d4c:	f003 fd2c 	bl	80047a8 <HAL_GPIO_WritePin>
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40020c00 	.word	0x40020c00
 8000d5c:	200001ec 	.word	0x200001ec

08000d60 <IMU_init>:

uint8_t IMU_init() {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff ffa2 	bl	8000cb0 <read_byte>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	2be0      	cmp	r3, #224	; 0xe0
 8000d74:	d11c      	bne.n	8000db0 <IMU_init+0x50>
		ret = 1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	2006      	movs	r0, #6
 8000d7e:	f7ff ffc3 	bl	8000d08 <write_byte>
		HAL_Delay(100);
 8000d82:	2064      	movs	r0, #100	; 0x64
 8000d84:	f002 f8f6 	bl	8002f74 <HAL_Delay>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8000d88:	2110      	movs	r1, #16
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	f7ff ffbc 	bl	8000d08 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8000d90:	2120      	movs	r1, #32
 8000d92:	207f      	movs	r0, #127	; 0x7f
 8000d94:	f7ff ffb8 	bl	8000d08 <write_byte>
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable
		write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 8000d98:	2107      	movs	r1, #7
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff ffb4 	bl	8000d08 <write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x00);	//range±2g
 8000da0:	2100      	movs	r1, #0
 8000da2:	2014      	movs	r0, #20
 8000da4:	f7ff ffb0 	bl	8000d08 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8000da8:	2100      	movs	r1, #0
 8000daa:	207f      	movs	r0, #127	; 0x7f
 8000dac:	f7ff ffac 	bl	8000d08 <write_byte>
	}
	return ret;
 8000db0:	79fb      	ldrb	r3, [r7, #7]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <read_gyro_data>:

void read_zg_data() {
	zg = ((int16_t)read_byte(0x37) << 8) | ((int16_t)read_byte(0x38));
}

void read_gyro_data() {
 8000dbc:	b598      	push	{r3, r4, r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	xg = ((int16_t)read_byte(0x33) << 8) | ((int16_t)read_byte(0x34));
 8000dc0:	2033      	movs	r0, #51	; 0x33
 8000dc2:	f7ff ff75 	bl	8000cb0 <read_byte>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	b21c      	sxth	r4, r3
 8000dcc:	2034      	movs	r0, #52	; 0x34
 8000dce:	f7ff ff6f 	bl	8000cb0 <read_byte>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	4323      	orrs	r3, r4
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <read_gyro_data+0x64>)
 8000ddc:	801a      	strh	r2, [r3, #0]
	yg = ((int16_t)read_byte(0x35) << 8) | ((int16_t)read_byte(0x36));
 8000dde:	2035      	movs	r0, #53	; 0x35
 8000de0:	f7ff ff66 	bl	8000cb0 <read_byte>
 8000de4:	4603      	mov	r3, r0
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21c      	sxth	r4, r3
 8000dea:	2036      	movs	r0, #54	; 0x36
 8000dec:	f7ff ff60 	bl	8000cb0 <read_byte>
 8000df0:	4603      	mov	r3, r0
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	4323      	orrs	r3, r4
 8000df6:	b21a      	sxth	r2, r3
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <read_gyro_data+0x68>)
 8000dfa:	801a      	strh	r2, [r3, #0]
	zg = ((int16_t)read_byte(0x37) << 8) | ((int16_t)read_byte(0x38));
 8000dfc:	2037      	movs	r0, #55	; 0x37
 8000dfe:	f7ff ff57 	bl	8000cb0 <read_byte>
 8000e02:	4603      	mov	r3, r0
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	b21c      	sxth	r4, r3
 8000e08:	2038      	movs	r0, #56	; 0x38
 8000e0a:	f7ff ff51 	bl	8000cb0 <read_byte>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4323      	orrs	r3, r4
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <read_gyro_data+0x6c>)
 8000e18:	801a      	strh	r2, [r3, #0]
}
 8000e1a:	bf00      	nop
 8000e1c:	bd98      	pop	{r3, r4, r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000c0 	.word	0x200000c0
 8000e24:	200000be 	.word	0x200000be
 8000e28:	200000b8 	.word	0x200000b8

08000e2c <read_accel_data>:

void read_xa_data() {
	xa = ((int16_t)read_byte(0x2D) << 8) | ((int16_t)read_byte(0x2E));
}

void read_accel_data() {
 8000e2c:	b598      	push	{r3, r4, r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	xa = ((int16_t)read_byte(0x2D) << 8) | ((int16_t)read_byte(0x2E));
 8000e30:	202d      	movs	r0, #45	; 0x2d
 8000e32:	f7ff ff3d 	bl	8000cb0 <read_byte>
 8000e36:	4603      	mov	r3, r0
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	b21c      	sxth	r4, r3
 8000e3c:	202e      	movs	r0, #46	; 0x2e
 8000e3e:	f7ff ff37 	bl	8000cb0 <read_byte>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	4323      	orrs	r3, r4
 8000e48:	b21a      	sxth	r2, r3
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <read_accel_data+0x64>)
 8000e4c:	801a      	strh	r2, [r3, #0]
	ya = ((int16_t)read_byte(0x2F) << 8) | ((int16_t)read_byte(0x30));
 8000e4e:	202f      	movs	r0, #47	; 0x2f
 8000e50:	f7ff ff2e 	bl	8000cb0 <read_byte>
 8000e54:	4603      	mov	r3, r0
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	b21c      	sxth	r4, r3
 8000e5a:	2030      	movs	r0, #48	; 0x30
 8000e5c:	f7ff ff28 	bl	8000cb0 <read_byte>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	4323      	orrs	r3, r4
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <read_accel_data+0x68>)
 8000e6a:	801a      	strh	r2, [r3, #0]
	za = ((int16_t)read_byte(0x31) << 8) | ((int16_t)read_byte(0x32));
 8000e6c:	2031      	movs	r0, #49	; 0x31
 8000e6e:	f7ff ff1f 	bl	8000cb0 <read_byte>
 8000e72:	4603      	mov	r3, r0
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	b21c      	sxth	r4, r3
 8000e78:	2032      	movs	r0, #50	; 0x32
 8000e7a:	f7ff ff19 	bl	8000cb0 <read_byte>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	4323      	orrs	r3, r4
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <read_accel_data+0x6c>)
 8000e88:	801a      	strh	r2, [r3, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	bd98      	pop	{r3, r4, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000bc 	.word	0x200000bc
 8000e94:	200000c2 	.word	0x200000c2
 8000e98:	200000ba 	.word	0x200000ba

08000e9c <INA260_read>:
#include "INA260.h"

#define SLAVEADRESS1 (0x40<<1)
//#define SLAVEADRESS2 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af02      	add	r7, sp, #8
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS1,&pointer_byte,1,100);
 8000ea6:	1dfa      	adds	r2, r7, #7
 8000ea8:	2364      	movs	r3, #100	; 0x64
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2301      	movs	r3, #1
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <INA260_read+0x48>)
 8000eb2:	f003 fde3 	bl	8004a7c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,SLAVEADRESS1,Rxdata,2,100);
 8000eb6:	f107 020c 	add.w	r2, r7, #12
 8000eba:	2364      	movs	r3, #100	; 0x64
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <INA260_read+0x48>)
 8000ec4:	f003 fed8 	bl	8004c78 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8000ec8:	7b3b      	ldrb	r3, [r7, #12]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	7b7b      	ldrb	r3, [r7, #13]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	81fb      	strh	r3, [r7, #14]
	return val;
 8000ed8:	89fb      	ldrh	r3, [r7, #14]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000104 	.word	0x20000104

08000ee8 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	71bb      	strb	r3, [r7, #6]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	717b      	strb	r3, [r7, #5]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	733b      	strb	r3, [r7, #12]
 8000efe:	79bb      	ldrb	r3, [r7, #6]
 8000f00:	737b      	strb	r3, [r7, #13]
 8000f02:	797b      	ldrb	r3, [r7, #5]
 8000f04:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS1,Txcmd,3,100);
 8000f06:	f107 020c 	add.w	r2, r7, #12
 8000f0a:	2364      	movs	r3, #100	; 0x64
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2303      	movs	r3, #3
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	4803      	ldr	r0, [pc, #12]	; (8000f20 <INA260_write+0x38>)
 8000f14:	f003 fdb2 	bl	8004a7c <HAL_I2C_Master_Transmit>
}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000104 	.word	0x20000104

08000f24 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460a      	mov	r2, r1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4613      	mov	r3, r2
 8000f32:	71bb      	strb	r3, [r7, #6]
	INA260_write(0x00 , msbyte , lsbyte);
 8000f34:	79ba      	ldrb	r2, [r7, #6]
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f7ff ffd4 	bl	8000ee8 <INA260_write>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <INA260_init>:

void INA260_init() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	setConfig(0x00,0xDF);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8000f4c:	21df      	movs	r1, #223	; 0xdf
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffe8 	bl	8000f24 <setConfig>
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <mileage>:
#include "calculate.h"

float mileage(float mm) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	ed87 0a01 	vstr	s0, [r7, #4]
	return mm * ENC_PULSE_MM;
 8000f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f66:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f7c <mileage+0x24>
 8000f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	3c47ffde 	.word	0x3c47ffde

08000f80 <setup>:
#include "control.h"

void setup(void){
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
	unsigned short volt_reg;

	led_pattern(setup_mode);
 8000f86:	4bbe      	ldr	r3, [pc, #760]	; (8001280 <setup+0x300>)
 8000f88:	f993 3000 	ldrsb.w	r3, [r3]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 f98c 	bl	80022ac <led_pattern>

	switch(setup_mode) {
 8000f94:	4bba      	ldr	r3, [pc, #744]	; (8001280 <setup+0x300>)
 8000f96:	f993 3000 	ldrsb.w	r3, [r3]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	f200 82e9 	bhi.w	8001572 <setup+0x5f2>
 8000fa0:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <setup+0x28>)
 8000fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa6:	bf00      	nop
 8000fa8:	08000fc9 	.word	0x08000fc9
 8000fac:	08001341 	.word	0x08001341
 8000fb0:	080013c1 	.word	0x080013c1
 8000fb4:	08001465 	.word	0x08001465
 8000fb8:	080014fb 	.word	0x080014fb
 8000fbc:	08001519 	.word	0x08001519
 8000fc0:	08001537 	.word	0x08001537
 8000fc4:	08001555 	.word	0x08001555
		case 0:	//sensor check

		if( sw_center_state == 1 ) {	//buzzer
 8000fc8:	4bae      	ldr	r3, [pc, #696]	; (8001284 <setup+0x304>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d105      	bne.n	8000fdc <setup+0x5c>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1049); //MAX4199
 8000fd0:	4bad      	ldr	r3, [pc, #692]	; (8001288 <setup+0x308>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f240 4219 	movw	r2, #1049	; 0x419
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000fda:	e003      	b.n	8000fe4 <setup+0x64>
		}
		else __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000fdc:	4baa      	ldr	r3, [pc, #680]	; (8001288 <setup+0x308>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34

		switch(check_sens_val) {
 8000fe4:	4ba9      	ldr	r3, [pc, #676]	; (800128c <setup+0x30c>)
 8000fe6:	f993 3000 	ldrsb.w	r3, [r3]
 8000fea:	2b0b      	cmp	r3, #11
 8000fec:	f200 8146 	bhi.w	800127c <setup+0x2fc>
 8000ff0:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <setup+0x78>)
 8000ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff6:	bf00      	nop
 8000ff8:	08001029 	.word	0x08001029
 8000ffc:	08001053 	.word	0x08001053
 8001000:	0800107d 	.word	0x0800107d
 8001004:	080010a7 	.word	0x080010a7
 8001008:	080010d1 	.word	0x080010d1
 800100c:	080010fb 	.word	0x080010fb
 8001010:	08001125 	.word	0x08001125
 8001014:	08001153 	.word	0x08001153
 8001018:	08001181 	.word	0x08001181
 800101c:	080011af 	.word	0x080011af
 8001020:	080011f1 	.word	0x080011f1
 8001024:	08001233 	.word	0x08001233
			case 0:
				lcd_locate(0,0);
 8001028:	2100      	movs	r1, #0
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fdd7 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD0",line_sen0);
 8001030:	4b97      	ldr	r3, [pc, #604]	; (8001290 <setup+0x310>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	4897      	ldr	r0, [pc, #604]	; (8001294 <setup+0x314>)
 8001038:	f7ff fdfb 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 800103c:	2101      	movs	r1, #1
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff fdcd 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD1",line_sen1);
 8001044:	4b94      	ldr	r3, [pc, #592]	; (8001298 <setup+0x318>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	4894      	ldr	r0, [pc, #592]	; (800129c <setup+0x31c>)
 800104c:	f7ff fdf1 	bl	8000c32 <lcd_printf>
				break;
 8001050:	e115      	b.n	800127e <setup+0x2fe>
			case 1:
				lcd_locate(0,0);
 8001052:	2100      	movs	r1, #0
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff fdc2 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD2",line_sen2);
 800105a:	4b91      	ldr	r3, [pc, #580]	; (80012a0 <setup+0x320>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	4619      	mov	r1, r3
 8001060:	4890      	ldr	r0, [pc, #576]	; (80012a4 <setup+0x324>)
 8001062:	f7ff fde6 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 8001066:	2101      	movs	r1, #1
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff fdb8 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD3",line_sen3);
 800106e:	4b8e      	ldr	r3, [pc, #568]	; (80012a8 <setup+0x328>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	4619      	mov	r1, r3
 8001074:	488d      	ldr	r0, [pc, #564]	; (80012ac <setup+0x32c>)
 8001076:	f7ff fddc 	bl	8000c32 <lcd_printf>
				break;
 800107a:	e100      	b.n	800127e <setup+0x2fe>
			case 2:
				lcd_locate(0,0);
 800107c:	2100      	movs	r1, #0
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fdad 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD4",line_sen4);
 8001084:	4b8a      	ldr	r3, [pc, #552]	; (80012b0 <setup+0x330>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	488a      	ldr	r0, [pc, #552]	; (80012b4 <setup+0x334>)
 800108c:	f7ff fdd1 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 8001090:	2101      	movs	r1, #1
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff fda3 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD5",line_sen5);
 8001098:	4b87      	ldr	r3, [pc, #540]	; (80012b8 <setup+0x338>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	4887      	ldr	r0, [pc, #540]	; (80012bc <setup+0x33c>)
 80010a0:	f7ff fdc7 	bl	8000c32 <lcd_printf>
				break;
 80010a4:	e0eb      	b.n	800127e <setup+0x2fe>
			case 3:
				lcd_locate(0,0);
 80010a6:	2100      	movs	r1, #0
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff fd98 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD6",line_sen6);
 80010ae:	4b84      	ldr	r3, [pc, #528]	; (80012c0 <setup+0x340>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	4619      	mov	r1, r3
 80010b4:	4883      	ldr	r0, [pc, #524]	; (80012c4 <setup+0x344>)
 80010b6:	f7ff fdbc 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 80010ba:	2101      	movs	r1, #1
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff fd8e 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD7",line_sen7);
 80010c2:	4b81      	ldr	r3, [pc, #516]	; (80012c8 <setup+0x348>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4880      	ldr	r0, [pc, #512]	; (80012cc <setup+0x34c>)
 80010ca:	f7ff fdb2 	bl	8000c32 <lcd_printf>
				break;
 80010ce:	e0d6      	b.n	800127e <setup+0x2fe>
			case 4:
				lcd_locate(0,0);
 80010d0:	2100      	movs	r1, #0
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fd83 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD8",line_sen8);
 80010d8:	4b7d      	ldr	r3, [pc, #500]	; (80012d0 <setup+0x350>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	487d      	ldr	r0, [pc, #500]	; (80012d4 <setup+0x354>)
 80010e0:	f7ff fda7 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 80010e4:	2101      	movs	r1, #1
 80010e6:	2000      	movs	r0, #0
 80010e8:	f7ff fd79 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD9",line_sen9);
 80010ec:	4b7a      	ldr	r3, [pc, #488]	; (80012d8 <setup+0x358>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	487a      	ldr	r0, [pc, #488]	; (80012dc <setup+0x35c>)
 80010f4:	f7ff fd9d 	bl	8000c32 <lcd_printf>
				break;
 80010f8:	e0c1      	b.n	800127e <setup+0x2fe>
			case 5:
				lcd_locate(0,0);
 80010fa:	2100      	movs	r1, #0
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff fd6e 	bl	8000bde <lcd_locate>
				lcd_printf("%4dAD10",line_sen10);
 8001102:	4b77      	ldr	r3, [pc, #476]	; (80012e0 <setup+0x360>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	4876      	ldr	r0, [pc, #472]	; (80012e4 <setup+0x364>)
 800110a:	f7ff fd92 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 800110e:	2101      	movs	r1, #1
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff fd64 	bl	8000bde <lcd_locate>
				lcd_printf("%4dAD11",line_sen11);
 8001116:	4b74      	ldr	r3, [pc, #464]	; (80012e8 <setup+0x368>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	4873      	ldr	r0, [pc, #460]	; (80012ec <setup+0x36c>)
 800111e:	f7ff fd88 	bl	8000c32 <lcd_printf>
				break;
 8001122:	e0ac      	b.n	800127e <setup+0x2fe>
			case 6:
				lcd_locate(0,0);
 8001124:	2100      	movs	r1, #0
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fd59 	bl	8000bde <lcd_locate>
				lcd_printf("XG%6x",xg);
 800112c:	4b70      	ldr	r3, [pc, #448]	; (80012f0 <setup+0x370>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4619      	mov	r1, r3
 8001134:	486f      	ldr	r0, [pc, #444]	; (80012f4 <setup+0x374>)
 8001136:	f7ff fd7c 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 800113a:	2101      	movs	r1, #1
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff fd4e 	bl	8000bde <lcd_locate>
				lcd_printf("YG%6x",yg);
 8001142:	4b6d      	ldr	r3, [pc, #436]	; (80012f8 <setup+0x378>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	b21b      	sxth	r3, r3
 8001148:	4619      	mov	r1, r3
 800114a:	486c      	ldr	r0, [pc, #432]	; (80012fc <setup+0x37c>)
 800114c:	f7ff fd71 	bl	8000c32 <lcd_printf>
				break;
 8001150:	e095      	b.n	800127e <setup+0x2fe>
			case 7:
				lcd_locate(0,0);
 8001152:	2100      	movs	r1, #0
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff fd42 	bl	8000bde <lcd_locate>
				lcd_printf("ZG%6x",zg);
 800115a:	4b69      	ldr	r3, [pc, #420]	; (8001300 <setup+0x380>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b21b      	sxth	r3, r3
 8001160:	4619      	mov	r1, r3
 8001162:	4868      	ldr	r0, [pc, #416]	; (8001304 <setup+0x384>)
 8001164:	f7ff fd65 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 8001168:	2101      	movs	r1, #1
 800116a:	2000      	movs	r0, #0
 800116c:	f7ff fd37 	bl	8000bde <lcd_locate>
				lcd_printf("XA%6x",xa);
 8001170:	4b65      	ldr	r3, [pc, #404]	; (8001308 <setup+0x388>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	b21b      	sxth	r3, r3
 8001176:	4619      	mov	r1, r3
 8001178:	4864      	ldr	r0, [pc, #400]	; (800130c <setup+0x38c>)
 800117a:	f7ff fd5a 	bl	8000c32 <lcd_printf>
				break;
 800117e:	e07e      	b.n	800127e <setup+0x2fe>
			case 8:
				lcd_locate(0,0);
 8001180:	2100      	movs	r1, #0
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff fd2b 	bl	8000bde <lcd_locate>
				lcd_printf("YA%6x",ya);
 8001188:	4b61      	ldr	r3, [pc, #388]	; (8001310 <setup+0x390>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	b21b      	sxth	r3, r3
 800118e:	4619      	mov	r1, r3
 8001190:	4860      	ldr	r0, [pc, #384]	; (8001314 <setup+0x394>)
 8001192:	f7ff fd4e 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 8001196:	2101      	movs	r1, #1
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fd20 	bl	8000bde <lcd_locate>
				lcd_printf("ZA%6x",za);
 800119e:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <setup+0x398>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4619      	mov	r1, r3
 80011a6:	485d      	ldr	r0, [pc, #372]	; (800131c <setup+0x39c>)
 80011a8:	f7ff fd43 	bl	8000c32 <lcd_printf>
				break;
 80011ac:	e067      	b.n	800127e <setup+0x2fe>
			case 9:
				lcd_locate(0,0);
 80011ae:	2100      	movs	r1, #0
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fd14 	bl	8000bde <lcd_locate>
				lcd_print("Encoder1");
 80011b6:	485a      	ldr	r0, [pc, #360]	; (8001320 <setup+0x3a0>)
 80011b8:	f7ff fd26 	bl	8000c08 <lcd_print>
				lcd_locate(0,1);
 80011bc:	2101      	movs	r1, #1
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff fd0d 	bl	8000bde <lcd_locate>
				lcd_printf("%8d", (int)mileage((float)enc_tim1_total));
 80011c4:	4b57      	ldr	r3, [pc, #348]	; (8001324 <setup+0x3a4>)
 80011c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011ca:	4618      	mov	r0, r3
 80011cc:	4621      	mov	r1, r4
 80011ce:	f7ff fadb 	bl	8000788 <__aeabi_l2f>
 80011d2:	4603      	mov	r3, r0
 80011d4:	ee00 3a10 	vmov	s0, r3
 80011d8:	f7ff febe 	bl	8000f58 <mileage>
 80011dc:	eef0 7a40 	vmov.f32	s15, s0
 80011e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e4:	ee17 1a90 	vmov	r1, s15
 80011e8:	484f      	ldr	r0, [pc, #316]	; (8001328 <setup+0x3a8>)
 80011ea:	f7ff fd22 	bl	8000c32 <lcd_printf>
				break;
 80011ee:	e046      	b.n	800127e <setup+0x2fe>
			case 10:
				lcd_locate(0,0);
 80011f0:	2100      	movs	r1, #0
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fcf3 	bl	8000bde <lcd_locate>
				lcd_print("Encoder2");
 80011f8:	484c      	ldr	r0, [pc, #304]	; (800132c <setup+0x3ac>)
 80011fa:	f7ff fd05 	bl	8000c08 <lcd_print>
				lcd_locate(0,1);
 80011fe:	2101      	movs	r1, #1
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fcec 	bl	8000bde <lcd_locate>
				lcd_printf("%8d", (int)mileage((float)enc_tim8_total));
 8001206:	4b4a      	ldr	r3, [pc, #296]	; (8001330 <setup+0x3b0>)
 8001208:	e9d3 3400 	ldrd	r3, r4, [r3]
 800120c:	4618      	mov	r0, r3
 800120e:	4621      	mov	r1, r4
 8001210:	f7ff faba 	bl	8000788 <__aeabi_l2f>
 8001214:	4603      	mov	r3, r0
 8001216:	ee00 3a10 	vmov	s0, r3
 800121a:	f7ff fe9d 	bl	8000f58 <mileage>
 800121e:	eef0 7a40 	vmov.f32	s15, s0
 8001222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001226:	ee17 1a90 	vmov	r1, s15
 800122a:	483f      	ldr	r0, [pc, #252]	; (8001328 <setup+0x3a8>)
 800122c:	f7ff fd01 	bl	8000c32 <lcd_printf>
				break;
 8001230:	e025      	b.n	800127e <setup+0x2fe>
			case 11:
				lcd_locate(0,0);
 8001232:	2100      	movs	r1, #0
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff fcd2 	bl	8000bde <lcd_locate>
				lcd_print("Voltage_");
 800123a:	483e      	ldr	r0, [pc, #248]	; (8001334 <setup+0x3b4>)
 800123c:	f7ff fce4 	bl	8000c08 <lcd_print>
				lcd_locate(0,1);
 8001240:	2101      	movs	r1, #1
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff fccb 	bl	8000bde <lcd_locate>
				volt_reg = INA260_read(0x02);
 8001248:	2002      	movs	r0, #2
 800124a:	f7ff fe27 	bl	8000e9c <INA260_read>
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
				lcd_printf("   %1.2fV",(float)volt_reg*0.00125f);
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800125c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001338 <setup+0x3b8>
 8001260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001264:	ee17 0a90 	vmov	r0, s15
 8001268:	f7ff f966 	bl	8000538 <__aeabi_f2d>
 800126c:	4603      	mov	r3, r0
 800126e:	460c      	mov	r4, r1
 8001270:	461a      	mov	r2, r3
 8001272:	4623      	mov	r3, r4
 8001274:	4831      	ldr	r0, [pc, #196]	; (800133c <setup+0x3bc>)
 8001276:	f7ff fcdc 	bl	8000c32 <lcd_printf>
				break;
 800127a:	e000      	b.n	800127e <setup+0x2fe>
			default:
				break;
 800127c:	bf00      	nop
			}

			break;
 800127e:	e17b      	b.n	8001578 <setup+0x5f8>
 8001280:	200000a8 	.word	0x200000a8
 8001284:	200000aa 	.word	0x200000aa
 8001288:	200003ac 	.word	0x200003ac
 800128c:	200000a9 	.word	0x200000a9
 8001290:	20000498 	.word	0x20000498
 8001294:	08008758 	.word	0x08008758
 8001298:	20000492 	.word	0x20000492
 800129c:	08008760 	.word	0x08008760
 80012a0:	20000474 	.word	0x20000474
 80012a4:	08008768 	.word	0x08008768
 80012a8:	20000470 	.word	0x20000470
 80012ac:	08008770 	.word	0x08008770
 80012b0:	2000046e 	.word	0x2000046e
 80012b4:	08008778 	.word	0x08008778
 80012b8:	20000496 	.word	0x20000496
 80012bc:	08008780 	.word	0x08008780
 80012c0:	20000476 	.word	0x20000476
 80012c4:	08008788 	.word	0x08008788
 80012c8:	20000472 	.word	0x20000472
 80012cc:	08008790 	.word	0x08008790
 80012d0:	20000490 	.word	0x20000490
 80012d4:	08008798 	.word	0x08008798
 80012d8:	2000046c 	.word	0x2000046c
 80012dc:	080087a0 	.word	0x080087a0
 80012e0:	20000494 	.word	0x20000494
 80012e4:	080087a8 	.word	0x080087a8
 80012e8:	2000049a 	.word	0x2000049a
 80012ec:	080087b0 	.word	0x080087b0
 80012f0:	200000c0 	.word	0x200000c0
 80012f4:	080087b8 	.word	0x080087b8
 80012f8:	200000be 	.word	0x200000be
 80012fc:	080087c0 	.word	0x080087c0
 8001300:	200000b8 	.word	0x200000b8
 8001304:	080087c8 	.word	0x080087c8
 8001308:	200000bc 	.word	0x200000bc
 800130c:	080087d0 	.word	0x080087d0
 8001310:	200000c2 	.word	0x200000c2
 8001314:	080087d8 	.word	0x080087d8
 8001318:	200000ba 	.word	0x200000ba
 800131c:	080087e0 	.word	0x080087e0
 8001320:	080087e8 	.word	0x080087e8
 8001324:	20000090 	.word	0x20000090
 8001328:	080087f4 	.word	0x080087f4
 800132c:	080087f8 	.word	0x080087f8
 8001330:	20000098 	.word	0x20000098
 8001334:	08008804 	.word	0x08008804
 8001338:	3aa3d70a 	.word	0x3aa3d70a
 800133c:	08008810 	.word	0x08008810
		case 1:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001340:	4b8f      	ldr	r3, [pc, #572]	; (8001580 <setup+0x600>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2200      	movs	r2, #0
 8001346:	635a      	str	r2, [r3, #52]	; 0x34

			lcd_locate(0,0);
 8001348:	2100      	movs	r1, #0
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff fc47 	bl	8000bde <lcd_locate>
			lcd_print("test_ESC");
 8001350:	488c      	ldr	r0, [pc, #560]	; (8001584 <setup+0x604>)
 8001352:	f7ff fc59 	bl	8000c08 <lcd_print>
			lcd_locate(0,1);
 8001356:	2101      	movs	r1, #1
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff fc40 	bl	8000bde <lcd_locate>
			lcd_print("SW_PUSH_");
 800135e:	488a      	ldr	r0, [pc, #552]	; (8001588 <setup+0x608>)
 8001360:	f7ff fc52 	bl	8000c08 <lcd_print>

			if( sw_center_state == 1 ) {
 8001364:	4b89      	ldr	r3, [pc, #548]	; (800158c <setup+0x60c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d114      	bne.n	8001396 <setup+0x416>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2116);	//	1763(ESC_MIN) + 17.64 * 20
 800136c:	4b88      	ldr	r3, [pc, #544]	; (8001590 <setup+0x610>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f640 0244 	movw	r2, #2116	; 0x844
 8001374:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2116);
 8001376:	4b86      	ldr	r3, [pc, #536]	; (8001590 <setup+0x610>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f640 0244 	movw	r2, #2116	; 0x844
 800137e:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 2116);
 8001380:	4b83      	ldr	r3, [pc, #524]	; (8001590 <setup+0x610>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f640 0244 	movw	r2, #2116	; 0x844
 8001388:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 2116);
 800138a:	4b81      	ldr	r3, [pc, #516]	; (8001590 <setup+0x610>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f640 0244 	movw	r2, #2116	; 0x844
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
			}
			break;
 8001394:	e0f0      	b.n	8001578 <setup+0x5f8>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 8001396:	4b7e      	ldr	r3, [pc, #504]	; (8001590 <setup+0x610>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 62e3 	movw	r2, #1763	; 0x6e3
 800139e:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 80013a0:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <setup+0x610>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 80013aa:	4b79      	ldr	r3, [pc, #484]	; (8001590 <setup+0x610>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80013b2:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 80013b4:	4b76      	ldr	r3, [pc, #472]	; (8001590 <setup+0x610>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80013be:	e0db      	b.n	8001578 <setup+0x5f8>
		case 2:
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 80013c0:	4b73      	ldr	r3, [pc, #460]	; (8001590 <setup+0x610>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80013c8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 80013ca:	4b71      	ldr	r3, [pc, #452]	; (8001590 <setup+0x610>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80013d2:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 80013d4:	4b6e      	ldr	r3, [pc, #440]	; (8001590 <setup+0x610>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80013dc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 80013de:	4b6c      	ldr	r3, [pc, #432]	; (8001590 <setup+0x610>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80013e6:	641a      	str	r2, [r3, #64]	; 0x40

			lcd_locate(0,0);
 80013e8:	2100      	movs	r1, #0
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fbf7 	bl	8000bde <lcd_locate>
			lcd_print("test_MD_");
 80013f0:	4868      	ldr	r0, [pc, #416]	; (8001594 <setup+0x614>)
 80013f2:	f7ff fc09 	bl	8000c08 <lcd_print>
			lcd_locate(0,1);
 80013f6:	2101      	movs	r1, #1
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff fbf0 	bl	8000bde <lcd_locate>
			lcd_print("SW_PUSH_");
 80013fe:	4862      	ldr	r0, [pc, #392]	; (8001588 <setup+0x608>)
 8001400:	f7ff fc02 	bl	8000c08 <lcd_print>

			if( sw_center_state == 1 ) {
 8001404:	4b61      	ldr	r3, [pc, #388]	; (800158c <setup+0x60c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d116      	bne.n	800143a <setup+0x4ba>
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 400);
 800140c:	4b62      	ldr	r3, [pc, #392]	; (8001598 <setup+0x618>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 400);
 8001416:	4b60      	ldr	r3, [pc, #384]	; (8001598 <setup+0x618>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
				MR_SET;
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001426:	485d      	ldr	r0, [pc, #372]	; (800159c <setup+0x61c>)
 8001428:	f003 f9be 	bl	80047a8 <HAL_GPIO_WritePin>
				ML_SET;
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001432:	485a      	ldr	r0, [pc, #360]	; (800159c <setup+0x61c>)
 8001434:	f003 f9b8 	bl	80047a8 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
				MR_SET;
				ML_SET;
			}
			break;
 8001438:	e09e      	b.n	8001578 <setup+0x5f8>
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 800143a:	4b57      	ldr	r3, [pc, #348]	; (8001598 <setup+0x618>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2200      	movs	r2, #0
 8001440:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8001442:	4b55      	ldr	r3, [pc, #340]	; (8001598 <setup+0x618>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	639a      	str	r2, [r3, #56]	; 0x38
				MR_SET;
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001450:	4852      	ldr	r0, [pc, #328]	; (800159c <setup+0x61c>)
 8001452:	f003 f9a9 	bl	80047a8 <HAL_GPIO_WritePin>
				ML_SET;
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800145c:	484f      	ldr	r0, [pc, #316]	; (800159c <setup+0x61c>)
 800145e:	f003 f9a3 	bl	80047a8 <HAL_GPIO_WritePin>
			break;
 8001462:	e089      	b.n	8001578 <setup+0x5f8>
		case 3:
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8001464:	4b4c      	ldr	r3, [pc, #304]	; (8001598 <setup+0x618>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2200      	movs	r2, #0
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 800146c:	4b4a      	ldr	r3, [pc, #296]	; (8001598 <setup+0x618>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2200      	movs	r2, #0
 8001472:	639a      	str	r2, [r3, #56]	; 0x38

			lcd_locate(0,0);
 8001474:	2100      	movs	r1, #0
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff fbb1 	bl	8000bde <lcd_locate>
			lcd_print("_erase__");
 800147c:	4848      	ldr	r0, [pc, #288]	; (80015a0 <setup+0x620>)
 800147e:	f7ff fbc3 	bl	8000c08 <lcd_print>
			lcd_locate(0,1);
 8001482:	2101      	movs	r1, #1
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff fbaa 	bl	8000bde <lcd_locate>
			lcd_print("SW_PUSH_");
 800148a:	483f      	ldr	r0, [pc, #252]	; (8001588 <setup+0x608>)
 800148c:	f7ff fbbc 	bl	8000c08 <lcd_print>

			if( sw_center_state == 1 ) {
 8001490:	4b3e      	ldr	r3, [pc, #248]	; (800158c <setup+0x60c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d16e      	bne.n	8001576 <setup+0x5f6>
				if( isnan( *(float*)start_adress_sector7 ) == 0 )  FLASH_EreaseSector(FLASH_SECTOR_7);
 8001498:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <setup+0x624>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	eef4 7a67 	vcmp.f32	s15, s15
 80014a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a8:	d602      	bvs.n	80014b0 <setup+0x530>
 80014aa:	2007      	movs	r0, #7
 80014ac:	f7ff fbe1 	bl	8000c72 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector9 ) == 0 )  FLASH_EreaseSector(FLASH_SECTOR_9);
 80014b0:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <setup+0x628>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	eef4 7a67 	vcmp.f32	s15, s15
 80014bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c0:	d602      	bvs.n	80014c8 <setup+0x548>
 80014c2:	2009      	movs	r0, #9
 80014c4:	f7ff fbd5 	bl	8000c72 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector10 ) == 0 ) FLASH_EreaseSector(FLASH_SECTOR_10);
 80014c8:	4b38      	ldr	r3, [pc, #224]	; (80015ac <setup+0x62c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eef4 7a67 	vcmp.f32	s15, s15
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	d602      	bvs.n	80014e0 <setup+0x560>
 80014da:	200a      	movs	r0, #10
 80014dc:	f7ff fbc9 	bl	8000c72 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector11 ) == 0 ) FLASH_EreaseSector(FLASH_SECTOR_11);
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <setup+0x630>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	eef4 7a67 	vcmp.f32	s15, s15
 80014ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f0:	d641      	bvs.n	8001576 <setup+0x5f6>
 80014f2:	200b      	movs	r0, #11
 80014f4:	f7ff fbbd 	bl	8000c72 <FLASH_EreaseSector>
			}

			break;
 80014f8:	e03d      	b.n	8001576 <setup+0x5f6>
		case 4:
			lcd_locate(0,0);
 80014fa:	2100      	movs	r1, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	f7ff fb6e 	bl	8000bde <lcd_locate>
			lcd_print("_case-4_");
 8001502:	482c      	ldr	r0, [pc, #176]	; (80015b4 <setup+0x634>)
 8001504:	f7ff fb80 	bl	8000c08 <lcd_print>
			lcd_locate(0,1);
 8001508:	2101      	movs	r1, #1
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff fb67 	bl	8000bde <lcd_locate>
			lcd_print("________");
 8001510:	4829      	ldr	r0, [pc, #164]	; (80015b8 <setup+0x638>)
 8001512:	f7ff fb79 	bl	8000c08 <lcd_print>
			break;
 8001516:	e02f      	b.n	8001578 <setup+0x5f8>
		case 5:
			lcd_locate(0,0);
 8001518:	2100      	movs	r1, #0
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fb5f 	bl	8000bde <lcd_locate>
			lcd_print("_case-5_");
 8001520:	4826      	ldr	r0, [pc, #152]	; (80015bc <setup+0x63c>)
 8001522:	f7ff fb71 	bl	8000c08 <lcd_print>
			lcd_locate(0,1);
 8001526:	2101      	movs	r1, #1
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fb58 	bl	8000bde <lcd_locate>
			lcd_print("________");
 800152e:	4822      	ldr	r0, [pc, #136]	; (80015b8 <setup+0x638>)
 8001530:	f7ff fb6a 	bl	8000c08 <lcd_print>
			break;
 8001534:	e020      	b.n	8001578 <setup+0x5f8>
		case 6:
			lcd_locate(0,0);
 8001536:	2100      	movs	r1, #0
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff fb50 	bl	8000bde <lcd_locate>
			lcd_print("_case-6_");
 800153e:	4820      	ldr	r0, [pc, #128]	; (80015c0 <setup+0x640>)
 8001540:	f7ff fb62 	bl	8000c08 <lcd_print>
			lcd_locate(0,1);
 8001544:	2101      	movs	r1, #1
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff fb49 	bl	8000bde <lcd_locate>
			lcd_print("________");
 800154c:	481a      	ldr	r0, [pc, #104]	; (80015b8 <setup+0x638>)
 800154e:	f7ff fb5b 	bl	8000c08 <lcd_print>
			break;
 8001552:	e011      	b.n	8001578 <setup+0x5f8>
		case 7:
			lcd_locate(0,0);
 8001554:	2100      	movs	r1, #0
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fb41 	bl	8000bde <lcd_locate>
			lcd_print("_case-7_");
 800155c:	4819      	ldr	r0, [pc, #100]	; (80015c4 <setup+0x644>)
 800155e:	f7ff fb53 	bl	8000c08 <lcd_print>
			lcd_locate(0,1);
 8001562:	2101      	movs	r1, #1
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff fb3a 	bl	8000bde <lcd_locate>
			lcd_print("________");
 800156a:	4813      	ldr	r0, [pc, #76]	; (80015b8 <setup+0x638>)
 800156c:	f7ff fb4c 	bl	8000c08 <lcd_print>
			break;
 8001570:	e002      	b.n	8001578 <setup+0x5f8>
		default:
			break;
 8001572:	bf00      	nop
 8001574:	e000      	b.n	8001578 <setup+0x5f8>
			break;
 8001576:	bf00      	nop
	}
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	200003ac 	.word	0x200003ac
 8001584:	0800881c 	.word	0x0800881c
 8001588:	08008828 	.word	0x08008828
 800158c:	200000aa 	.word	0x200000aa
 8001590:	200001ac 	.word	0x200001ac
 8001594:	08008834 	.word	0x08008834
 8001598:	200003ec 	.word	0x200003ec
 800159c:	40020000 	.word	0x40020000
 80015a0:	08008840 	.word	0x08008840
 80015a4:	080088a4 	.word	0x080088a4
 80015a8:	080088a8 	.word	0x080088a8
 80015ac:	080088ac 	.word	0x080088ac
 80015b0:	080088b0 	.word	0x080088b0
 80015b4:	0800884c 	.word	0x0800884c
 80015b8:	08008858 	.word	0x08008858
 80015bc:	08008864 	.word	0x08008864
 80015c0:	08008870 	.word	0x08008870
 80015c4:	0800887c 	.word	0x0800887c

080015c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

	if(htim->Instance == htim6.Instance){	//1ms
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d107      	bne.n	80015ec <HAL_TIM_PeriodElapsedCallback+0x24>
		getEncoder();
 80015dc:	f000 fea8 	bl	8002330 <getEncoder>
		read_gyro_data();
 80015e0:	f7ff fbec 	bl	8000dbc <read_gyro_data>
		read_accel_data();
 80015e4:	f7ff fc22 	bl	8000e2c <read_accel_data>
		ADval_get();
 80015e8:	f000 ff02 	bl	80023f0 <ADval_get>
		//vel_center = (velR + velL) / 2.0f;
		//velPID(float target, float vel, float* order_velR, float* order_velL)

	}

	if(htim->Instance == htim7.Instance){	//10ms
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d10c      	bne.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x4a>
		cnt_sw++;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001602:	701a      	strb	r2, [r3, #0]
		if(cnt_sw >= 250) cnt_sw = 5;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2bf9      	cmp	r3, #249	; 0xf9
 800160a:	d902      	bls.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x4a>
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800160e:	2205      	movs	r2, #5
 8001610:	701a      	strb	r2, [r3, #0]
	}
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000032c 	.word	0x2000032c
 8001620:	2000042c 	.word	0x2000042c
 8001624:	200000ab 	.word	0x200000ab

08001628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162c:	f001 fc30 	bl	8002e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001630:	f000 f824 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001634:	f000 fc92 	bl	8001f5c <MX_GPIO_Init>
  MX_DMA_Init();
 8001638:	f000 fc70 	bl	8001f1c <MX_DMA_Init>
  MX_ADC1_Init();
 800163c:	f000 f888 	bl	8001750 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001640:	f000 f972 	bl	8001928 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001644:	f000 f99e 	bl	8001984 <MX_I2C2_Init>
  MX_SPI3_Init();
 8001648:	f000 f9ca 	bl	80019e0 <MX_SPI3_Init>
  MX_TIM1_Init();
 800164c:	f000 f9fe 	bl	8001a4c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001650:	f000 fa54 	bl	8001afc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001654:	f000 faaa 	bl	8001bac <MX_TIM3_Init>
  MX_TIM8_Init();
 8001658:	f000 fb8e 	bl	8001d78 <MX_TIM8_Init>
  MX_TIM12_Init();
 800165c:	f000 fbe4 	bl	8001e28 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001660:	f000 fc32 	bl	8001ec8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001664:	f000 fb1c 	bl	8001ca0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001668:	f000 fb50 	bl	8001d0c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  peripheral_init();
 800166c:	f000 fd5e 	bl	800212c <peripheral_init>
  led_pattern(7);
 8001670:	2007      	movs	r0, #7
 8001672:	f000 fe1b 	bl	80022ac <led_pattern>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  setup();
 8001676:	f7ff fc83 	bl	8000f80 <setup>
 800167a:	e7fc      	b.n	8001676 <main+0x4e>

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b094      	sub	sp, #80	; 0x50
 8001680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	f107 0320 	add.w	r3, r7, #32
 8001686:	2230      	movs	r2, #48	; 0x30
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f006 fc53 	bl	8007f36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <SystemClock_Config+0xcc>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a27      	ldr	r2, [pc, #156]	; (8001748 <SystemClock_Config+0xcc>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <SystemClock_Config+0xcc>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <SystemClock_Config+0xd0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a21      	ldr	r2, [pc, #132]	; (800174c <SystemClock_Config+0xd0>)
 80016c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <SystemClock_Config+0xd0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d8:	2301      	movs	r3, #1
 80016da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e2:	2302      	movs	r3, #2
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80016ec:	2306      	movs	r3, #6
 80016ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016f0:	23a8      	movs	r3, #168	; 0xa8
 80016f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f4:	2302      	movs	r3, #2
 80016f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016f8:	2304      	movs	r3, #4
 80016fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fc:	f107 0320 	add.w	r3, r7, #32
 8001700:	4618      	mov	r0, r3
 8001702:	f004 f80b 	bl	800571c <HAL_RCC_OscConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800170c:	f000 fd06 	bl	800211c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001710:	230f      	movs	r3, #15
 8001712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001714:	2302      	movs	r3, #2
 8001716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800171c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2105      	movs	r1, #5
 800172e:	4618      	mov	r0, r3
 8001730:	f004 fa64 	bl	8005bfc <HAL_RCC_ClockConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800173a:	f000 fcef 	bl	800211c <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	3750      	adds	r7, #80	; 0x50
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000

08001750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001756:	463b      	mov	r3, r7
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001762:	4b6e      	ldr	r3, [pc, #440]	; (800191c <MX_ADC1_Init+0x1cc>)
 8001764:	4a6e      	ldr	r2, [pc, #440]	; (8001920 <MX_ADC1_Init+0x1d0>)
 8001766:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001768:	4b6c      	ldr	r3, [pc, #432]	; (800191c <MX_ADC1_Init+0x1cc>)
 800176a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800176e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001770:	4b6a      	ldr	r3, [pc, #424]	; (800191c <MX_ADC1_Init+0x1cc>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001776:	4b69      	ldr	r3, [pc, #420]	; (800191c <MX_ADC1_Init+0x1cc>)
 8001778:	2201      	movs	r2, #1
 800177a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800177c:	4b67      	ldr	r3, [pc, #412]	; (800191c <MX_ADC1_Init+0x1cc>)
 800177e:	2201      	movs	r2, #1
 8001780:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001782:	4b66      	ldr	r3, [pc, #408]	; (800191c <MX_ADC1_Init+0x1cc>)
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800178a:	4b64      	ldr	r3, [pc, #400]	; (800191c <MX_ADC1_Init+0x1cc>)
 800178c:	2200      	movs	r2, #0
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001790:	4b62      	ldr	r3, [pc, #392]	; (800191c <MX_ADC1_Init+0x1cc>)
 8001792:	4a64      	ldr	r2, [pc, #400]	; (8001924 <MX_ADC1_Init+0x1d4>)
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001796:	4b61      	ldr	r3, [pc, #388]	; (800191c <MX_ADC1_Init+0x1cc>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 800179c:	4b5f      	ldr	r3, [pc, #380]	; (800191c <MX_ADC1_Init+0x1cc>)
 800179e:	220c      	movs	r2, #12
 80017a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017a2:	4b5e      	ldr	r3, [pc, #376]	; (800191c <MX_ADC1_Init+0x1cc>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017aa:	4b5c      	ldr	r3, [pc, #368]	; (800191c <MX_ADC1_Init+0x1cc>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017b0:	485a      	ldr	r0, [pc, #360]	; (800191c <MX_ADC1_Init+0x1cc>)
 80017b2:	f001 fc01 	bl	8002fb8 <HAL_ADC_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017bc:	f000 fcae 	bl	800211c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80017c8:	2302      	movs	r3, #2
 80017ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	4852      	ldr	r0, [pc, #328]	; (800191c <MX_ADC1_Init+0x1cc>)
 80017d2:	f001 fd45 	bl	8003260 <HAL_ADC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017dc:	f000 fc9e 	bl	800211c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017e0:	2301      	movs	r3, #1
 80017e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80017e4:	2302      	movs	r3, #2
 80017e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e8:	463b      	mov	r3, r7
 80017ea:	4619      	mov	r1, r3
 80017ec:	484b      	ldr	r0, [pc, #300]	; (800191c <MX_ADC1_Init+0x1cc>)
 80017ee:	f001 fd37 	bl	8003260 <HAL_ADC_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80017f8:	f000 fc90 	bl	800211c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001800:	2303      	movs	r3, #3
 8001802:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001804:	463b      	mov	r3, r7
 8001806:	4619      	mov	r1, r3
 8001808:	4844      	ldr	r0, [pc, #272]	; (800191c <MX_ADC1_Init+0x1cc>)
 800180a:	f001 fd29 	bl	8003260 <HAL_ADC_ConfigChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001814:	f000 fc82 	bl	800211c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001818:	2303      	movs	r3, #3
 800181a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800181c:	2304      	movs	r3, #4
 800181e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001820:	463b      	mov	r3, r7
 8001822:	4619      	mov	r1, r3
 8001824:	483d      	ldr	r0, [pc, #244]	; (800191c <MX_ADC1_Init+0x1cc>)
 8001826:	f001 fd1b 	bl	8003260 <HAL_ADC_ConfigChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001830:	f000 fc74 	bl	800211c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001834:	2304      	movs	r3, #4
 8001836:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001838:	2305      	movs	r3, #5
 800183a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	4619      	mov	r1, r3
 8001840:	4836      	ldr	r0, [pc, #216]	; (800191c <MX_ADC1_Init+0x1cc>)
 8001842:	f001 fd0d 	bl	8003260 <HAL_ADC_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800184c:	f000 fc66 	bl	800211c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001850:	2305      	movs	r3, #5
 8001852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001854:	2306      	movs	r3, #6
 8001856:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001858:	463b      	mov	r3, r7
 800185a:	4619      	mov	r1, r3
 800185c:	482f      	ldr	r0, [pc, #188]	; (800191c <MX_ADC1_Init+0x1cc>)
 800185e:	f001 fcff 	bl	8003260 <HAL_ADC_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001868:	f000 fc58 	bl	800211c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800186c:	2306      	movs	r3, #6
 800186e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001870:	2307      	movs	r3, #7
 8001872:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001874:	463b      	mov	r3, r7
 8001876:	4619      	mov	r1, r3
 8001878:	4828      	ldr	r0, [pc, #160]	; (800191c <MX_ADC1_Init+0x1cc>)
 800187a:	f001 fcf1 	bl	8003260 <HAL_ADC_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001884:	f000 fc4a 	bl	800211c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001888:	2307      	movs	r3, #7
 800188a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800188c:	2308      	movs	r3, #8
 800188e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001890:	463b      	mov	r3, r7
 8001892:	4619      	mov	r1, r3
 8001894:	4821      	ldr	r0, [pc, #132]	; (800191c <MX_ADC1_Init+0x1cc>)
 8001896:	f001 fce3 	bl	8003260 <HAL_ADC_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80018a0:	f000 fc3c 	bl	800211c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80018a4:	2308      	movs	r3, #8
 80018a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80018a8:	2309      	movs	r3, #9
 80018aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ac:	463b      	mov	r3, r7
 80018ae:	4619      	mov	r1, r3
 80018b0:	481a      	ldr	r0, [pc, #104]	; (800191c <MX_ADC1_Init+0x1cc>)
 80018b2:	f001 fcd5 	bl	8003260 <HAL_ADC_ConfigChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80018bc:	f000 fc2e 	bl	800211c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80018c0:	2309      	movs	r3, #9
 80018c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80018c4:	230a      	movs	r3, #10
 80018c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c8:	463b      	mov	r3, r7
 80018ca:	4619      	mov	r1, r3
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <MX_ADC1_Init+0x1cc>)
 80018ce:	f001 fcc7 	bl	8003260 <HAL_ADC_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80018d8:	f000 fc20 	bl	800211c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80018dc:	230e      	movs	r3, #14
 80018de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80018e0:	230b      	movs	r3, #11
 80018e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018e4:	463b      	mov	r3, r7
 80018e6:	4619      	mov	r1, r3
 80018e8:	480c      	ldr	r0, [pc, #48]	; (800191c <MX_ADC1_Init+0x1cc>)
 80018ea:	f001 fcb9 	bl	8003260 <HAL_ADC_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80018f4:	f000 fc12 	bl	800211c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80018f8:	230f      	movs	r3, #15
 80018fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80018fc:	230c      	movs	r3, #12
 80018fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001900:	463b      	mov	r3, r7
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_ADC1_Init+0x1cc>)
 8001906:	f001 fcab 	bl	8003260 <HAL_ADC_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001910:	f000 fc04 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000244 	.word	0x20000244
 8001920:	40012000 	.word	0x40012000
 8001924:	0f000001 	.word	0x0f000001

08001928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <MX_I2C1_Init+0x50>)
 800192e:	4a13      	ldr	r2, [pc, #76]	; (800197c <MX_I2C1_Init+0x54>)
 8001930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_I2C1_Init+0x50>)
 8001934:	4a12      	ldr	r2, [pc, #72]	; (8001980 <MX_I2C1_Init+0x58>)
 8001936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_I2C1_Init+0x50>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_I2C1_Init+0x50>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_I2C1_Init+0x50>)
 8001946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800194a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <MX_I2C1_Init+0x50>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_I2C1_Init+0x50>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <MX_I2C1_Init+0x50>)
 8001966:	f002 ff51 	bl	800480c <HAL_I2C_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001970:	f000 fbd4 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000104 	.word	0x20000104
 800197c:	40005400 	.word	0x40005400
 8001980:	00061a80 	.word	0x00061a80

08001984 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <MX_I2C2_Init+0x50>)
 800198a:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <MX_I2C2_Init+0x54>)
 800198c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_I2C2_Init+0x50>)
 8001990:	4a12      	ldr	r2, [pc, #72]	; (80019dc <MX_I2C2_Init+0x58>)
 8001992:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_I2C2_Init+0x50>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_I2C2_Init+0x50>)
 800199c:	2200      	movs	r2, #0
 800199e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <MX_I2C2_Init+0x50>)
 80019c2:	f002 ff23 	bl	800480c <HAL_I2C_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019cc:	f000 fba6 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000158 	.word	0x20000158
 80019d8:	40005800 	.word	0x40005800
 80019dc:	000186a0 	.word	0x000186a0

080019e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <MX_SPI3_Init+0x64>)
 80019e6:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <MX_SPI3_Init+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <MX_SPI3_Init+0x64>)
 80019ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_SPI3_Init+0x64>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <MX_SPI3_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_SPI3_Init+0x64>)
 8001a00:	2202      	movs	r2, #2
 8001a02:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_SPI3_Init+0x64>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_SPI3_Init+0x64>)
 8001a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a10:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_SPI3_Init+0x64>)
 8001a14:	2220      	movs	r2, #32
 8001a16:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <MX_SPI3_Init+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_SPI3_Init+0x64>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <MX_SPI3_Init+0x64>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_SPI3_Init+0x64>)
 8001a2c:	220a      	movs	r2, #10
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <MX_SPI3_Init+0x64>)
 8001a32:	f004 faaf 	bl	8005f94 <HAL_SPI_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001a3c:	f000 fb6e 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200001ec 	.word	0x200001ec
 8001a48:	40003c00 	.word	0x40003c00

08001a4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	; 0x30
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	2224      	movs	r2, #36	; 0x24
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f006 fa6b 	bl	8007f36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a68:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <MX_TIM1_Init+0xa8>)
 8001a6a:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <MX_TIM1_Init+0xac>)
 8001a6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a6e:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <MX_TIM1_Init+0xa8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a74:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <MX_TIM1_Init+0xa8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <MX_TIM1_Init+0xa8>)
 8001a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <MX_TIM1_Init+0xa8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a88:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <MX_TIM1_Init+0xa8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8e:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <MX_TIM1_Init+0xa8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a94:	2303      	movs	r3, #3
 8001a96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aac:	2301      	movs	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	480d      	ldr	r0, [pc, #52]	; (8001af4 <MX_TIM1_Init+0xa8>)
 8001ac0:	f005 f874 	bl	8006bac <HAL_TIM_Encoder_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001aca:	f000 fb27 	bl	800211c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4806      	ldr	r0, [pc, #24]	; (8001af4 <MX_TIM1_Init+0xa8>)
 8001adc:	f005 fd9c 	bl	8007618 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001ae6:	f000 fb19 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	3730      	adds	r7, #48	; 0x30
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000036c 	.word	0x2000036c
 8001af8:	40010000 	.word	0x40010000

08001afc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b02:	f107 0320 	add.w	r3, r7, #32
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	615a      	str	r2, [r3, #20]
 8001b1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b1e:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <MX_TIM2_Init+0xac>)
 8001b20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <MX_TIM2_Init+0xac>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <MX_TIM2_Init+0xac>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199;
 8001b32:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <MX_TIM2_Init+0xac>)
 8001b34:	f241 0267 	movw	r2, #4199	; 0x1067
 8001b38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <MX_TIM2_Init+0xac>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <MX_TIM2_Init+0xac>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b46:	4818      	ldr	r0, [pc, #96]	; (8001ba8 <MX_TIM2_Init+0xac>)
 8001b48:	f004 ffc7 	bl	8006ada <HAL_TIM_PWM_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b52:	f000 fae3 	bl	800211c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b5e:	f107 0320 	add.w	r3, r7, #32
 8001b62:	4619      	mov	r1, r3
 8001b64:	4810      	ldr	r0, [pc, #64]	; (8001ba8 <MX_TIM2_Init+0xac>)
 8001b66:	f005 fd57 	bl	8007618 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b70:	f000 fad4 	bl	800211c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b74:	2360      	movs	r3, #96	; 0x60
 8001b76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2200      	movs	r2, #0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <MX_TIM2_Init+0xac>)
 8001b8c:	f005 f9e0 	bl	8006f50 <HAL_TIM_PWM_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b96:	f000 fac1 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b9a:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <MX_TIM2_Init+0xac>)
 8001b9c:	f000 ffae 	bl	8002afc <HAL_TIM_MspPostInit>

}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	; 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200003ac 	.word	0x200003ac

08001bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb2:	f107 0320 	add.w	r3, r7, #32
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bce:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <MX_TIM3_Init+0xec>)
 8001bd0:	4a32      	ldr	r2, [pc, #200]	; (8001c9c <MX_TIM3_Init+0xf0>)
 8001bd2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <MX_TIM3_Init+0xec>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bda:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <MX_TIM3_Init+0xec>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4199;
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <MX_TIM3_Init+0xec>)
 8001be2:	f241 0267 	movw	r2, #4199	; 0x1067
 8001be6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <MX_TIM3_Init+0xec>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bee:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <MX_TIM3_Init+0xec>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bf4:	4828      	ldr	r0, [pc, #160]	; (8001c98 <MX_TIM3_Init+0xec>)
 8001bf6:	f004 ff70 	bl	8006ada <HAL_TIM_PWM_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c00:	f000 fa8c 	bl	800211c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c0c:	f107 0320 	add.w	r3, r7, #32
 8001c10:	4619      	mov	r1, r3
 8001c12:	4821      	ldr	r0, [pc, #132]	; (8001c98 <MX_TIM3_Init+0xec>)
 8001c14:	f005 fd00 	bl	8007618 <HAL_TIMEx_MasterConfigSynchronization>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c1e:	f000 fa7d 	bl	800211c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c22:	2360      	movs	r3, #96	; 0x60
 8001c24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2200      	movs	r2, #0
 8001c36:	4619      	mov	r1, r3
 8001c38:	4817      	ldr	r0, [pc, #92]	; (8001c98 <MX_TIM3_Init+0xec>)
 8001c3a:	f005 f989 	bl	8006f50 <HAL_TIM_PWM_ConfigChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c44:	f000 fa6a 	bl	800211c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4812      	ldr	r0, [pc, #72]	; (8001c98 <MX_TIM3_Init+0xec>)
 8001c50:	f005 f97e 	bl	8006f50 <HAL_TIM_PWM_ConfigChannel>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c5a:	f000 fa5f 	bl	800211c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2208      	movs	r2, #8
 8001c62:	4619      	mov	r1, r3
 8001c64:	480c      	ldr	r0, [pc, #48]	; (8001c98 <MX_TIM3_Init+0xec>)
 8001c66:	f005 f973 	bl	8006f50 <HAL_TIM_PWM_ConfigChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001c70:	f000 fa54 	bl	800211c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	220c      	movs	r2, #12
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4807      	ldr	r0, [pc, #28]	; (8001c98 <MX_TIM3_Init+0xec>)
 8001c7c:	f005 f968 	bl	8006f50 <HAL_TIM_PWM_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c86:	f000 fa49 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c8a:	4803      	ldr	r0, [pc, #12]	; (8001c98 <MX_TIM3_Init+0xec>)
 8001c8c:	f000 ff36 	bl	8002afc <HAL_TIM_MspPostInit>

}
 8001c90:	bf00      	nop
 8001c92:	3728      	adds	r7, #40	; 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200001ac 	.word	0x200001ac
 8001c9c:	40000400 	.word	0x40000400

08001ca0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <MX_TIM6_Init+0x64>)
 8001cb0:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <MX_TIM6_Init+0x68>)
 8001cb2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19;
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <MX_TIM6_Init+0x64>)
 8001cb6:	2213      	movs	r2, #19
 8001cb8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_TIM6_Init+0x64>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4199;
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <MX_TIM6_Init+0x64>)
 8001cc2:	f241 0267 	movw	r2, #4199	; 0x1067
 8001cc6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_TIM6_Init+0x64>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cce:	480d      	ldr	r0, [pc, #52]	; (8001d04 <MX_TIM6_Init+0x64>)
 8001cd0:	f004 feb4 	bl	8006a3c <HAL_TIM_Base_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001cda:	f000 fa1f 	bl	800211c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4806      	ldr	r0, [pc, #24]	; (8001d04 <MX_TIM6_Init+0x64>)
 8001cec:	f005 fc94 	bl	8007618 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001cf6:	f000 fa11 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000032c 	.word	0x2000032c
 8001d08:	40001000 	.word	0x40001000

08001d0c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d12:	463b      	mov	r3, r7
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <MX_TIM7_Init+0x64>)
 8001d1c:	4a15      	ldr	r2, [pc, #84]	; (8001d74 <MX_TIM7_Init+0x68>)
 8001d1e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <MX_TIM7_Init+0x64>)
 8001d22:	22a7      	movs	r2, #167	; 0xa7
 8001d24:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <MX_TIM7_Init+0x64>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 8001d2c:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <MX_TIM7_Init+0x64>)
 8001d2e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d32:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_TIM7_Init+0x64>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d3a:	480d      	ldr	r0, [pc, #52]	; (8001d70 <MX_TIM7_Init+0x64>)
 8001d3c:	f004 fe7e 	bl	8006a3c <HAL_TIM_Base_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001d46:	f000 f9e9 	bl	800211c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d52:	463b      	mov	r3, r7
 8001d54:	4619      	mov	r1, r3
 8001d56:	4806      	ldr	r0, [pc, #24]	; (8001d70 <MX_TIM7_Init+0x64>)
 8001d58:	f005 fc5e 	bl	8007618 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001d62:	f000 f9db 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000042c 	.word	0x2000042c
 8001d74:	40001400 	.word	0x40001400

08001d78 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	; 0x30
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	2224      	movs	r2, #36	; 0x24
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f006 f8d5 	bl	8007f36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d94:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <MX_TIM8_Init+0xa8>)
 8001d96:	4a23      	ldr	r2, [pc, #140]	; (8001e24 <MX_TIM8_Init+0xac>)
 8001d98:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d9a:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <MX_TIM8_Init+0xa8>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <MX_TIM8_Init+0xa8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <MX_TIM8_Init+0xa8>)
 8001da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <MX_TIM8_Init+0xa8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001db4:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <MX_TIM8_Init+0xa8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <MX_TIM8_Init+0xa8>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	4619      	mov	r1, r3
 8001dea:	480d      	ldr	r0, [pc, #52]	; (8001e20 <MX_TIM8_Init+0xa8>)
 8001dec:	f004 fede 	bl	8006bac <HAL_TIM_Encoder_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001df6:	f000 f991 	bl	800211c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4806      	ldr	r0, [pc, #24]	; (8001e20 <MX_TIM8_Init+0xa8>)
 8001e08:	f005 fc06 	bl	8007618 <HAL_TIMEx_MasterConfigSynchronization>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001e12:	f000 f983 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e16:	bf00      	nop
 8001e18:	3730      	adds	r7, #48	; 0x30
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200000c4 	.word	0x200000c4
 8001e24:	40010400 	.word	0x40010400

08001e28 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
 8001e3c:	615a      	str	r2, [r3, #20]
 8001e3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001e40:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <MX_TIM12_Init+0x98>)
 8001e42:	4a20      	ldr	r2, [pc, #128]	; (8001ec4 <MX_TIM12_Init+0x9c>)
 8001e44:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8001e46:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <MX_TIM12_Init+0x98>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <MX_TIM12_Init+0x98>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 839;
 8001e52:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <MX_TIM12_Init+0x98>)
 8001e54:	f240 3247 	movw	r2, #839	; 0x347
 8001e58:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <MX_TIM12_Init+0x98>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <MX_TIM12_Init+0x98>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001e66:	4816      	ldr	r0, [pc, #88]	; (8001ec0 <MX_TIM12_Init+0x98>)
 8001e68:	f004 fe37 	bl	8006ada <HAL_TIM_PWM_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001e72:	f000 f953 	bl	800211c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e76:	2360      	movs	r3, #96	; 0x60
 8001e78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	480c      	ldr	r0, [pc, #48]	; (8001ec0 <MX_TIM12_Init+0x98>)
 8001e8e:	f005 f85f 	bl	8006f50 <HAL_TIM_PWM_ConfigChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001e98:	f000 f940 	bl	800211c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <MX_TIM12_Init+0x98>)
 8001ea4:	f005 f854 	bl	8006f50 <HAL_TIM_PWM_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001eae:	f000 f935 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001eb2:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <MX_TIM12_Init+0x98>)
 8001eb4:	f000 fe22 	bl	8002afc <HAL_TIM_MspPostInit>

}
 8001eb8:	bf00      	nop
 8001eba:	3720      	adds	r7, #32
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200003ec 	.word	0x200003ec
 8001ec4:	40001800 	.word	0x40001800

08001ec8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <MX_USART1_UART_Init+0x50>)
 8001ed0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001ed4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ed8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001eee:	220c      	movs	r2, #12
 8001ef0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_USART1_UART_Init+0x4c>)
 8001f00:	f005 fc1a 	bl	8007738 <HAL_UART_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f0a:	f000 f907 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000028c 	.word	0x2000028c
 8001f18:	40011000 	.word	0x40011000

08001f1c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_DMA_Init+0x3c>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <MX_DMA_Init+0x3c>)
 8001f2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_DMA_Init+0x3c>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2105      	movs	r1, #5
 8001f42:	2038      	movs	r0, #56	; 0x38
 8001f44:	f001 fd07 	bl	8003956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f48:	2038      	movs	r0, #56	; 0x38
 8001f4a:	f001 fd20 	bl	800398e <HAL_NVIC_EnableIRQ>

}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800

08001f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	4b63      	ldr	r3, [pc, #396]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a62      	ldr	r2, [pc, #392]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b60      	ldr	r3, [pc, #384]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b5c      	ldr	r3, [pc, #368]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a5b      	ldr	r2, [pc, #364]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b59      	ldr	r3, [pc, #356]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	4b55      	ldr	r3, [pc, #340]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a54      	ldr	r2, [pc, #336]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b52      	ldr	r3, [pc, #328]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a4d      	ldr	r2, [pc, #308]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b4b      	ldr	r3, [pc, #300]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4b47      	ldr	r3, [pc, #284]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a46      	ldr	r2, [pc, #280]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001fec:	f043 0308 	orr.w	r3, r3, #8
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b44      	ldr	r3, [pc, #272]	; (8002104 <MX_GPIO_Init+0x1a8>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8001ffe:	2200      	movs	r2, #0
 8002000:	f242 0104 	movw	r1, #8196	; 0x2004
 8002004:	4840      	ldr	r0, [pc, #256]	; (8002108 <MX_GPIO_Init+0x1ac>)
 8002006:	f002 fbcf 	bl	80047a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002010:	483e      	ldr	r0, [pc, #248]	; (800210c <MX_GPIO_Init+0x1b0>)
 8002012:	f002 fbc9 	bl	80047a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	2104      	movs	r1, #4
 800201a:	483d      	ldr	r0, [pc, #244]	; (8002110 <MX_GPIO_Init+0x1b4>)
 800201c:	f002 fbc4 	bl	80047a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8002020:	f24e 0303 	movw	r3, #57347	; 0xe003
 8002024:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002026:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <MX_GPIO_Init+0x1b8>)
 8002028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202a:	2301      	movs	r3, #1
 800202c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	4838      	ldr	r0, [pc, #224]	; (8002118 <MX_GPIO_Init+0x1bc>)
 8002036:	f002 fa1d 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13;
 800203a:	f242 0304 	movw	r3, #8196	; 0x2004
 800203e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4619      	mov	r1, r3
 8002052:	482d      	ldr	r0, [pc, #180]	; (8002108 <MX_GPIO_Init+0x1ac>)
 8002054:	f002 fa0e 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800205c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800205e:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <MX_GPIO_Init+0x1b8>)
 8002060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002062:	2301      	movs	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	4826      	ldr	r0, [pc, #152]	; (8002108 <MX_GPIO_Init+0x1ac>)
 800206e:	f002 fa01 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002072:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002078:	2301      	movs	r3, #1
 800207a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002080:	2302      	movs	r3, #2
 8002082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	4820      	ldr	r0, [pc, #128]	; (800210c <MX_GPIO_Init+0x1b0>)
 800208c:	f002 f9f2 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002096:	2301      	movs	r3, #1
 8002098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 0314 	add.w	r3, r7, #20
 80020a6:	4619      	mov	r1, r3
 80020a8:	4818      	ldr	r0, [pc, #96]	; (800210c <MX_GPIO_Init+0x1b0>)
 80020aa:	f002 f9e3 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020ae:	2304      	movs	r3, #4
 80020b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020be:	f107 0314 	add.w	r3, r7, #20
 80020c2:	4619      	mov	r1, r3
 80020c4:	4812      	ldr	r0, [pc, #72]	; (8002110 <MX_GPIO_Init+0x1b4>)
 80020c6:	f002 f9d5 	bl	8004474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	2006      	movs	r0, #6
 80020d0:	f001 fc41 	bl	8003956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020d4:	2006      	movs	r0, #6
 80020d6:	f001 fc5a 	bl	800398e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	2007      	movs	r0, #7
 80020e0:	f001 fc39 	bl	8003956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020e4:	2007      	movs	r0, #7
 80020e6:	f001 fc52 	bl	800398e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2028      	movs	r0, #40	; 0x28
 80020f0:	f001 fc31 	bl	8003956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020f4:	2028      	movs	r0, #40	; 0x28
 80020f6:	f001 fc4a 	bl	800398e <HAL_NVIC_EnableIRQ>

}
 80020fa:	bf00      	nop
 80020fc:	3728      	adds	r7, #40	; 0x28
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800
 8002108:	40020400 	.word	0x40020400
 800210c:	40020000 	.word	0x40020000
 8002110:	40020c00 	.word	0x40020c00
 8002114:	10110000 	.word	0x10110000
 8002118:	40020800 	.word	0x40020800

0800211c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <peripheral_init>:
int8_t setup_mode = 0;
int8_t check_sens_val = 0;
uint8_t sw_center_state = 0;
uint8_t cnt_sw = 0;

void peripheral_init(void){
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	gpio_set();
 8002130:	f000 f890 	bl	8002254 <gpio_set>
	lcd_init();
 8002134:	f7fe fd16 	bl	8000b64 <lcd_init>
	INA260_init();
 8002138:	f7fe ff06 	bl	8000f48 <INA260_init>
	if( IMU_init() == 1 ) {
 800213c:	f7fe fe10 	bl	8000d60 <IMU_init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b01      	cmp	r3, #1
 8002144:	d10e      	bne.n	8002164 <peripheral_init+0x38>
		lcd_locate(0,0);
 8002146:	2100      	movs	r1, #0
 8002148:	2000      	movs	r0, #0
 800214a:	f7fe fd48 	bl	8000bde <lcd_locate>
		lcd_print("WHO_AM_I");
 800214e:	4835      	ldr	r0, [pc, #212]	; (8002224 <peripheral_init+0xf8>)
 8002150:	f7fe fd5a 	bl	8000c08 <lcd_print>
		lcd_locate(0,1);
 8002154:	2101      	movs	r1, #1
 8002156:	2000      	movs	r0, #0
 8002158:	f7fe fd41 	bl	8000bde <lcd_locate>
		lcd_print("SUCCESS");
 800215c:	4832      	ldr	r0, [pc, #200]	; (8002228 <peripheral_init+0xfc>)
 800215e:	f7fe fd53 	bl	8000c08 <lcd_print>
 8002162:	e00d      	b.n	8002180 <peripheral_init+0x54>
	}
	else {
		lcd_locate(0,0);
 8002164:	2100      	movs	r1, #0
 8002166:	2000      	movs	r0, #0
 8002168:	f7fe fd39 	bl	8000bde <lcd_locate>
		lcd_print("WHO_AM_I");
 800216c:	482d      	ldr	r0, [pc, #180]	; (8002224 <peripheral_init+0xf8>)
 800216e:	f7fe fd4b 	bl	8000c08 <lcd_print>
		lcd_locate(0,1);
 8002172:	2101      	movs	r1, #1
 8002174:	2000      	movs	r0, #0
 8002176:	f7fe fd32 	bl	8000bde <lcd_locate>
		lcd_print("Failed");
 800217a:	482c      	ldr	r0, [pc, #176]	; (800222c <peripheral_init+0x100>)
 800217c:	f7fe fd44 	bl	8000c08 <lcd_print>
	}
	//set_encoder
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8002180:	213c      	movs	r1, #60	; 0x3c
 8002182:	482b      	ldr	r0, [pc, #172]	; (8002230 <peripheral_init+0x104>)
 8002184:	f004 fda4 	bl	8006cd0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8002188:	213c      	movs	r1, #60	; 0x3c
 800218a:	482a      	ldr	r0, [pc, #168]	; (8002234 <peripheral_init+0x108>)
 800218c:	f004 fda0 	bl	8006cd0 <HAL_TIM_Encoder_Start>
	//set_motordrive
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002190:	2100      	movs	r1, #0
 8002192:	4829      	ldr	r0, [pc, #164]	; (8002238 <peripheral_init+0x10c>)
 8002194:	f004 fccc 	bl	8006b30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8002198:	2104      	movs	r1, #4
 800219a:	4827      	ldr	r0, [pc, #156]	; (8002238 <peripheral_init+0x10c>)
 800219c:	f004 fcc8 	bl	8006b30 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 80021a0:	4b25      	ldr	r3, [pc, #148]	; (8002238 <peripheral_init+0x10c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2200      	movs	r2, #0
 80021a6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <peripheral_init+0x10c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
	//set_buzzer
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80021b0:	2100      	movs	r1, #0
 80021b2:	4822      	ldr	r0, [pc, #136]	; (800223c <peripheral_init+0x110>)
 80021b4:	f004 fcbc 	bl	8006b30 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80021b8:	4b20      	ldr	r3, [pc, #128]	; (800223c <peripheral_init+0x110>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2200      	movs	r2, #0
 80021be:	635a      	str	r2, [r3, #52]	; 0x34
	//set_4in1-esc
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80021c0:	2100      	movs	r1, #0
 80021c2:	481f      	ldr	r0, [pc, #124]	; (8002240 <peripheral_init+0x114>)
 80021c4:	f004 fcb4 	bl	8006b30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80021c8:	2104      	movs	r1, #4
 80021ca:	481d      	ldr	r0, [pc, #116]	; (8002240 <peripheral_init+0x114>)
 80021cc:	f004 fcb0 	bl	8006b30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80021d0:	2108      	movs	r1, #8
 80021d2:	481b      	ldr	r0, [pc, #108]	; (8002240 <peripheral_init+0x114>)
 80021d4:	f004 fcac 	bl	8006b30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80021d8:	210c      	movs	r1, #12
 80021da:	4819      	ldr	r0, [pc, #100]	; (8002240 <peripheral_init+0x114>)
 80021dc:	f004 fca8 	bl	8006b30 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <peripheral_init+0x114>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80021e8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <peripheral_init+0x114>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80021f2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <peripheral_init+0x114>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80021fc:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <peripheral_init+0x114>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8002206:	641a      	str	r2, [r3, #64]	; 0x40
	//set_timer
	HAL_TIM_Base_Start_IT(&htim6);
 8002208:	480e      	ldr	r0, [pc, #56]	; (8002244 <peripheral_init+0x118>)
 800220a:	f004 fc42 	bl	8006a92 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800220e:	480e      	ldr	r0, [pc, #56]	; (8002248 <peripheral_init+0x11c>)
 8002210:	f004 fc3f 	bl	8006a92 <HAL_TIM_Base_Start_IT>
	//ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC1_Buff, ADC_DATA_BUFFR_SIZE);
 8002214:	220c      	movs	r2, #12
 8002216:	490d      	ldr	r1, [pc, #52]	; (800224c <peripheral_init+0x120>)
 8002218:	480d      	ldr	r0, [pc, #52]	; (8002250 <peripheral_init+0x124>)
 800221a:	f000 ff11 	bl	8003040 <HAL_ADC_Start_DMA>

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	08008888 	.word	0x08008888
 8002228:	08008894 	.word	0x08008894
 800222c:	0800889c 	.word	0x0800889c
 8002230:	2000036c 	.word	0x2000036c
 8002234:	200000c4 	.word	0x200000c4
 8002238:	200003ec 	.word	0x200003ec
 800223c:	200003ac 	.word	0x200003ac
 8002240:	200001ac 	.word	0x200001ac
 8002244:	2000032c 	.word	0x2000032c
 8002248:	2000042c 	.word	0x2000042c
 800224c:	20000478 	.word	0x20000478
 8002250:	20000244 	.word	0x20000244

08002254 <gpio_set>:

void gpio_set(void){
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	CS_SET;
 8002258:	2201      	movs	r2, #1
 800225a:	2104      	movs	r1, #4
 800225c:	4810      	ldr	r0, [pc, #64]	; (80022a0 <gpio_set+0x4c>)
 800225e:	f002 faa3 	bl	80047a8 <HAL_GPIO_WritePin>
	MR_SET;
 8002262:	2201      	movs	r2, #1
 8002264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002268:	480e      	ldr	r0, [pc, #56]	; (80022a4 <gpio_set+0x50>)
 800226a:	f002 fa9d 	bl	80047a8 <HAL_GPIO_WritePin>
	ML_SET;
 800226e:	2201      	movs	r2, #1
 8002270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002274:	480b      	ldr	r0, [pc, #44]	; (80022a4 <gpio_set+0x50>)
 8002276:	f002 fa97 	bl	80047a8 <HAL_GPIO_WritePin>
	LED_R_SET;
 800227a:	2201      	movs	r2, #1
 800227c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002280:	4809      	ldr	r0, [pc, #36]	; (80022a8 <gpio_set+0x54>)
 8002282:	f002 fa91 	bl	80047a8 <HAL_GPIO_WritePin>
	LED_G_SET;
 8002286:	2201      	movs	r2, #1
 8002288:	2104      	movs	r1, #4
 800228a:	4807      	ldr	r0, [pc, #28]	; (80022a8 <gpio_set+0x54>)
 800228c:	f002 fa8c 	bl	80047a8 <HAL_GPIO_WritePin>
	LED_B_SET;
 8002290:	2201      	movs	r2, #1
 8002292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002296:	4803      	ldr	r0, [pc, #12]	; (80022a4 <gpio_set+0x50>)
 8002298:	f002 fa86 	bl	80047a8 <HAL_GPIO_WritePin>
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40020c00 	.word	0x40020c00
 80022a4:	40020000 	.word	0x40020000
 80022a8:	40020400 	.word	0x40020400

080022ac <led_pattern>:

void led_pattern(uint8_t led){
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
	if(led & 0b001) LED_B_RESET;
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d006      	beq.n	80022ce <led_pattern+0x22>
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c6:	4818      	ldr	r0, [pc, #96]	; (8002328 <led_pattern+0x7c>)
 80022c8:	f002 fa6e 	bl	80047a8 <HAL_GPIO_WritePin>
 80022cc:	e005      	b.n	80022da <led_pattern+0x2e>
		else LED_B_SET;
 80022ce:	2201      	movs	r2, #1
 80022d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022d4:	4814      	ldr	r0, [pc, #80]	; (8002328 <led_pattern+0x7c>)
 80022d6:	f002 fa67 	bl	80047a8 <HAL_GPIO_WritePin>
	if(led & 0b010) LED_G_RESET;
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <led_pattern+0x44>
 80022e4:	2200      	movs	r2, #0
 80022e6:	2104      	movs	r1, #4
 80022e8:	4810      	ldr	r0, [pc, #64]	; (800232c <led_pattern+0x80>)
 80022ea:	f002 fa5d 	bl	80047a8 <HAL_GPIO_WritePin>
 80022ee:	e004      	b.n	80022fa <led_pattern+0x4e>
		else LED_G_SET;
 80022f0:	2201      	movs	r2, #1
 80022f2:	2104      	movs	r1, #4
 80022f4:	480d      	ldr	r0, [pc, #52]	; (800232c <led_pattern+0x80>)
 80022f6:	f002 fa57 	bl	80047a8 <HAL_GPIO_WritePin>
	if(led & 0b100) LED_R_RESET;
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d006      	beq.n	8002312 <led_pattern+0x66>
 8002304:	2200      	movs	r2, #0
 8002306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800230a:	4808      	ldr	r0, [pc, #32]	; (800232c <led_pattern+0x80>)
 800230c:	f002 fa4c 	bl	80047a8 <HAL_GPIO_WritePin>
		else LED_R_SET;
}
 8002310:	e005      	b.n	800231e <led_pattern+0x72>
		else LED_R_SET;
 8002312:	2201      	movs	r2, #1
 8002314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002318:	4804      	ldr	r0, [pc, #16]	; (800232c <led_pattern+0x80>)
 800231a:	f002 fa45 	bl	80047a8 <HAL_GPIO_WritePin>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40020000 	.word	0x40020000
 800232c:	40020400 	.word	0x40020400

08002330 <getEncoder>:

void getEncoder(void) {
 8002330:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8002334:	af00      	add	r7, sp, #0

	enc_tim1_ms = TIM1 -> CNT;
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <getEncoder+0xa4>)
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	b21a      	sxth	r2, r3
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <getEncoder+0xa8>)
 800233e:	801a      	strh	r2, [r3, #0]
	enc_tim8_ms = TIM8 -> CNT;
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <getEncoder+0xac>)
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	b21a      	sxth	r2, r3
 8002346:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <getEncoder+0xb0>)
 8002348:	801a      	strh	r2, [r3, #0]

	TIM1 -> CNT = 0;
 800234a:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <getEncoder+0xa4>)
 800234c:	2200      	movs	r2, #0
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = 0;
 8002350:	4b22      	ldr	r3, [pc, #136]	; (80023dc <getEncoder+0xac>)
 8002352:	2200      	movs	r2, #0
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

	enc_tim1_total += enc_tim1_ms;
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <getEncoder+0xa8>)
 8002358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800235c:	b219      	sxth	r1, r3
 800235e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <getEncoder+0xb4>)
 8002364:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8002368:	eb1b 0301 	adds.w	r3, fp, r1
 800236c:	eb4c 0402 	adc.w	r4, ip, r2
 8002370:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <getEncoder+0xb4>)
 8002372:	e9c2 3400 	strd	r3, r4, [r2]
	enc_tim8_total += enc_tim8_ms;
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <getEncoder+0xb0>)
 8002378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800237c:	b219      	sxth	r1, r3
 800237e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <getEncoder+0xb8>)
 8002384:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8002388:	eb1b 0301 	adds.w	r3, fp, r1
 800238c:	eb4c 0402 	adc.w	r4, ip, r2
 8002390:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <getEncoder+0xb8>)
 8002392:	e9c2 3400 	strd	r3, r4, [r2]
	enc_tim_total = (enc_tim1_total + enc_tim8_total) / 2;
 8002396:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <getEncoder+0xb4>)
 8002398:	e9d3 1200 	ldrd	r1, r2, [r3]
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <getEncoder+0xb8>)
 800239e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80023a2:	eb13 0b01 	adds.w	fp, r3, r1
 80023a6:	eb44 0c02 	adc.w	ip, r4, r2
 80023aa:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 80023ae:	4611      	mov	r1, r2
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	eb1b 0301 	adds.w	r3, fp, r1
 80023b8:	eb4c 0402 	adc.w	r4, ip, r2
 80023bc:	1064      	asrs	r4, r4, #1
 80023be:	ea4f 0333 	mov.w	r3, r3, rrx
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <getEncoder+0xbc>)
 80023c4:	e9c2 3400 	strd	r3, r4, [r2]

}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40010000 	.word	0x40010000
 80023d8:	2000008c 	.word	0x2000008c
 80023dc:	40010400 	.word	0x40010400
 80023e0:	2000008e 	.word	0x2000008e
 80023e4:	20000090 	.word	0x20000090
 80023e8:	20000098 	.word	0x20000098
 80023ec:	200000a0 	.word	0x200000a0

080023f0 <ADval_get>:

//sensor-borad	Light	AD9 AD8 AD15 AD14 AD7 AD6   AD5 AD4 AD3 AD2 AD1 AD0   Right
//maker-borad  	 		ADxx 	ADxx
void ADval_get(void) {
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
	line_sen0  = ADC1_Buff[0];
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <ADval_get+0x70>)
 80023f6:	881a      	ldrh	r2, [r3, #0]
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <ADval_get+0x74>)
 80023fa:	801a      	strh	r2, [r3, #0]
	line_sen1  = ADC1_Buff[1];
 80023fc:	4b18      	ldr	r3, [pc, #96]	; (8002460 <ADval_get+0x70>)
 80023fe:	885a      	ldrh	r2, [r3, #2]
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <ADval_get+0x78>)
 8002402:	801a      	strh	r2, [r3, #0]
	line_sen2  = ADC1_Buff[2];
 8002404:	4b16      	ldr	r3, [pc, #88]	; (8002460 <ADval_get+0x70>)
 8002406:	889a      	ldrh	r2, [r3, #4]
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <ADval_get+0x7c>)
 800240a:	801a      	strh	r2, [r3, #0]
	line_sen3  = ADC1_Buff[3];
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <ADval_get+0x70>)
 800240e:	88da      	ldrh	r2, [r3, #6]
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <ADval_get+0x80>)
 8002412:	801a      	strh	r2, [r3, #0]
	line_sen4  = ADC1_Buff[4];
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <ADval_get+0x70>)
 8002416:	891a      	ldrh	r2, [r3, #8]
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <ADval_get+0x84>)
 800241a:	801a      	strh	r2, [r3, #0]
	line_sen5  = ADC1_Buff[5];
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <ADval_get+0x70>)
 800241e:	895a      	ldrh	r2, [r3, #10]
 8002420:	4b15      	ldr	r3, [pc, #84]	; (8002478 <ADval_get+0x88>)
 8002422:	801a      	strh	r2, [r3, #0]
	line_sen6  = ADC1_Buff[6];
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <ADval_get+0x70>)
 8002426:	899a      	ldrh	r2, [r3, #12]
 8002428:	4b14      	ldr	r3, [pc, #80]	; (800247c <ADval_get+0x8c>)
 800242a:	801a      	strh	r2, [r3, #0]
	line_sen7  = ADC1_Buff[7];
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <ADval_get+0x70>)
 800242e:	89da      	ldrh	r2, [r3, #14]
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <ADval_get+0x90>)
 8002432:	801a      	strh	r2, [r3, #0]
	line_sen10 = ADC1_Buff[8];
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <ADval_get+0x70>)
 8002436:	8a1a      	ldrh	r2, [r3, #16]
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <ADval_get+0x94>)
 800243a:	801a      	strh	r2, [r3, #0]
	line_sen11 = ADC1_Buff[9];
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <ADval_get+0x70>)
 800243e:	8a5a      	ldrh	r2, [r3, #18]
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <ADval_get+0x98>)
 8002442:	801a      	strh	r2, [r3, #0]
	line_sen8  = ADC1_Buff[10];
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <ADval_get+0x70>)
 8002446:	8a9a      	ldrh	r2, [r3, #20]
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <ADval_get+0x9c>)
 800244a:	801a      	strh	r2, [r3, #0]
	line_sen9  = ADC1_Buff[11];
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <ADval_get+0x70>)
 800244e:	8ada      	ldrh	r2, [r3, #22]
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <ADval_get+0xa0>)
 8002452:	801a      	strh	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000478 	.word	0x20000478
 8002464:	20000498 	.word	0x20000498
 8002468:	20000492 	.word	0x20000492
 800246c:	20000474 	.word	0x20000474
 8002470:	20000470 	.word	0x20000470
 8002474:	2000046e 	.word	0x2000046e
 8002478:	20000496 	.word	0x20000496
 800247c:	20000476 	.word	0x20000476
 8002480:	20000472 	.word	0x20000472
 8002484:	20000494 	.word	0x20000494
 8002488:	2000049a 	.word	0x2000049a
 800248c:	20000490 	.word	0x20000490
 8002490:	2000046c 	.word	0x2000046c

08002494 <HAL_GPIO_EXTI_Callback>:

void buzzer(uint8_t bz){
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2099);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	80fb      	strh	r3, [r7, #6]

	if(cnt_sw >= 3) {
 800249e:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <HAL_GPIO_EXTI_Callback+0xc4>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d952      	bls.n	800254c <HAL_GPIO_EXTI_Callback+0xb8>
		if (GPIO_Pin == GPIO_PIN_0) ; 	//left

		if (GPIO_Pin == GPIO_PIN_1) { 	//up
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d110      	bne.n	80024ce <HAL_GPIO_EXTI_Callback+0x3a>
		  check_sens_val--;
 80024ac:	4b2b      	ldr	r3, [pc, #172]	; (800255c <HAL_GPIO_EXTI_Callback+0xc8>)
 80024ae:	f993 3000 	ldrsb.w	r3, [r3]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	b25a      	sxtb	r2, r3
 80024ba:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_GPIO_EXTI_Callback+0xc8>)
 80024bc:	701a      	strb	r2, [r3, #0]
		  if(check_sens_val < 0)  check_sens_val = CHECK_SENS_MAX;
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_GPIO_EXTI_Callback+0xc8>)
 80024c0:	f993 3000 	ldrsb.w	r3, [r3]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	da02      	bge.n	80024ce <HAL_GPIO_EXTI_Callback+0x3a>
 80024c8:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_GPIO_EXTI_Callback+0xc8>)
 80024ca:	220b      	movs	r2, #11
 80024cc:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_12) {	//push
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d4:	d110      	bne.n	80024f8 <HAL_GPIO_EXTI_Callback+0x64>
		  setup_mode++;
 80024d6:	4b22      	ldr	r3, [pc, #136]	; (8002560 <HAL_GPIO_EXTI_Callback+0xcc>)
 80024d8:	f993 3000 	ldrsb.w	r3, [r3]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	b25a      	sxtb	r2, r3
 80024e4:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <HAL_GPIO_EXTI_Callback+0xcc>)
 80024e6:	701a      	strb	r2, [r3, #0]
		  if(setup_mode >= 8) setup_mode = 0;
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_GPIO_EXTI_Callback+0xcc>)
 80024ea:	f993 3000 	ldrsb.w	r3, [r3]
 80024ee:	2b07      	cmp	r3, #7
 80024f0:	dd02      	ble.n	80024f8 <HAL_GPIO_EXTI_Callback+0x64>
 80024f2:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <HAL_GPIO_EXTI_Callback+0xcc>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_13) {	//down
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fe:	d110      	bne.n	8002522 <HAL_GPIO_EXTI_Callback+0x8e>
		  check_sens_val++;
 8002500:	4b16      	ldr	r3, [pc, #88]	; (800255c <HAL_GPIO_EXTI_Callback+0xc8>)
 8002502:	f993 3000 	ldrsb.w	r3, [r3]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	3301      	adds	r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	b25a      	sxtb	r2, r3
 800250e:	4b13      	ldr	r3, [pc, #76]	; (800255c <HAL_GPIO_EXTI_Callback+0xc8>)
 8002510:	701a      	strb	r2, [r3, #0]
		  if(check_sens_val > CHECK_SENS_MAX) check_sens_val = 0;
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_GPIO_EXTI_Callback+0xc8>)
 8002514:	f993 3000 	ldrsb.w	r3, [r3]
 8002518:	2b0b      	cmp	r3, #11
 800251a:	dd02      	ble.n	8002522 <HAL_GPIO_EXTI_Callback+0x8e>
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_GPIO_EXTI_Callback+0xc8>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_14) {	//center
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002528:	d10d      	bne.n	8002546 <HAL_GPIO_EXTI_Callback+0xb2>
		  if(sw_center_state > 1) sw_center_state = 1;
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_GPIO_EXTI_Callback+0xd0>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d902      	bls.n	8002538 <HAL_GPIO_EXTI_Callback+0xa4>
 8002532:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
		  sw_center_state ^= 1;
 8002538:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_GPIO_EXTI_Callback+0xd0>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002544:	701a      	strb	r2, [r3, #0]
		}

		if (GPIO_Pin == GPIO_PIN_15) ;	//right

		cnt_sw = 0;
 8002546:	4b04      	ldr	r3, [pc, #16]	; (8002558 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
	}
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	200000ab 	.word	0x200000ab
 800255c:	200000a9 	.word	0x200000a9
 8002560:	200000a8 	.word	0x200000a8
 8002564:	200000aa 	.word	0x200000aa

08002568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <HAL_MspInit+0x84>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <HAL_MspInit+0x84>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_MspInit+0x84>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	4b17      	ldr	r3, [pc, #92]	; (80025ec <HAL_MspInit+0x84>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a16      	ldr	r2, [pc, #88]	; (80025ec <HAL_MspInit+0x84>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b14      	ldr	r3, [pc, #80]	; (80025ec <HAL_MspInit+0x84>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 5, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2105      	movs	r1, #5
 80025aa:	f06f 000b 	mvn.w	r0, #11
 80025ae:	f001 f9d2 	bl	8003956 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 5, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2105      	movs	r1, #5
 80025b6:	f06f 000a 	mvn.w	r0, #10
 80025ba:	f001 f9cc 	bl	8003956 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 5, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2105      	movs	r1, #5
 80025c2:	f06f 0009 	mvn.w	r0, #9
 80025c6:	f001 f9c6 	bl	8003956 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2105      	movs	r1, #5
 80025ce:	f06f 0004 	mvn.w	r0, #4
 80025d2:	f001 f9c0 	bl	8003956 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2105      	movs	r1, #5
 80025da:	f06f 0003 	mvn.w	r0, #3
 80025de:	f001 f9ba 	bl	8003956 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800

080025f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08c      	sub	sp, #48	; 0x30
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 031c 	add.w	r3, r7, #28
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a49      	ldr	r2, [pc, #292]	; (8002734 <HAL_ADC_MspInit+0x144>)
 800260e:	4293      	cmp	r3, r2
 8002610:	f040 808c 	bne.w	800272c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002614:	2300      	movs	r3, #0
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_ADC_MspInit+0x148>)
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	4a46      	ldr	r2, [pc, #280]	; (8002738 <HAL_ADC_MspInit+0x148>)
 800261e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002622:	6453      	str	r3, [r2, #68]	; 0x44
 8002624:	4b44      	ldr	r3, [pc, #272]	; (8002738 <HAL_ADC_MspInit+0x148>)
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	4b40      	ldr	r3, [pc, #256]	; (8002738 <HAL_ADC_MspInit+0x148>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	4a3f      	ldr	r2, [pc, #252]	; (8002738 <HAL_ADC_MspInit+0x148>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6313      	str	r3, [r2, #48]	; 0x30
 8002640:	4b3d      	ldr	r3, [pc, #244]	; (8002738 <HAL_ADC_MspInit+0x148>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_ADC_MspInit+0x148>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	4a38      	ldr	r2, [pc, #224]	; (8002738 <HAL_ADC_MspInit+0x148>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	6313      	str	r3, [r2, #48]	; 0x30
 800265c:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_ADC_MspInit+0x148>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_ADC_MspInit+0x148>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	4a31      	ldr	r2, [pc, #196]	; (8002738 <HAL_ADC_MspInit+0x148>)
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	6313      	str	r3, [r2, #48]	; 0x30
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HAL_ADC_MspInit+0x148>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002684:	23ff      	movs	r3, #255	; 0xff
 8002686:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002688:	2303      	movs	r3, #3
 800268a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002690:	f107 031c 	add.w	r3, r7, #28
 8002694:	4619      	mov	r1, r3
 8002696:	4829      	ldr	r0, [pc, #164]	; (800273c <HAL_ADC_MspInit+0x14c>)
 8002698:	f001 feec 	bl	8004474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800269c:	2330      	movs	r3, #48	; 0x30
 800269e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a0:	2303      	movs	r3, #3
 80026a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a8:	f107 031c 	add.w	r3, r7, #28
 80026ac:	4619      	mov	r1, r3
 80026ae:	4824      	ldr	r0, [pc, #144]	; (8002740 <HAL_ADC_MspInit+0x150>)
 80026b0:	f001 fee0 	bl	8004474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026b4:	2303      	movs	r3, #3
 80026b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026b8:	2303      	movs	r3, #3
 80026ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c0:	f107 031c 	add.w	r3, r7, #28
 80026c4:	4619      	mov	r1, r3
 80026c6:	481f      	ldr	r0, [pc, #124]	; (8002744 <HAL_ADC_MspInit+0x154>)
 80026c8:	f001 fed4 	bl	8004474 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80026cc:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026ce:	4a1f      	ldr	r2, [pc, #124]	; (800274c <HAL_ADC_MspInit+0x15c>)
 80026d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026e4:	4b18      	ldr	r3, [pc, #96]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026f4:	4b14      	ldr	r3, [pc, #80]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_ADC_MspInit+0x158>)
 80026fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002702:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002704:	4b10      	ldr	r3, [pc, #64]	; (8002748 <HAL_ADC_MspInit+0x158>)
 8002706:	2200      	movs	r2, #0
 8002708:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_ADC_MspInit+0x158>)
 800270c:	2200      	movs	r2, #0
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002710:	480d      	ldr	r0, [pc, #52]	; (8002748 <HAL_ADC_MspInit+0x158>)
 8002712:	f001 f957 	bl	80039c4 <HAL_DMA_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800271c:	f7ff fcfe 	bl	800211c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a09      	ldr	r2, [pc, #36]	; (8002748 <HAL_ADC_MspInit+0x158>)
 8002724:	639a      	str	r2, [r3, #56]	; 0x38
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <HAL_ADC_MspInit+0x158>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800272c:	bf00      	nop
 800272e:	3730      	adds	r7, #48	; 0x30
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40012000 	.word	0x40012000
 8002738:	40023800 	.word	0x40023800
 800273c:	40020000 	.word	0x40020000
 8002740:	40020800 	.word	0x40020800
 8002744:	40020400 	.word	0x40020400
 8002748:	200002cc 	.word	0x200002cc
 800274c:	40026410 	.word	0x40026410

08002750 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a33      	ldr	r2, [pc, #204]	; (800283c <HAL_I2C_MspInit+0xec>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d12d      	bne.n	80027ce <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	4b32      	ldr	r3, [pc, #200]	; (8002840 <HAL_I2C_MspInit+0xf0>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a31      	ldr	r2, [pc, #196]	; (8002840 <HAL_I2C_MspInit+0xf0>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <HAL_I2C_MspInit+0xf0>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800278e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002794:	2312      	movs	r3, #18
 8002796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002798:	2301      	movs	r3, #1
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279c:	2303      	movs	r3, #3
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027a0:	2304      	movs	r3, #4
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a4:	f107 031c 	add.w	r3, r7, #28
 80027a8:	4619      	mov	r1, r3
 80027aa:	4826      	ldr	r0, [pc, #152]	; (8002844 <HAL_I2C_MspInit+0xf4>)
 80027ac:	f001 fe62 	bl	8004474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <HAL_I2C_MspInit+0xf0>)
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	4a21      	ldr	r2, [pc, #132]	; (8002840 <HAL_I2C_MspInit+0xf0>)
 80027ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027be:	6413      	str	r3, [r2, #64]	; 0x40
 80027c0:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <HAL_I2C_MspInit+0xf0>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80027cc:	e031      	b.n	8002832 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1d      	ldr	r2, [pc, #116]	; (8002848 <HAL_I2C_MspInit+0xf8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d12c      	bne.n	8002832 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d8:	2300      	movs	r3, #0
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_I2C_MspInit+0xf0>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	4a17      	ldr	r2, [pc, #92]	; (8002840 <HAL_I2C_MspInit+0xf0>)
 80027e2:	f043 0302 	orr.w	r3, r3, #2
 80027e6:	6313      	str	r3, [r2, #48]	; 0x30
 80027e8:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_I2C_MspInit+0xf0>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fa:	2312      	movs	r3, #18
 80027fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027fe:	2301      	movs	r3, #1
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002802:	2303      	movs	r3, #3
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002806:	2304      	movs	r3, #4
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280a:	f107 031c 	add.w	r3, r7, #28
 800280e:	4619      	mov	r1, r3
 8002810:	480c      	ldr	r0, [pc, #48]	; (8002844 <HAL_I2C_MspInit+0xf4>)
 8002812:	f001 fe2f 	bl	8004474 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_I2C_MspInit+0xf0>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a08      	ldr	r2, [pc, #32]	; (8002840 <HAL_I2C_MspInit+0xf0>)
 8002820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_I2C_MspInit+0xf0>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
}
 8002832:	bf00      	nop
 8002834:	3730      	adds	r7, #48	; 0x30
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40005400 	.word	0x40005400
 8002840:	40023800 	.word	0x40023800
 8002844:	40020400 	.word	0x40020400
 8002848:	40005800 	.word	0x40005800

0800284c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_SPI_MspInit+0x84>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d12c      	bne.n	80028c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <HAL_SPI_MspInit+0x88>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a17      	ldr	r2, [pc, #92]	; (80028d4 <HAL_SPI_MspInit+0x88>)
 8002878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_SPI_MspInit+0x88>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_SPI_MspInit+0x88>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a10      	ldr	r2, [pc, #64]	; (80028d4 <HAL_SPI_MspInit+0x88>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_SPI_MspInit+0x88>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80028a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80028aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028b8:	2306      	movs	r3, #6
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4619      	mov	r1, r3
 80028c2:	4805      	ldr	r0, [pc, #20]	; (80028d8 <HAL_SPI_MspInit+0x8c>)
 80028c4:	f001 fdd6 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80028c8:	bf00      	nop
 80028ca:	3728      	adds	r7, #40	; 0x28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40003c00 	.word	0x40003c00
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40020800 	.word	0x40020800

080028dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08c      	sub	sp, #48	; 0x30
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a32      	ldr	r2, [pc, #200]	; (80029c4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d12d      	bne.n	800295a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a30      	ldr	r2, [pc, #192]	; (80029c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a29      	ldr	r2, [pc, #164]	; (80029c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <HAL_TIM_Encoder_MspInit+0xec>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002936:	f44f 7340 	mov.w	r3, #768	; 0x300
 800293a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002948:	2301      	movs	r3, #1
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	4619      	mov	r1, r3
 8002952:	481e      	ldr	r0, [pc, #120]	; (80029cc <HAL_TIM_Encoder_MspInit+0xf0>)
 8002954:	f001 fd8e 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002958:	e030      	b.n	80029bc <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM8)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d12b      	bne.n	80029bc <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002964:	2300      	movs	r3, #0
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <HAL_TIM_Encoder_MspInit+0xec>)
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <HAL_TIM_Encoder_MspInit+0xec>)
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	6453      	str	r3, [r2, #68]	; 0x44
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	4a0f      	ldr	r2, [pc, #60]	; (80029c8 <HAL_TIM_Encoder_MspInit+0xec>)
 800298a:	f043 0304 	orr.w	r3, r3, #4
 800298e:	6313      	str	r3, [r2, #48]	; 0x30
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800299c:	23c0      	movs	r3, #192	; 0xc0
 800299e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80029ac:	2303      	movs	r3, #3
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	4619      	mov	r1, r3
 80029b6:	4807      	ldr	r0, [pc, #28]	; (80029d4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80029b8:	f001 fd5c 	bl	8004474 <HAL_GPIO_Init>
}
 80029bc:	bf00      	nop
 80029be:	3730      	adds	r7, #48	; 0x30
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40020000 	.word	0x40020000
 80029d0:	40010400 	.word	0x40010400
 80029d4:	40020800 	.word	0x40020800

080029d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e8:	d10e      	bne.n	8002a08 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <HAL_TIM_PWM_MspInit+0x8c>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <HAL_TIM_PWM_MspInit+0x8c>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6413      	str	r3, [r2, #64]	; 0x40
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <HAL_TIM_PWM_MspInit+0x8c>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002a06:	e026      	b.n	8002a56 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <HAL_TIM_PWM_MspInit+0x90>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10e      	bne.n	8002a30 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a1c:	f043 0302 	orr.w	r3, r3, #2
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]
}
 8002a2e:	e012      	b.n	8002a56 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <HAL_TIM_PWM_MspInit+0x94>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10d      	bne.n	8002a56 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a48:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40001800 	.word	0x40001800

08002a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <HAL_TIM_Base_MspInit+0x80>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d116      	bne.n	8002ab0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <HAL_TIM_Base_MspInit+0x84>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	4a1a      	ldr	r2, [pc, #104]	; (8002af4 <HAL_TIM_Base_MspInit+0x84>)
 8002a8c:	f043 0310 	orr.w	r3, r3, #16
 8002a90:	6413      	str	r3, [r2, #64]	; 0x40
 8002a92:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <HAL_TIM_Base_MspInit+0x84>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2105      	movs	r1, #5
 8002aa2:	2036      	movs	r0, #54	; 0x36
 8002aa4:	f000 ff57 	bl	8003956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002aa8:	2036      	movs	r0, #54	; 0x36
 8002aaa:	f000 ff70 	bl	800398e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002aae:	e01a      	b.n	8002ae6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <HAL_TIM_Base_MspInit+0x88>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d115      	bne.n	8002ae6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <HAL_TIM_Base_MspInit+0x84>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	4a0c      	ldr	r2, [pc, #48]	; (8002af4 <HAL_TIM_Base_MspInit+0x84>)
 8002ac4:	f043 0320 	orr.w	r3, r3, #32
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_TIM_Base_MspInit+0x84>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2105      	movs	r1, #5
 8002ada:	2037      	movs	r0, #55	; 0x37
 8002adc:	f000 ff3b 	bl	8003956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002ae0:	2037      	movs	r0, #55	; 0x37
 8002ae2:	f000 ff54 	bl	800398e <HAL_NVIC_EnableIRQ>
}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40001000 	.word	0x40001000
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40001400 	.word	0x40001400

08002afc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	; 0x30
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 031c 	add.w	r3, r7, #28
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d11f      	bne.n	8002b5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	4b44      	ldr	r3, [pc, #272]	; (8002c34 <HAL_TIM_MspPostInit+0x138>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a43      	ldr	r2, [pc, #268]	; (8002c34 <HAL_TIM_MspPostInit+0x138>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <HAL_TIM_MspPostInit+0x138>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b40:	2302      	movs	r3, #2
 8002b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	4619      	mov	r1, r3
 8002b56:	4838      	ldr	r0, [pc, #224]	; (8002c38 <HAL_TIM_MspPostInit+0x13c>)
 8002b58:	f001 fc8c 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002b5c:	e066      	b.n	8002c2c <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM3)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a36      	ldr	r2, [pc, #216]	; (8002c3c <HAL_TIM_MspPostInit+0x140>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d13d      	bne.n	8002be4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <HAL_TIM_MspPostInit+0x138>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	4a30      	ldr	r2, [pc, #192]	; (8002c34 <HAL_TIM_MspPostInit+0x138>)
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	6313      	str	r3, [r2, #48]	; 0x30
 8002b78:	4b2e      	ldr	r3, [pc, #184]	; (8002c34 <HAL_TIM_MspPostInit+0x138>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <HAL_TIM_MspPostInit+0x138>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	4a29      	ldr	r2, [pc, #164]	; (8002c34 <HAL_TIM_MspPostInit+0x138>)
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	6313      	str	r3, [r2, #48]	; 0x30
 8002b94:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <HAL_TIM_MspPostInit+0x138>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ba0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb6:	f107 031c 	add.w	r3, r7, #28
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4820      	ldr	r0, [pc, #128]	; (8002c40 <HAL_TIM_MspPostInit+0x144>)
 8002bbe:	f001 fc59 	bl	8004474 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002bc2:	2330      	movs	r3, #48	; 0x30
 8002bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd6:	f107 031c 	add.w	r3, r7, #28
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4819      	ldr	r0, [pc, #100]	; (8002c44 <HAL_TIM_MspPostInit+0x148>)
 8002bde:	f001 fc49 	bl	8004474 <HAL_GPIO_Init>
}
 8002be2:	e023      	b.n	8002c2c <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM12)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <HAL_TIM_MspPostInit+0x14c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d11e      	bne.n	8002c2c <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <HAL_TIM_MspPostInit+0x138>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a0f      	ldr	r2, [pc, #60]	; (8002c34 <HAL_TIM_MspPostInit+0x138>)
 8002bf8:	f043 0302 	orr.w	r3, r3, #2
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_TIM_MspPostInit+0x138>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002c0a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002c1c:	2309      	movs	r3, #9
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c20:	f107 031c 	add.w	r3, r7, #28
 8002c24:	4619      	mov	r1, r3
 8002c26:	4807      	ldr	r0, [pc, #28]	; (8002c44 <HAL_TIM_MspPostInit+0x148>)
 8002c28:	f001 fc24 	bl	8004474 <HAL_GPIO_Init>
}
 8002c2c:	bf00      	nop
 8002c2e:	3730      	adds	r7, #48	; 0x30
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40020000 	.word	0x40020000
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40020800 	.word	0x40020800
 8002c44:	40020400 	.word	0x40020400
 8002c48:	40001800 	.word	0x40001800

08002c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c54:	f107 0314 	add.w	r3, r7, #20
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <HAL_UART_MspInit+0x84>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d12b      	bne.n	8002cc6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <HAL_UART_MspInit+0x88>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <HAL_UART_MspInit+0x88>)
 8002c78:	f043 0310 	orr.w	r3, r3, #16
 8002c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <HAL_UART_MspInit+0x88>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <HAL_UART_MspInit+0x88>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a10      	ldr	r2, [pc, #64]	; (8002cd4 <HAL_UART_MspInit+0x88>)
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <HAL_UART_MspInit+0x88>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ca6:	23c0      	movs	r3, #192	; 0xc0
 8002ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cb6:	2307      	movs	r3, #7
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cba:	f107 0314 	add.w	r3, r7, #20
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4805      	ldr	r0, [pc, #20]	; (8002cd8 <HAL_UART_MspInit+0x8c>)
 8002cc2:	f001 fbd7 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cc6:	bf00      	nop
 8002cc8:	3728      	adds	r7, #40	; 0x28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40011000 	.word	0x40011000
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40020400 	.word	0x40020400

08002cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cee:	e7fe      	b.n	8002cee <HardFault_Handler+0x4>

08002cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cf4:	e7fe      	b.n	8002cf4 <MemManage_Handler+0x4>

08002cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cfa:	e7fe      	b.n	8002cfa <BusFault_Handler+0x4>

08002cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d00:	e7fe      	b.n	8002d00 <UsageFault_Handler+0x4>

08002d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d30:	f000 f900 	bl	8002f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d34:	bf00      	nop
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f001 fd4d 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002d4a:	2002      	movs	r0, #2
 8002d4c:	f001 fd46 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002d58:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d5c:	f001 fd3e 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d64:	f001 fd3a 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002d68:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d6c:	f001 fd36 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002d70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002d74:	f001 fd32 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <TIM6_DAC_IRQHandler+0x10>)
 8002d82:	f003 ffdc 	bl	8006d3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	2000032c 	.word	0x2000032c

08002d90 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d94:	4802      	ldr	r0, [pc, #8]	; (8002da0 <TIM7_IRQHandler+0x10>)
 8002d96:	f003 ffd2 	bl	8006d3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	2000042c 	.word	0x2000042c

08002da4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002da8:	4802      	ldr	r0, [pc, #8]	; (8002db4 <DMA2_Stream0_IRQHandler+0x10>)
 8002daa:	f000 ff11 	bl	8003bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	200002cc 	.word	0x200002cc

08002db8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <_sbrk+0x50>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <_sbrk+0x16>
		heap_end = &end;
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <_sbrk+0x50>)
 8002dca:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <_sbrk+0x54>)
 8002dcc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002dce:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <_sbrk+0x50>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <_sbrk+0x50>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4413      	add	r3, r2
 8002ddc:	466a      	mov	r2, sp
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d907      	bls.n	8002df2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002de2:	f005 f873 	bl	8007ecc <__errno>
 8002de6:	4602      	mov	r2, r0
 8002de8:	230c      	movs	r3, #12
 8002dea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002dec:	f04f 33ff 	mov.w	r3, #4294967295
 8002df0:	e006      	b.n	8002e00 <_sbrk+0x48>
	}

	heap_end += incr;
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <_sbrk+0x50>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	4a03      	ldr	r2, [pc, #12]	; (8002e08 <_sbrk+0x50>)
 8002dfc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	200000ac 	.word	0x200000ac
 8002e0c:	200004c8 	.word	0x200004c8

08002e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <SystemInit+0x28>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <SystemInit+0x28>)
 8002e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <SystemInit+0x28>)
 8002e26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e2a:	609a      	str	r2, [r3, #8]
#endif
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e42:	e003      	b.n	8002e4c <LoopCopyDataInit>

08002e44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e4a:	3104      	adds	r1, #4

08002e4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e4c:	480b      	ldr	r0, [pc, #44]	; (8002e7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e54:	d3f6      	bcc.n	8002e44 <CopyDataInit>
  ldr  r2, =_sbss
 8002e56:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e58:	e002      	b.n	8002e60 <LoopFillZerobss>

08002e5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e5c:	f842 3b04 	str.w	r3, [r2], #4

08002e60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e64:	d3f9      	bcc.n	8002e5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e66:	f7ff ffd3 	bl	8002e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e6a:	f005 f835 	bl	8007ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e6e:	f7fe fbdb 	bl	8001628 <main>
  bx  lr    
 8002e72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e78:	08008918 	.word	0x08008918
  ldr  r0, =_sdata
 8002e7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e80:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002e84:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002e88:	200004c4 	.word	0x200004c4

08002e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e8c:	e7fe      	b.n	8002e8c <ADC_IRQHandler>
	...

08002e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <HAL_Init+0x40>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0d      	ldr	r2, [pc, #52]	; (8002ed0 <HAL_Init+0x40>)
 8002e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_Init+0x40>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <HAL_Init+0x40>)
 8002ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <HAL_Init+0x40>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <HAL_Init+0x40>)
 8002eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eb8:	2003      	movs	r0, #3
 8002eba:	f000 fd41 	bl	8003940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f000 f808 	bl	8002ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ec4:	f7ff fb50 	bl	8002568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023c00 	.word	0x40023c00

08002ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_InitTick+0x54>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_InitTick+0x58>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fd59 	bl	80039aa <HAL_SYSTICK_Config>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00e      	b.n	8002f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b0f      	cmp	r3, #15
 8002f06:	d80a      	bhi.n	8002f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	f000 fd21 	bl	8003956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f14:	4a06      	ldr	r2, [pc, #24]	; (8002f30 <HAL_InitTick+0x5c>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e000      	b.n	8002f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000008 	.word	0x20000008
 8002f30:	20000004 	.word	0x20000004

08002f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_IncTick+0x20>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_IncTick+0x24>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <HAL_IncTick+0x24>)
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000008 	.word	0x20000008
 8002f58:	2000049c 	.word	0x2000049c

08002f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_GetTick+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	2000049c 	.word	0x2000049c

08002f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f7c:	f7ff ffee 	bl	8002f5c <HAL_GetTick>
 8002f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d005      	beq.n	8002f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_Delay+0x40>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f9a:	bf00      	nop
 8002f9c:	f7ff ffde 	bl	8002f5c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d8f7      	bhi.n	8002f9c <HAL_Delay+0x28>
  {
  }
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000008 	.word	0x20000008

08002fb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e033      	b.n	8003036 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fb0a 	bl	80025f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d118      	bne.n	8003028 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ffe:	f023 0302 	bic.w	r3, r3, #2
 8003002:	f043 0202 	orr.w	r2, r3, #2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fa4a 	bl	80034a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
 8003026:	e001      	b.n	800302c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_ADC_Start_DMA+0x1e>
 800305a:	2302      	movs	r3, #2
 800305c:	e0cc      	b.n	80031f8 <HAL_ADC_Start_DMA+0x1b8>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d018      	beq.n	80030a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003084:	4b5e      	ldr	r3, [pc, #376]	; (8003200 <HAL_ADC_Start_DMA+0x1c0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a5e      	ldr	r2, [pc, #376]	; (8003204 <HAL_ADC_Start_DMA+0x1c4>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	0c9a      	lsrs	r2, r3, #18
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003098:	e002      	b.n	80030a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	3b01      	subs	r3, #1
 800309e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f9      	bne.n	800309a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	f040 80a0 	bne.w	80031f6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f4:	d106      	bne.n	8003104 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f023 0206 	bic.w	r2, r3, #6
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	645a      	str	r2, [r3, #68]	; 0x44
 8003102:	e002      	b.n	800310a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <HAL_ADC_Start_DMA+0x1c8>)
 8003114:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	4a3c      	ldr	r2, [pc, #240]	; (800320c <HAL_ADC_Start_DMA+0x1cc>)
 800311c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003122:	4a3b      	ldr	r2, [pc, #236]	; (8003210 <HAL_ADC_Start_DMA+0x1d0>)
 8003124:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	4a3a      	ldr	r2, [pc, #232]	; (8003214 <HAL_ADC_Start_DMA+0x1d4>)
 800312c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003136:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003146:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003156:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	334c      	adds	r3, #76	; 0x4c
 8003162:	4619      	mov	r1, r3
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f000 fcda 	bl	8003b20 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	2b00      	cmp	r3, #0
 8003176:	d12a      	bne.n	80031ce <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a26      	ldr	r2, [pc, #152]	; (8003218 <HAL_ADC_Start_DMA+0x1d8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d015      	beq.n	80031ae <HAL_ADC_Start_DMA+0x16e>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a25      	ldr	r2, [pc, #148]	; (800321c <HAL_ADC_Start_DMA+0x1dc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d105      	bne.n	8003198 <HAL_ADC_Start_DMA+0x158>
 800318c:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <HAL_ADC_Start_DMA+0x1c8>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a20      	ldr	r2, [pc, #128]	; (8003220 <HAL_ADC_Start_DMA+0x1e0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d129      	bne.n	80031f6 <HAL_ADC_Start_DMA+0x1b6>
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_ADC_Start_DMA+0x1c8>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	2b0f      	cmp	r3, #15
 80031ac:	d823      	bhi.n	80031f6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11c      	bne.n	80031f6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	e013      	b.n	80031f6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a11      	ldr	r2, [pc, #68]	; (8003218 <HAL_ADC_Start_DMA+0x1d8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d10e      	bne.n	80031f6 <HAL_ADC_Start_DMA+0x1b6>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d107      	bne.n	80031f6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031f4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	20000000 	.word	0x20000000
 8003204:	431bde83 	.word	0x431bde83
 8003208:	40012300 	.word	0x40012300
 800320c:	0800369d 	.word	0x0800369d
 8003210:	08003757 	.word	0x08003757
 8003214:	08003773 	.word	0x08003773
 8003218:	40012000 	.word	0x40012000
 800321c:	40012100 	.word	0x40012100
 8003220:	40012200 	.word	0x40012200

08003224 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1c>
 8003278:	2302      	movs	r3, #2
 800327a:	e105      	b.n	8003488 <HAL_ADC_ConfigChannel+0x228>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b09      	cmp	r3, #9
 800328a:	d925      	bls.n	80032d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68d9      	ldr	r1, [r3, #12]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	b29b      	uxth	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	3b1e      	subs	r3, #30
 80032a2:	2207      	movs	r2, #7
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43da      	mvns	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	400a      	ands	r2, r1
 80032b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68d9      	ldr	r1, [r3, #12]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	4618      	mov	r0, r3
 80032c4:	4603      	mov	r3, r0
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4403      	add	r3, r0
 80032ca:	3b1e      	subs	r3, #30
 80032cc:	409a      	lsls	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	e022      	b.n	800331e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6919      	ldr	r1, [r3, #16]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	2207      	movs	r2, #7
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43da      	mvns	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	400a      	ands	r2, r1
 80032fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6919      	ldr	r1, [r3, #16]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	b29b      	uxth	r3, r3
 800330c:	4618      	mov	r0, r3
 800330e:	4603      	mov	r3, r0
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4403      	add	r3, r0
 8003314:	409a      	lsls	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b06      	cmp	r3, #6
 8003324:	d824      	bhi.n	8003370 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	3b05      	subs	r3, #5
 8003338:	221f      	movs	r2, #31
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	400a      	ands	r2, r1
 8003346:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	4618      	mov	r0, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	3b05      	subs	r3, #5
 8003362:	fa00 f203 	lsl.w	r2, r0, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	635a      	str	r2, [r3, #52]	; 0x34
 800336e:	e04c      	b.n	800340a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b0c      	cmp	r3, #12
 8003376:	d824      	bhi.n	80033c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	3b23      	subs	r3, #35	; 0x23
 800338a:	221f      	movs	r2, #31
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43da      	mvns	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	400a      	ands	r2, r1
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	4618      	mov	r0, r3
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	3b23      	subs	r3, #35	; 0x23
 80033b4:	fa00 f203 	lsl.w	r2, r0, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
 80033c0:	e023      	b.n	800340a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	3b41      	subs	r3, #65	; 0x41
 80033d4:	221f      	movs	r2, #31
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43da      	mvns	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	400a      	ands	r2, r1
 80033e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	4618      	mov	r0, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	3b41      	subs	r3, #65	; 0x41
 80033fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800340a:	4b22      	ldr	r3, [pc, #136]	; (8003494 <HAL_ADC_ConfigChannel+0x234>)
 800340c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a21      	ldr	r2, [pc, #132]	; (8003498 <HAL_ADC_ConfigChannel+0x238>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d109      	bne.n	800342c <HAL_ADC_ConfigChannel+0x1cc>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b12      	cmp	r3, #18
 800341e:	d105      	bne.n	800342c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a19      	ldr	r2, [pc, #100]	; (8003498 <HAL_ADC_ConfigChannel+0x238>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d123      	bne.n	800347e <HAL_ADC_ConfigChannel+0x21e>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b10      	cmp	r3, #16
 800343c:	d003      	beq.n	8003446 <HAL_ADC_ConfigChannel+0x1e6>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b11      	cmp	r3, #17
 8003444:	d11b      	bne.n	800347e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b10      	cmp	r3, #16
 8003458:	d111      	bne.n	800347e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <HAL_ADC_ConfigChannel+0x23c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a10      	ldr	r2, [pc, #64]	; (80034a0 <HAL_ADC_ConfigChannel+0x240>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	0c9a      	lsrs	r2, r3, #18
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003470:	e002      	b.n	8003478 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	3b01      	subs	r3, #1
 8003476:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f9      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	40012300 	.word	0x40012300
 8003498:	40012000 	.word	0x40012000
 800349c:	20000000 	.word	0x20000000
 80034a0:	431bde83 	.word	0x431bde83

080034a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034ac:	4b79      	ldr	r3, [pc, #484]	; (8003694 <ADC_Init+0x1f0>)
 80034ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	021a      	lsls	r2, r3, #8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6859      	ldr	r1, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800351e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6899      	ldr	r1, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	4a58      	ldr	r2, [pc, #352]	; (8003698 <ADC_Init+0x1f4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d022      	beq.n	8003582 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800354a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6899      	ldr	r1, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800356c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	e00f      	b.n	80035a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003590:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0202 	bic.w	r2, r2, #2
 80035b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6899      	ldr	r1, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7e1b      	ldrb	r3, [r3, #24]
 80035bc:	005a      	lsls	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01b      	beq.n	8003608 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6859      	ldr	r1, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	3b01      	subs	r3, #1
 80035fc:	035a      	lsls	r2, r3, #13
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	e007      	b.n	8003618 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003616:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	3b01      	subs	r3, #1
 8003634:	051a      	lsls	r2, r3, #20
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800364c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6899      	ldr	r1, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800365a:	025a      	lsls	r2, r3, #9
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003672:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6899      	ldr	r1, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	029a      	lsls	r2, r3, #10
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
}
 8003688:	bf00      	nop
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	40012300 	.word	0x40012300
 8003698:	0f000001 	.word	0x0f000001

0800369c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d13c      	bne.n	8003730 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d12b      	bne.n	8003728 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d127      	bne.n	8003728 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d006      	beq.n	80036f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d119      	bne.n	8003728 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0220 	bic.w	r2, r2, #32
 8003702:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f043 0201 	orr.w	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff fd7b 	bl	8003224 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800372e:	e00e      	b.n	800374e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff fd85 	bl	800324c <HAL_ADC_ErrorCallback>
}
 8003742:	e004      	b.n	800374e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
}
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f7ff fd67 	bl	8003238 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2240      	movs	r2, #64	; 0x40
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f043 0204 	orr.w	r2, r3, #4
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f7ff fd5a 	bl	800324c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003798:	bf00      	nop
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b0:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <__NVIC_SetPriorityGrouping+0x44>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037bc:	4013      	ands	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d2:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <__NVIC_SetPriorityGrouping+0x44>)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	60d3      	str	r3, [r2, #12]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037ec:	4b04      	ldr	r3, [pc, #16]	; (8003800 <__NVIC_GetPriorityGrouping+0x18>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	0a1b      	lsrs	r3, r3, #8
 80037f2:	f003 0307 	and.w	r3, r3, #7
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	2b00      	cmp	r3, #0
 8003814:	db0b      	blt.n	800382e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	f003 021f 	and.w	r2, r3, #31
 800381c:	4907      	ldr	r1, [pc, #28]	; (800383c <__NVIC_EnableIRQ+0x38>)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2001      	movs	r0, #1
 8003826:	fa00 f202 	lsl.w	r2, r0, r2
 800382a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	e000e100 	.word	0xe000e100

08003840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	6039      	str	r1, [r7, #0]
 800384a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800384c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003850:	2b00      	cmp	r3, #0
 8003852:	db0a      	blt.n	800386a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	b2da      	uxtb	r2, r3
 8003858:	490c      	ldr	r1, [pc, #48]	; (800388c <__NVIC_SetPriority+0x4c>)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	0112      	lsls	r2, r2, #4
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	440b      	add	r3, r1
 8003864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003868:	e00a      	b.n	8003880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	b2da      	uxtb	r2, r3
 800386e:	4908      	ldr	r1, [pc, #32]	; (8003890 <__NVIC_SetPriority+0x50>)
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	3b04      	subs	r3, #4
 8003878:	0112      	lsls	r2, r2, #4
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	440b      	add	r3, r1
 800387e:	761a      	strb	r2, [r3, #24]
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000e100 	.word	0xe000e100
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003894:	b480      	push	{r7}
 8003896:	b089      	sub	sp, #36	; 0x24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f1c3 0307 	rsb	r3, r3, #7
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	bf28      	it	cs
 80038b2:	2304      	movcs	r3, #4
 80038b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3304      	adds	r3, #4
 80038ba:	2b06      	cmp	r3, #6
 80038bc:	d902      	bls.n	80038c4 <NVIC_EncodePriority+0x30>
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3b03      	subs	r3, #3
 80038c2:	e000      	b.n	80038c6 <NVIC_EncodePriority+0x32>
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c8:	f04f 32ff 	mov.w	r2, #4294967295
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43da      	mvns	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	401a      	ands	r2, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038dc:	f04f 31ff 	mov.w	r1, #4294967295
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	fa01 f303 	lsl.w	r3, r1, r3
 80038e6:	43d9      	mvns	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ec:	4313      	orrs	r3, r2
         );
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3724      	adds	r7, #36	; 0x24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3b01      	subs	r3, #1
 8003908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800390c:	d301      	bcc.n	8003912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800390e:	2301      	movs	r3, #1
 8003910:	e00f      	b.n	8003932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <SysTick_Config+0x40>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3b01      	subs	r3, #1
 8003918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391a:	210f      	movs	r1, #15
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	f7ff ff8e 	bl	8003840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <SysTick_Config+0x40>)
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392a:	4b04      	ldr	r3, [pc, #16]	; (800393c <SysTick_Config+0x40>)
 800392c:	2207      	movs	r2, #7
 800392e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	e000e010 	.word	0xe000e010

08003940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ff29 	bl	80037a0 <__NVIC_SetPriorityGrouping>
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	4603      	mov	r3, r0
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003968:	f7ff ff3e 	bl	80037e8 <__NVIC_GetPriorityGrouping>
 800396c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	6978      	ldr	r0, [r7, #20]
 8003974:	f7ff ff8e 	bl	8003894 <NVIC_EncodePriority>
 8003978:	4602      	mov	r2, r0
 800397a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff5d 	bl	8003840 <__NVIC_SetPriority>
}
 8003986:	bf00      	nop
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	4603      	mov	r3, r0
 8003996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ff31 	bl	8003804 <__NVIC_EnableIRQ>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ffa2 	bl	80038fc <SysTick_Config>
 80039b8:	4603      	mov	r3, r0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039d0:	f7ff fac4 	bl	8002f5c <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e099      	b.n	8003b14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0201 	bic.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a00:	e00f      	b.n	8003a22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a02:	f7ff faab 	bl	8002f5c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d908      	bls.n	8003a22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2203      	movs	r2, #3
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e078      	b.n	8003b14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e8      	bne.n	8003a02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <HAL_DMA_Init+0x158>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d107      	bne.n	8003a8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	4313      	orrs	r3, r2
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f023 0307 	bic.w	r3, r3, #7
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d117      	bne.n	8003ae6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fa6f 	bl	8003fac <DMA_CheckFifoParam>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2240      	movs	r2, #64	; 0x40
 8003ad8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e016      	b.n	8003b14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa26 	bl	8003f40 <DMA_CalcBaseAndBitshift>
 8003af4:	4603      	mov	r3, r0
 8003af6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	223f      	movs	r2, #63	; 0x3f
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	f010803f 	.word	0xf010803f

08003b20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_DMA_Start_IT+0x26>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e040      	b.n	8003bc8 <HAL_DMA_Start_IT+0xa8>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d12f      	bne.n	8003bba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f9b8 	bl	8003ee4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b78:	223f      	movs	r2, #63	; 0x3f
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0216 	orr.w	r2, r2, #22
 8003b8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d007      	beq.n	8003ba8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0208 	orr.w	r2, r2, #8
 8003ba6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e005      	b.n	8003bc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bdc:	4b92      	ldr	r3, [pc, #584]	; (8003e28 <HAL_DMA_IRQHandler+0x258>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a92      	ldr	r2, [pc, #584]	; (8003e2c <HAL_DMA_IRQHandler+0x25c>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	0a9b      	lsrs	r3, r3, #10
 8003be8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d01a      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d013      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0204 	bic.w	r2, r2, #4
 8003c22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c28:	2208      	movs	r2, #8
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	f043 0201 	orr.w	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c40:	2201      	movs	r2, #1
 8003c42:	409a      	lsls	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d012      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5e:	2201      	movs	r2, #1
 8003c60:	409a      	lsls	r2, r3
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	f043 0202 	orr.w	r2, r3, #2
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c76:	2204      	movs	r2, #4
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d012      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00b      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c94:	2204      	movs	r2, #4
 8003c96:	409a      	lsls	r2, r3
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	f043 0204 	orr.w	r2, r3, #4
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cac:	2210      	movs	r2, #16
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d043      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d03c      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	2210      	movs	r2, #16
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d018      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d108      	bne.n	8003d00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d024      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
 8003cfe:	e01f      	b.n	8003d40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01b      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	4798      	blx	r3
 8003d10:	e016      	b.n	8003d40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d107      	bne.n	8003d30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0208 	bic.w	r2, r2, #8
 8003d2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	2220      	movs	r2, #32
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 808e 	beq.w	8003e6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8086 	beq.w	8003e6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d66:	2220      	movs	r2, #32
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d136      	bne.n	8003de8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0216 	bic.w	r2, r2, #22
 8003d88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <HAL_DMA_IRQHandler+0x1da>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0208 	bic.w	r2, r2, #8
 8003db8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbe:	223f      	movs	r2, #63	; 0x3f
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d07d      	beq.n	8003eda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
        }
        return;
 8003de6:	e078      	b.n	8003eda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01c      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d108      	bne.n	8003e16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d030      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
 8003e14:	e02b      	b.n	8003e6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d027      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	4798      	blx	r3
 8003e26:	e022      	b.n	8003e6e <HAL_DMA_IRQHandler+0x29e>
 8003e28:	20000000 	.word	0x20000000
 8003e2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10f      	bne.n	8003e5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0210 	bic.w	r2, r2, #16
 8003e4c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d032      	beq.n	8003edc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d022      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2205      	movs	r2, #5
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d307      	bcc.n	8003eb6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f2      	bne.n	8003e9a <HAL_DMA_IRQHandler+0x2ca>
 8003eb4:	e000      	b.n	8003eb8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003eb6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	4798      	blx	r3
 8003ed8:	e000      	b.n	8003edc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003eda:	bf00      	nop
    }
  }
}
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop

08003ee4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d108      	bne.n	8003f24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f22:	e007      	b.n	8003f34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	3b10      	subs	r3, #16
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <DMA_CalcBaseAndBitshift+0x64>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f5a:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <DMA_CalcBaseAndBitshift+0x68>)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d909      	bls.n	8003f82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f76:	f023 0303 	bic.w	r3, r3, #3
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	659a      	str	r2, [r3, #88]	; 0x58
 8003f80:	e007      	b.n	8003f92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	aaaaaaab 	.word	0xaaaaaaab
 8003fa8:	080088cc 	.word	0x080088cc

08003fac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11f      	bne.n	8004006 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d855      	bhi.n	8004078 <DMA_CheckFifoParam+0xcc>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <DMA_CheckFifoParam+0x28>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003fe5 	.word	0x08003fe5
 8003fd8:	08003ff7 	.word	0x08003ff7
 8003fdc:	08003fe5 	.word	0x08003fe5
 8003fe0:	08004079 	.word	0x08004079
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d045      	beq.n	800407c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff4:	e042      	b.n	800407c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ffe:	d13f      	bne.n	8004080 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004004:	e03c      	b.n	8004080 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400e:	d121      	bne.n	8004054 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d836      	bhi.n	8004084 <DMA_CheckFifoParam+0xd8>
 8004016:	a201      	add	r2, pc, #4	; (adr r2, 800401c <DMA_CheckFifoParam+0x70>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	0800402d 	.word	0x0800402d
 8004020:	08004033 	.word	0x08004033
 8004024:	0800402d 	.word	0x0800402d
 8004028:	08004045 	.word	0x08004045
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      break;
 8004030:	e02f      	b.n	8004092 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d024      	beq.n	8004088 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004042:	e021      	b.n	8004088 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800404c:	d11e      	bne.n	800408c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004052:	e01b      	b.n	800408c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d902      	bls.n	8004060 <DMA_CheckFifoParam+0xb4>
 800405a:	2b03      	cmp	r3, #3
 800405c:	d003      	beq.n	8004066 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800405e:	e018      	b.n	8004092 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      break;
 8004064:	e015      	b.n	8004092 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00e      	beq.n	8004090 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
      break;
 8004076:	e00b      	b.n	8004090 <DMA_CheckFifoParam+0xe4>
      break;
 8004078:	bf00      	nop
 800407a:	e00a      	b.n	8004092 <DMA_CheckFifoParam+0xe6>
      break;
 800407c:	bf00      	nop
 800407e:	e008      	b.n	8004092 <DMA_CheckFifoParam+0xe6>
      break;
 8004080:	bf00      	nop
 8004082:	e006      	b.n	8004092 <DMA_CheckFifoParam+0xe6>
      break;
 8004084:	bf00      	nop
 8004086:	e004      	b.n	8004092 <DMA_CheckFifoParam+0xe6>
      break;
 8004088:	bf00      	nop
 800408a:	e002      	b.n	8004092 <DMA_CheckFifoParam+0xe6>
      break;   
 800408c:	bf00      	nop
 800408e:	e000      	b.n	8004092 <DMA_CheckFifoParam+0xe6>
      break;
 8004090:	bf00      	nop
    }
  } 
  
  return status; 
 8004092:	7bfb      	ldrb	r3, [r7, #15]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80040aa:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_FLASH_Unlock+0x38>)
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	da0b      	bge.n	80040ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <HAL_FLASH_Unlock+0x38>)
 80040b4:	4a09      	ldr	r2, [pc, #36]	; (80040dc <HAL_FLASH_Unlock+0x3c>)
 80040b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <HAL_FLASH_Unlock+0x38>)
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <HAL_FLASH_Unlock+0x40>)
 80040bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_FLASH_Unlock+0x38>)
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	da01      	bge.n	80040ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80040ca:	79fb      	ldrb	r3, [r7, #7]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40023c00 	.word	0x40023c00
 80040dc:	45670123 	.word	0x45670123
 80040e0:	cdef89ab 	.word	0xcdef89ab

080040e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_FLASH_Lock+0x1c>)
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	4a04      	ldr	r2, [pc, #16]	; (8004100 <HAL_FLASH_Lock+0x1c>)
 80040ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040f2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40023c00 	.word	0x40023c00

08004104 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <FLASH_WaitForLastOperation+0x78>)
 8004112:	2200      	movs	r2, #0
 8004114:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004116:	f7fe ff21 	bl	8002f5c <HAL_GetTick>
 800411a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800411c:	e010      	b.n	8004140 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d00c      	beq.n	8004140 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <FLASH_WaitForLastOperation+0x38>
 800412c:	f7fe ff16 	bl	8002f5c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	429a      	cmp	r2, r3
 800413a:	d201      	bcs.n	8004140 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e019      	b.n	8004174 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004140:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <FLASH_WaitForLastOperation+0x7c>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e8      	bne.n	800411e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <FLASH_WaitForLastOperation+0x7c>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <FLASH_WaitForLastOperation+0x7c>)
 800415a:	2201      	movs	r2, #1
 800415c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <FLASH_WaitForLastOperation+0x7c>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800416a:	f000 f80b 	bl	8004184 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
  
}  
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	200004a0 	.word	0x200004a0
 8004180:	40023c00 	.word	0x40023c00

08004184 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004188:	4b27      	ldr	r3, [pc, #156]	; (8004228 <FLASH_SetErrorCode+0xa4>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <FLASH_SetErrorCode+0xa8>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f043 0310 	orr.w	r3, r3, #16
 800419c:	4a23      	ldr	r2, [pc, #140]	; (800422c <FLASH_SetErrorCode+0xa8>)
 800419e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80041a0:	4b21      	ldr	r3, [pc, #132]	; (8004228 <FLASH_SetErrorCode+0xa4>)
 80041a2:	2210      	movs	r2, #16
 80041a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80041a6:	4b20      	ldr	r3, [pc, #128]	; (8004228 <FLASH_SetErrorCode+0xa4>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d008      	beq.n	80041c4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80041b2:	4b1e      	ldr	r3, [pc, #120]	; (800422c <FLASH_SetErrorCode+0xa8>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f043 0308 	orr.w	r3, r3, #8
 80041ba:	4a1c      	ldr	r2, [pc, #112]	; (800422c <FLASH_SetErrorCode+0xa8>)
 80041bc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80041be:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <FLASH_SetErrorCode+0xa4>)
 80041c0:	2220      	movs	r2, #32
 80041c2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80041c4:	4b18      	ldr	r3, [pc, #96]	; (8004228 <FLASH_SetErrorCode+0xa4>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80041d0:	4b16      	ldr	r3, [pc, #88]	; (800422c <FLASH_SetErrorCode+0xa8>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f043 0304 	orr.w	r3, r3, #4
 80041d8:	4a14      	ldr	r2, [pc, #80]	; (800422c <FLASH_SetErrorCode+0xa8>)
 80041da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80041dc:	4b12      	ldr	r3, [pc, #72]	; (8004228 <FLASH_SetErrorCode+0xa4>)
 80041de:	2240      	movs	r2, #64	; 0x40
 80041e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80041e2:	4b11      	ldr	r3, [pc, #68]	; (8004228 <FLASH_SetErrorCode+0xa4>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80041ee:	4b0f      	ldr	r3, [pc, #60]	; (800422c <FLASH_SetErrorCode+0xa8>)
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f043 0302 	orr.w	r3, r3, #2
 80041f6:	4a0d      	ldr	r2, [pc, #52]	; (800422c <FLASH_SetErrorCode+0xa8>)
 80041f8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80041fa:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <FLASH_SetErrorCode+0xa4>)
 80041fc:	2280      	movs	r2, #128	; 0x80
 80041fe:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <FLASH_SetErrorCode+0xa4>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800420c:	4b07      	ldr	r3, [pc, #28]	; (800422c <FLASH_SetErrorCode+0xa8>)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	f043 0320 	orr.w	r3, r3, #32
 8004214:	4a05      	ldr	r2, [pc, #20]	; (800422c <FLASH_SetErrorCode+0xa8>)
 8004216:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <FLASH_SetErrorCode+0xa4>)
 800421a:	2202      	movs	r2, #2
 800421c:	60da      	str	r2, [r3, #12]
  }
}
 800421e:	bf00      	nop
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	40023c00 	.word	0x40023c00
 800422c:	200004a0 	.word	0x200004a0

08004230 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004242:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_FLASHEx_Erase+0xd8>)
 8004244:	7e1b      	ldrb	r3, [r3, #24]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_FLASHEx_Erase+0x1e>
 800424a:	2302      	movs	r3, #2
 800424c:	e058      	b.n	8004300 <HAL_FLASHEx_Erase+0xd0>
 800424e:	4b2e      	ldr	r3, [pc, #184]	; (8004308 <HAL_FLASHEx_Erase+0xd8>)
 8004250:	2201      	movs	r2, #1
 8004252:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004254:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004258:	f7ff ff54 	bl	8004104 <FLASH_WaitForLastOperation>
 800425c:	4603      	mov	r3, r0
 800425e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d148      	bne.n	80042f8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	f04f 32ff 	mov.w	r2, #4294967295
 800426c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d115      	bne.n	80042a2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	b2da      	uxtb	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	4619      	mov	r1, r3
 8004282:	4610      	mov	r0, r2
 8004284:	f000 f844 	bl	8004310 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004288:	f24c 3050 	movw	r0, #50000	; 0xc350
 800428c:	f7ff ff3a 	bl	8004104 <FLASH_WaitForLastOperation>
 8004290:	4603      	mov	r3, r0
 8004292:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004294:	4b1d      	ldr	r3, [pc, #116]	; (800430c <HAL_FLASHEx_Erase+0xdc>)
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	4a1c      	ldr	r2, [pc, #112]	; (800430c <HAL_FLASHEx_Erase+0xdc>)
 800429a:	f023 0304 	bic.w	r3, r3, #4
 800429e:	6113      	str	r3, [r2, #16]
 80042a0:	e028      	b.n	80042f4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	e01c      	b.n	80042e4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	4619      	mov	r1, r3
 80042b2:	68b8      	ldr	r0, [r7, #8]
 80042b4:	f000 f850 	bl	8004358 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042bc:	f7ff ff22 	bl	8004104 <FLASH_WaitForLastOperation>
 80042c0:	4603      	mov	r3, r0
 80042c2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80042c4:	4b11      	ldr	r3, [pc, #68]	; (800430c <HAL_FLASHEx_Erase+0xdc>)
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	4a10      	ldr	r2, [pc, #64]	; (800430c <HAL_FLASHEx_Erase+0xdc>)
 80042ca:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80042ce:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	601a      	str	r2, [r3, #0]
          break;
 80042dc:	e00a      	b.n	80042f4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3301      	adds	r3, #1
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	4413      	add	r3, r2
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d3da      	bcc.n	80042aa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80042f4:	f000 f878 	bl	80043e8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_FLASHEx_Erase+0xd8>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	761a      	strb	r2, [r3, #24]

  return status;
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	200004a0 	.word	0x200004a0
 800430c:	40023c00 	.word	0x40023c00

08004310 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	6039      	str	r1, [r7, #0]
 800431a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800431c:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <FLASH_MassErase+0x44>)
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <FLASH_MassErase+0x44>)
 8004322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004326:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <FLASH_MassErase+0x44>)
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	4a09      	ldr	r2, [pc, #36]	; (8004354 <FLASH_MassErase+0x44>)
 800432e:	f043 0304 	orr.w	r3, r3, #4
 8004332:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <FLASH_MassErase+0x44>)
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	4313      	orrs	r3, r2
 800433e:	4a05      	ldr	r2, [pc, #20]	; (8004354 <FLASH_MassErase+0x44>)
 8004340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004344:	6113      	str	r3, [r2, #16]
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40023c00 	.word	0x40023c00

08004358 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	e010      	b.n	8004396 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d103      	bne.n	8004382 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800437a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e009      	b.n	8004396 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d103      	bne.n	8004390 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	e002      	b.n	8004396 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004390:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004394:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <FLASH_Erase_Sector+0x8c>)
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <FLASH_Erase_Sector+0x8c>)
 800439c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80043a2:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <FLASH_Erase_Sector+0x8c>)
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	490f      	ldr	r1, [pc, #60]	; (80043e4 <FLASH_Erase_Sector+0x8c>)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80043ae:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <FLASH_Erase_Sector+0x8c>)
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	4a0c      	ldr	r2, [pc, #48]	; (80043e4 <FLASH_Erase_Sector+0x8c>)
 80043b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80043b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80043ba:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <FLASH_Erase_Sector+0x8c>)
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4313      	orrs	r3, r2
 80043c4:	4a07      	ldr	r2, [pc, #28]	; (80043e4 <FLASH_Erase_Sector+0x8c>)
 80043c6:	f043 0302 	orr.w	r3, r3, #2
 80043ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <FLASH_Erase_Sector+0x8c>)
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	4a04      	ldr	r2, [pc, #16]	; (80043e4 <FLASH_Erase_Sector+0x8c>)
 80043d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d6:	6113      	str	r3, [r2, #16]
}
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40023c00 	.word	0x40023c00

080043e8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80043ec:	4b20      	ldr	r3, [pc, #128]	; (8004470 <FLASH_FlushCaches+0x88>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d017      	beq.n	8004428 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80043f8:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <FLASH_FlushCaches+0x88>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1c      	ldr	r2, [pc, #112]	; (8004470 <FLASH_FlushCaches+0x88>)
 80043fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004402:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004404:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <FLASH_FlushCaches+0x88>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a19      	ldr	r2, [pc, #100]	; (8004470 <FLASH_FlushCaches+0x88>)
 800440a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	4b17      	ldr	r3, [pc, #92]	; (8004470 <FLASH_FlushCaches+0x88>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a16      	ldr	r2, [pc, #88]	; (8004470 <FLASH_FlushCaches+0x88>)
 8004416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800441a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800441c:	4b14      	ldr	r3, [pc, #80]	; (8004470 <FLASH_FlushCaches+0x88>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a13      	ldr	r2, [pc, #76]	; (8004470 <FLASH_FlushCaches+0x88>)
 8004422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004426:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004428:	4b11      	ldr	r3, [pc, #68]	; (8004470 <FLASH_FlushCaches+0x88>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004430:	2b00      	cmp	r3, #0
 8004432:	d017      	beq.n	8004464 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004434:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <FLASH_FlushCaches+0x88>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a0d      	ldr	r2, [pc, #52]	; (8004470 <FLASH_FlushCaches+0x88>)
 800443a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800443e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <FLASH_FlushCaches+0x88>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <FLASH_FlushCaches+0x88>)
 8004446:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b08      	ldr	r3, [pc, #32]	; (8004470 <FLASH_FlushCaches+0x88>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a07      	ldr	r2, [pc, #28]	; (8004470 <FLASH_FlushCaches+0x88>)
 8004452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004456:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <FLASH_FlushCaches+0x88>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a04      	ldr	r2, [pc, #16]	; (8004470 <FLASH_FlushCaches+0x88>)
 800445e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004462:	6013      	str	r3, [r2, #0]
  }
}
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40023c00 	.word	0x40023c00

08004474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004474:	b480      	push	{r7}
 8004476:	b089      	sub	sp, #36	; 0x24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	e16b      	b.n	8004768 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004490:	2201      	movs	r2, #1
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4013      	ands	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	f040 815a 	bne.w	8004762 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d00b      	beq.n	80044ce <HAL_GPIO_Init+0x5a>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d007      	beq.n	80044ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044c2:	2b11      	cmp	r3, #17
 80044c4:	d003      	beq.n	80044ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b12      	cmp	r3, #18
 80044cc:	d130      	bne.n	8004530 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	2203      	movs	r2, #3
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004504:	2201      	movs	r2, #1
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	43db      	mvns	r3, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	091b      	lsrs	r3, r3, #4
 800451a:	f003 0201 	and.w	r2, r3, #1
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4313      	orrs	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	2203      	movs	r2, #3
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4313      	orrs	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d003      	beq.n	8004570 <HAL_GPIO_Init+0xfc>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b12      	cmp	r3, #18
 800456e:	d123      	bne.n	80045b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	08da      	lsrs	r2, r3, #3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3208      	adds	r2, #8
 8004578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	220f      	movs	r2, #15
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	08da      	lsrs	r2, r3, #3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3208      	adds	r2, #8
 80045b2:	69b9      	ldr	r1, [r7, #24]
 80045b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	2203      	movs	r2, #3
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 0203 	and.w	r2, r3, #3
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80b4 	beq.w	8004762 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	4b5f      	ldr	r3, [pc, #380]	; (800477c <HAL_GPIO_Init+0x308>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	4a5e      	ldr	r2, [pc, #376]	; (800477c <HAL_GPIO_Init+0x308>)
 8004604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004608:	6453      	str	r3, [r2, #68]	; 0x44
 800460a:	4b5c      	ldr	r3, [pc, #368]	; (800477c <HAL_GPIO_Init+0x308>)
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004616:	4a5a      	ldr	r2, [pc, #360]	; (8004780 <HAL_GPIO_Init+0x30c>)
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	089b      	lsrs	r3, r3, #2
 800461c:	3302      	adds	r3, #2
 800461e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	220f      	movs	r2, #15
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a51      	ldr	r2, [pc, #324]	; (8004784 <HAL_GPIO_Init+0x310>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d02b      	beq.n	800469a <HAL_GPIO_Init+0x226>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a50      	ldr	r2, [pc, #320]	; (8004788 <HAL_GPIO_Init+0x314>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d025      	beq.n	8004696 <HAL_GPIO_Init+0x222>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a4f      	ldr	r2, [pc, #316]	; (800478c <HAL_GPIO_Init+0x318>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d01f      	beq.n	8004692 <HAL_GPIO_Init+0x21e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a4e      	ldr	r2, [pc, #312]	; (8004790 <HAL_GPIO_Init+0x31c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d019      	beq.n	800468e <HAL_GPIO_Init+0x21a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a4d      	ldr	r2, [pc, #308]	; (8004794 <HAL_GPIO_Init+0x320>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d013      	beq.n	800468a <HAL_GPIO_Init+0x216>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a4c      	ldr	r2, [pc, #304]	; (8004798 <HAL_GPIO_Init+0x324>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00d      	beq.n	8004686 <HAL_GPIO_Init+0x212>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a4b      	ldr	r2, [pc, #300]	; (800479c <HAL_GPIO_Init+0x328>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d007      	beq.n	8004682 <HAL_GPIO_Init+0x20e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a4a      	ldr	r2, [pc, #296]	; (80047a0 <HAL_GPIO_Init+0x32c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d101      	bne.n	800467e <HAL_GPIO_Init+0x20a>
 800467a:	2307      	movs	r3, #7
 800467c:	e00e      	b.n	800469c <HAL_GPIO_Init+0x228>
 800467e:	2308      	movs	r3, #8
 8004680:	e00c      	b.n	800469c <HAL_GPIO_Init+0x228>
 8004682:	2306      	movs	r3, #6
 8004684:	e00a      	b.n	800469c <HAL_GPIO_Init+0x228>
 8004686:	2305      	movs	r3, #5
 8004688:	e008      	b.n	800469c <HAL_GPIO_Init+0x228>
 800468a:	2304      	movs	r3, #4
 800468c:	e006      	b.n	800469c <HAL_GPIO_Init+0x228>
 800468e:	2303      	movs	r3, #3
 8004690:	e004      	b.n	800469c <HAL_GPIO_Init+0x228>
 8004692:	2302      	movs	r3, #2
 8004694:	e002      	b.n	800469c <HAL_GPIO_Init+0x228>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_GPIO_Init+0x228>
 800469a:	2300      	movs	r3, #0
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	f002 0203 	and.w	r2, r2, #3
 80046a2:	0092      	lsls	r2, r2, #2
 80046a4:	4093      	lsls	r3, r2
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ac:	4934      	ldr	r1, [pc, #208]	; (8004780 <HAL_GPIO_Init+0x30c>)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	089b      	lsrs	r3, r3, #2
 80046b2:	3302      	adds	r3, #2
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046ba:	4b3a      	ldr	r3, [pc, #232]	; (80047a4 <HAL_GPIO_Init+0x330>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046de:	4a31      	ldr	r2, [pc, #196]	; (80047a4 <HAL_GPIO_Init+0x330>)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046e4:	4b2f      	ldr	r3, [pc, #188]	; (80047a4 <HAL_GPIO_Init+0x330>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004708:	4a26      	ldr	r2, [pc, #152]	; (80047a4 <HAL_GPIO_Init+0x330>)
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800470e:	4b25      	ldr	r3, [pc, #148]	; (80047a4 <HAL_GPIO_Init+0x330>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004732:	4a1c      	ldr	r2, [pc, #112]	; (80047a4 <HAL_GPIO_Init+0x330>)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004738:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <HAL_GPIO_Init+0x330>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800475c:	4a11      	ldr	r2, [pc, #68]	; (80047a4 <HAL_GPIO_Init+0x330>)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3301      	adds	r3, #1
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2b0f      	cmp	r3, #15
 800476c:	f67f ae90 	bls.w	8004490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004770:	bf00      	nop
 8004772:	3724      	adds	r7, #36	; 0x24
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40023800 	.word	0x40023800
 8004780:	40013800 	.word	0x40013800
 8004784:	40020000 	.word	0x40020000
 8004788:	40020400 	.word	0x40020400
 800478c:	40020800 	.word	0x40020800
 8004790:	40020c00 	.word	0x40020c00
 8004794:	40021000 	.word	0x40021000
 8004798:	40021400 	.word	0x40021400
 800479c:	40021800 	.word	0x40021800
 80047a0:	40021c00 	.word	0x40021c00
 80047a4:	40013c00 	.word	0x40013c00

080047a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	807b      	strh	r3, [r7, #2]
 80047b4:	4613      	mov	r3, r2
 80047b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047b8:	787b      	ldrb	r3, [r7, #1]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047be:	887a      	ldrh	r2, [r7, #2]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047c4:	e003      	b.n	80047ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047c6:	887b      	ldrh	r3, [r7, #2]
 80047c8:	041a      	lsls	r2, r3, #16
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	619a      	str	r2, [r3, #24]
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
	...

080047dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047e6:	4b08      	ldr	r3, [pc, #32]	; (8004808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d006      	beq.n	8004800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047f2:	4a05      	ldr	r2, [pc, #20]	; (8004808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fd fe4a 	bl	8002494 <HAL_GPIO_EXTI_Callback>
  }
}
 8004800:	bf00      	nop
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40013c00 	.word	0x40013c00

0800480c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e11f      	b.n	8004a5e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fd ff8c 	bl	8002750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2224      	movs	r2, #36	; 0x24
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800485e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800486e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004870:	f001 fb68 	bl	8005f44 <HAL_RCC_GetPCLK1Freq>
 8004874:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	4a7b      	ldr	r2, [pc, #492]	; (8004a68 <HAL_I2C_Init+0x25c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d807      	bhi.n	8004890 <HAL_I2C_Init+0x84>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4a7a      	ldr	r2, [pc, #488]	; (8004a6c <HAL_I2C_Init+0x260>)
 8004884:	4293      	cmp	r3, r2
 8004886:	bf94      	ite	ls
 8004888:	2301      	movls	r3, #1
 800488a:	2300      	movhi	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	e006      	b.n	800489e <HAL_I2C_Init+0x92>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4a77      	ldr	r2, [pc, #476]	; (8004a70 <HAL_I2C_Init+0x264>)
 8004894:	4293      	cmp	r3, r2
 8004896:	bf94      	ite	ls
 8004898:	2301      	movls	r3, #1
 800489a:	2300      	movhi	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e0db      	b.n	8004a5e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a72      	ldr	r2, [pc, #456]	; (8004a74 <HAL_I2C_Init+0x268>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	0c9b      	lsrs	r3, r3, #18
 80048b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4a64      	ldr	r2, [pc, #400]	; (8004a68 <HAL_I2C_Init+0x25c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d802      	bhi.n	80048e0 <HAL_I2C_Init+0xd4>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	3301      	adds	r3, #1
 80048de:	e009      	b.n	80048f4 <HAL_I2C_Init+0xe8>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	4a63      	ldr	r2, [pc, #396]	; (8004a78 <HAL_I2C_Init+0x26c>)
 80048ec:	fba2 2303 	umull	r2, r3, r2, r3
 80048f0:	099b      	lsrs	r3, r3, #6
 80048f2:	3301      	adds	r3, #1
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004906:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4956      	ldr	r1, [pc, #344]	; (8004a68 <HAL_I2C_Init+0x25c>)
 8004910:	428b      	cmp	r3, r1
 8004912:	d80d      	bhi.n	8004930 <HAL_I2C_Init+0x124>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1e59      	subs	r1, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004922:	3301      	adds	r3, #1
 8004924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004928:	2b04      	cmp	r3, #4
 800492a:	bf38      	it	cc
 800492c:	2304      	movcc	r3, #4
 800492e:	e04f      	b.n	80049d0 <HAL_I2C_Init+0x1c4>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d111      	bne.n	800495c <HAL_I2C_Init+0x150>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1e58      	subs	r0, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	440b      	add	r3, r1
 8004946:	fbb0 f3f3 	udiv	r3, r0, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e012      	b.n	8004982 <HAL_I2C_Init+0x176>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1e58      	subs	r0, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	0099      	lsls	r1, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004972:	3301      	adds	r3, #1
 8004974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_I2C_Init+0x17e>
 8004986:	2301      	movs	r3, #1
 8004988:	e022      	b.n	80049d0 <HAL_I2C_Init+0x1c4>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10e      	bne.n	80049b0 <HAL_I2C_Init+0x1a4>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1e58      	subs	r0, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6859      	ldr	r1, [r3, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	440b      	add	r3, r1
 80049a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a4:	3301      	adds	r3, #1
 80049a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ae:	e00f      	b.n	80049d0 <HAL_I2C_Init+0x1c4>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1e58      	subs	r0, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	0099      	lsls	r1, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c6:	3301      	adds	r3, #1
 80049c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	6809      	ldr	r1, [r1, #0]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69da      	ldr	r2, [r3, #28]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6911      	ldr	r1, [r2, #16]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68d2      	ldr	r2, [r2, #12]
 8004a0a:	4311      	orrs	r1, r2
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	430b      	orrs	r3, r1
 8004a12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	000186a0 	.word	0x000186a0
 8004a6c:	001e847f 	.word	0x001e847f
 8004a70:	003d08ff 	.word	0x003d08ff
 8004a74:	431bde83 	.word	0x431bde83
 8004a78:	10624dd3 	.word	0x10624dd3

08004a7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	607a      	str	r2, [r7, #4]
 8004a86:	461a      	mov	r2, r3
 8004a88:	460b      	mov	r3, r1
 8004a8a:	817b      	strh	r3, [r7, #10]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a90:	f7fe fa64 	bl	8002f5c <HAL_GetTick>
 8004a94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	f040 80e0 	bne.w	8004c64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	2319      	movs	r3, #25
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4970      	ldr	r1, [pc, #448]	; (8004c70 <HAL_I2C_Master_Transmit+0x1f4>)
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fc56 	bl	8005360 <I2C_WaitOnFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004aba:	2302      	movs	r3, #2
 8004abc:	e0d3      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_I2C_Master_Transmit+0x50>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e0cc      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d007      	beq.n	8004af2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2221      	movs	r2, #33	; 0x21
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2210      	movs	r2, #16
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	893a      	ldrh	r2, [r7, #8]
 8004b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a50      	ldr	r2, [pc, #320]	; (8004c74 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b34:	8979      	ldrh	r1, [r7, #10]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6a3a      	ldr	r2, [r7, #32]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fac2 	bl	80050c4 <I2C_MasterRequestWrite>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e08d      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b60:	e066      	b.n	8004c30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	6a39      	ldr	r1, [r7, #32]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fcd0 	bl	800550c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d107      	bne.n	8004b8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e06b      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	781a      	ldrb	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d11b      	bne.n	8004c04 <HAL_I2C_Master_Transmit+0x188>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d017      	beq.n	8004c04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	6a39      	ldr	r1, [r7, #32]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fcc0 	bl	800558e <I2C_WaitOnBTFFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00d      	beq.n	8004c30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d107      	bne.n	8004c2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e01a      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d194      	bne.n	8004b62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e000      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c64:	2302      	movs	r3, #2
  }
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	00100002 	.word	0x00100002
 8004c74:	ffff0000 	.word	0xffff0000

08004c78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08c      	sub	sp, #48	; 0x30
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	461a      	mov	r2, r3
 8004c84:	460b      	mov	r3, r1
 8004c86:	817b      	strh	r3, [r7, #10]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c8c:	f7fe f966 	bl	8002f5c <HAL_GetTick>
 8004c90:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	f040 820b 	bne.w	80050b6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	2319      	movs	r3, #25
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	497c      	ldr	r1, [pc, #496]	; (8004e9c <HAL_I2C_Master_Receive+0x224>)
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fb58 	bl	8005360 <I2C_WaitOnFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e1fe      	b.n	80050b8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_I2C_Master_Receive+0x50>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e1f7      	b.n	80050b8 <HAL_I2C_Master_Receive+0x440>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d007      	beq.n	8004cee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2222      	movs	r2, #34	; 0x22
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2210      	movs	r2, #16
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	893a      	ldrh	r2, [r7, #8]
 8004d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4a5c      	ldr	r2, [pc, #368]	; (8004ea0 <HAL_I2C_Master_Receive+0x228>)
 8004d2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d30:	8979      	ldrh	r1, [r7, #10]
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fa46 	bl	80051c8 <I2C_MasterRequestRead>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e1b8      	b.n	80050b8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d113      	bne.n	8004d76 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	623b      	str	r3, [r7, #32]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	623b      	str	r3, [r7, #32]
 8004d62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e18c      	b.n	8005090 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d11b      	bne.n	8004db6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e16c      	b.n	8005090 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d11b      	bne.n	8004df6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	e14c      	b.n	8005090 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e1c:	e138      	b.n	8005090 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	f200 80f1 	bhi.w	800500a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d123      	bne.n	8004e78 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 fbeb 	bl	8005610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e139      	b.n	80050b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e76:	e10b      	b.n	8005090 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d14e      	bne.n	8004f1e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e86:	2200      	movs	r2, #0
 8004e88:	4906      	ldr	r1, [pc, #24]	; (8004ea4 <HAL_I2C_Master_Receive+0x22c>)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fa68 	bl	8005360 <I2C_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e10e      	b.n	80050b8 <HAL_I2C_Master_Receive+0x440>
 8004e9a:	bf00      	nop
 8004e9c:	00100002 	.word	0x00100002
 8004ea0:	ffff0000 	.word	0xffff0000
 8004ea4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f1c:	e0b8      	b.n	8005090 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	2200      	movs	r2, #0
 8004f26:	4966      	ldr	r1, [pc, #408]	; (80050c0 <HAL_I2C_Master_Receive+0x448>)
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 fa19 	bl	8005360 <I2C_WaitOnFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0bf      	b.n	80050b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	2200      	movs	r2, #0
 8004f82:	494f      	ldr	r1, [pc, #316]	; (80050c0 <HAL_I2C_Master_Receive+0x448>)
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f9eb 	bl	8005360 <I2C_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e091      	b.n	80050b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005008:	e042      	b.n	8005090 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800500a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fafe 	bl	8005610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e04c      	b.n	80050b8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b04      	cmp	r3, #4
 800505c:	d118      	bne.n	8005090 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005094:	2b00      	cmp	r3, #0
 8005096:	f47f aec2 	bne.w	8004e1e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	e000      	b.n	80050b8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80050b6:	2302      	movs	r3, #2
  }
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3728      	adds	r7, #40	; 0x28
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	00010004 	.word	0x00010004

080050c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	460b      	mov	r3, r1
 80050d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d006      	beq.n	80050ee <I2C_MasterRequestWrite+0x2a>
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d003      	beq.n	80050ee <I2C_MasterRequestWrite+0x2a>
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050ec:	d108      	bne.n	8005100 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e00b      	b.n	8005118 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	2b12      	cmp	r3, #18
 8005106:	d107      	bne.n	8005118 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005116:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f91b 	bl	8005360 <I2C_WaitOnFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00c      	beq.n	800514a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005144:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e035      	b.n	80051b6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005152:	d108      	bne.n	8005166 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005154:	897b      	ldrh	r3, [r7, #10]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	461a      	mov	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005162:	611a      	str	r2, [r3, #16]
 8005164:	e01b      	b.n	800519e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005166:	897b      	ldrh	r3, [r7, #10]
 8005168:	11db      	asrs	r3, r3, #7
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f003 0306 	and.w	r3, r3, #6
 8005170:	b2db      	uxtb	r3, r3
 8005172:	f063 030f 	orn	r3, r3, #15
 8005176:	b2da      	uxtb	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	490f      	ldr	r1, [pc, #60]	; (80051c0 <I2C_MasterRequestWrite+0xfc>)
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f942 	bl	800540e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e010      	b.n	80051b6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005194:	897b      	ldrh	r3, [r7, #10]
 8005196:	b2da      	uxtb	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	4908      	ldr	r1, [pc, #32]	; (80051c4 <I2C_MasterRequestWrite+0x100>)
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 f932 	bl	800540e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	00010008 	.word	0x00010008
 80051c4:	00010002 	.word	0x00010002

080051c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	607a      	str	r2, [r7, #4]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	460b      	mov	r3, r1
 80051d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d006      	beq.n	8005202 <I2C_MasterRequestRead+0x3a>
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d003      	beq.n	8005202 <I2C_MasterRequestRead+0x3a>
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005200:	d108      	bne.n	8005214 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	e00b      	b.n	800522c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	2b11      	cmp	r3, #17
 800521a:	d107      	bne.n	800522c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800522a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f891 	bl	8005360 <I2C_WaitOnFlagUntilTimeout>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00c      	beq.n	800525e <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005258:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e078      	b.n	8005350 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005266:	d108      	bne.n	800527a <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005268:	897b      	ldrh	r3, [r7, #10]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	b2da      	uxtb	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	611a      	str	r2, [r3, #16]
 8005278:	e05e      	b.n	8005338 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800527a:	897b      	ldrh	r3, [r7, #10]
 800527c:	11db      	asrs	r3, r3, #7
 800527e:	b2db      	uxtb	r3, r3
 8005280:	f003 0306 	and.w	r3, r3, #6
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f063 030f 	orn	r3, r3, #15
 800528a:	b2da      	uxtb	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	4930      	ldr	r1, [pc, #192]	; (8005358 <I2C_MasterRequestRead+0x190>)
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f8b8 	bl	800540e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e053      	b.n	8005350 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052a8:	897b      	ldrh	r3, [r7, #10]
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4929      	ldr	r1, [pc, #164]	; (800535c <I2C_MasterRequestRead+0x194>)
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f8a8 	bl	800540e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e043      	b.n	8005350 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c8:	2300      	movs	r3, #0
 80052ca:	613b      	str	r3, [r7, #16]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ec:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f830 	bl	8005360 <I2C_WaitOnFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00c      	beq.n	8005320 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800531a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e017      	b.n	8005350 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005320:	897b      	ldrh	r3, [r7, #10]
 8005322:	11db      	asrs	r3, r3, #7
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f003 0306 	and.w	r3, r3, #6
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f063 030e 	orn	r3, r3, #14
 8005330:	b2da      	uxtb	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	4907      	ldr	r1, [pc, #28]	; (800535c <I2C_MasterRequestRead+0x194>)
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f865 	bl	800540e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	00010008 	.word	0x00010008
 800535c:	00010002 	.word	0x00010002

08005360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4613      	mov	r3, r2
 800536e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005370:	e025      	b.n	80053be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005378:	d021      	beq.n	80053be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537a:	f7fd fdef 	bl	8002f5c <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d302      	bcc.n	8005390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d116      	bne.n	80053be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f043 0220 	orr.w	r2, r3, #32
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e023      	b.n	8005406 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	0c1b      	lsrs	r3, r3, #16
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d10d      	bne.n	80053e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	43da      	mvns	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4013      	ands	r3, r2
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bf0c      	ite	eq
 80053da:	2301      	moveq	r3, #1
 80053dc:	2300      	movne	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	e00c      	b.n	80053fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	43da      	mvns	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4013      	ands	r3, r2
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	429a      	cmp	r2, r3
 8005402:	d0b6      	beq.n	8005372 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
 800541a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800541c:	e051      	b.n	80054c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542c:	d123      	bne.n	8005476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005446:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f043 0204 	orr.w	r2, r3, #4
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e046      	b.n	8005504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547c:	d021      	beq.n	80054c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547e:	f7fd fd6d 	bl	8002f5c <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	429a      	cmp	r2, r3
 800548c:	d302      	bcc.n	8005494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d116      	bne.n	80054c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	f043 0220 	orr.w	r2, r3, #32
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e020      	b.n	8005504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	0c1b      	lsrs	r3, r3, #16
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d10c      	bne.n	80054e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	43da      	mvns	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4013      	ands	r3, r2
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bf14      	ite	ne
 80054de:	2301      	movne	r3, #1
 80054e0:	2300      	moveq	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	e00b      	b.n	80054fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	43da      	mvns	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	4013      	ands	r3, r2
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bf14      	ite	ne
 80054f8:	2301      	movne	r3, #1
 80054fa:	2300      	moveq	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d18d      	bne.n	800541e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005518:	e02d      	b.n	8005576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f8ce 	bl	80056bc <I2C_IsAcknowledgeFailed>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e02d      	b.n	8005586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d021      	beq.n	8005576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005532:	f7fd fd13 	bl	8002f5c <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	429a      	cmp	r2, r3
 8005540:	d302      	bcc.n	8005548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d116      	bne.n	8005576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f043 0220 	orr.w	r2, r3, #32
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e007      	b.n	8005586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005580:	2b80      	cmp	r3, #128	; 0x80
 8005582:	d1ca      	bne.n	800551a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800559a:	e02d      	b.n	80055f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f88d 	bl	80056bc <I2C_IsAcknowledgeFailed>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e02d      	b.n	8005608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b2:	d021      	beq.n	80055f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b4:	f7fd fcd2 	bl	8002f5c <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d302      	bcc.n	80055ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d116      	bne.n	80055f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	f043 0220 	orr.w	r2, r3, #32
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e007      	b.n	8005608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b04      	cmp	r3, #4
 8005604:	d1ca      	bne.n	800559c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800561c:	e042      	b.n	80056a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b10      	cmp	r3, #16
 800562a:	d119      	bne.n	8005660 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0210 	mvn.w	r2, #16
 8005634:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e029      	b.n	80056b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005660:	f7fd fc7c 	bl	8002f5c <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	429a      	cmp	r2, r3
 800566e:	d302      	bcc.n	8005676 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d116      	bne.n	80056a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2220      	movs	r2, #32
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	f043 0220 	orr.w	r2, r3, #32
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e007      	b.n	80056b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d1b5      	bne.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d2:	d11b      	bne.n	800570c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	f043 0204 	orr.w	r2, r3, #4
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e25b      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d075      	beq.n	8005826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800573a:	4ba3      	ldr	r3, [pc, #652]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 030c 	and.w	r3, r3, #12
 8005742:	2b04      	cmp	r3, #4
 8005744:	d00c      	beq.n	8005760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005746:	4ba0      	ldr	r3, [pc, #640]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800574e:	2b08      	cmp	r3, #8
 8005750:	d112      	bne.n	8005778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005752:	4b9d      	ldr	r3, [pc, #628]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800575a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800575e:	d10b      	bne.n	8005778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005760:	4b99      	ldr	r3, [pc, #612]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d05b      	beq.n	8005824 <HAL_RCC_OscConfig+0x108>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d157      	bne.n	8005824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e236      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005780:	d106      	bne.n	8005790 <HAL_RCC_OscConfig+0x74>
 8005782:	4b91      	ldr	r3, [pc, #580]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a90      	ldr	r2, [pc, #576]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 8005788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	e01d      	b.n	80057cc <HAL_RCC_OscConfig+0xb0>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005798:	d10c      	bne.n	80057b4 <HAL_RCC_OscConfig+0x98>
 800579a:	4b8b      	ldr	r3, [pc, #556]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a8a      	ldr	r2, [pc, #552]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 80057a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	4b88      	ldr	r3, [pc, #544]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a87      	ldr	r2, [pc, #540]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 80057ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e00b      	b.n	80057cc <HAL_RCC_OscConfig+0xb0>
 80057b4:	4b84      	ldr	r3, [pc, #528]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a83      	ldr	r2, [pc, #524]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 80057ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	4b81      	ldr	r3, [pc, #516]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a80      	ldr	r2, [pc, #512]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 80057c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d013      	beq.n	80057fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d4:	f7fd fbc2 	bl	8002f5c <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057dc:	f7fd fbbe 	bl	8002f5c <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b64      	cmp	r3, #100	; 0x64
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e1fb      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ee:	4b76      	ldr	r3, [pc, #472]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0f0      	beq.n	80057dc <HAL_RCC_OscConfig+0xc0>
 80057fa:	e014      	b.n	8005826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fc:	f7fd fbae 	bl	8002f5c <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005804:	f7fd fbaa 	bl	8002f5c <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b64      	cmp	r3, #100	; 0x64
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e1e7      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005816:	4b6c      	ldr	r3, [pc, #432]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f0      	bne.n	8005804 <HAL_RCC_OscConfig+0xe8>
 8005822:	e000      	b.n	8005826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d063      	beq.n	80058fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005832:	4b65      	ldr	r3, [pc, #404]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 030c 	and.w	r3, r3, #12
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00b      	beq.n	8005856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800583e:	4b62      	ldr	r3, [pc, #392]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005846:	2b08      	cmp	r3, #8
 8005848:	d11c      	bne.n	8005884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800584a:	4b5f      	ldr	r3, [pc, #380]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d116      	bne.n	8005884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005856:	4b5c      	ldr	r3, [pc, #368]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <HAL_RCC_OscConfig+0x152>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d001      	beq.n	800586e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e1bb      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586e:	4b56      	ldr	r3, [pc, #344]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	4952      	ldr	r1, [pc, #328]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 800587e:	4313      	orrs	r3, r2
 8005880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005882:	e03a      	b.n	80058fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d020      	beq.n	80058ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800588c:	4b4f      	ldr	r3, [pc, #316]	; (80059cc <HAL_RCC_OscConfig+0x2b0>)
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005892:	f7fd fb63 	bl	8002f5c <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800589a:	f7fd fb5f 	bl	8002f5c <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e19c      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ac:	4b46      	ldr	r3, [pc, #280]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b8:	4b43      	ldr	r3, [pc, #268]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	4940      	ldr	r1, [pc, #256]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	600b      	str	r3, [r1, #0]
 80058cc:	e015      	b.n	80058fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ce:	4b3f      	ldr	r3, [pc, #252]	; (80059cc <HAL_RCC_OscConfig+0x2b0>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d4:	f7fd fb42 	bl	8002f5c <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058dc:	f7fd fb3e 	bl	8002f5c <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e17b      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ee:	4b36      	ldr	r3, [pc, #216]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f0      	bne.n	80058dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d030      	beq.n	8005968 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d016      	beq.n	800593c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800590e:	4b30      	ldr	r3, [pc, #192]	; (80059d0 <HAL_RCC_OscConfig+0x2b4>)
 8005910:	2201      	movs	r2, #1
 8005912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005914:	f7fd fb22 	bl	8002f5c <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800591c:	f7fd fb1e 	bl	8002f5c <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e15b      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800592e:	4b26      	ldr	r3, [pc, #152]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 8005930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f0      	beq.n	800591c <HAL_RCC_OscConfig+0x200>
 800593a:	e015      	b.n	8005968 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800593c:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <HAL_RCC_OscConfig+0x2b4>)
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005942:	f7fd fb0b 	bl	8002f5c <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005948:	e008      	b.n	800595c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800594a:	f7fd fb07 	bl	8002f5c <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d901      	bls.n	800595c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e144      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800595c:	4b1a      	ldr	r3, [pc, #104]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 800595e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1f0      	bne.n	800594a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 80a0 	beq.w	8005ab6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005976:	2300      	movs	r3, #0
 8005978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800597a:	4b13      	ldr	r3, [pc, #76]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10f      	bne.n	80059a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	4a0e      	ldr	r2, [pc, #56]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 8005990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005994:	6413      	str	r3, [r2, #64]	; 0x40
 8005996:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <HAL_RCC_OscConfig+0x2ac>)
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599e:	60bb      	str	r3, [r7, #8]
 80059a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059a2:	2301      	movs	r3, #1
 80059a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a6:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <HAL_RCC_OscConfig+0x2b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d121      	bne.n	80059f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059b2:	4b08      	ldr	r3, [pc, #32]	; (80059d4 <HAL_RCC_OscConfig+0x2b8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a07      	ldr	r2, [pc, #28]	; (80059d4 <HAL_RCC_OscConfig+0x2b8>)
 80059b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059be:	f7fd facd 	bl	8002f5c <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c4:	e011      	b.n	80059ea <HAL_RCC_OscConfig+0x2ce>
 80059c6:	bf00      	nop
 80059c8:	40023800 	.word	0x40023800
 80059cc:	42470000 	.word	0x42470000
 80059d0:	42470e80 	.word	0x42470e80
 80059d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d8:	f7fd fac0 	bl	8002f5c <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e0fd      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ea:	4b81      	ldr	r3, [pc, #516]	; (8005bf0 <HAL_RCC_OscConfig+0x4d4>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d106      	bne.n	8005a0c <HAL_RCC_OscConfig+0x2f0>
 80059fe:	4b7d      	ldr	r3, [pc, #500]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	4a7c      	ldr	r2, [pc, #496]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0a:	e01c      	b.n	8005a46 <HAL_RCC_OscConfig+0x32a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b05      	cmp	r3, #5
 8005a12:	d10c      	bne.n	8005a2e <HAL_RCC_OscConfig+0x312>
 8005a14:	4b77      	ldr	r3, [pc, #476]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a18:	4a76      	ldr	r2, [pc, #472]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005a1a:	f043 0304 	orr.w	r3, r3, #4
 8005a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a20:	4b74      	ldr	r3, [pc, #464]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a24:	4a73      	ldr	r2, [pc, #460]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005a26:	f043 0301 	orr.w	r3, r3, #1
 8005a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a2c:	e00b      	b.n	8005a46 <HAL_RCC_OscConfig+0x32a>
 8005a2e:	4b71      	ldr	r3, [pc, #452]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	4a70      	ldr	r2, [pc, #448]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005a34:	f023 0301 	bic.w	r3, r3, #1
 8005a38:	6713      	str	r3, [r2, #112]	; 0x70
 8005a3a:	4b6e      	ldr	r3, [pc, #440]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3e:	4a6d      	ldr	r2, [pc, #436]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005a40:	f023 0304 	bic.w	r3, r3, #4
 8005a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d015      	beq.n	8005a7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4e:	f7fd fa85 	bl	8002f5c <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a54:	e00a      	b.n	8005a6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a56:	f7fd fa81 	bl	8002f5c <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e0bc      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a6c:	4b61      	ldr	r3, [pc, #388]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0ee      	beq.n	8005a56 <HAL_RCC_OscConfig+0x33a>
 8005a78:	e014      	b.n	8005aa4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a7a:	f7fd fa6f 	bl	8002f5c <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a80:	e00a      	b.n	8005a98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a82:	f7fd fa6b 	bl	8002f5c <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e0a6      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a98:	4b56      	ldr	r3, [pc, #344]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1ee      	bne.n	8005a82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aa4:	7dfb      	ldrb	r3, [r7, #23]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d105      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aaa:	4b52      	ldr	r3, [pc, #328]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	4a51      	ldr	r2, [pc, #324]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 8092 	beq.w	8005be4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ac0:	4b4c      	ldr	r3, [pc, #304]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 030c 	and.w	r3, r3, #12
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d05c      	beq.n	8005b86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d141      	bne.n	8005b58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad4:	4b48      	ldr	r3, [pc, #288]	; (8005bf8 <HAL_RCC_OscConfig+0x4dc>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ada:	f7fd fa3f 	bl	8002f5c <HAL_GetTick>
 8005ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae2:	f7fd fa3b 	bl	8002f5c <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e078      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af4:	4b3f      	ldr	r3, [pc, #252]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1f0      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	019b      	lsls	r3, r3, #6
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	061b      	lsls	r3, r3, #24
 8005b24:	4933      	ldr	r1, [pc, #204]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b2a:	4b33      	ldr	r3, [pc, #204]	; (8005bf8 <HAL_RCC_OscConfig+0x4dc>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b30:	f7fd fa14 	bl	8002f5c <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b38:	f7fd fa10 	bl	8002f5c <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e04d      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b4a:	4b2a      	ldr	r3, [pc, #168]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0f0      	beq.n	8005b38 <HAL_RCC_OscConfig+0x41c>
 8005b56:	e045      	b.n	8005be4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b58:	4b27      	ldr	r3, [pc, #156]	; (8005bf8 <HAL_RCC_OscConfig+0x4dc>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5e:	f7fd f9fd 	bl	8002f5c <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b64:	e008      	b.n	8005b78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b66:	f7fd f9f9 	bl	8002f5c <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e036      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b78:	4b1e      	ldr	r3, [pc, #120]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1f0      	bne.n	8005b66 <HAL_RCC_OscConfig+0x44a>
 8005b84:	e02e      	b.n	8005be4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d101      	bne.n	8005b92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e029      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b92:	4b18      	ldr	r3, [pc, #96]	; (8005bf4 <HAL_RCC_OscConfig+0x4d8>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d11c      	bne.n	8005be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d115      	bne.n	8005be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bba:	4013      	ands	r3, r2
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d10d      	bne.n	8005be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d106      	bne.n	8005be0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d001      	beq.n	8005be4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40007000 	.word	0x40007000
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	42470060 	.word	0x42470060

08005bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0cc      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c10:	4b68      	ldr	r3, [pc, #416]	; (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d90c      	bls.n	8005c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1e:	4b65      	ldr	r3, [pc, #404]	; (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c26:	4b63      	ldr	r3, [pc, #396]	; (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d001      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0b8      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d020      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c50:	4b59      	ldr	r3, [pc, #356]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4a58      	ldr	r2, [pc, #352]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c68:	4b53      	ldr	r3, [pc, #332]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	4a52      	ldr	r2, [pc, #328]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c74:	4b50      	ldr	r3, [pc, #320]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	494d      	ldr	r1, [pc, #308]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d044      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d107      	bne.n	8005caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9a:	4b47      	ldr	r3, [pc, #284]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d119      	bne.n	8005cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e07f      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d003      	beq.n	8005cba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d107      	bne.n	8005cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cba:	4b3f      	ldr	r3, [pc, #252]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d109      	bne.n	8005cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e06f      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cca:	4b3b      	ldr	r3, [pc, #236]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e067      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cda:	4b37      	ldr	r3, [pc, #220]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f023 0203 	bic.w	r2, r3, #3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	4934      	ldr	r1, [pc, #208]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cec:	f7fd f936 	bl	8002f5c <HAL_GetTick>
 8005cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf4:	f7fd f932 	bl	8002f5c <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e04f      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0a:	4b2b      	ldr	r3, [pc, #172]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 020c 	and.w	r2, r3, #12
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d1eb      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d1c:	4b25      	ldr	r3, [pc, #148]	; (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 030f 	and.w	r3, r3, #15
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d20c      	bcs.n	8005d44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2a:	4b22      	ldr	r3, [pc, #136]	; (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d32:	4b20      	ldr	r3, [pc, #128]	; (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 030f 	and.w	r3, r3, #15
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d001      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e032      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d008      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d50:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4916      	ldr	r1, [pc, #88]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d009      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d6e:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	490e      	ldr	r1, [pc, #56]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d82:	f000 f821 	bl	8005dc8 <HAL_RCC_GetSysClockFreq>
 8005d86:	4601      	mov	r1, r0
 8005d88:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	091b      	lsrs	r3, r3, #4
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <HAL_RCC_ClockConfig+0x1c0>)
 8005d94:	5cd3      	ldrb	r3, [r2, r3]
 8005d96:	fa21 f303 	lsr.w	r3, r1, r3
 8005d9a:	4a09      	ldr	r2, [pc, #36]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d9e:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fd f896 	bl	8002ed4 <HAL_InitTick>

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40023c00 	.word	0x40023c00
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	080088b4 	.word	0x080088b4
 8005dc0:	20000000 	.word	0x20000000
 8005dc4:	20000004 	.word	0x20000004

08005dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	607b      	str	r3, [r7, #4]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dde:	4b50      	ldr	r3, [pc, #320]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d007      	beq.n	8005dfa <HAL_RCC_GetSysClockFreq+0x32>
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d008      	beq.n	8005e00 <HAL_RCC_GetSysClockFreq+0x38>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f040 808d 	bne.w	8005f0e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005df4:	4b4b      	ldr	r3, [pc, #300]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005df6:	60bb      	str	r3, [r7, #8]
       break;
 8005df8:	e08c      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dfa:	4b4b      	ldr	r3, [pc, #300]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x160>)
 8005dfc:	60bb      	str	r3, [r7, #8]
      break;
 8005dfe:	e089      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e00:	4b47      	ldr	r3, [pc, #284]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e0a:	4b45      	ldr	r3, [pc, #276]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d023      	beq.n	8005e5e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e16:	4b42      	ldr	r3, [pc, #264]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	099b      	lsrs	r3, r3, #6
 8005e1c:	f04f 0400 	mov.w	r4, #0
 8005e20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	ea03 0501 	and.w	r5, r3, r1
 8005e2c:	ea04 0602 	and.w	r6, r4, r2
 8005e30:	4a3d      	ldr	r2, [pc, #244]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e32:	fb02 f106 	mul.w	r1, r2, r6
 8005e36:	2200      	movs	r2, #0
 8005e38:	fb02 f205 	mul.w	r2, r2, r5
 8005e3c:	440a      	add	r2, r1
 8005e3e:	493a      	ldr	r1, [pc, #232]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e40:	fba5 0101 	umull	r0, r1, r5, r1
 8005e44:	1853      	adds	r3, r2, r1
 8005e46:	4619      	mov	r1, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f04f 0400 	mov.w	r4, #0
 8005e4e:	461a      	mov	r2, r3
 8005e50:	4623      	mov	r3, r4
 8005e52:	f7fa fcd7 	bl	8000804 <__aeabi_uldivmod>
 8005e56:	4603      	mov	r3, r0
 8005e58:	460c      	mov	r4, r1
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e049      	b.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e5e:	4b30      	ldr	r3, [pc, #192]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	099b      	lsrs	r3, r3, #6
 8005e64:	f04f 0400 	mov.w	r4, #0
 8005e68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	ea03 0501 	and.w	r5, r3, r1
 8005e74:	ea04 0602 	and.w	r6, r4, r2
 8005e78:	4629      	mov	r1, r5
 8005e7a:	4632      	mov	r2, r6
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	f04f 0400 	mov.w	r4, #0
 8005e84:	0154      	lsls	r4, r2, #5
 8005e86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e8a:	014b      	lsls	r3, r1, #5
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4622      	mov	r2, r4
 8005e90:	1b49      	subs	r1, r1, r5
 8005e92:	eb62 0206 	sbc.w	r2, r2, r6
 8005e96:	f04f 0300 	mov.w	r3, #0
 8005e9a:	f04f 0400 	mov.w	r4, #0
 8005e9e:	0194      	lsls	r4, r2, #6
 8005ea0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ea4:	018b      	lsls	r3, r1, #6
 8005ea6:	1a5b      	subs	r3, r3, r1
 8005ea8:	eb64 0402 	sbc.w	r4, r4, r2
 8005eac:	f04f 0100 	mov.w	r1, #0
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	00e2      	lsls	r2, r4, #3
 8005eb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005eba:	00d9      	lsls	r1, r3, #3
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4614      	mov	r4, r2
 8005ec0:	195b      	adds	r3, r3, r5
 8005ec2:	eb44 0406 	adc.w	r4, r4, r6
 8005ec6:	f04f 0100 	mov.w	r1, #0
 8005eca:	f04f 0200 	mov.w	r2, #0
 8005ece:	02a2      	lsls	r2, r4, #10
 8005ed0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005ed4:	0299      	lsls	r1, r3, #10
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4614      	mov	r4, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	4621      	mov	r1, r4
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f04f 0400 	mov.w	r4, #0
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	4623      	mov	r3, r4
 8005ee8:	f7fa fc8c 	bl	8000804 <__aeabi_uldivmod>
 8005eec:	4603      	mov	r3, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ef2:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	0c1b      	lsrs	r3, r3, #16
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	3301      	adds	r3, #1
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0a:	60bb      	str	r3, [r7, #8]
      break;
 8005f0c:	e002      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005f10:	60bb      	str	r3, [r7, #8]
      break;
 8005f12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f14:	68bb      	ldr	r3, [r7, #8]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40023800 	.word	0x40023800
 8005f24:	00f42400 	.word	0x00f42400
 8005f28:	00b71b00 	.word	0x00b71b00

08005f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f30:	4b03      	ldr	r3, [pc, #12]	; (8005f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f32:	681b      	ldr	r3, [r3, #0]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	20000000 	.word	0x20000000

08005f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f48:	f7ff fff0 	bl	8005f2c <HAL_RCC_GetHCLKFreq>
 8005f4c:	4601      	mov	r1, r0
 8005f4e:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	0a9b      	lsrs	r3, r3, #10
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	4a03      	ldr	r2, [pc, #12]	; (8005f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f5a:	5cd3      	ldrb	r3, [r2, r3]
 8005f5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40023800 	.word	0x40023800
 8005f68:	080088c4 	.word	0x080088c4

08005f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f70:	f7ff ffdc 	bl	8005f2c <HAL_RCC_GetHCLKFreq>
 8005f74:	4601      	mov	r1, r0
 8005f76:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	0b5b      	lsrs	r3, r3, #13
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	4a03      	ldr	r2, [pc, #12]	; (8005f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f82:	5cd3      	ldrb	r3, [r2, r3]
 8005f84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	080088c4 	.word	0x080088c4

08005f94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e056      	b.n	8006054 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fc fc43 	bl	800284c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fdc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	ea42 0103 	orr.w	r1, r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	0c1b      	lsrs	r3, r3, #16
 8006024:	f003 0104 	and.w	r1, r3, #4
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69da      	ldr	r2, [r3, #28]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006042:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006076:	2b01      	cmp	r3, #1
 8006078:	d101      	bne.n	800607e <HAL_SPI_Transmit+0x22>
 800607a:	2302      	movs	r3, #2
 800607c:	e11e      	b.n	80062bc <HAL_SPI_Transmit+0x260>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006086:	f7fc ff69 	bl	8002f5c <HAL_GetTick>
 800608a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800608c:	88fb      	ldrh	r3, [r7, #6]
 800608e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	d002      	beq.n	80060a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800609c:	2302      	movs	r3, #2
 800609e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060a0:	e103      	b.n	80062aa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_SPI_Transmit+0x52>
 80060a8:	88fb      	ldrh	r3, [r7, #6]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d102      	bne.n	80060b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060b2:	e0fa      	b.n	80062aa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2203      	movs	r2, #3
 80060b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	88fa      	ldrh	r2, [r7, #6]
 80060cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	88fa      	ldrh	r2, [r7, #6]
 80060d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060fa:	d107      	bne.n	800610c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800610a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	d007      	beq.n	800612a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006128:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006132:	d14b      	bne.n	80061cc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <HAL_SPI_Transmit+0xe6>
 800613c:	8afb      	ldrh	r3, [r7, #22]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d13e      	bne.n	80061c0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	881a      	ldrh	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	1c9a      	adds	r2, r3, #2
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006166:	e02b      	b.n	80061c0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b02      	cmp	r3, #2
 8006174:	d112      	bne.n	800619c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	881a      	ldrh	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006186:	1c9a      	adds	r2, r3, #2
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	86da      	strh	r2, [r3, #54]	; 0x36
 800619a:	e011      	b.n	80061c0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800619c:	f7fc fede 	bl	8002f5c <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d803      	bhi.n	80061b4 <HAL_SPI_Transmit+0x158>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d102      	bne.n	80061ba <HAL_SPI_Transmit+0x15e>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d102      	bne.n	80061c0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061be:	e074      	b.n	80062aa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1ce      	bne.n	8006168 <HAL_SPI_Transmit+0x10c>
 80061ca:	e04c      	b.n	8006266 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_SPI_Transmit+0x17e>
 80061d4:	8afb      	ldrh	r3, [r7, #22]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d140      	bne.n	800625c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	7812      	ldrb	r2, [r2, #0]
 80061e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006200:	e02c      	b.n	800625c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b02      	cmp	r3, #2
 800620e:	d113      	bne.n	8006238 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	330c      	adds	r3, #12
 800621a:	7812      	ldrb	r2, [r2, #0]
 800621c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b29a      	uxth	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	86da      	strh	r2, [r3, #54]	; 0x36
 8006236:	e011      	b.n	800625c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006238:	f7fc fe90 	bl	8002f5c <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	d803      	bhi.n	8006250 <HAL_SPI_Transmit+0x1f4>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624e:	d102      	bne.n	8006256 <HAL_SPI_Transmit+0x1fa>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d102      	bne.n	800625c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	77fb      	strb	r3, [r7, #31]
          goto error;
 800625a:	e026      	b.n	80062aa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1cd      	bne.n	8006202 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 fba4 	bl	80069b8 <SPI_EndRxTxTransaction>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2220      	movs	r2, #32
 800627a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10a      	bne.n	800629a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006284:	2300      	movs	r3, #0
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	77fb      	strb	r3, [r7, #31]
 80062a6:	e000      	b.n	80062aa <HAL_SPI_Transmit+0x24e>
  }

error:
 80062a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3720      	adds	r7, #32
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	4613      	mov	r3, r2
 80062d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062e0:	d112      	bne.n	8006308 <HAL_SPI_Receive+0x44>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10e      	bne.n	8006308 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2204      	movs	r2, #4
 80062ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80062f2:	88fa      	ldrh	r2, [r7, #6]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	4613      	mov	r3, r2
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f8e9 	bl	80064d6 <HAL_SPI_TransmitReceive>
 8006304:	4603      	mov	r3, r0
 8006306:	e0e2      	b.n	80064ce <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <HAL_SPI_Receive+0x52>
 8006312:	2302      	movs	r3, #2
 8006314:	e0db      	b.n	80064ce <HAL_SPI_Receive+0x20a>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800631e:	f7fc fe1d 	bl	8002f5c <HAL_GetTick>
 8006322:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b01      	cmp	r3, #1
 800632e:	d002      	beq.n	8006336 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006330:	2302      	movs	r3, #2
 8006332:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006334:	e0c2      	b.n	80064bc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_SPI_Receive+0x7e>
 800633c:	88fb      	ldrh	r3, [r7, #6]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d102      	bne.n	8006348 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006346:	e0b9      	b.n	80064bc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2204      	movs	r2, #4
 800634c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	88fa      	ldrh	r2, [r7, #6]
 8006360:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	88fa      	ldrh	r2, [r7, #6]
 8006366:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800638e:	d107      	bne.n	80063a0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800639e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063aa:	2b40      	cmp	r3, #64	; 0x40
 80063ac:	d007      	beq.n	80063be <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d162      	bne.n	800648c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063c6:	e02e      	b.n	8006426 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d115      	bne.n	8006402 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f103 020c 	add.w	r2, r3, #12
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e2:	7812      	ldrb	r2, [r2, #0]
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006400:	e011      	b.n	8006426 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006402:	f7fc fdab 	bl	8002f5c <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d803      	bhi.n	800641a <HAL_SPI_Receive+0x156>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006418:	d102      	bne.n	8006420 <HAL_SPI_Receive+0x15c>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d102      	bne.n	8006426 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006424:	e04a      	b.n	80064bc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800642a:	b29b      	uxth	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1cb      	bne.n	80063c8 <HAL_SPI_Receive+0x104>
 8006430:	e031      	b.n	8006496 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b01      	cmp	r3, #1
 800643e:	d113      	bne.n	8006468 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	b292      	uxth	r2, r2
 800644c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	1c9a      	adds	r2, r3, #2
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006466:	e011      	b.n	800648c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006468:	f7fc fd78 	bl	8002f5c <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d803      	bhi.n	8006480 <HAL_SPI_Receive+0x1bc>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647e:	d102      	bne.n	8006486 <HAL_SPI_Receive+0x1c2>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d102      	bne.n	800648c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	75fb      	strb	r3, [r7, #23]
          goto error;
 800648a:	e017      	b.n	80064bc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1cd      	bne.n	8006432 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 fa27 	bl	80068ee <SPI_EndRxTransaction>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2220      	movs	r2, #32
 80064aa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	75fb      	strb	r3, [r7, #23]
 80064b8:	e000      	b.n	80064bc <HAL_SPI_Receive+0x1f8>
  }

error :
 80064ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b08c      	sub	sp, #48	; 0x30
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064e4:	2301      	movs	r3, #1
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_SPI_TransmitReceive+0x26>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e18a      	b.n	8006812 <HAL_SPI_TransmitReceive+0x33c>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006504:	f7fc fd2a 	bl	8002f5c <HAL_GetTick>
 8006508:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800651a:	887b      	ldrh	r3, [r7, #2]
 800651c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800651e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006522:	2b01      	cmp	r3, #1
 8006524:	d00f      	beq.n	8006546 <HAL_SPI_TransmitReceive+0x70>
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800652c:	d107      	bne.n	800653e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d103      	bne.n	800653e <HAL_SPI_TransmitReceive+0x68>
 8006536:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800653a:	2b04      	cmp	r3, #4
 800653c:	d003      	beq.n	8006546 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800653e:	2302      	movs	r3, #2
 8006540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006544:	e15b      	b.n	80067fe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d005      	beq.n	8006558 <HAL_SPI_TransmitReceive+0x82>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <HAL_SPI_TransmitReceive+0x82>
 8006552:	887b      	ldrh	r3, [r7, #2]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d103      	bne.n	8006560 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800655e:	e14e      	b.n	80067fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b04      	cmp	r3, #4
 800656a:	d003      	beq.n	8006574 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2205      	movs	r2, #5
 8006570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	887a      	ldrh	r2, [r7, #2]
 8006584:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	887a      	ldrh	r2, [r7, #2]
 800658a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	887a      	ldrh	r2, [r7, #2]
 8006596:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	887a      	ldrh	r2, [r7, #2]
 800659c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b4:	2b40      	cmp	r3, #64	; 0x40
 80065b6:	d007      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065d0:	d178      	bne.n	80066c4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <HAL_SPI_TransmitReceive+0x10a>
 80065da:	8b7b      	ldrh	r3, [r7, #26]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d166      	bne.n	80066ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	881a      	ldrh	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	1c9a      	adds	r2, r3, #2
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006604:	e053      	b.n	80066ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b02      	cmp	r3, #2
 8006612:	d11b      	bne.n	800664c <HAL_SPI_TransmitReceive+0x176>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d016      	beq.n	800664c <HAL_SPI_TransmitReceive+0x176>
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	2b01      	cmp	r3, #1
 8006622:	d113      	bne.n	800664c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006628:	881a      	ldrh	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	1c9a      	adds	r2, r3, #2
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b01      	cmp	r3, #1
 8006658:	d119      	bne.n	800668e <HAL_SPI_TransmitReceive+0x1b8>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800665e:	b29b      	uxth	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d014      	beq.n	800668e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	b292      	uxth	r2, r2
 8006670:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	1c9a      	adds	r2, r3, #2
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800668a:	2301      	movs	r3, #1
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800668e:	f7fc fc65 	bl	8002f5c <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800669a:	429a      	cmp	r2, r3
 800669c:	d807      	bhi.n	80066ae <HAL_SPI_TransmitReceive+0x1d8>
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a4:	d003      	beq.n	80066ae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80066ac:	e0a7      	b.n	80067fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1a6      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x130>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1a1      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x130>
 80066c2:	e07c      	b.n	80067be <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <HAL_SPI_TransmitReceive+0x1fc>
 80066cc:	8b7b      	ldrh	r3, [r7, #26]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d16b      	bne.n	80067aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	330c      	adds	r3, #12
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066f8:	e057      	b.n	80067aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b02      	cmp	r3, #2
 8006706:	d11c      	bne.n	8006742 <HAL_SPI_TransmitReceive+0x26c>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d017      	beq.n	8006742 <HAL_SPI_TransmitReceive+0x26c>
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d114      	bne.n	8006742 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	330c      	adds	r3, #12
 8006722:	7812      	ldrb	r2, [r2, #0]
 8006724:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006734:	b29b      	uxth	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b01      	cmp	r3, #1
 800674e:	d119      	bne.n	8006784 <HAL_SPI_TransmitReceive+0x2ae>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d014      	beq.n	8006784 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006780:	2301      	movs	r3, #1
 8006782:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006784:	f7fc fbea 	bl	8002f5c <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006790:	429a      	cmp	r2, r3
 8006792:	d803      	bhi.n	800679c <HAL_SPI_TransmitReceive+0x2c6>
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d102      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x2cc>
 800679c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d103      	bne.n	80067aa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80067a8:	e029      	b.n	80067fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1a2      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x224>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d19d      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 f8f8 	bl	80069b8 <SPI_EndRxTxTransaction>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d006      	beq.n	80067dc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80067da:	e010      	b.n	80067fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10b      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	e000      	b.n	80067fe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80067fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800680e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006812:	4618      	mov	r0, r3
 8006814:	3730      	adds	r7, #48	; 0x30
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	603b      	str	r3, [r7, #0]
 8006826:	4613      	mov	r3, r2
 8006828:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800682a:	e04c      	b.n	80068c6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006832:	d048      	beq.n	80068c6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006834:	f7fc fb92 	bl	8002f5c <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	429a      	cmp	r2, r3
 8006842:	d902      	bls.n	800684a <SPI_WaitFlagStateUntilTimeout+0x30>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d13d      	bne.n	80068c6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006858:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006862:	d111      	bne.n	8006888 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800686c:	d004      	beq.n	8006878 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006876:	d107      	bne.n	8006888 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006886:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006890:	d10f      	bne.n	80068b2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e00f      	b.n	80068e6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4013      	ands	r3, r2
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	bf0c      	ite	eq
 80068d6:	2301      	moveq	r3, #1
 80068d8:	2300      	movne	r3, #0
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d1a3      	bne.n	800682c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b086      	sub	sp, #24
 80068f2:	af02      	add	r7, sp, #8
 80068f4:	60f8      	str	r0, [r7, #12]
 80068f6:	60b9      	str	r1, [r7, #8]
 80068f8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006902:	d111      	bne.n	8006928 <SPI_EndRxTransaction+0x3a>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800690c:	d004      	beq.n	8006918 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006916:	d107      	bne.n	8006928 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006926:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006930:	d12a      	bne.n	8006988 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800693a:	d012      	beq.n	8006962 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2200      	movs	r2, #0
 8006944:	2180      	movs	r1, #128	; 0x80
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f7ff ff67 	bl	800681a <SPI_WaitFlagStateUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d02d      	beq.n	80069ae <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006956:	f043 0220 	orr.w	r2, r3, #32
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e026      	b.n	80069b0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2200      	movs	r2, #0
 800696a:	2101      	movs	r1, #1
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f7ff ff54 	bl	800681a <SPI_WaitFlagStateUntilTimeout>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01a      	beq.n	80069ae <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697c:	f043 0220 	orr.w	r2, r3, #32
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e013      	b.n	80069b0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2200      	movs	r2, #0
 8006990:	2101      	movs	r1, #1
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f7ff ff41 	bl	800681a <SPI_WaitFlagStateUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d007      	beq.n	80069ae <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a2:	f043 0220 	orr.w	r2, r3, #32
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e000      	b.n	80069b0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af02      	add	r7, sp, #8
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069c4:	4b1b      	ldr	r3, [pc, #108]	; (8006a34 <SPI_EndRxTxTransaction+0x7c>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1b      	ldr	r2, [pc, #108]	; (8006a38 <SPI_EndRxTxTransaction+0x80>)
 80069ca:	fba2 2303 	umull	r2, r3, r2, r3
 80069ce:	0d5b      	lsrs	r3, r3, #21
 80069d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069d4:	fb02 f303 	mul.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069e2:	d112      	bne.n	8006a0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2200      	movs	r2, #0
 80069ec:	2180      	movs	r1, #128	; 0x80
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f7ff ff13 	bl	800681a <SPI_WaitFlagStateUntilTimeout>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d016      	beq.n	8006a28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fe:	f043 0220 	orr.w	r2, r3, #32
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e00f      	b.n	8006a2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00a      	beq.n	8006a26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a20:	2b80      	cmp	r3, #128	; 0x80
 8006a22:	d0f2      	beq.n	8006a0a <SPI_EndRxTxTransaction+0x52>
 8006a24:	e000      	b.n	8006a28 <SPI_EndRxTxTransaction+0x70>
        break;
 8006a26:	bf00      	nop
  }

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000000 	.word	0x20000000
 8006a38:	165e9f81 	.word	0x165e9f81

08006a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e01d      	b.n	8006a8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fc f804 	bl	8002a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	f000 fb56 	bl	800712c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b085      	sub	sp, #20
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0201 	orr.w	r2, r2, #1
 8006aa8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b06      	cmp	r3, #6
 8006aba:	d007      	beq.n	8006acc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e01d      	b.n	8006b28 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d106      	bne.n	8006b06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7fb ff69 	bl	80029d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3304      	adds	r3, #4
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f000 fb07 	bl	800712c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fd42 	bl	80075cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a15      	ldr	r2, [pc, #84]	; (8006ba4 <HAL_TIM_PWM_Start+0x74>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d004      	beq.n	8006b5c <HAL_TIM_PWM_Start+0x2c>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a14      	ldr	r2, [pc, #80]	; (8006ba8 <HAL_TIM_PWM_Start+0x78>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d101      	bne.n	8006b60 <HAL_TIM_PWM_Start+0x30>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e000      	b.n	8006b62 <HAL_TIM_PWM_Start+0x32>
 8006b60:	2300      	movs	r3, #0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d007      	beq.n	8006b76 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b06      	cmp	r3, #6
 8006b86:	d007      	beq.n	8006b98 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0201 	orr.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	40010000 	.word	0x40010000
 8006ba8:	40010400 	.word	0x40010400

08006bac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e083      	b.n	8006cc8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7fb fe81 	bl	80028dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bf0:	f023 0307 	bic.w	r3, r3, #7
 8006bf4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4610      	mov	r0, r2
 8006c02:	f000 fa93 	bl	800712c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c2e:	f023 0303 	bic.w	r3, r3, #3
 8006c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	021b      	lsls	r3, r3, #8
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006c4c:	f023 030c 	bic.w	r3, r3, #12
 8006c50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	021b      	lsls	r3, r3, #8
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	011a      	lsls	r2, r3, #4
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	031b      	lsls	r3, r3, #12
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006c8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006c92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <HAL_TIM_Encoder_Start+0x16>
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d008      	beq.n	8006cf6 <HAL_TIM_Encoder_Start+0x26>
 8006ce4:	e00f      	b.n	8006d06 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2201      	movs	r2, #1
 8006cec:	2100      	movs	r1, #0
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fc6c 	bl	80075cc <TIM_CCxChannelCmd>
      break;
 8006cf4:	e016      	b.n	8006d24 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	2104      	movs	r1, #4
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fc64 	bl	80075cc <TIM_CCxChannelCmd>
      break;
 8006d04:	e00e      	b.n	8006d24 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fc5c 	bl	80075cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	2104      	movs	r1, #4
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 fc55 	bl	80075cc <TIM_CCxChannelCmd>
      break;
 8006d22:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b082      	sub	sp, #8
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d122      	bne.n	8006d9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d11b      	bne.n	8006d9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f06f 0202 	mvn.w	r2, #2
 8006d6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	f003 0303 	and.w	r3, r3, #3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f9b5 	bl	80070f0 <HAL_TIM_IC_CaptureCallback>
 8006d86:	e005      	b.n	8006d94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f9a7 	bl	80070dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f9b8 	bl	8007104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d122      	bne.n	8006dee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f003 0304 	and.w	r3, r3, #4
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d11b      	bne.n	8006dee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f06f 0204 	mvn.w	r2, #4
 8006dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f98b 	bl	80070f0 <HAL_TIM_IC_CaptureCallback>
 8006dda:	e005      	b.n	8006de8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f97d 	bl	80070dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f98e 	bl	8007104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f003 0308 	and.w	r3, r3, #8
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d122      	bne.n	8006e42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f003 0308 	and.w	r3, r3, #8
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d11b      	bne.n	8006e42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f06f 0208 	mvn.w	r2, #8
 8006e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2204      	movs	r2, #4
 8006e18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f961 	bl	80070f0 <HAL_TIM_IC_CaptureCallback>
 8006e2e:	e005      	b.n	8006e3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f953 	bl	80070dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f964 	bl	8007104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b10      	cmp	r3, #16
 8006e4e:	d122      	bne.n	8006e96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f003 0310 	and.w	r3, r3, #16
 8006e5a:	2b10      	cmp	r3, #16
 8006e5c:	d11b      	bne.n	8006e96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f06f 0210 	mvn.w	r2, #16
 8006e66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2208      	movs	r2, #8
 8006e6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f937 	bl	80070f0 <HAL_TIM_IC_CaptureCallback>
 8006e82:	e005      	b.n	8006e90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f929 	bl	80070dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f93a 	bl	8007104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d10e      	bne.n	8006ec2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d107      	bne.n	8006ec2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f06f 0201 	mvn.w	r2, #1
 8006eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7fa fb83 	bl	80015c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ecc:	2b80      	cmp	r3, #128	; 0x80
 8006ece:	d10e      	bne.n	8006eee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eda:	2b80      	cmp	r3, #128	; 0x80
 8006edc:	d107      	bne.n	8006eee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fc1b 	bl	8007724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b40      	cmp	r3, #64	; 0x40
 8006efa:	d10e      	bne.n	8006f1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f06:	2b40      	cmp	r3, #64	; 0x40
 8006f08:	d107      	bne.n	8006f1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f8ff 	bl	8007118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f003 0320 	and.w	r3, r3, #32
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d10e      	bne.n	8006f46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	d107      	bne.n	8006f46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f06f 0220 	mvn.w	r2, #32
 8006f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fbe5 	bl	8007710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f46:	bf00      	nop
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d101      	bne.n	8006f6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006f66:	2302      	movs	r3, #2
 8006f68:	e0b4      	b.n	80070d4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2202      	movs	r2, #2
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b0c      	cmp	r3, #12
 8006f7e:	f200 809f 	bhi.w	80070c0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006f82:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f88:	08006fbd 	.word	0x08006fbd
 8006f8c:	080070c1 	.word	0x080070c1
 8006f90:	080070c1 	.word	0x080070c1
 8006f94:	080070c1 	.word	0x080070c1
 8006f98:	08006ffd 	.word	0x08006ffd
 8006f9c:	080070c1 	.word	0x080070c1
 8006fa0:	080070c1 	.word	0x080070c1
 8006fa4:	080070c1 	.word	0x080070c1
 8006fa8:	0800703f 	.word	0x0800703f
 8006fac:	080070c1 	.word	0x080070c1
 8006fb0:	080070c1 	.word	0x080070c1
 8006fb4:	080070c1 	.word	0x080070c1
 8006fb8:	0800707f 	.word	0x0800707f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 f952 	bl	800726c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699a      	ldr	r2, [r3, #24]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0208 	orr.w	r2, r2, #8
 8006fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	699a      	ldr	r2, [r3, #24]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0204 	bic.w	r2, r2, #4
 8006fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6999      	ldr	r1, [r3, #24]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	691a      	ldr	r2, [r3, #16]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	619a      	str	r2, [r3, #24]
      break;
 8006ffa:	e062      	b.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	4618      	mov	r0, r3
 8007004:	f000 f9a2 	bl	800734c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699a      	ldr	r2, [r3, #24]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6999      	ldr	r1, [r3, #24]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	021a      	lsls	r2, r3, #8
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	619a      	str	r2, [r3, #24]
      break;
 800703c:	e041      	b.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 f9f7 	bl	8007438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69da      	ldr	r2, [r3, #28]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f042 0208 	orr.w	r2, r2, #8
 8007058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0204 	bic.w	r2, r2, #4
 8007068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69d9      	ldr	r1, [r3, #28]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	691a      	ldr	r2, [r3, #16]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	61da      	str	r2, [r3, #28]
      break;
 800707c:	e021      	b.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68b9      	ldr	r1, [r7, #8]
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fa4b 	bl	8007520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69da      	ldr	r2, [r3, #28]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69da      	ldr	r2, [r3, #28]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69d9      	ldr	r1, [r3, #28]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	021a      	lsls	r2, r3, #8
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	61da      	str	r2, [r3, #28]
      break;
 80070be:	e000      	b.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80070c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a40      	ldr	r2, [pc, #256]	; (8007240 <TIM_Base_SetConfig+0x114>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d013      	beq.n	800716c <TIM_Base_SetConfig+0x40>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800714a:	d00f      	beq.n	800716c <TIM_Base_SetConfig+0x40>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a3d      	ldr	r2, [pc, #244]	; (8007244 <TIM_Base_SetConfig+0x118>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00b      	beq.n	800716c <TIM_Base_SetConfig+0x40>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a3c      	ldr	r2, [pc, #240]	; (8007248 <TIM_Base_SetConfig+0x11c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d007      	beq.n	800716c <TIM_Base_SetConfig+0x40>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a3b      	ldr	r2, [pc, #236]	; (800724c <TIM_Base_SetConfig+0x120>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d003      	beq.n	800716c <TIM_Base_SetConfig+0x40>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a3a      	ldr	r2, [pc, #232]	; (8007250 <TIM_Base_SetConfig+0x124>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d108      	bne.n	800717e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a2f      	ldr	r2, [pc, #188]	; (8007240 <TIM_Base_SetConfig+0x114>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d02b      	beq.n	80071de <TIM_Base_SetConfig+0xb2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718c:	d027      	beq.n	80071de <TIM_Base_SetConfig+0xb2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a2c      	ldr	r2, [pc, #176]	; (8007244 <TIM_Base_SetConfig+0x118>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d023      	beq.n	80071de <TIM_Base_SetConfig+0xb2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a2b      	ldr	r2, [pc, #172]	; (8007248 <TIM_Base_SetConfig+0x11c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d01f      	beq.n	80071de <TIM_Base_SetConfig+0xb2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a2a      	ldr	r2, [pc, #168]	; (800724c <TIM_Base_SetConfig+0x120>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d01b      	beq.n	80071de <TIM_Base_SetConfig+0xb2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a29      	ldr	r2, [pc, #164]	; (8007250 <TIM_Base_SetConfig+0x124>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d017      	beq.n	80071de <TIM_Base_SetConfig+0xb2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a28      	ldr	r2, [pc, #160]	; (8007254 <TIM_Base_SetConfig+0x128>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d013      	beq.n	80071de <TIM_Base_SetConfig+0xb2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a27      	ldr	r2, [pc, #156]	; (8007258 <TIM_Base_SetConfig+0x12c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00f      	beq.n	80071de <TIM_Base_SetConfig+0xb2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a26      	ldr	r2, [pc, #152]	; (800725c <TIM_Base_SetConfig+0x130>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d00b      	beq.n	80071de <TIM_Base_SetConfig+0xb2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a25      	ldr	r2, [pc, #148]	; (8007260 <TIM_Base_SetConfig+0x134>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d007      	beq.n	80071de <TIM_Base_SetConfig+0xb2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a24      	ldr	r2, [pc, #144]	; (8007264 <TIM_Base_SetConfig+0x138>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d003      	beq.n	80071de <TIM_Base_SetConfig+0xb2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a23      	ldr	r2, [pc, #140]	; (8007268 <TIM_Base_SetConfig+0x13c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d108      	bne.n	80071f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a0a      	ldr	r2, [pc, #40]	; (8007240 <TIM_Base_SetConfig+0x114>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d003      	beq.n	8007224 <TIM_Base_SetConfig+0xf8>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a0c      	ldr	r2, [pc, #48]	; (8007250 <TIM_Base_SetConfig+0x124>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d103      	bne.n	800722c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	615a      	str	r2, [r3, #20]
}
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40010000 	.word	0x40010000
 8007244:	40000400 	.word	0x40000400
 8007248:	40000800 	.word	0x40000800
 800724c:	40000c00 	.word	0x40000c00
 8007250:	40010400 	.word	0x40010400
 8007254:	40014000 	.word	0x40014000
 8007258:	40014400 	.word	0x40014400
 800725c:	40014800 	.word	0x40014800
 8007260:	40001800 	.word	0x40001800
 8007264:	40001c00 	.word	0x40001c00
 8007268:	40002000 	.word	0x40002000

0800726c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f023 0201 	bic.w	r2, r3, #1
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 0303 	bic.w	r3, r3, #3
 80072a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f023 0302 	bic.w	r3, r3, #2
 80072b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a20      	ldr	r2, [pc, #128]	; (8007344 <TIM_OC1_SetConfig+0xd8>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d003      	beq.n	80072d0 <TIM_OC1_SetConfig+0x64>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a1f      	ldr	r2, [pc, #124]	; (8007348 <TIM_OC1_SetConfig+0xdc>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d10c      	bne.n	80072ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f023 0308 	bic.w	r3, r3, #8
 80072d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f023 0304 	bic.w	r3, r3, #4
 80072e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a15      	ldr	r2, [pc, #84]	; (8007344 <TIM_OC1_SetConfig+0xd8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d003      	beq.n	80072fa <TIM_OC1_SetConfig+0x8e>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a14      	ldr	r2, [pc, #80]	; (8007348 <TIM_OC1_SetConfig+0xdc>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d111      	bne.n	800731e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4313      	orrs	r3, r2
 8007312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4313      	orrs	r3, r2
 800731c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	621a      	str	r2, [r3, #32]
}
 8007338:	bf00      	nop
 800733a:	371c      	adds	r7, #28
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	40010000 	.word	0x40010000
 8007348:	40010400 	.word	0x40010400

0800734c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	f023 0210 	bic.w	r2, r3, #16
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800737a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f023 0320 	bic.w	r3, r3, #32
 8007396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a22      	ldr	r2, [pc, #136]	; (8007430 <TIM_OC2_SetConfig+0xe4>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d003      	beq.n	80073b4 <TIM_OC2_SetConfig+0x68>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a21      	ldr	r2, [pc, #132]	; (8007434 <TIM_OC2_SetConfig+0xe8>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d10d      	bne.n	80073d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a17      	ldr	r2, [pc, #92]	; (8007430 <TIM_OC2_SetConfig+0xe4>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d003      	beq.n	80073e0 <TIM_OC2_SetConfig+0x94>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a16      	ldr	r2, [pc, #88]	; (8007434 <TIM_OC2_SetConfig+0xe8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d113      	bne.n	8007408 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	4313      	orrs	r3, r2
 8007406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	621a      	str	r2, [r3, #32]
}
 8007422:	bf00      	nop
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	40010000 	.word	0x40010000
 8007434:	40010400 	.word	0x40010400

08007438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 0303 	bic.w	r3, r3, #3
 800746e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a21      	ldr	r2, [pc, #132]	; (8007518 <TIM_OC3_SetConfig+0xe0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d003      	beq.n	800749e <TIM_OC3_SetConfig+0x66>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a20      	ldr	r2, [pc, #128]	; (800751c <TIM_OC3_SetConfig+0xe4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d10d      	bne.n	80074ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a16      	ldr	r2, [pc, #88]	; (8007518 <TIM_OC3_SetConfig+0xe0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d003      	beq.n	80074ca <TIM_OC3_SetConfig+0x92>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a15      	ldr	r2, [pc, #84]	; (800751c <TIM_OC3_SetConfig+0xe4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d113      	bne.n	80074f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	621a      	str	r2, [r3, #32]
}
 800750c:	bf00      	nop
 800750e:	371c      	adds	r7, #28
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	40010000 	.word	0x40010000
 800751c:	40010400 	.word	0x40010400

08007520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800754e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	021b      	lsls	r3, r3, #8
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800756a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	031b      	lsls	r3, r3, #12
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a12      	ldr	r2, [pc, #72]	; (80075c4 <TIM_OC4_SetConfig+0xa4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d003      	beq.n	8007588 <TIM_OC4_SetConfig+0x68>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a11      	ldr	r2, [pc, #68]	; (80075c8 <TIM_OC4_SetConfig+0xa8>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d109      	bne.n	800759c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800758e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	019b      	lsls	r3, r3, #6
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	621a      	str	r2, [r3, #32]
}
 80075b6:	bf00      	nop
 80075b8:	371c      	adds	r7, #28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40010000 	.word	0x40010000
 80075c8:	40010400 	.word	0x40010400

080075cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f003 031f 	and.w	r3, r3, #31
 80075de:	2201      	movs	r2, #1
 80075e0:	fa02 f303 	lsl.w	r3, r2, r3
 80075e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a1a      	ldr	r2, [r3, #32]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	43db      	mvns	r3, r3
 80075ee:	401a      	ands	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a1a      	ldr	r2, [r3, #32]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f003 031f 	and.w	r3, r3, #31
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	fa01 f303 	lsl.w	r3, r1, r3
 8007604:	431a      	orrs	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
	...

08007618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800762c:	2302      	movs	r3, #2
 800762e:	e05a      	b.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a21      	ldr	r2, [pc, #132]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d022      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800767c:	d01d      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a1d      	ldr	r2, [pc, #116]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d018      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1b      	ldr	r2, [pc, #108]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d013      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1a      	ldr	r2, [pc, #104]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00e      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a18      	ldr	r2, [pc, #96]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d009      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a17      	ldr	r2, [pc, #92]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d004      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a15      	ldr	r2, [pc, #84]	; (800770c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d10c      	bne.n	80076d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	40010000 	.word	0x40010000
 80076f8:	40000400 	.word	0x40000400
 80076fc:	40000800 	.word	0x40000800
 8007700:	40000c00 	.word	0x40000c00
 8007704:	40010400 	.word	0x40010400
 8007708:	40014000 	.word	0x40014000
 800770c:	40001800 	.word	0x40001800

08007710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e03f      	b.n	80077ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d106      	bne.n	8007764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fb fa74 	bl	8002c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2224      	movs	r2, #36	; 0x24
 8007768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800777a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f829 	bl	80077d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	691a      	ldr	r2, [r3, #16]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	695a      	ldr	r2, [r3, #20]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2220      	movs	r2, #32
 80077c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
	...

080077d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	431a      	orrs	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	431a      	orrs	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	4313      	orrs	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007816:	f023 030c 	bic.w	r3, r3, #12
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	6812      	ldr	r2, [r2, #0]
 800781e:	68f9      	ldr	r1, [r7, #12]
 8007820:	430b      	orrs	r3, r1
 8007822:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007842:	f040 818b 	bne.w	8007b5c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4ac1      	ldr	r2, [pc, #772]	; (8007b50 <UART_SetConfig+0x37c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d005      	beq.n	800785c <UART_SetConfig+0x88>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4abf      	ldr	r2, [pc, #764]	; (8007b54 <UART_SetConfig+0x380>)
 8007856:	4293      	cmp	r3, r2
 8007858:	f040 80bd 	bne.w	80079d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800785c:	f7fe fb86 	bl	8005f6c <HAL_RCC_GetPCLK2Freq>
 8007860:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	461d      	mov	r5, r3
 8007866:	f04f 0600 	mov.w	r6, #0
 800786a:	46a8      	mov	r8, r5
 800786c:	46b1      	mov	r9, r6
 800786e:	eb18 0308 	adds.w	r3, r8, r8
 8007872:	eb49 0409 	adc.w	r4, r9, r9
 8007876:	4698      	mov	r8, r3
 8007878:	46a1      	mov	r9, r4
 800787a:	eb18 0805 	adds.w	r8, r8, r5
 800787e:	eb49 0906 	adc.w	r9, r9, r6
 8007882:	f04f 0100 	mov.w	r1, #0
 8007886:	f04f 0200 	mov.w	r2, #0
 800788a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800788e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007892:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007896:	4688      	mov	r8, r1
 8007898:	4691      	mov	r9, r2
 800789a:	eb18 0005 	adds.w	r0, r8, r5
 800789e:	eb49 0106 	adc.w	r1, r9, r6
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	461d      	mov	r5, r3
 80078a8:	f04f 0600 	mov.w	r6, #0
 80078ac:	196b      	adds	r3, r5, r5
 80078ae:	eb46 0406 	adc.w	r4, r6, r6
 80078b2:	461a      	mov	r2, r3
 80078b4:	4623      	mov	r3, r4
 80078b6:	f7f8 ffa5 	bl	8000804 <__aeabi_uldivmod>
 80078ba:	4603      	mov	r3, r0
 80078bc:	460c      	mov	r4, r1
 80078be:	461a      	mov	r2, r3
 80078c0:	4ba5      	ldr	r3, [pc, #660]	; (8007b58 <UART_SetConfig+0x384>)
 80078c2:	fba3 2302 	umull	r2, r3, r3, r2
 80078c6:	095b      	lsrs	r3, r3, #5
 80078c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	461d      	mov	r5, r3
 80078d0:	f04f 0600 	mov.w	r6, #0
 80078d4:	46a9      	mov	r9, r5
 80078d6:	46b2      	mov	sl, r6
 80078d8:	eb19 0309 	adds.w	r3, r9, r9
 80078dc:	eb4a 040a 	adc.w	r4, sl, sl
 80078e0:	4699      	mov	r9, r3
 80078e2:	46a2      	mov	sl, r4
 80078e4:	eb19 0905 	adds.w	r9, r9, r5
 80078e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80078ec:	f04f 0100 	mov.w	r1, #0
 80078f0:	f04f 0200 	mov.w	r2, #0
 80078f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007900:	4689      	mov	r9, r1
 8007902:	4692      	mov	sl, r2
 8007904:	eb19 0005 	adds.w	r0, r9, r5
 8007908:	eb4a 0106 	adc.w	r1, sl, r6
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	461d      	mov	r5, r3
 8007912:	f04f 0600 	mov.w	r6, #0
 8007916:	196b      	adds	r3, r5, r5
 8007918:	eb46 0406 	adc.w	r4, r6, r6
 800791c:	461a      	mov	r2, r3
 800791e:	4623      	mov	r3, r4
 8007920:	f7f8 ff70 	bl	8000804 <__aeabi_uldivmod>
 8007924:	4603      	mov	r3, r0
 8007926:	460c      	mov	r4, r1
 8007928:	461a      	mov	r2, r3
 800792a:	4b8b      	ldr	r3, [pc, #556]	; (8007b58 <UART_SetConfig+0x384>)
 800792c:	fba3 1302 	umull	r1, r3, r3, r2
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	2164      	movs	r1, #100	; 0x64
 8007934:	fb01 f303 	mul.w	r3, r1, r3
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	3332      	adds	r3, #50	; 0x32
 800793e:	4a86      	ldr	r2, [pc, #536]	; (8007b58 <UART_SetConfig+0x384>)
 8007940:	fba2 2303 	umull	r2, r3, r2, r3
 8007944:	095b      	lsrs	r3, r3, #5
 8007946:	005b      	lsls	r3, r3, #1
 8007948:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800794c:	4498      	add	r8, r3
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	461d      	mov	r5, r3
 8007952:	f04f 0600 	mov.w	r6, #0
 8007956:	46a9      	mov	r9, r5
 8007958:	46b2      	mov	sl, r6
 800795a:	eb19 0309 	adds.w	r3, r9, r9
 800795e:	eb4a 040a 	adc.w	r4, sl, sl
 8007962:	4699      	mov	r9, r3
 8007964:	46a2      	mov	sl, r4
 8007966:	eb19 0905 	adds.w	r9, r9, r5
 800796a:	eb4a 0a06 	adc.w	sl, sl, r6
 800796e:	f04f 0100 	mov.w	r1, #0
 8007972:	f04f 0200 	mov.w	r2, #0
 8007976:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800797a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800797e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007982:	4689      	mov	r9, r1
 8007984:	4692      	mov	sl, r2
 8007986:	eb19 0005 	adds.w	r0, r9, r5
 800798a:	eb4a 0106 	adc.w	r1, sl, r6
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	461d      	mov	r5, r3
 8007994:	f04f 0600 	mov.w	r6, #0
 8007998:	196b      	adds	r3, r5, r5
 800799a:	eb46 0406 	adc.w	r4, r6, r6
 800799e:	461a      	mov	r2, r3
 80079a0:	4623      	mov	r3, r4
 80079a2:	f7f8 ff2f 	bl	8000804 <__aeabi_uldivmod>
 80079a6:	4603      	mov	r3, r0
 80079a8:	460c      	mov	r4, r1
 80079aa:	461a      	mov	r2, r3
 80079ac:	4b6a      	ldr	r3, [pc, #424]	; (8007b58 <UART_SetConfig+0x384>)
 80079ae:	fba3 1302 	umull	r1, r3, r3, r2
 80079b2:	095b      	lsrs	r3, r3, #5
 80079b4:	2164      	movs	r1, #100	; 0x64
 80079b6:	fb01 f303 	mul.w	r3, r1, r3
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	3332      	adds	r3, #50	; 0x32
 80079c0:	4a65      	ldr	r2, [pc, #404]	; (8007b58 <UART_SetConfig+0x384>)
 80079c2:	fba2 2303 	umull	r2, r3, r2, r3
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	f003 0207 	and.w	r2, r3, #7
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4442      	add	r2, r8
 80079d2:	609a      	str	r2, [r3, #8]
 80079d4:	e26f      	b.n	8007eb6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079d6:	f7fe fab5 	bl	8005f44 <HAL_RCC_GetPCLK1Freq>
 80079da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	461d      	mov	r5, r3
 80079e0:	f04f 0600 	mov.w	r6, #0
 80079e4:	46a8      	mov	r8, r5
 80079e6:	46b1      	mov	r9, r6
 80079e8:	eb18 0308 	adds.w	r3, r8, r8
 80079ec:	eb49 0409 	adc.w	r4, r9, r9
 80079f0:	4698      	mov	r8, r3
 80079f2:	46a1      	mov	r9, r4
 80079f4:	eb18 0805 	adds.w	r8, r8, r5
 80079f8:	eb49 0906 	adc.w	r9, r9, r6
 80079fc:	f04f 0100 	mov.w	r1, #0
 8007a00:	f04f 0200 	mov.w	r2, #0
 8007a04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a10:	4688      	mov	r8, r1
 8007a12:	4691      	mov	r9, r2
 8007a14:	eb18 0005 	adds.w	r0, r8, r5
 8007a18:	eb49 0106 	adc.w	r1, r9, r6
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	461d      	mov	r5, r3
 8007a22:	f04f 0600 	mov.w	r6, #0
 8007a26:	196b      	adds	r3, r5, r5
 8007a28:	eb46 0406 	adc.w	r4, r6, r6
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	4623      	mov	r3, r4
 8007a30:	f7f8 fee8 	bl	8000804 <__aeabi_uldivmod>
 8007a34:	4603      	mov	r3, r0
 8007a36:	460c      	mov	r4, r1
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4b47      	ldr	r3, [pc, #284]	; (8007b58 <UART_SetConfig+0x384>)
 8007a3c:	fba3 2302 	umull	r2, r3, r3, r2
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	461d      	mov	r5, r3
 8007a4a:	f04f 0600 	mov.w	r6, #0
 8007a4e:	46a9      	mov	r9, r5
 8007a50:	46b2      	mov	sl, r6
 8007a52:	eb19 0309 	adds.w	r3, r9, r9
 8007a56:	eb4a 040a 	adc.w	r4, sl, sl
 8007a5a:	4699      	mov	r9, r3
 8007a5c:	46a2      	mov	sl, r4
 8007a5e:	eb19 0905 	adds.w	r9, r9, r5
 8007a62:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a66:	f04f 0100 	mov.w	r1, #0
 8007a6a:	f04f 0200 	mov.w	r2, #0
 8007a6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a7a:	4689      	mov	r9, r1
 8007a7c:	4692      	mov	sl, r2
 8007a7e:	eb19 0005 	adds.w	r0, r9, r5
 8007a82:	eb4a 0106 	adc.w	r1, sl, r6
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	461d      	mov	r5, r3
 8007a8c:	f04f 0600 	mov.w	r6, #0
 8007a90:	196b      	adds	r3, r5, r5
 8007a92:	eb46 0406 	adc.w	r4, r6, r6
 8007a96:	461a      	mov	r2, r3
 8007a98:	4623      	mov	r3, r4
 8007a9a:	f7f8 feb3 	bl	8000804 <__aeabi_uldivmod>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	4b2c      	ldr	r3, [pc, #176]	; (8007b58 <UART_SetConfig+0x384>)
 8007aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8007aaa:	095b      	lsrs	r3, r3, #5
 8007aac:	2164      	movs	r1, #100	; 0x64
 8007aae:	fb01 f303 	mul.w	r3, r1, r3
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	00db      	lsls	r3, r3, #3
 8007ab6:	3332      	adds	r3, #50	; 0x32
 8007ab8:	4a27      	ldr	r2, [pc, #156]	; (8007b58 <UART_SetConfig+0x384>)
 8007aba:	fba2 2303 	umull	r2, r3, r2, r3
 8007abe:	095b      	lsrs	r3, r3, #5
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ac6:	4498      	add	r8, r3
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	461d      	mov	r5, r3
 8007acc:	f04f 0600 	mov.w	r6, #0
 8007ad0:	46a9      	mov	r9, r5
 8007ad2:	46b2      	mov	sl, r6
 8007ad4:	eb19 0309 	adds.w	r3, r9, r9
 8007ad8:	eb4a 040a 	adc.w	r4, sl, sl
 8007adc:	4699      	mov	r9, r3
 8007ade:	46a2      	mov	sl, r4
 8007ae0:	eb19 0905 	adds.w	r9, r9, r5
 8007ae4:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ae8:	f04f 0100 	mov.w	r1, #0
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007af4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007af8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007afc:	4689      	mov	r9, r1
 8007afe:	4692      	mov	sl, r2
 8007b00:	eb19 0005 	adds.w	r0, r9, r5
 8007b04:	eb4a 0106 	adc.w	r1, sl, r6
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	461d      	mov	r5, r3
 8007b0e:	f04f 0600 	mov.w	r6, #0
 8007b12:	196b      	adds	r3, r5, r5
 8007b14:	eb46 0406 	adc.w	r4, r6, r6
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4623      	mov	r3, r4
 8007b1c:	f7f8 fe72 	bl	8000804 <__aeabi_uldivmod>
 8007b20:	4603      	mov	r3, r0
 8007b22:	460c      	mov	r4, r1
 8007b24:	461a      	mov	r2, r3
 8007b26:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <UART_SetConfig+0x384>)
 8007b28:	fba3 1302 	umull	r1, r3, r3, r2
 8007b2c:	095b      	lsrs	r3, r3, #5
 8007b2e:	2164      	movs	r1, #100	; 0x64
 8007b30:	fb01 f303 	mul.w	r3, r1, r3
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	3332      	adds	r3, #50	; 0x32
 8007b3a:	4a07      	ldr	r2, [pc, #28]	; (8007b58 <UART_SetConfig+0x384>)
 8007b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	f003 0207 	and.w	r2, r3, #7
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4442      	add	r2, r8
 8007b4c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007b4e:	e1b2      	b.n	8007eb6 <UART_SetConfig+0x6e2>
 8007b50:	40011000 	.word	0x40011000
 8007b54:	40011400 	.word	0x40011400
 8007b58:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4ad7      	ldr	r2, [pc, #860]	; (8007ec0 <UART_SetConfig+0x6ec>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d005      	beq.n	8007b72 <UART_SetConfig+0x39e>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4ad6      	ldr	r2, [pc, #856]	; (8007ec4 <UART_SetConfig+0x6f0>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	f040 80d1 	bne.w	8007d14 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b72:	f7fe f9fb 	bl	8005f6c <HAL_RCC_GetPCLK2Freq>
 8007b76:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	469a      	mov	sl, r3
 8007b7c:	f04f 0b00 	mov.w	fp, #0
 8007b80:	46d0      	mov	r8, sl
 8007b82:	46d9      	mov	r9, fp
 8007b84:	eb18 0308 	adds.w	r3, r8, r8
 8007b88:	eb49 0409 	adc.w	r4, r9, r9
 8007b8c:	4698      	mov	r8, r3
 8007b8e:	46a1      	mov	r9, r4
 8007b90:	eb18 080a 	adds.w	r8, r8, sl
 8007b94:	eb49 090b 	adc.w	r9, r9, fp
 8007b98:	f04f 0100 	mov.w	r1, #0
 8007b9c:	f04f 0200 	mov.w	r2, #0
 8007ba0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ba4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ba8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007bac:	4688      	mov	r8, r1
 8007bae:	4691      	mov	r9, r2
 8007bb0:	eb1a 0508 	adds.w	r5, sl, r8
 8007bb4:	eb4b 0609 	adc.w	r6, fp, r9
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	f04f 0200 	mov.w	r2, #0
 8007bc2:	f04f 0300 	mov.w	r3, #0
 8007bc6:	f04f 0400 	mov.w	r4, #0
 8007bca:	0094      	lsls	r4, r2, #2
 8007bcc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bd0:	008b      	lsls	r3, r1, #2
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	4623      	mov	r3, r4
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	4631      	mov	r1, r6
 8007bda:	f7f8 fe13 	bl	8000804 <__aeabi_uldivmod>
 8007bde:	4603      	mov	r3, r0
 8007be0:	460c      	mov	r4, r1
 8007be2:	461a      	mov	r2, r3
 8007be4:	4bb8      	ldr	r3, [pc, #736]	; (8007ec8 <UART_SetConfig+0x6f4>)
 8007be6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bea:	095b      	lsrs	r3, r3, #5
 8007bec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	469b      	mov	fp, r3
 8007bf4:	f04f 0c00 	mov.w	ip, #0
 8007bf8:	46d9      	mov	r9, fp
 8007bfa:	46e2      	mov	sl, ip
 8007bfc:	eb19 0309 	adds.w	r3, r9, r9
 8007c00:	eb4a 040a 	adc.w	r4, sl, sl
 8007c04:	4699      	mov	r9, r3
 8007c06:	46a2      	mov	sl, r4
 8007c08:	eb19 090b 	adds.w	r9, r9, fp
 8007c0c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c10:	f04f 0100 	mov.w	r1, #0
 8007c14:	f04f 0200 	mov.w	r2, #0
 8007c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c24:	4689      	mov	r9, r1
 8007c26:	4692      	mov	sl, r2
 8007c28:	eb1b 0509 	adds.w	r5, fp, r9
 8007c2c:	eb4c 060a 	adc.w	r6, ip, sl
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	4619      	mov	r1, r3
 8007c36:	f04f 0200 	mov.w	r2, #0
 8007c3a:	f04f 0300 	mov.w	r3, #0
 8007c3e:	f04f 0400 	mov.w	r4, #0
 8007c42:	0094      	lsls	r4, r2, #2
 8007c44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c48:	008b      	lsls	r3, r1, #2
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	4623      	mov	r3, r4
 8007c4e:	4628      	mov	r0, r5
 8007c50:	4631      	mov	r1, r6
 8007c52:	f7f8 fdd7 	bl	8000804 <__aeabi_uldivmod>
 8007c56:	4603      	mov	r3, r0
 8007c58:	460c      	mov	r4, r1
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	4b9a      	ldr	r3, [pc, #616]	; (8007ec8 <UART_SetConfig+0x6f4>)
 8007c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c62:	095b      	lsrs	r3, r3, #5
 8007c64:	2164      	movs	r1, #100	; 0x64
 8007c66:	fb01 f303 	mul.w	r3, r1, r3
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	011b      	lsls	r3, r3, #4
 8007c6e:	3332      	adds	r3, #50	; 0x32
 8007c70:	4a95      	ldr	r2, [pc, #596]	; (8007ec8 <UART_SetConfig+0x6f4>)
 8007c72:	fba2 2303 	umull	r2, r3, r2, r3
 8007c76:	095b      	lsrs	r3, r3, #5
 8007c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c7c:	4498      	add	r8, r3
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	469b      	mov	fp, r3
 8007c82:	f04f 0c00 	mov.w	ip, #0
 8007c86:	46d9      	mov	r9, fp
 8007c88:	46e2      	mov	sl, ip
 8007c8a:	eb19 0309 	adds.w	r3, r9, r9
 8007c8e:	eb4a 040a 	adc.w	r4, sl, sl
 8007c92:	4699      	mov	r9, r3
 8007c94:	46a2      	mov	sl, r4
 8007c96:	eb19 090b 	adds.w	r9, r9, fp
 8007c9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c9e:	f04f 0100 	mov.w	r1, #0
 8007ca2:	f04f 0200 	mov.w	r2, #0
 8007ca6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007caa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cb2:	4689      	mov	r9, r1
 8007cb4:	4692      	mov	sl, r2
 8007cb6:	eb1b 0509 	adds.w	r5, fp, r9
 8007cba:	eb4c 060a 	adc.w	r6, ip, sl
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	f04f 0200 	mov.w	r2, #0
 8007cc8:	f04f 0300 	mov.w	r3, #0
 8007ccc:	f04f 0400 	mov.w	r4, #0
 8007cd0:	0094      	lsls	r4, r2, #2
 8007cd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cd6:	008b      	lsls	r3, r1, #2
 8007cd8:	461a      	mov	r2, r3
 8007cda:	4623      	mov	r3, r4
 8007cdc:	4628      	mov	r0, r5
 8007cde:	4631      	mov	r1, r6
 8007ce0:	f7f8 fd90 	bl	8000804 <__aeabi_uldivmod>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	461a      	mov	r2, r3
 8007cea:	4b77      	ldr	r3, [pc, #476]	; (8007ec8 <UART_SetConfig+0x6f4>)
 8007cec:	fba3 1302 	umull	r1, r3, r3, r2
 8007cf0:	095b      	lsrs	r3, r3, #5
 8007cf2:	2164      	movs	r1, #100	; 0x64
 8007cf4:	fb01 f303 	mul.w	r3, r1, r3
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	011b      	lsls	r3, r3, #4
 8007cfc:	3332      	adds	r3, #50	; 0x32
 8007cfe:	4a72      	ldr	r2, [pc, #456]	; (8007ec8 <UART_SetConfig+0x6f4>)
 8007d00:	fba2 2303 	umull	r2, r3, r2, r3
 8007d04:	095b      	lsrs	r3, r3, #5
 8007d06:	f003 020f 	and.w	r2, r3, #15
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4442      	add	r2, r8
 8007d10:	609a      	str	r2, [r3, #8]
 8007d12:	e0d0      	b.n	8007eb6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d14:	f7fe f916 	bl	8005f44 <HAL_RCC_GetPCLK1Freq>
 8007d18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	469a      	mov	sl, r3
 8007d1e:	f04f 0b00 	mov.w	fp, #0
 8007d22:	46d0      	mov	r8, sl
 8007d24:	46d9      	mov	r9, fp
 8007d26:	eb18 0308 	adds.w	r3, r8, r8
 8007d2a:	eb49 0409 	adc.w	r4, r9, r9
 8007d2e:	4698      	mov	r8, r3
 8007d30:	46a1      	mov	r9, r4
 8007d32:	eb18 080a 	adds.w	r8, r8, sl
 8007d36:	eb49 090b 	adc.w	r9, r9, fp
 8007d3a:	f04f 0100 	mov.w	r1, #0
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d4e:	4688      	mov	r8, r1
 8007d50:	4691      	mov	r9, r2
 8007d52:	eb1a 0508 	adds.w	r5, sl, r8
 8007d56:	eb4b 0609 	adc.w	r6, fp, r9
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	f04f 0200 	mov.w	r2, #0
 8007d64:	f04f 0300 	mov.w	r3, #0
 8007d68:	f04f 0400 	mov.w	r4, #0
 8007d6c:	0094      	lsls	r4, r2, #2
 8007d6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d72:	008b      	lsls	r3, r1, #2
 8007d74:	461a      	mov	r2, r3
 8007d76:	4623      	mov	r3, r4
 8007d78:	4628      	mov	r0, r5
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	f7f8 fd42 	bl	8000804 <__aeabi_uldivmod>
 8007d80:	4603      	mov	r3, r0
 8007d82:	460c      	mov	r4, r1
 8007d84:	461a      	mov	r2, r3
 8007d86:	4b50      	ldr	r3, [pc, #320]	; (8007ec8 <UART_SetConfig+0x6f4>)
 8007d88:	fba3 2302 	umull	r2, r3, r3, r2
 8007d8c:	095b      	lsrs	r3, r3, #5
 8007d8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	469b      	mov	fp, r3
 8007d96:	f04f 0c00 	mov.w	ip, #0
 8007d9a:	46d9      	mov	r9, fp
 8007d9c:	46e2      	mov	sl, ip
 8007d9e:	eb19 0309 	adds.w	r3, r9, r9
 8007da2:	eb4a 040a 	adc.w	r4, sl, sl
 8007da6:	4699      	mov	r9, r3
 8007da8:	46a2      	mov	sl, r4
 8007daa:	eb19 090b 	adds.w	r9, r9, fp
 8007dae:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007db2:	f04f 0100 	mov.w	r1, #0
 8007db6:	f04f 0200 	mov.w	r2, #0
 8007dba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007dc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007dc6:	4689      	mov	r9, r1
 8007dc8:	4692      	mov	sl, r2
 8007dca:	eb1b 0509 	adds.w	r5, fp, r9
 8007dce:	eb4c 060a 	adc.w	r6, ip, sl
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	f04f 0200 	mov.w	r2, #0
 8007ddc:	f04f 0300 	mov.w	r3, #0
 8007de0:	f04f 0400 	mov.w	r4, #0
 8007de4:	0094      	lsls	r4, r2, #2
 8007de6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007dea:	008b      	lsls	r3, r1, #2
 8007dec:	461a      	mov	r2, r3
 8007dee:	4623      	mov	r3, r4
 8007df0:	4628      	mov	r0, r5
 8007df2:	4631      	mov	r1, r6
 8007df4:	f7f8 fd06 	bl	8000804 <__aeabi_uldivmod>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	4b32      	ldr	r3, [pc, #200]	; (8007ec8 <UART_SetConfig+0x6f4>)
 8007e00:	fba3 1302 	umull	r1, r3, r3, r2
 8007e04:	095b      	lsrs	r3, r3, #5
 8007e06:	2164      	movs	r1, #100	; 0x64
 8007e08:	fb01 f303 	mul.w	r3, r1, r3
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	011b      	lsls	r3, r3, #4
 8007e10:	3332      	adds	r3, #50	; 0x32
 8007e12:	4a2d      	ldr	r2, [pc, #180]	; (8007ec8 <UART_SetConfig+0x6f4>)
 8007e14:	fba2 2303 	umull	r2, r3, r2, r3
 8007e18:	095b      	lsrs	r3, r3, #5
 8007e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e1e:	4498      	add	r8, r3
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	469b      	mov	fp, r3
 8007e24:	f04f 0c00 	mov.w	ip, #0
 8007e28:	46d9      	mov	r9, fp
 8007e2a:	46e2      	mov	sl, ip
 8007e2c:	eb19 0309 	adds.w	r3, r9, r9
 8007e30:	eb4a 040a 	adc.w	r4, sl, sl
 8007e34:	4699      	mov	r9, r3
 8007e36:	46a2      	mov	sl, r4
 8007e38:	eb19 090b 	adds.w	r9, r9, fp
 8007e3c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e40:	f04f 0100 	mov.w	r1, #0
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e54:	4689      	mov	r9, r1
 8007e56:	4692      	mov	sl, r2
 8007e58:	eb1b 0509 	adds.w	r5, fp, r9
 8007e5c:	eb4c 060a 	adc.w	r6, ip, sl
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	4619      	mov	r1, r3
 8007e66:	f04f 0200 	mov.w	r2, #0
 8007e6a:	f04f 0300 	mov.w	r3, #0
 8007e6e:	f04f 0400 	mov.w	r4, #0
 8007e72:	0094      	lsls	r4, r2, #2
 8007e74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e78:	008b      	lsls	r3, r1, #2
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	4623      	mov	r3, r4
 8007e7e:	4628      	mov	r0, r5
 8007e80:	4631      	mov	r1, r6
 8007e82:	f7f8 fcbf 	bl	8000804 <__aeabi_uldivmod>
 8007e86:	4603      	mov	r3, r0
 8007e88:	460c      	mov	r4, r1
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	4b0e      	ldr	r3, [pc, #56]	; (8007ec8 <UART_SetConfig+0x6f4>)
 8007e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8007e92:	095b      	lsrs	r3, r3, #5
 8007e94:	2164      	movs	r1, #100	; 0x64
 8007e96:	fb01 f303 	mul.w	r3, r1, r3
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	011b      	lsls	r3, r3, #4
 8007e9e:	3332      	adds	r3, #50	; 0x32
 8007ea0:	4a09      	ldr	r2, [pc, #36]	; (8007ec8 <UART_SetConfig+0x6f4>)
 8007ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea6:	095b      	lsrs	r3, r3, #5
 8007ea8:	f003 020f 	and.w	r2, r3, #15
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4442      	add	r2, r8
 8007eb2:	609a      	str	r2, [r3, #8]
}
 8007eb4:	e7ff      	b.n	8007eb6 <UART_SetConfig+0x6e2>
 8007eb6:	bf00      	nop
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec0:	40011000 	.word	0x40011000
 8007ec4:	40011400 	.word	0x40011400
 8007ec8:	51eb851f 	.word	0x51eb851f

08007ecc <__errno>:
 8007ecc:	4b01      	ldr	r3, [pc, #4]	; (8007ed4 <__errno+0x8>)
 8007ece:	6818      	ldr	r0, [r3, #0]
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	2000000c 	.word	0x2000000c

08007ed8 <__libc_init_array>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	4e0d      	ldr	r6, [pc, #52]	; (8007f10 <__libc_init_array+0x38>)
 8007edc:	4c0d      	ldr	r4, [pc, #52]	; (8007f14 <__libc_init_array+0x3c>)
 8007ede:	1ba4      	subs	r4, r4, r6
 8007ee0:	10a4      	asrs	r4, r4, #2
 8007ee2:	2500      	movs	r5, #0
 8007ee4:	42a5      	cmp	r5, r4
 8007ee6:	d109      	bne.n	8007efc <__libc_init_array+0x24>
 8007ee8:	4e0b      	ldr	r6, [pc, #44]	; (8007f18 <__libc_init_array+0x40>)
 8007eea:	4c0c      	ldr	r4, [pc, #48]	; (8007f1c <__libc_init_array+0x44>)
 8007eec:	f000 fc28 	bl	8008740 <_init>
 8007ef0:	1ba4      	subs	r4, r4, r6
 8007ef2:	10a4      	asrs	r4, r4, #2
 8007ef4:	2500      	movs	r5, #0
 8007ef6:	42a5      	cmp	r5, r4
 8007ef8:	d105      	bne.n	8007f06 <__libc_init_array+0x2e>
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f00:	4798      	blx	r3
 8007f02:	3501      	adds	r5, #1
 8007f04:	e7ee      	b.n	8007ee4 <__libc_init_array+0xc>
 8007f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f0a:	4798      	blx	r3
 8007f0c:	3501      	adds	r5, #1
 8007f0e:	e7f2      	b.n	8007ef6 <__libc_init_array+0x1e>
 8007f10:	08008910 	.word	0x08008910
 8007f14:	08008910 	.word	0x08008910
 8007f18:	08008910 	.word	0x08008910
 8007f1c:	08008914 	.word	0x08008914

08007f20 <memcpy>:
 8007f20:	b510      	push	{r4, lr}
 8007f22:	1e43      	subs	r3, r0, #1
 8007f24:	440a      	add	r2, r1
 8007f26:	4291      	cmp	r1, r2
 8007f28:	d100      	bne.n	8007f2c <memcpy+0xc>
 8007f2a:	bd10      	pop	{r4, pc}
 8007f2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f34:	e7f7      	b.n	8007f26 <memcpy+0x6>

08007f36 <memset>:
 8007f36:	4402      	add	r2, r0
 8007f38:	4603      	mov	r3, r0
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d100      	bne.n	8007f40 <memset+0xa>
 8007f3e:	4770      	bx	lr
 8007f40:	f803 1b01 	strb.w	r1, [r3], #1
 8007f44:	e7f9      	b.n	8007f3a <memset+0x4>
	...

08007f48 <_vsiprintf_r>:
 8007f48:	b500      	push	{lr}
 8007f4a:	b09b      	sub	sp, #108	; 0x6c
 8007f4c:	9100      	str	r1, [sp, #0]
 8007f4e:	9104      	str	r1, [sp, #16]
 8007f50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f54:	9105      	str	r1, [sp, #20]
 8007f56:	9102      	str	r1, [sp, #8]
 8007f58:	4905      	ldr	r1, [pc, #20]	; (8007f70 <_vsiprintf_r+0x28>)
 8007f5a:	9103      	str	r1, [sp, #12]
 8007f5c:	4669      	mov	r1, sp
 8007f5e:	f000 f86d 	bl	800803c <_svfiprintf_r>
 8007f62:	9b00      	ldr	r3, [sp, #0]
 8007f64:	2200      	movs	r2, #0
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	b01b      	add	sp, #108	; 0x6c
 8007f6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f6e:	bf00      	nop
 8007f70:	ffff0208 	.word	0xffff0208

08007f74 <vsiprintf>:
 8007f74:	4613      	mov	r3, r2
 8007f76:	460a      	mov	r2, r1
 8007f78:	4601      	mov	r1, r0
 8007f7a:	4802      	ldr	r0, [pc, #8]	; (8007f84 <vsiprintf+0x10>)
 8007f7c:	6800      	ldr	r0, [r0, #0]
 8007f7e:	f7ff bfe3 	b.w	8007f48 <_vsiprintf_r>
 8007f82:	bf00      	nop
 8007f84:	2000000c 	.word	0x2000000c

08007f88 <__ssputs_r>:
 8007f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f8c:	688e      	ldr	r6, [r1, #8]
 8007f8e:	429e      	cmp	r6, r3
 8007f90:	4682      	mov	sl, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	4690      	mov	r8, r2
 8007f96:	4699      	mov	r9, r3
 8007f98:	d837      	bhi.n	800800a <__ssputs_r+0x82>
 8007f9a:	898a      	ldrh	r2, [r1, #12]
 8007f9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fa0:	d031      	beq.n	8008006 <__ssputs_r+0x7e>
 8007fa2:	6825      	ldr	r5, [r4, #0]
 8007fa4:	6909      	ldr	r1, [r1, #16]
 8007fa6:	1a6f      	subs	r7, r5, r1
 8007fa8:	6965      	ldr	r5, [r4, #20]
 8007faa:	2302      	movs	r3, #2
 8007fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fb0:	fb95 f5f3 	sdiv	r5, r5, r3
 8007fb4:	f109 0301 	add.w	r3, r9, #1
 8007fb8:	443b      	add	r3, r7
 8007fba:	429d      	cmp	r5, r3
 8007fbc:	bf38      	it	cc
 8007fbe:	461d      	movcc	r5, r3
 8007fc0:	0553      	lsls	r3, r2, #21
 8007fc2:	d530      	bpl.n	8008026 <__ssputs_r+0x9e>
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f000 fb21 	bl	800860c <_malloc_r>
 8007fca:	4606      	mov	r6, r0
 8007fcc:	b950      	cbnz	r0, 8007fe4 <__ssputs_r+0x5c>
 8007fce:	230c      	movs	r3, #12
 8007fd0:	f8ca 3000 	str.w	r3, [sl]
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fda:	81a3      	strh	r3, [r4, #12]
 8007fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe4:	463a      	mov	r2, r7
 8007fe6:	6921      	ldr	r1, [r4, #16]
 8007fe8:	f7ff ff9a 	bl	8007f20 <memcpy>
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	6126      	str	r6, [r4, #16]
 8007ffa:	6165      	str	r5, [r4, #20]
 8007ffc:	443e      	add	r6, r7
 8007ffe:	1bed      	subs	r5, r5, r7
 8008000:	6026      	str	r6, [r4, #0]
 8008002:	60a5      	str	r5, [r4, #8]
 8008004:	464e      	mov	r6, r9
 8008006:	454e      	cmp	r6, r9
 8008008:	d900      	bls.n	800800c <__ssputs_r+0x84>
 800800a:	464e      	mov	r6, r9
 800800c:	4632      	mov	r2, r6
 800800e:	4641      	mov	r1, r8
 8008010:	6820      	ldr	r0, [r4, #0]
 8008012:	f000 fa93 	bl	800853c <memmove>
 8008016:	68a3      	ldr	r3, [r4, #8]
 8008018:	1b9b      	subs	r3, r3, r6
 800801a:	60a3      	str	r3, [r4, #8]
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	441e      	add	r6, r3
 8008020:	6026      	str	r6, [r4, #0]
 8008022:	2000      	movs	r0, #0
 8008024:	e7dc      	b.n	8007fe0 <__ssputs_r+0x58>
 8008026:	462a      	mov	r2, r5
 8008028:	f000 fb4a 	bl	80086c0 <_realloc_r>
 800802c:	4606      	mov	r6, r0
 800802e:	2800      	cmp	r0, #0
 8008030:	d1e2      	bne.n	8007ff8 <__ssputs_r+0x70>
 8008032:	6921      	ldr	r1, [r4, #16]
 8008034:	4650      	mov	r0, sl
 8008036:	f000 fa9b 	bl	8008570 <_free_r>
 800803a:	e7c8      	b.n	8007fce <__ssputs_r+0x46>

0800803c <_svfiprintf_r>:
 800803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008040:	461d      	mov	r5, r3
 8008042:	898b      	ldrh	r3, [r1, #12]
 8008044:	061f      	lsls	r7, r3, #24
 8008046:	b09d      	sub	sp, #116	; 0x74
 8008048:	4680      	mov	r8, r0
 800804a:	460c      	mov	r4, r1
 800804c:	4616      	mov	r6, r2
 800804e:	d50f      	bpl.n	8008070 <_svfiprintf_r+0x34>
 8008050:	690b      	ldr	r3, [r1, #16]
 8008052:	b96b      	cbnz	r3, 8008070 <_svfiprintf_r+0x34>
 8008054:	2140      	movs	r1, #64	; 0x40
 8008056:	f000 fad9 	bl	800860c <_malloc_r>
 800805a:	6020      	str	r0, [r4, #0]
 800805c:	6120      	str	r0, [r4, #16]
 800805e:	b928      	cbnz	r0, 800806c <_svfiprintf_r+0x30>
 8008060:	230c      	movs	r3, #12
 8008062:	f8c8 3000 	str.w	r3, [r8]
 8008066:	f04f 30ff 	mov.w	r0, #4294967295
 800806a:	e0c8      	b.n	80081fe <_svfiprintf_r+0x1c2>
 800806c:	2340      	movs	r3, #64	; 0x40
 800806e:	6163      	str	r3, [r4, #20]
 8008070:	2300      	movs	r3, #0
 8008072:	9309      	str	r3, [sp, #36]	; 0x24
 8008074:	2320      	movs	r3, #32
 8008076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800807a:	2330      	movs	r3, #48	; 0x30
 800807c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008080:	9503      	str	r5, [sp, #12]
 8008082:	f04f 0b01 	mov.w	fp, #1
 8008086:	4637      	mov	r7, r6
 8008088:	463d      	mov	r5, r7
 800808a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800808e:	b10b      	cbz	r3, 8008094 <_svfiprintf_r+0x58>
 8008090:	2b25      	cmp	r3, #37	; 0x25
 8008092:	d13e      	bne.n	8008112 <_svfiprintf_r+0xd6>
 8008094:	ebb7 0a06 	subs.w	sl, r7, r6
 8008098:	d00b      	beq.n	80080b2 <_svfiprintf_r+0x76>
 800809a:	4653      	mov	r3, sl
 800809c:	4632      	mov	r2, r6
 800809e:	4621      	mov	r1, r4
 80080a0:	4640      	mov	r0, r8
 80080a2:	f7ff ff71 	bl	8007f88 <__ssputs_r>
 80080a6:	3001      	adds	r0, #1
 80080a8:	f000 80a4 	beq.w	80081f4 <_svfiprintf_r+0x1b8>
 80080ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ae:	4453      	add	r3, sl
 80080b0:	9309      	str	r3, [sp, #36]	; 0x24
 80080b2:	783b      	ldrb	r3, [r7, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 809d 	beq.w	80081f4 <_svfiprintf_r+0x1b8>
 80080ba:	2300      	movs	r3, #0
 80080bc:	f04f 32ff 	mov.w	r2, #4294967295
 80080c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080c4:	9304      	str	r3, [sp, #16]
 80080c6:	9307      	str	r3, [sp, #28]
 80080c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080cc:	931a      	str	r3, [sp, #104]	; 0x68
 80080ce:	462f      	mov	r7, r5
 80080d0:	2205      	movs	r2, #5
 80080d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80080d6:	4850      	ldr	r0, [pc, #320]	; (8008218 <_svfiprintf_r+0x1dc>)
 80080d8:	f7f8 f87a 	bl	80001d0 <memchr>
 80080dc:	9b04      	ldr	r3, [sp, #16]
 80080de:	b9d0      	cbnz	r0, 8008116 <_svfiprintf_r+0xda>
 80080e0:	06d9      	lsls	r1, r3, #27
 80080e2:	bf44      	itt	mi
 80080e4:	2220      	movmi	r2, #32
 80080e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080ea:	071a      	lsls	r2, r3, #28
 80080ec:	bf44      	itt	mi
 80080ee:	222b      	movmi	r2, #43	; 0x2b
 80080f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080f4:	782a      	ldrb	r2, [r5, #0]
 80080f6:	2a2a      	cmp	r2, #42	; 0x2a
 80080f8:	d015      	beq.n	8008126 <_svfiprintf_r+0xea>
 80080fa:	9a07      	ldr	r2, [sp, #28]
 80080fc:	462f      	mov	r7, r5
 80080fe:	2000      	movs	r0, #0
 8008100:	250a      	movs	r5, #10
 8008102:	4639      	mov	r1, r7
 8008104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008108:	3b30      	subs	r3, #48	; 0x30
 800810a:	2b09      	cmp	r3, #9
 800810c:	d94d      	bls.n	80081aa <_svfiprintf_r+0x16e>
 800810e:	b1b8      	cbz	r0, 8008140 <_svfiprintf_r+0x104>
 8008110:	e00f      	b.n	8008132 <_svfiprintf_r+0xf6>
 8008112:	462f      	mov	r7, r5
 8008114:	e7b8      	b.n	8008088 <_svfiprintf_r+0x4c>
 8008116:	4a40      	ldr	r2, [pc, #256]	; (8008218 <_svfiprintf_r+0x1dc>)
 8008118:	1a80      	subs	r0, r0, r2
 800811a:	fa0b f000 	lsl.w	r0, fp, r0
 800811e:	4318      	orrs	r0, r3
 8008120:	9004      	str	r0, [sp, #16]
 8008122:	463d      	mov	r5, r7
 8008124:	e7d3      	b.n	80080ce <_svfiprintf_r+0x92>
 8008126:	9a03      	ldr	r2, [sp, #12]
 8008128:	1d11      	adds	r1, r2, #4
 800812a:	6812      	ldr	r2, [r2, #0]
 800812c:	9103      	str	r1, [sp, #12]
 800812e:	2a00      	cmp	r2, #0
 8008130:	db01      	blt.n	8008136 <_svfiprintf_r+0xfa>
 8008132:	9207      	str	r2, [sp, #28]
 8008134:	e004      	b.n	8008140 <_svfiprintf_r+0x104>
 8008136:	4252      	negs	r2, r2
 8008138:	f043 0302 	orr.w	r3, r3, #2
 800813c:	9207      	str	r2, [sp, #28]
 800813e:	9304      	str	r3, [sp, #16]
 8008140:	783b      	ldrb	r3, [r7, #0]
 8008142:	2b2e      	cmp	r3, #46	; 0x2e
 8008144:	d10c      	bne.n	8008160 <_svfiprintf_r+0x124>
 8008146:	787b      	ldrb	r3, [r7, #1]
 8008148:	2b2a      	cmp	r3, #42	; 0x2a
 800814a:	d133      	bne.n	80081b4 <_svfiprintf_r+0x178>
 800814c:	9b03      	ldr	r3, [sp, #12]
 800814e:	1d1a      	adds	r2, r3, #4
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	9203      	str	r2, [sp, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	bfb8      	it	lt
 8008158:	f04f 33ff 	movlt.w	r3, #4294967295
 800815c:	3702      	adds	r7, #2
 800815e:	9305      	str	r3, [sp, #20]
 8008160:	4d2e      	ldr	r5, [pc, #184]	; (800821c <_svfiprintf_r+0x1e0>)
 8008162:	7839      	ldrb	r1, [r7, #0]
 8008164:	2203      	movs	r2, #3
 8008166:	4628      	mov	r0, r5
 8008168:	f7f8 f832 	bl	80001d0 <memchr>
 800816c:	b138      	cbz	r0, 800817e <_svfiprintf_r+0x142>
 800816e:	2340      	movs	r3, #64	; 0x40
 8008170:	1b40      	subs	r0, r0, r5
 8008172:	fa03 f000 	lsl.w	r0, r3, r0
 8008176:	9b04      	ldr	r3, [sp, #16]
 8008178:	4303      	orrs	r3, r0
 800817a:	3701      	adds	r7, #1
 800817c:	9304      	str	r3, [sp, #16]
 800817e:	7839      	ldrb	r1, [r7, #0]
 8008180:	4827      	ldr	r0, [pc, #156]	; (8008220 <_svfiprintf_r+0x1e4>)
 8008182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008186:	2206      	movs	r2, #6
 8008188:	1c7e      	adds	r6, r7, #1
 800818a:	f7f8 f821 	bl	80001d0 <memchr>
 800818e:	2800      	cmp	r0, #0
 8008190:	d038      	beq.n	8008204 <_svfiprintf_r+0x1c8>
 8008192:	4b24      	ldr	r3, [pc, #144]	; (8008224 <_svfiprintf_r+0x1e8>)
 8008194:	bb13      	cbnz	r3, 80081dc <_svfiprintf_r+0x1a0>
 8008196:	9b03      	ldr	r3, [sp, #12]
 8008198:	3307      	adds	r3, #7
 800819a:	f023 0307 	bic.w	r3, r3, #7
 800819e:	3308      	adds	r3, #8
 80081a0:	9303      	str	r3, [sp, #12]
 80081a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a4:	444b      	add	r3, r9
 80081a6:	9309      	str	r3, [sp, #36]	; 0x24
 80081a8:	e76d      	b.n	8008086 <_svfiprintf_r+0x4a>
 80081aa:	fb05 3202 	mla	r2, r5, r2, r3
 80081ae:	2001      	movs	r0, #1
 80081b0:	460f      	mov	r7, r1
 80081b2:	e7a6      	b.n	8008102 <_svfiprintf_r+0xc6>
 80081b4:	2300      	movs	r3, #0
 80081b6:	3701      	adds	r7, #1
 80081b8:	9305      	str	r3, [sp, #20]
 80081ba:	4619      	mov	r1, r3
 80081bc:	250a      	movs	r5, #10
 80081be:	4638      	mov	r0, r7
 80081c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081c4:	3a30      	subs	r2, #48	; 0x30
 80081c6:	2a09      	cmp	r2, #9
 80081c8:	d903      	bls.n	80081d2 <_svfiprintf_r+0x196>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d0c8      	beq.n	8008160 <_svfiprintf_r+0x124>
 80081ce:	9105      	str	r1, [sp, #20]
 80081d0:	e7c6      	b.n	8008160 <_svfiprintf_r+0x124>
 80081d2:	fb05 2101 	mla	r1, r5, r1, r2
 80081d6:	2301      	movs	r3, #1
 80081d8:	4607      	mov	r7, r0
 80081da:	e7f0      	b.n	80081be <_svfiprintf_r+0x182>
 80081dc:	ab03      	add	r3, sp, #12
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	4622      	mov	r2, r4
 80081e2:	4b11      	ldr	r3, [pc, #68]	; (8008228 <_svfiprintf_r+0x1ec>)
 80081e4:	a904      	add	r1, sp, #16
 80081e6:	4640      	mov	r0, r8
 80081e8:	f3af 8000 	nop.w
 80081ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80081f0:	4681      	mov	r9, r0
 80081f2:	d1d6      	bne.n	80081a2 <_svfiprintf_r+0x166>
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	065b      	lsls	r3, r3, #25
 80081f8:	f53f af35 	bmi.w	8008066 <_svfiprintf_r+0x2a>
 80081fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081fe:	b01d      	add	sp, #116	; 0x74
 8008200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008204:	ab03      	add	r3, sp, #12
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	4622      	mov	r2, r4
 800820a:	4b07      	ldr	r3, [pc, #28]	; (8008228 <_svfiprintf_r+0x1ec>)
 800820c:	a904      	add	r1, sp, #16
 800820e:	4640      	mov	r0, r8
 8008210:	f000 f882 	bl	8008318 <_printf_i>
 8008214:	e7ea      	b.n	80081ec <_svfiprintf_r+0x1b0>
 8008216:	bf00      	nop
 8008218:	080088d4 	.word	0x080088d4
 800821c:	080088da 	.word	0x080088da
 8008220:	080088de 	.word	0x080088de
 8008224:	00000000 	.word	0x00000000
 8008228:	08007f89 	.word	0x08007f89

0800822c <_printf_common>:
 800822c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008230:	4691      	mov	r9, r2
 8008232:	461f      	mov	r7, r3
 8008234:	688a      	ldr	r2, [r1, #8]
 8008236:	690b      	ldr	r3, [r1, #16]
 8008238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800823c:	4293      	cmp	r3, r2
 800823e:	bfb8      	it	lt
 8008240:	4613      	movlt	r3, r2
 8008242:	f8c9 3000 	str.w	r3, [r9]
 8008246:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800824a:	4606      	mov	r6, r0
 800824c:	460c      	mov	r4, r1
 800824e:	b112      	cbz	r2, 8008256 <_printf_common+0x2a>
 8008250:	3301      	adds	r3, #1
 8008252:	f8c9 3000 	str.w	r3, [r9]
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	0699      	lsls	r1, r3, #26
 800825a:	bf42      	ittt	mi
 800825c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008260:	3302      	addmi	r3, #2
 8008262:	f8c9 3000 	strmi.w	r3, [r9]
 8008266:	6825      	ldr	r5, [r4, #0]
 8008268:	f015 0506 	ands.w	r5, r5, #6
 800826c:	d107      	bne.n	800827e <_printf_common+0x52>
 800826e:	f104 0a19 	add.w	sl, r4, #25
 8008272:	68e3      	ldr	r3, [r4, #12]
 8008274:	f8d9 2000 	ldr.w	r2, [r9]
 8008278:	1a9b      	subs	r3, r3, r2
 800827a:	42ab      	cmp	r3, r5
 800827c:	dc28      	bgt.n	80082d0 <_printf_common+0xa4>
 800827e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008282:	6822      	ldr	r2, [r4, #0]
 8008284:	3300      	adds	r3, #0
 8008286:	bf18      	it	ne
 8008288:	2301      	movne	r3, #1
 800828a:	0692      	lsls	r2, r2, #26
 800828c:	d42d      	bmi.n	80082ea <_printf_common+0xbe>
 800828e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008292:	4639      	mov	r1, r7
 8008294:	4630      	mov	r0, r6
 8008296:	47c0      	blx	r8
 8008298:	3001      	adds	r0, #1
 800829a:	d020      	beq.n	80082de <_printf_common+0xb2>
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	68e5      	ldr	r5, [r4, #12]
 80082a0:	f8d9 2000 	ldr.w	r2, [r9]
 80082a4:	f003 0306 	and.w	r3, r3, #6
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	bf08      	it	eq
 80082ac:	1aad      	subeq	r5, r5, r2
 80082ae:	68a3      	ldr	r3, [r4, #8]
 80082b0:	6922      	ldr	r2, [r4, #16]
 80082b2:	bf0c      	ite	eq
 80082b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082b8:	2500      	movne	r5, #0
 80082ba:	4293      	cmp	r3, r2
 80082bc:	bfc4      	itt	gt
 80082be:	1a9b      	subgt	r3, r3, r2
 80082c0:	18ed      	addgt	r5, r5, r3
 80082c2:	f04f 0900 	mov.w	r9, #0
 80082c6:	341a      	adds	r4, #26
 80082c8:	454d      	cmp	r5, r9
 80082ca:	d11a      	bne.n	8008302 <_printf_common+0xd6>
 80082cc:	2000      	movs	r0, #0
 80082ce:	e008      	b.n	80082e2 <_printf_common+0xb6>
 80082d0:	2301      	movs	r3, #1
 80082d2:	4652      	mov	r2, sl
 80082d4:	4639      	mov	r1, r7
 80082d6:	4630      	mov	r0, r6
 80082d8:	47c0      	blx	r8
 80082da:	3001      	adds	r0, #1
 80082dc:	d103      	bne.n	80082e6 <_printf_common+0xba>
 80082de:	f04f 30ff 	mov.w	r0, #4294967295
 80082e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e6:	3501      	adds	r5, #1
 80082e8:	e7c3      	b.n	8008272 <_printf_common+0x46>
 80082ea:	18e1      	adds	r1, r4, r3
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	2030      	movs	r0, #48	; 0x30
 80082f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082f4:	4422      	add	r2, r4
 80082f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082fe:	3302      	adds	r3, #2
 8008300:	e7c5      	b.n	800828e <_printf_common+0x62>
 8008302:	2301      	movs	r3, #1
 8008304:	4622      	mov	r2, r4
 8008306:	4639      	mov	r1, r7
 8008308:	4630      	mov	r0, r6
 800830a:	47c0      	blx	r8
 800830c:	3001      	adds	r0, #1
 800830e:	d0e6      	beq.n	80082de <_printf_common+0xb2>
 8008310:	f109 0901 	add.w	r9, r9, #1
 8008314:	e7d8      	b.n	80082c8 <_printf_common+0x9c>
	...

08008318 <_printf_i>:
 8008318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800831c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008320:	460c      	mov	r4, r1
 8008322:	7e09      	ldrb	r1, [r1, #24]
 8008324:	b085      	sub	sp, #20
 8008326:	296e      	cmp	r1, #110	; 0x6e
 8008328:	4617      	mov	r7, r2
 800832a:	4606      	mov	r6, r0
 800832c:	4698      	mov	r8, r3
 800832e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008330:	f000 80b3 	beq.w	800849a <_printf_i+0x182>
 8008334:	d822      	bhi.n	800837c <_printf_i+0x64>
 8008336:	2963      	cmp	r1, #99	; 0x63
 8008338:	d036      	beq.n	80083a8 <_printf_i+0x90>
 800833a:	d80a      	bhi.n	8008352 <_printf_i+0x3a>
 800833c:	2900      	cmp	r1, #0
 800833e:	f000 80b9 	beq.w	80084b4 <_printf_i+0x19c>
 8008342:	2958      	cmp	r1, #88	; 0x58
 8008344:	f000 8083 	beq.w	800844e <_printf_i+0x136>
 8008348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800834c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008350:	e032      	b.n	80083b8 <_printf_i+0xa0>
 8008352:	2964      	cmp	r1, #100	; 0x64
 8008354:	d001      	beq.n	800835a <_printf_i+0x42>
 8008356:	2969      	cmp	r1, #105	; 0x69
 8008358:	d1f6      	bne.n	8008348 <_printf_i+0x30>
 800835a:	6820      	ldr	r0, [r4, #0]
 800835c:	6813      	ldr	r3, [r2, #0]
 800835e:	0605      	lsls	r5, r0, #24
 8008360:	f103 0104 	add.w	r1, r3, #4
 8008364:	d52a      	bpl.n	80083bc <_printf_i+0xa4>
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6011      	str	r1, [r2, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	da03      	bge.n	8008376 <_printf_i+0x5e>
 800836e:	222d      	movs	r2, #45	; 0x2d
 8008370:	425b      	negs	r3, r3
 8008372:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008376:	486f      	ldr	r0, [pc, #444]	; (8008534 <_printf_i+0x21c>)
 8008378:	220a      	movs	r2, #10
 800837a:	e039      	b.n	80083f0 <_printf_i+0xd8>
 800837c:	2973      	cmp	r1, #115	; 0x73
 800837e:	f000 809d 	beq.w	80084bc <_printf_i+0x1a4>
 8008382:	d808      	bhi.n	8008396 <_printf_i+0x7e>
 8008384:	296f      	cmp	r1, #111	; 0x6f
 8008386:	d020      	beq.n	80083ca <_printf_i+0xb2>
 8008388:	2970      	cmp	r1, #112	; 0x70
 800838a:	d1dd      	bne.n	8008348 <_printf_i+0x30>
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	f043 0320 	orr.w	r3, r3, #32
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	e003      	b.n	800839e <_printf_i+0x86>
 8008396:	2975      	cmp	r1, #117	; 0x75
 8008398:	d017      	beq.n	80083ca <_printf_i+0xb2>
 800839a:	2978      	cmp	r1, #120	; 0x78
 800839c:	d1d4      	bne.n	8008348 <_printf_i+0x30>
 800839e:	2378      	movs	r3, #120	; 0x78
 80083a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083a4:	4864      	ldr	r0, [pc, #400]	; (8008538 <_printf_i+0x220>)
 80083a6:	e055      	b.n	8008454 <_printf_i+0x13c>
 80083a8:	6813      	ldr	r3, [r2, #0]
 80083aa:	1d19      	adds	r1, r3, #4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6011      	str	r1, [r2, #0]
 80083b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083b8:	2301      	movs	r3, #1
 80083ba:	e08c      	b.n	80084d6 <_printf_i+0x1be>
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6011      	str	r1, [r2, #0]
 80083c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083c4:	bf18      	it	ne
 80083c6:	b21b      	sxthne	r3, r3
 80083c8:	e7cf      	b.n	800836a <_printf_i+0x52>
 80083ca:	6813      	ldr	r3, [r2, #0]
 80083cc:	6825      	ldr	r5, [r4, #0]
 80083ce:	1d18      	adds	r0, r3, #4
 80083d0:	6010      	str	r0, [r2, #0]
 80083d2:	0628      	lsls	r0, r5, #24
 80083d4:	d501      	bpl.n	80083da <_printf_i+0xc2>
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	e002      	b.n	80083e0 <_printf_i+0xc8>
 80083da:	0668      	lsls	r0, r5, #25
 80083dc:	d5fb      	bpl.n	80083d6 <_printf_i+0xbe>
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	4854      	ldr	r0, [pc, #336]	; (8008534 <_printf_i+0x21c>)
 80083e2:	296f      	cmp	r1, #111	; 0x6f
 80083e4:	bf14      	ite	ne
 80083e6:	220a      	movne	r2, #10
 80083e8:	2208      	moveq	r2, #8
 80083ea:	2100      	movs	r1, #0
 80083ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083f0:	6865      	ldr	r5, [r4, #4]
 80083f2:	60a5      	str	r5, [r4, #8]
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	f2c0 8095 	blt.w	8008524 <_printf_i+0x20c>
 80083fa:	6821      	ldr	r1, [r4, #0]
 80083fc:	f021 0104 	bic.w	r1, r1, #4
 8008400:	6021      	str	r1, [r4, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d13d      	bne.n	8008482 <_printf_i+0x16a>
 8008406:	2d00      	cmp	r5, #0
 8008408:	f040 808e 	bne.w	8008528 <_printf_i+0x210>
 800840c:	4665      	mov	r5, ip
 800840e:	2a08      	cmp	r2, #8
 8008410:	d10b      	bne.n	800842a <_printf_i+0x112>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	07db      	lsls	r3, r3, #31
 8008416:	d508      	bpl.n	800842a <_printf_i+0x112>
 8008418:	6923      	ldr	r3, [r4, #16]
 800841a:	6862      	ldr	r2, [r4, #4]
 800841c:	429a      	cmp	r2, r3
 800841e:	bfde      	ittt	le
 8008420:	2330      	movle	r3, #48	; 0x30
 8008422:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008426:	f105 35ff 	addle.w	r5, r5, #4294967295
 800842a:	ebac 0305 	sub.w	r3, ip, r5
 800842e:	6123      	str	r3, [r4, #16]
 8008430:	f8cd 8000 	str.w	r8, [sp]
 8008434:	463b      	mov	r3, r7
 8008436:	aa03      	add	r2, sp, #12
 8008438:	4621      	mov	r1, r4
 800843a:	4630      	mov	r0, r6
 800843c:	f7ff fef6 	bl	800822c <_printf_common>
 8008440:	3001      	adds	r0, #1
 8008442:	d14d      	bne.n	80084e0 <_printf_i+0x1c8>
 8008444:	f04f 30ff 	mov.w	r0, #4294967295
 8008448:	b005      	add	sp, #20
 800844a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800844e:	4839      	ldr	r0, [pc, #228]	; (8008534 <_printf_i+0x21c>)
 8008450:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008454:	6813      	ldr	r3, [r2, #0]
 8008456:	6821      	ldr	r1, [r4, #0]
 8008458:	1d1d      	adds	r5, r3, #4
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6015      	str	r5, [r2, #0]
 800845e:	060a      	lsls	r2, r1, #24
 8008460:	d50b      	bpl.n	800847a <_printf_i+0x162>
 8008462:	07ca      	lsls	r2, r1, #31
 8008464:	bf44      	itt	mi
 8008466:	f041 0120 	orrmi.w	r1, r1, #32
 800846a:	6021      	strmi	r1, [r4, #0]
 800846c:	b91b      	cbnz	r3, 8008476 <_printf_i+0x15e>
 800846e:	6822      	ldr	r2, [r4, #0]
 8008470:	f022 0220 	bic.w	r2, r2, #32
 8008474:	6022      	str	r2, [r4, #0]
 8008476:	2210      	movs	r2, #16
 8008478:	e7b7      	b.n	80083ea <_printf_i+0xd2>
 800847a:	064d      	lsls	r5, r1, #25
 800847c:	bf48      	it	mi
 800847e:	b29b      	uxthmi	r3, r3
 8008480:	e7ef      	b.n	8008462 <_printf_i+0x14a>
 8008482:	4665      	mov	r5, ip
 8008484:	fbb3 f1f2 	udiv	r1, r3, r2
 8008488:	fb02 3311 	mls	r3, r2, r1, r3
 800848c:	5cc3      	ldrb	r3, [r0, r3]
 800848e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008492:	460b      	mov	r3, r1
 8008494:	2900      	cmp	r1, #0
 8008496:	d1f5      	bne.n	8008484 <_printf_i+0x16c>
 8008498:	e7b9      	b.n	800840e <_printf_i+0xf6>
 800849a:	6813      	ldr	r3, [r2, #0]
 800849c:	6825      	ldr	r5, [r4, #0]
 800849e:	6961      	ldr	r1, [r4, #20]
 80084a0:	1d18      	adds	r0, r3, #4
 80084a2:	6010      	str	r0, [r2, #0]
 80084a4:	0628      	lsls	r0, r5, #24
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	d501      	bpl.n	80084ae <_printf_i+0x196>
 80084aa:	6019      	str	r1, [r3, #0]
 80084ac:	e002      	b.n	80084b4 <_printf_i+0x19c>
 80084ae:	066a      	lsls	r2, r5, #25
 80084b0:	d5fb      	bpl.n	80084aa <_printf_i+0x192>
 80084b2:	8019      	strh	r1, [r3, #0]
 80084b4:	2300      	movs	r3, #0
 80084b6:	6123      	str	r3, [r4, #16]
 80084b8:	4665      	mov	r5, ip
 80084ba:	e7b9      	b.n	8008430 <_printf_i+0x118>
 80084bc:	6813      	ldr	r3, [r2, #0]
 80084be:	1d19      	adds	r1, r3, #4
 80084c0:	6011      	str	r1, [r2, #0]
 80084c2:	681d      	ldr	r5, [r3, #0]
 80084c4:	6862      	ldr	r2, [r4, #4]
 80084c6:	2100      	movs	r1, #0
 80084c8:	4628      	mov	r0, r5
 80084ca:	f7f7 fe81 	bl	80001d0 <memchr>
 80084ce:	b108      	cbz	r0, 80084d4 <_printf_i+0x1bc>
 80084d0:	1b40      	subs	r0, r0, r5
 80084d2:	6060      	str	r0, [r4, #4]
 80084d4:	6863      	ldr	r3, [r4, #4]
 80084d6:	6123      	str	r3, [r4, #16]
 80084d8:	2300      	movs	r3, #0
 80084da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084de:	e7a7      	b.n	8008430 <_printf_i+0x118>
 80084e0:	6923      	ldr	r3, [r4, #16]
 80084e2:	462a      	mov	r2, r5
 80084e4:	4639      	mov	r1, r7
 80084e6:	4630      	mov	r0, r6
 80084e8:	47c0      	blx	r8
 80084ea:	3001      	adds	r0, #1
 80084ec:	d0aa      	beq.n	8008444 <_printf_i+0x12c>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	079b      	lsls	r3, r3, #30
 80084f2:	d413      	bmi.n	800851c <_printf_i+0x204>
 80084f4:	68e0      	ldr	r0, [r4, #12]
 80084f6:	9b03      	ldr	r3, [sp, #12]
 80084f8:	4298      	cmp	r0, r3
 80084fa:	bfb8      	it	lt
 80084fc:	4618      	movlt	r0, r3
 80084fe:	e7a3      	b.n	8008448 <_printf_i+0x130>
 8008500:	2301      	movs	r3, #1
 8008502:	464a      	mov	r2, r9
 8008504:	4639      	mov	r1, r7
 8008506:	4630      	mov	r0, r6
 8008508:	47c0      	blx	r8
 800850a:	3001      	adds	r0, #1
 800850c:	d09a      	beq.n	8008444 <_printf_i+0x12c>
 800850e:	3501      	adds	r5, #1
 8008510:	68e3      	ldr	r3, [r4, #12]
 8008512:	9a03      	ldr	r2, [sp, #12]
 8008514:	1a9b      	subs	r3, r3, r2
 8008516:	42ab      	cmp	r3, r5
 8008518:	dcf2      	bgt.n	8008500 <_printf_i+0x1e8>
 800851a:	e7eb      	b.n	80084f4 <_printf_i+0x1dc>
 800851c:	2500      	movs	r5, #0
 800851e:	f104 0919 	add.w	r9, r4, #25
 8008522:	e7f5      	b.n	8008510 <_printf_i+0x1f8>
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1ac      	bne.n	8008482 <_printf_i+0x16a>
 8008528:	7803      	ldrb	r3, [r0, #0]
 800852a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800852e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008532:	e76c      	b.n	800840e <_printf_i+0xf6>
 8008534:	080088e5 	.word	0x080088e5
 8008538:	080088f6 	.word	0x080088f6

0800853c <memmove>:
 800853c:	4288      	cmp	r0, r1
 800853e:	b510      	push	{r4, lr}
 8008540:	eb01 0302 	add.w	r3, r1, r2
 8008544:	d807      	bhi.n	8008556 <memmove+0x1a>
 8008546:	1e42      	subs	r2, r0, #1
 8008548:	4299      	cmp	r1, r3
 800854a:	d00a      	beq.n	8008562 <memmove+0x26>
 800854c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008550:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008554:	e7f8      	b.n	8008548 <memmove+0xc>
 8008556:	4283      	cmp	r3, r0
 8008558:	d9f5      	bls.n	8008546 <memmove+0xa>
 800855a:	1881      	adds	r1, r0, r2
 800855c:	1ad2      	subs	r2, r2, r3
 800855e:	42d3      	cmn	r3, r2
 8008560:	d100      	bne.n	8008564 <memmove+0x28>
 8008562:	bd10      	pop	{r4, pc}
 8008564:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008568:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800856c:	e7f7      	b.n	800855e <memmove+0x22>
	...

08008570 <_free_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4605      	mov	r5, r0
 8008574:	2900      	cmp	r1, #0
 8008576:	d045      	beq.n	8008604 <_free_r+0x94>
 8008578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800857c:	1f0c      	subs	r4, r1, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	bfb8      	it	lt
 8008582:	18e4      	addlt	r4, r4, r3
 8008584:	f000 f8d2 	bl	800872c <__malloc_lock>
 8008588:	4a1f      	ldr	r2, [pc, #124]	; (8008608 <_free_r+0x98>)
 800858a:	6813      	ldr	r3, [r2, #0]
 800858c:	4610      	mov	r0, r2
 800858e:	b933      	cbnz	r3, 800859e <_free_r+0x2e>
 8008590:	6063      	str	r3, [r4, #4]
 8008592:	6014      	str	r4, [r2, #0]
 8008594:	4628      	mov	r0, r5
 8008596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800859a:	f000 b8c8 	b.w	800872e <__malloc_unlock>
 800859e:	42a3      	cmp	r3, r4
 80085a0:	d90c      	bls.n	80085bc <_free_r+0x4c>
 80085a2:	6821      	ldr	r1, [r4, #0]
 80085a4:	1862      	adds	r2, r4, r1
 80085a6:	4293      	cmp	r3, r2
 80085a8:	bf04      	itt	eq
 80085aa:	681a      	ldreq	r2, [r3, #0]
 80085ac:	685b      	ldreq	r3, [r3, #4]
 80085ae:	6063      	str	r3, [r4, #4]
 80085b0:	bf04      	itt	eq
 80085b2:	1852      	addeq	r2, r2, r1
 80085b4:	6022      	streq	r2, [r4, #0]
 80085b6:	6004      	str	r4, [r0, #0]
 80085b8:	e7ec      	b.n	8008594 <_free_r+0x24>
 80085ba:	4613      	mov	r3, r2
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	b10a      	cbz	r2, 80085c4 <_free_r+0x54>
 80085c0:	42a2      	cmp	r2, r4
 80085c2:	d9fa      	bls.n	80085ba <_free_r+0x4a>
 80085c4:	6819      	ldr	r1, [r3, #0]
 80085c6:	1858      	adds	r0, r3, r1
 80085c8:	42a0      	cmp	r0, r4
 80085ca:	d10b      	bne.n	80085e4 <_free_r+0x74>
 80085cc:	6820      	ldr	r0, [r4, #0]
 80085ce:	4401      	add	r1, r0
 80085d0:	1858      	adds	r0, r3, r1
 80085d2:	4282      	cmp	r2, r0
 80085d4:	6019      	str	r1, [r3, #0]
 80085d6:	d1dd      	bne.n	8008594 <_free_r+0x24>
 80085d8:	6810      	ldr	r0, [r2, #0]
 80085da:	6852      	ldr	r2, [r2, #4]
 80085dc:	605a      	str	r2, [r3, #4]
 80085de:	4401      	add	r1, r0
 80085e0:	6019      	str	r1, [r3, #0]
 80085e2:	e7d7      	b.n	8008594 <_free_r+0x24>
 80085e4:	d902      	bls.n	80085ec <_free_r+0x7c>
 80085e6:	230c      	movs	r3, #12
 80085e8:	602b      	str	r3, [r5, #0]
 80085ea:	e7d3      	b.n	8008594 <_free_r+0x24>
 80085ec:	6820      	ldr	r0, [r4, #0]
 80085ee:	1821      	adds	r1, r4, r0
 80085f0:	428a      	cmp	r2, r1
 80085f2:	bf04      	itt	eq
 80085f4:	6811      	ldreq	r1, [r2, #0]
 80085f6:	6852      	ldreq	r2, [r2, #4]
 80085f8:	6062      	str	r2, [r4, #4]
 80085fa:	bf04      	itt	eq
 80085fc:	1809      	addeq	r1, r1, r0
 80085fe:	6021      	streq	r1, [r4, #0]
 8008600:	605c      	str	r4, [r3, #4]
 8008602:	e7c7      	b.n	8008594 <_free_r+0x24>
 8008604:	bd38      	pop	{r3, r4, r5, pc}
 8008606:	bf00      	nop
 8008608:	200000b0 	.word	0x200000b0

0800860c <_malloc_r>:
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	1ccd      	adds	r5, r1, #3
 8008610:	f025 0503 	bic.w	r5, r5, #3
 8008614:	3508      	adds	r5, #8
 8008616:	2d0c      	cmp	r5, #12
 8008618:	bf38      	it	cc
 800861a:	250c      	movcc	r5, #12
 800861c:	2d00      	cmp	r5, #0
 800861e:	4606      	mov	r6, r0
 8008620:	db01      	blt.n	8008626 <_malloc_r+0x1a>
 8008622:	42a9      	cmp	r1, r5
 8008624:	d903      	bls.n	800862e <_malloc_r+0x22>
 8008626:	230c      	movs	r3, #12
 8008628:	6033      	str	r3, [r6, #0]
 800862a:	2000      	movs	r0, #0
 800862c:	bd70      	pop	{r4, r5, r6, pc}
 800862e:	f000 f87d 	bl	800872c <__malloc_lock>
 8008632:	4a21      	ldr	r2, [pc, #132]	; (80086b8 <_malloc_r+0xac>)
 8008634:	6814      	ldr	r4, [r2, #0]
 8008636:	4621      	mov	r1, r4
 8008638:	b991      	cbnz	r1, 8008660 <_malloc_r+0x54>
 800863a:	4c20      	ldr	r4, [pc, #128]	; (80086bc <_malloc_r+0xb0>)
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	b91b      	cbnz	r3, 8008648 <_malloc_r+0x3c>
 8008640:	4630      	mov	r0, r6
 8008642:	f000 f863 	bl	800870c <_sbrk_r>
 8008646:	6020      	str	r0, [r4, #0]
 8008648:	4629      	mov	r1, r5
 800864a:	4630      	mov	r0, r6
 800864c:	f000 f85e 	bl	800870c <_sbrk_r>
 8008650:	1c43      	adds	r3, r0, #1
 8008652:	d124      	bne.n	800869e <_malloc_r+0x92>
 8008654:	230c      	movs	r3, #12
 8008656:	6033      	str	r3, [r6, #0]
 8008658:	4630      	mov	r0, r6
 800865a:	f000 f868 	bl	800872e <__malloc_unlock>
 800865e:	e7e4      	b.n	800862a <_malloc_r+0x1e>
 8008660:	680b      	ldr	r3, [r1, #0]
 8008662:	1b5b      	subs	r3, r3, r5
 8008664:	d418      	bmi.n	8008698 <_malloc_r+0x8c>
 8008666:	2b0b      	cmp	r3, #11
 8008668:	d90f      	bls.n	800868a <_malloc_r+0x7e>
 800866a:	600b      	str	r3, [r1, #0]
 800866c:	50cd      	str	r5, [r1, r3]
 800866e:	18cc      	adds	r4, r1, r3
 8008670:	4630      	mov	r0, r6
 8008672:	f000 f85c 	bl	800872e <__malloc_unlock>
 8008676:	f104 000b 	add.w	r0, r4, #11
 800867a:	1d23      	adds	r3, r4, #4
 800867c:	f020 0007 	bic.w	r0, r0, #7
 8008680:	1ac3      	subs	r3, r0, r3
 8008682:	d0d3      	beq.n	800862c <_malloc_r+0x20>
 8008684:	425a      	negs	r2, r3
 8008686:	50e2      	str	r2, [r4, r3]
 8008688:	e7d0      	b.n	800862c <_malloc_r+0x20>
 800868a:	428c      	cmp	r4, r1
 800868c:	684b      	ldr	r3, [r1, #4]
 800868e:	bf16      	itet	ne
 8008690:	6063      	strne	r3, [r4, #4]
 8008692:	6013      	streq	r3, [r2, #0]
 8008694:	460c      	movne	r4, r1
 8008696:	e7eb      	b.n	8008670 <_malloc_r+0x64>
 8008698:	460c      	mov	r4, r1
 800869a:	6849      	ldr	r1, [r1, #4]
 800869c:	e7cc      	b.n	8008638 <_malloc_r+0x2c>
 800869e:	1cc4      	adds	r4, r0, #3
 80086a0:	f024 0403 	bic.w	r4, r4, #3
 80086a4:	42a0      	cmp	r0, r4
 80086a6:	d005      	beq.n	80086b4 <_malloc_r+0xa8>
 80086a8:	1a21      	subs	r1, r4, r0
 80086aa:	4630      	mov	r0, r6
 80086ac:	f000 f82e 	bl	800870c <_sbrk_r>
 80086b0:	3001      	adds	r0, #1
 80086b2:	d0cf      	beq.n	8008654 <_malloc_r+0x48>
 80086b4:	6025      	str	r5, [r4, #0]
 80086b6:	e7db      	b.n	8008670 <_malloc_r+0x64>
 80086b8:	200000b0 	.word	0x200000b0
 80086bc:	200000b4 	.word	0x200000b4

080086c0 <_realloc_r>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	4607      	mov	r7, r0
 80086c4:	4614      	mov	r4, r2
 80086c6:	460e      	mov	r6, r1
 80086c8:	b921      	cbnz	r1, 80086d4 <_realloc_r+0x14>
 80086ca:	4611      	mov	r1, r2
 80086cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086d0:	f7ff bf9c 	b.w	800860c <_malloc_r>
 80086d4:	b922      	cbnz	r2, 80086e0 <_realloc_r+0x20>
 80086d6:	f7ff ff4b 	bl	8008570 <_free_r>
 80086da:	4625      	mov	r5, r4
 80086dc:	4628      	mov	r0, r5
 80086de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e0:	f000 f826 	bl	8008730 <_malloc_usable_size_r>
 80086e4:	42a0      	cmp	r0, r4
 80086e6:	d20f      	bcs.n	8008708 <_realloc_r+0x48>
 80086e8:	4621      	mov	r1, r4
 80086ea:	4638      	mov	r0, r7
 80086ec:	f7ff ff8e 	bl	800860c <_malloc_r>
 80086f0:	4605      	mov	r5, r0
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d0f2      	beq.n	80086dc <_realloc_r+0x1c>
 80086f6:	4631      	mov	r1, r6
 80086f8:	4622      	mov	r2, r4
 80086fa:	f7ff fc11 	bl	8007f20 <memcpy>
 80086fe:	4631      	mov	r1, r6
 8008700:	4638      	mov	r0, r7
 8008702:	f7ff ff35 	bl	8008570 <_free_r>
 8008706:	e7e9      	b.n	80086dc <_realloc_r+0x1c>
 8008708:	4635      	mov	r5, r6
 800870a:	e7e7      	b.n	80086dc <_realloc_r+0x1c>

0800870c <_sbrk_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4c06      	ldr	r4, [pc, #24]	; (8008728 <_sbrk_r+0x1c>)
 8008710:	2300      	movs	r3, #0
 8008712:	4605      	mov	r5, r0
 8008714:	4608      	mov	r0, r1
 8008716:	6023      	str	r3, [r4, #0]
 8008718:	f7fa fb4e 	bl	8002db8 <_sbrk>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	d102      	bne.n	8008726 <_sbrk_r+0x1a>
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	b103      	cbz	r3, 8008726 <_sbrk_r+0x1a>
 8008724:	602b      	str	r3, [r5, #0]
 8008726:	bd38      	pop	{r3, r4, r5, pc}
 8008728:	200004c0 	.word	0x200004c0

0800872c <__malloc_lock>:
 800872c:	4770      	bx	lr

0800872e <__malloc_unlock>:
 800872e:	4770      	bx	lr

08008730 <_malloc_usable_size_r>:
 8008730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008734:	1f18      	subs	r0, r3, #4
 8008736:	2b00      	cmp	r3, #0
 8008738:	bfbc      	itt	lt
 800873a:	580b      	ldrlt	r3, [r1, r0]
 800873c:	18c0      	addlt	r0, r0, r3
 800873e:	4770      	bx	lr

08008740 <_init>:
 8008740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008742:	bf00      	nop
 8008744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008746:	bc08      	pop	{r3}
 8008748:	469e      	mov	lr, r3
 800874a:	4770      	bx	lr

0800874c <_fini>:
 800874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874e:	bf00      	nop
 8008750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008752:	bc08      	pop	{r3}
 8008754:	469e      	mov	lr, r3
 8008756:	4770      	bx	lr
