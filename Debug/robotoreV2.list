
robotoreV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08008738  08008738  00018738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088f4  080088f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080088f4  080088f4  000188f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088fc  080088fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088fc  080088fc  000188fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008900  08008900  00018900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000070  08008974  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08008974  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a328  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003443  00000000  00000000  0003a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001510  00000000  00000000  0003d810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001398  00000000  00000000  0003ed20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000224ae  00000000  00000000  000400b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e52  00000000  00000000  00062566  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c92fe  00000000  00000000  000743b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d6b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd0  00000000  00000000  0013d734  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008720 	.word	0x08008720

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008720 	.word	0x08008720

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_frsub>:
 80005e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005ec:	e002      	b.n	80005f4 <__addsf3>
 80005ee:	bf00      	nop

080005f0 <__aeabi_fsub>:
 80005f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005f4 <__addsf3>:
 80005f4:	0042      	lsls	r2, r0, #1
 80005f6:	bf1f      	itttt	ne
 80005f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005fc:	ea92 0f03 	teqne	r2, r3
 8000600:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000604:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000608:	d06a      	beq.n	80006e0 <__addsf3+0xec>
 800060a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800060e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000612:	bfc1      	itttt	gt
 8000614:	18d2      	addgt	r2, r2, r3
 8000616:	4041      	eorgt	r1, r0
 8000618:	4048      	eorgt	r0, r1
 800061a:	4041      	eorgt	r1, r0
 800061c:	bfb8      	it	lt
 800061e:	425b      	neglt	r3, r3
 8000620:	2b19      	cmp	r3, #25
 8000622:	bf88      	it	hi
 8000624:	4770      	bxhi	lr
 8000626:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800062a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800062e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4240      	negne	r0, r0
 8000636:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800063e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000642:	bf18      	it	ne
 8000644:	4249      	negne	r1, r1
 8000646:	ea92 0f03 	teq	r2, r3
 800064a:	d03f      	beq.n	80006cc <__addsf3+0xd8>
 800064c:	f1a2 0201 	sub.w	r2, r2, #1
 8000650:	fa41 fc03 	asr.w	ip, r1, r3
 8000654:	eb10 000c 	adds.w	r0, r0, ip
 8000658:	f1c3 0320 	rsb	r3, r3, #32
 800065c:	fa01 f103 	lsl.w	r1, r1, r3
 8000660:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000664:	d502      	bpl.n	800066c <__addsf3+0x78>
 8000666:	4249      	negs	r1, r1
 8000668:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800066c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000670:	d313      	bcc.n	800069a <__addsf3+0xa6>
 8000672:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000676:	d306      	bcc.n	8000686 <__addsf3+0x92>
 8000678:	0840      	lsrs	r0, r0, #1
 800067a:	ea4f 0131 	mov.w	r1, r1, rrx
 800067e:	f102 0201 	add.w	r2, r2, #1
 8000682:	2afe      	cmp	r2, #254	; 0xfe
 8000684:	d251      	bcs.n	800072a <__addsf3+0x136>
 8000686:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800068a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800068e:	bf08      	it	eq
 8000690:	f020 0001 	biceq.w	r0, r0, #1
 8000694:	ea40 0003 	orr.w	r0, r0, r3
 8000698:	4770      	bx	lr
 800069a:	0049      	lsls	r1, r1, #1
 800069c:	eb40 0000 	adc.w	r0, r0, r0
 80006a0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80006a4:	f1a2 0201 	sub.w	r2, r2, #1
 80006a8:	d1ed      	bne.n	8000686 <__addsf3+0x92>
 80006aa:	fab0 fc80 	clz	ip, r0
 80006ae:	f1ac 0c08 	sub.w	ip, ip, #8
 80006b2:	ebb2 020c 	subs.w	r2, r2, ip
 80006b6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006ba:	bfaa      	itet	ge
 80006bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006c0:	4252      	neglt	r2, r2
 80006c2:	4318      	orrge	r0, r3
 80006c4:	bfbc      	itt	lt
 80006c6:	40d0      	lsrlt	r0, r2
 80006c8:	4318      	orrlt	r0, r3
 80006ca:	4770      	bx	lr
 80006cc:	f092 0f00 	teq	r2, #0
 80006d0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006d4:	bf06      	itte	eq
 80006d6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006da:	3201      	addeq	r2, #1
 80006dc:	3b01      	subne	r3, #1
 80006de:	e7b5      	b.n	800064c <__addsf3+0x58>
 80006e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006e8:	bf18      	it	ne
 80006ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006ee:	d021      	beq.n	8000734 <__addsf3+0x140>
 80006f0:	ea92 0f03 	teq	r2, r3
 80006f4:	d004      	beq.n	8000700 <__addsf3+0x10c>
 80006f6:	f092 0f00 	teq	r2, #0
 80006fa:	bf08      	it	eq
 80006fc:	4608      	moveq	r0, r1
 80006fe:	4770      	bx	lr
 8000700:	ea90 0f01 	teq	r0, r1
 8000704:	bf1c      	itt	ne
 8000706:	2000      	movne	r0, #0
 8000708:	4770      	bxne	lr
 800070a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800070e:	d104      	bne.n	800071a <__addsf3+0x126>
 8000710:	0040      	lsls	r0, r0, #1
 8000712:	bf28      	it	cs
 8000714:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000718:	4770      	bx	lr
 800071a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800071e:	bf3c      	itt	cc
 8000720:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000724:	4770      	bxcc	lr
 8000726:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800072a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800072e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000732:	4770      	bx	lr
 8000734:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000738:	bf16      	itet	ne
 800073a:	4608      	movne	r0, r1
 800073c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000740:	4601      	movne	r1, r0
 8000742:	0242      	lsls	r2, r0, #9
 8000744:	bf06      	itte	eq
 8000746:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800074a:	ea90 0f01 	teqeq	r0, r1
 800074e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000752:	4770      	bx	lr

08000754 <__aeabi_ui2f>:
 8000754:	f04f 0300 	mov.w	r3, #0
 8000758:	e004      	b.n	8000764 <__aeabi_i2f+0x8>
 800075a:	bf00      	nop

0800075c <__aeabi_i2f>:
 800075c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000760:	bf48      	it	mi
 8000762:	4240      	negmi	r0, r0
 8000764:	ea5f 0c00 	movs.w	ip, r0
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000770:	4601      	mov	r1, r0
 8000772:	f04f 0000 	mov.w	r0, #0
 8000776:	e01c      	b.n	80007b2 <__aeabi_l2f+0x2a>

08000778 <__aeabi_ul2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f04f 0300 	mov.w	r3, #0
 8000784:	e00a      	b.n	800079c <__aeabi_l2f+0x14>
 8000786:	bf00      	nop

08000788 <__aeabi_l2f>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000794:	d502      	bpl.n	800079c <__aeabi_l2f+0x14>
 8000796:	4240      	negs	r0, r0
 8000798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079c:	ea5f 0c01 	movs.w	ip, r1
 80007a0:	bf02      	ittt	eq
 80007a2:	4684      	moveq	ip, r0
 80007a4:	4601      	moveq	r1, r0
 80007a6:	2000      	moveq	r0, #0
 80007a8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ac:	bf08      	it	eq
 80007ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007b2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007b6:	fabc f28c 	clz	r2, ip
 80007ba:	3a08      	subs	r2, #8
 80007bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007c0:	db10      	blt.n	80007e4 <__aeabi_l2f+0x5c>
 80007c2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007c6:	4463      	add	r3, ip
 80007c8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007cc:	f1c2 0220 	rsb	r2, r2, #32
 80007d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007d4:	fa20 f202 	lsr.w	r2, r0, r2
 80007d8:	eb43 0002 	adc.w	r0, r3, r2
 80007dc:	bf08      	it	eq
 80007de:	f020 0001 	biceq.w	r0, r0, #1
 80007e2:	4770      	bx	lr
 80007e4:	f102 0220 	add.w	r2, r2, #32
 80007e8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007ec:	f1c2 0220 	rsb	r2, r2, #32
 80007f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007f4:	fa21 f202 	lsr.w	r2, r1, r2
 80007f8:	eb43 0002 	adc.w	r0, r3, r2
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000802:	4770      	bx	lr

08000804 <__aeabi_uldivmod>:
 8000804:	b953      	cbnz	r3, 800081c <__aeabi_uldivmod+0x18>
 8000806:	b94a      	cbnz	r2, 800081c <__aeabi_uldivmod+0x18>
 8000808:	2900      	cmp	r1, #0
 800080a:	bf08      	it	eq
 800080c:	2800      	cmpeq	r0, #0
 800080e:	bf1c      	itt	ne
 8000810:	f04f 31ff 	movne.w	r1, #4294967295
 8000814:	f04f 30ff 	movne.w	r0, #4294967295
 8000818:	f000 b972 	b.w	8000b00 <__aeabi_idiv0>
 800081c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000820:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000824:	f000 f806 	bl	8000834 <__udivmoddi4>
 8000828:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000830:	b004      	add	sp, #16
 8000832:	4770      	bx	lr

08000834 <__udivmoddi4>:
 8000834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000838:	9e08      	ldr	r6, [sp, #32]
 800083a:	4604      	mov	r4, r0
 800083c:	4688      	mov	r8, r1
 800083e:	2b00      	cmp	r3, #0
 8000840:	d14b      	bne.n	80008da <__udivmoddi4+0xa6>
 8000842:	428a      	cmp	r2, r1
 8000844:	4615      	mov	r5, r2
 8000846:	d967      	bls.n	8000918 <__udivmoddi4+0xe4>
 8000848:	fab2 f282 	clz	r2, r2
 800084c:	b14a      	cbz	r2, 8000862 <__udivmoddi4+0x2e>
 800084e:	f1c2 0720 	rsb	r7, r2, #32
 8000852:	fa01 f302 	lsl.w	r3, r1, r2
 8000856:	fa20 f707 	lsr.w	r7, r0, r7
 800085a:	4095      	lsls	r5, r2
 800085c:	ea47 0803 	orr.w	r8, r7, r3
 8000860:	4094      	lsls	r4, r2
 8000862:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000866:	0c23      	lsrs	r3, r4, #16
 8000868:	fbb8 f7fe 	udiv	r7, r8, lr
 800086c:	fa1f fc85 	uxth.w	ip, r5
 8000870:	fb0e 8817 	mls	r8, lr, r7, r8
 8000874:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000878:	fb07 f10c 	mul.w	r1, r7, ip
 800087c:	4299      	cmp	r1, r3
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x60>
 8000880:	18eb      	adds	r3, r5, r3
 8000882:	f107 30ff 	add.w	r0, r7, #4294967295
 8000886:	f080 811b 	bcs.w	8000ac0 <__udivmoddi4+0x28c>
 800088a:	4299      	cmp	r1, r3
 800088c:	f240 8118 	bls.w	8000ac0 <__udivmoddi4+0x28c>
 8000890:	3f02      	subs	r7, #2
 8000892:	442b      	add	r3, r5
 8000894:	1a5b      	subs	r3, r3, r1
 8000896:	b2a4      	uxth	r4, r4
 8000898:	fbb3 f0fe 	udiv	r0, r3, lr
 800089c:	fb0e 3310 	mls	r3, lr, r0, r3
 80008a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80008a8:	45a4      	cmp	ip, r4
 80008aa:	d909      	bls.n	80008c0 <__udivmoddi4+0x8c>
 80008ac:	192c      	adds	r4, r5, r4
 80008ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80008b2:	f080 8107 	bcs.w	8000ac4 <__udivmoddi4+0x290>
 80008b6:	45a4      	cmp	ip, r4
 80008b8:	f240 8104 	bls.w	8000ac4 <__udivmoddi4+0x290>
 80008bc:	3802      	subs	r0, #2
 80008be:	442c      	add	r4, r5
 80008c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80008c4:	eba4 040c 	sub.w	r4, r4, ip
 80008c8:	2700      	movs	r7, #0
 80008ca:	b11e      	cbz	r6, 80008d4 <__udivmoddi4+0xa0>
 80008cc:	40d4      	lsrs	r4, r2
 80008ce:	2300      	movs	r3, #0
 80008d0:	e9c6 4300 	strd	r4, r3, [r6]
 80008d4:	4639      	mov	r1, r7
 80008d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008da:	428b      	cmp	r3, r1
 80008dc:	d909      	bls.n	80008f2 <__udivmoddi4+0xbe>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	f000 80eb 	beq.w	8000aba <__udivmoddi4+0x286>
 80008e4:	2700      	movs	r7, #0
 80008e6:	e9c6 0100 	strd	r0, r1, [r6]
 80008ea:	4638      	mov	r0, r7
 80008ec:	4639      	mov	r1, r7
 80008ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f2:	fab3 f783 	clz	r7, r3
 80008f6:	2f00      	cmp	r7, #0
 80008f8:	d147      	bne.n	800098a <__udivmoddi4+0x156>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d302      	bcc.n	8000904 <__udivmoddi4+0xd0>
 80008fe:	4282      	cmp	r2, r0
 8000900:	f200 80fa 	bhi.w	8000af8 <__udivmoddi4+0x2c4>
 8000904:	1a84      	subs	r4, r0, r2
 8000906:	eb61 0303 	sbc.w	r3, r1, r3
 800090a:	2001      	movs	r0, #1
 800090c:	4698      	mov	r8, r3
 800090e:	2e00      	cmp	r6, #0
 8000910:	d0e0      	beq.n	80008d4 <__udivmoddi4+0xa0>
 8000912:	e9c6 4800 	strd	r4, r8, [r6]
 8000916:	e7dd      	b.n	80008d4 <__udivmoddi4+0xa0>
 8000918:	b902      	cbnz	r2, 800091c <__udivmoddi4+0xe8>
 800091a:	deff      	udf	#255	; 0xff
 800091c:	fab2 f282 	clz	r2, r2
 8000920:	2a00      	cmp	r2, #0
 8000922:	f040 808f 	bne.w	8000a44 <__udivmoddi4+0x210>
 8000926:	1b49      	subs	r1, r1, r5
 8000928:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800092c:	fa1f f885 	uxth.w	r8, r5
 8000930:	2701      	movs	r7, #1
 8000932:	fbb1 fcfe 	udiv	ip, r1, lr
 8000936:	0c23      	lsrs	r3, r4, #16
 8000938:	fb0e 111c 	mls	r1, lr, ip, r1
 800093c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000940:	fb08 f10c 	mul.w	r1, r8, ip
 8000944:	4299      	cmp	r1, r3
 8000946:	d907      	bls.n	8000958 <__udivmoddi4+0x124>
 8000948:	18eb      	adds	r3, r5, r3
 800094a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800094e:	d202      	bcs.n	8000956 <__udivmoddi4+0x122>
 8000950:	4299      	cmp	r1, r3
 8000952:	f200 80cd 	bhi.w	8000af0 <__udivmoddi4+0x2bc>
 8000956:	4684      	mov	ip, r0
 8000958:	1a59      	subs	r1, r3, r1
 800095a:	b2a3      	uxth	r3, r4
 800095c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000960:	fb0e 1410 	mls	r4, lr, r0, r1
 8000964:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000968:	fb08 f800 	mul.w	r8, r8, r0
 800096c:	45a0      	cmp	r8, r4
 800096e:	d907      	bls.n	8000980 <__udivmoddi4+0x14c>
 8000970:	192c      	adds	r4, r5, r4
 8000972:	f100 33ff 	add.w	r3, r0, #4294967295
 8000976:	d202      	bcs.n	800097e <__udivmoddi4+0x14a>
 8000978:	45a0      	cmp	r8, r4
 800097a:	f200 80b6 	bhi.w	8000aea <__udivmoddi4+0x2b6>
 800097e:	4618      	mov	r0, r3
 8000980:	eba4 0408 	sub.w	r4, r4, r8
 8000984:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000988:	e79f      	b.n	80008ca <__udivmoddi4+0x96>
 800098a:	f1c7 0c20 	rsb	ip, r7, #32
 800098e:	40bb      	lsls	r3, r7
 8000990:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000994:	ea4e 0e03 	orr.w	lr, lr, r3
 8000998:	fa01 f407 	lsl.w	r4, r1, r7
 800099c:	fa20 f50c 	lsr.w	r5, r0, ip
 80009a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80009a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80009a8:	4325      	orrs	r5, r4
 80009aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80009ae:	0c2c      	lsrs	r4, r5, #16
 80009b0:	fb08 3319 	mls	r3, r8, r9, r3
 80009b4:	fa1f fa8e 	uxth.w	sl, lr
 80009b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80009bc:	fb09 f40a 	mul.w	r4, r9, sl
 80009c0:	429c      	cmp	r4, r3
 80009c2:	fa02 f207 	lsl.w	r2, r2, r7
 80009c6:	fa00 f107 	lsl.w	r1, r0, r7
 80009ca:	d90b      	bls.n	80009e4 <__udivmoddi4+0x1b0>
 80009cc:	eb1e 0303 	adds.w	r3, lr, r3
 80009d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80009d4:	f080 8087 	bcs.w	8000ae6 <__udivmoddi4+0x2b2>
 80009d8:	429c      	cmp	r4, r3
 80009da:	f240 8084 	bls.w	8000ae6 <__udivmoddi4+0x2b2>
 80009de:	f1a9 0902 	sub.w	r9, r9, #2
 80009e2:	4473      	add	r3, lr
 80009e4:	1b1b      	subs	r3, r3, r4
 80009e6:	b2ad      	uxth	r5, r5
 80009e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80009ec:	fb08 3310 	mls	r3, r8, r0, r3
 80009f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80009f8:	45a2      	cmp	sl, r4
 80009fa:	d908      	bls.n	8000a0e <__udivmoddi4+0x1da>
 80009fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000a00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a04:	d26b      	bcs.n	8000ade <__udivmoddi4+0x2aa>
 8000a06:	45a2      	cmp	sl, r4
 8000a08:	d969      	bls.n	8000ade <__udivmoddi4+0x2aa>
 8000a0a:	3802      	subs	r0, #2
 8000a0c:	4474      	add	r4, lr
 8000a0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a12:	fba0 8902 	umull	r8, r9, r0, r2
 8000a16:	eba4 040a 	sub.w	r4, r4, sl
 8000a1a:	454c      	cmp	r4, r9
 8000a1c:	46c2      	mov	sl, r8
 8000a1e:	464b      	mov	r3, r9
 8000a20:	d354      	bcc.n	8000acc <__udivmoddi4+0x298>
 8000a22:	d051      	beq.n	8000ac8 <__udivmoddi4+0x294>
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d069      	beq.n	8000afc <__udivmoddi4+0x2c8>
 8000a28:	ebb1 050a 	subs.w	r5, r1, sl
 8000a2c:	eb64 0403 	sbc.w	r4, r4, r3
 8000a30:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a34:	40fd      	lsrs	r5, r7
 8000a36:	40fc      	lsrs	r4, r7
 8000a38:	ea4c 0505 	orr.w	r5, ip, r5
 8000a3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000a40:	2700      	movs	r7, #0
 8000a42:	e747      	b.n	80008d4 <__udivmoddi4+0xa0>
 8000a44:	f1c2 0320 	rsb	r3, r2, #32
 8000a48:	fa20 f703 	lsr.w	r7, r0, r3
 8000a4c:	4095      	lsls	r5, r2
 8000a4e:	fa01 f002 	lsl.w	r0, r1, r2
 8000a52:	fa21 f303 	lsr.w	r3, r1, r3
 8000a56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a5a:	4338      	orrs	r0, r7
 8000a5c:	0c01      	lsrs	r1, r0, #16
 8000a5e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a62:	fa1f f885 	uxth.w	r8, r5
 8000a66:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb07 f308 	mul.w	r3, r7, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	fa04 f402 	lsl.w	r4, r4, r2
 8000a78:	d907      	bls.n	8000a8a <__udivmoddi4+0x256>
 8000a7a:	1869      	adds	r1, r5, r1
 8000a7c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a80:	d22f      	bcs.n	8000ae2 <__udivmoddi4+0x2ae>
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d92d      	bls.n	8000ae2 <__udivmoddi4+0x2ae>
 8000a86:	3f02      	subs	r7, #2
 8000a88:	4429      	add	r1, r5
 8000a8a:	1acb      	subs	r3, r1, r3
 8000a8c:	b281      	uxth	r1, r0
 8000a8e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a92:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a9a:	fb00 f308 	mul.w	r3, r0, r8
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d907      	bls.n	8000ab2 <__udivmoddi4+0x27e>
 8000aa2:	1869      	adds	r1, r5, r1
 8000aa4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000aa8:	d217      	bcs.n	8000ada <__udivmoddi4+0x2a6>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d915      	bls.n	8000ada <__udivmoddi4+0x2a6>
 8000aae:	3802      	subs	r0, #2
 8000ab0:	4429      	add	r1, r5
 8000ab2:	1ac9      	subs	r1, r1, r3
 8000ab4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ab8:	e73b      	b.n	8000932 <__udivmoddi4+0xfe>
 8000aba:	4637      	mov	r7, r6
 8000abc:	4630      	mov	r0, r6
 8000abe:	e709      	b.n	80008d4 <__udivmoddi4+0xa0>
 8000ac0:	4607      	mov	r7, r0
 8000ac2:	e6e7      	b.n	8000894 <__udivmoddi4+0x60>
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	e6fb      	b.n	80008c0 <__udivmoddi4+0x8c>
 8000ac8:	4541      	cmp	r1, r8
 8000aca:	d2ab      	bcs.n	8000a24 <__udivmoddi4+0x1f0>
 8000acc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ad0:	eb69 020e 	sbc.w	r2, r9, lr
 8000ad4:	3801      	subs	r0, #1
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	e7a4      	b.n	8000a24 <__udivmoddi4+0x1f0>
 8000ada:	4660      	mov	r0, ip
 8000adc:	e7e9      	b.n	8000ab2 <__udivmoddi4+0x27e>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	e795      	b.n	8000a0e <__udivmoddi4+0x1da>
 8000ae2:	4667      	mov	r7, ip
 8000ae4:	e7d1      	b.n	8000a8a <__udivmoddi4+0x256>
 8000ae6:	4681      	mov	r9, r0
 8000ae8:	e77c      	b.n	80009e4 <__udivmoddi4+0x1b0>
 8000aea:	3802      	subs	r0, #2
 8000aec:	442c      	add	r4, r5
 8000aee:	e747      	b.n	8000980 <__udivmoddi4+0x14c>
 8000af0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000af4:	442b      	add	r3, r5
 8000af6:	e72f      	b.n	8000958 <__udivmoddi4+0x124>
 8000af8:	4638      	mov	r0, r7
 8000afa:	e708      	b.n	800090e <__udivmoddi4+0xda>
 8000afc:	4637      	mov	r7, r6
 8000afe:	e6e9      	b.n	80008d4 <__udivmoddi4+0xa0>

08000b00 <__aeabi_idiv0>:
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <lcd_cmd>:
//AQM0802.c Ver.1.0
#include "AQM0802.h"

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000b0e:	2300      	movs	r3, #0
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2,SLAVEADRESS,Txcmd,2,100);
 8000b16:	f107 020c 	add.w	r2, r7, #12
 8000b1a:	2364      	movs	r3, #100	; 0x64
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2302      	movs	r3, #2
 8000b20:	217c      	movs	r1, #124	; 0x7c
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <lcd_cmd+0x2c>)
 8000b24:	f003 ff9a 	bl	8004a5c <HAL_I2C_Master_Transmit>
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000158 	.word	0x20000158

08000b34 <lcd_data>:

void lcd_data(uint8_t data) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	733b      	strb	r3, [r7, #12]
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2,SLAVEADRESS,Txdata,2,100);
 8000b46:	f107 020c 	add.w	r2, r7, #12
 8000b4a:	2364      	movs	r3, #100	; 0x64
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2302      	movs	r3, #2
 8000b50:	217c      	movs	r1, #124	; 0x7c
 8000b52:	4803      	ldr	r0, [pc, #12]	; (8000b60 <lcd_data+0x2c>)
 8000b54:	f003 ff82 	bl	8004a5c <HAL_I2C_Master_Transmit>
}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000158 	.word	0x20000158

08000b64 <lcd_init>:

void lcd_init(){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
	HAL_Delay(40);
 8000b68:	2028      	movs	r0, #40	; 0x28
 8000b6a:	f002 f9f3 	bl	8002f54 <HAL_Delay>
	lcd_cmd(0x38);
 8000b6e:	2038      	movs	r0, #56	; 0x38
 8000b70:	f7ff ffc8 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f002 f9ed 	bl	8002f54 <HAL_Delay>
	lcd_cmd(0x39);
 8000b7a:	2039      	movs	r0, #57	; 0x39
 8000b7c:	f7ff ffc2 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000b80:	2001      	movs	r0, #1
 8000b82:	f002 f9e7 	bl	8002f54 <HAL_Delay>
	lcd_cmd(0x14);
 8000b86:	2014      	movs	r0, #20
 8000b88:	f7ff ffbc 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f002 f9e1 	bl	8002f54 <HAL_Delay>
	lcd_cmd(0x70);
 8000b92:	2070      	movs	r0, #112	; 0x70
 8000b94:	f7ff ffb6 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f002 f9db 	bl	8002f54 <HAL_Delay>
	lcd_cmd(0x56);
 8000b9e:	2056      	movs	r0, #86	; 0x56
 8000ba0:	f7ff ffb0 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f002 f9d5 	bl	8002f54 <HAL_Delay>
	lcd_cmd(0x6C);
 8000baa:	206c      	movs	r0, #108	; 0x6c
 8000bac:	f7ff ffaa 	bl	8000b04 <lcd_cmd>
	HAL_Delay(200);
 8000bb0:	20c8      	movs	r0, #200	; 0xc8
 8000bb2:	f002 f9cf 	bl	8002f54 <HAL_Delay>
	lcd_cmd(0x38);
 8000bb6:	2038      	movs	r0, #56	; 0x38
 8000bb8:	f7ff ffa4 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f002 f9c9 	bl	8002f54 <HAL_Delay>
	lcd_cmd(0x0C);
 8000bc2:	200c      	movs	r0, #12
 8000bc4:	f7ff ff9e 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f002 f9c3 	bl	8002f54 <HAL_Delay>
	lcd_cmd(0x01);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff ff98 	bl	8000b04 <lcd_cmd>
	HAL_Delay(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f002 f9bd 	bl	8002f54 <HAL_Delay>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <lcd_locate>:
	HAL_Delay(1);
	lcd_cmd(0x02);
	HAL_Delay(1);
}

void lcd_locate(int x, int y) {
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	3302      	adds	r3, #2
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	019b      	lsls	r3, r3, #6
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff82 	bl	8000b04 <lcd_cmd>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <lcd_print>:

void lcd_print(const char *str) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 8000c10:	e007      	b.n	8000c22 <lcd_print+0x1a>
	{
			lcd_data(*str);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff8c 	bl	8000b34 <lcd_data>
			str++;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f3      	bne.n	8000c12 <lcd_print+0xa>
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8000c32:	b40f      	push	{r0, r1, r2, r3}
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

    va_start(argptr, format);
 8000c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3e:	61bb      	str	r3, [r7, #24]
    ret = vsprintf(lcd_bff, format, argptr);
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c46:	4618      	mov	r0, r3
 8000c48:	f007 f984 	bl	8007f54 <vsiprintf>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8000c50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	dd03      	ble.n	8000c60 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ffd4 	bl	8000c08 <lcd_print>
	}

	return ret;
 8000c60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c6e:	b004      	add	sp, #16
 8000c70:	4770      	bx	lr

08000c72 <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b088      	sub	sp, #32
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8000c7c:	f003 fa00 	bl	8004080 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 8000c94:	f107 0208 	add.w	r2, r7, #8
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 fab6 	bl	8004210 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000ca4:	f003 fa0e 	bl	80040c4 <HAL_FLASH_Lock>
}
 8000ca8:	bf00      	nop
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <read_byte>:
#include "ICM20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <read_byte+0x50>)
 8000cca:	f003 fd5d 	bl	8004788 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8000cce:	f107 010f 	add.w	r1, r7, #15
 8000cd2:	2364      	movs	r3, #100	; 0x64
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	480b      	ldr	r0, [pc, #44]	; (8000d04 <read_byte+0x54>)
 8000cd8:	f005 f9b0 	bl	800603c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 8000cdc:	f107 010e 	add.w	r1, r7, #14
 8000ce0:	2364      	movs	r3, #100	; 0x64
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4807      	ldr	r0, [pc, #28]	; (8000d04 <read_byte+0x54>)
 8000ce6:	f005 fadd 	bl	80062a4 <HAL_SPI_Receive>
	CS_SET;
 8000cea:	2201      	movs	r2, #1
 8000cec:	2104      	movs	r1, #4
 8000cee:	4804      	ldr	r0, [pc, #16]	; (8000d00 <read_byte+0x50>)
 8000cf0:	f003 fd4a 	bl	8004788 <HAL_GPIO_WritePin>

	return val;
 8000cf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	200001ec 	.word	0x200001ec

08000d08 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	460a      	mov	r2, r1
 8000d12:	71fb      	strb	r3, [r7, #7]
 8000d14:	4613      	mov	r3, r2
 8000d16:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8000d22:	2200      	movs	r2, #0
 8000d24:	2104      	movs	r1, #4
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <write_byte+0x50>)
 8000d28:	f003 fd2e 	bl	8004788 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8000d2c:	f107 010f 	add.w	r1, r7, #15
 8000d30:	2364      	movs	r3, #100	; 0x64
 8000d32:	2201      	movs	r2, #1
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <write_byte+0x54>)
 8000d36:	f005 f981 	bl	800603c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 8000d3a:	1db9      	adds	r1, r7, #6
 8000d3c:	2364      	movs	r3, #100	; 0x64
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4806      	ldr	r0, [pc, #24]	; (8000d5c <write_byte+0x54>)
 8000d42:	f005 f97b 	bl	800603c <HAL_SPI_Transmit>
	CS_SET;
 8000d46:	2201      	movs	r2, #1
 8000d48:	2104      	movs	r1, #4
 8000d4a:	4803      	ldr	r0, [pc, #12]	; (8000d58 <write_byte+0x50>)
 8000d4c:	f003 fd1c 	bl	8004788 <HAL_GPIO_WritePin>
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40020c00 	.word	0x40020c00
 8000d5c:	200001ec 	.word	0x200001ec

08000d60 <IMU_init>:

uint8_t IMU_init() {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff ffa2 	bl	8000cb0 <read_byte>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	2be0      	cmp	r3, #224	; 0xe0
 8000d74:	d11c      	bne.n	8000db0 <IMU_init+0x50>
		ret = 1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	2006      	movs	r0, #6
 8000d7e:	f7ff ffc3 	bl	8000d08 <write_byte>
		HAL_Delay(100);
 8000d82:	2064      	movs	r0, #100	; 0x64
 8000d84:	f002 f8e6 	bl	8002f54 <HAL_Delay>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8000d88:	2110      	movs	r1, #16
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	f7ff ffbc 	bl	8000d08 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8000d90:	2120      	movs	r1, #32
 8000d92:	207f      	movs	r0, #127	; 0x7f
 8000d94:	f7ff ffb8 	bl	8000d08 <write_byte>
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable
		write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 8000d98:	2107      	movs	r1, #7
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff ffb4 	bl	8000d08 <write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x00);	//range±2g
 8000da0:	2100      	movs	r1, #0
 8000da2:	2014      	movs	r0, #20
 8000da4:	f7ff ffb0 	bl	8000d08 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8000da8:	2100      	movs	r1, #0
 8000daa:	207f      	movs	r0, #127	; 0x7f
 8000dac:	f7ff ffac 	bl	8000d08 <write_byte>
	}
	return ret;
 8000db0:	79fb      	ldrb	r3, [r7, #7]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <read_gyro_data>:

void read_zg_data() {
	zg = ((int16_t)read_byte(0x37) << 8) | ((int16_t)read_byte(0x38));
}

void read_gyro_data() {
 8000dbc:	b598      	push	{r3, r4, r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	xg = ((int16_t)read_byte(0x33) << 8) | ((int16_t)read_byte(0x34));
 8000dc0:	2033      	movs	r0, #51	; 0x33
 8000dc2:	f7ff ff75 	bl	8000cb0 <read_byte>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	b21c      	sxth	r4, r3
 8000dcc:	2034      	movs	r0, #52	; 0x34
 8000dce:	f7ff ff6f 	bl	8000cb0 <read_byte>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	4323      	orrs	r3, r4
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <read_gyro_data+0x64>)
 8000ddc:	801a      	strh	r2, [r3, #0]
	yg = ((int16_t)read_byte(0x35) << 8) | ((int16_t)read_byte(0x36));
 8000dde:	2035      	movs	r0, #53	; 0x35
 8000de0:	f7ff ff66 	bl	8000cb0 <read_byte>
 8000de4:	4603      	mov	r3, r0
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21c      	sxth	r4, r3
 8000dea:	2036      	movs	r0, #54	; 0x36
 8000dec:	f7ff ff60 	bl	8000cb0 <read_byte>
 8000df0:	4603      	mov	r3, r0
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	4323      	orrs	r3, r4
 8000df6:	b21a      	sxth	r2, r3
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <read_gyro_data+0x68>)
 8000dfa:	801a      	strh	r2, [r3, #0]
	zg = ((int16_t)read_byte(0x37) << 8) | ((int16_t)read_byte(0x38));
 8000dfc:	2037      	movs	r0, #55	; 0x37
 8000dfe:	f7ff ff57 	bl	8000cb0 <read_byte>
 8000e02:	4603      	mov	r3, r0
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	b21c      	sxth	r4, r3
 8000e08:	2038      	movs	r0, #56	; 0x38
 8000e0a:	f7ff ff51 	bl	8000cb0 <read_byte>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4323      	orrs	r3, r4
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <read_gyro_data+0x6c>)
 8000e18:	801a      	strh	r2, [r3, #0]
}
 8000e1a:	bf00      	nop
 8000e1c:	bd98      	pop	{r3, r4, r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000c0 	.word	0x200000c0
 8000e24:	200000be 	.word	0x200000be
 8000e28:	200000b8 	.word	0x200000b8

08000e2c <read_accel_data>:

void read_xa_data() {
	xa = ((int16_t)read_byte(0x2D) << 8) | ((int16_t)read_byte(0x2E));
}

void read_accel_data() {
 8000e2c:	b598      	push	{r3, r4, r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	xa = ((int16_t)read_byte(0x2D) << 8) | ((int16_t)read_byte(0x2E));
 8000e30:	202d      	movs	r0, #45	; 0x2d
 8000e32:	f7ff ff3d 	bl	8000cb0 <read_byte>
 8000e36:	4603      	mov	r3, r0
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	b21c      	sxth	r4, r3
 8000e3c:	202e      	movs	r0, #46	; 0x2e
 8000e3e:	f7ff ff37 	bl	8000cb0 <read_byte>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	4323      	orrs	r3, r4
 8000e48:	b21a      	sxth	r2, r3
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <read_accel_data+0x64>)
 8000e4c:	801a      	strh	r2, [r3, #0]
	ya = ((int16_t)read_byte(0x2F) << 8) | ((int16_t)read_byte(0x30));
 8000e4e:	202f      	movs	r0, #47	; 0x2f
 8000e50:	f7ff ff2e 	bl	8000cb0 <read_byte>
 8000e54:	4603      	mov	r3, r0
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	b21c      	sxth	r4, r3
 8000e5a:	2030      	movs	r0, #48	; 0x30
 8000e5c:	f7ff ff28 	bl	8000cb0 <read_byte>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	4323      	orrs	r3, r4
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <read_accel_data+0x68>)
 8000e6a:	801a      	strh	r2, [r3, #0]
	za = ((int16_t)read_byte(0x31) << 8) | ((int16_t)read_byte(0x32));
 8000e6c:	2031      	movs	r0, #49	; 0x31
 8000e6e:	f7ff ff1f 	bl	8000cb0 <read_byte>
 8000e72:	4603      	mov	r3, r0
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	b21c      	sxth	r4, r3
 8000e78:	2032      	movs	r0, #50	; 0x32
 8000e7a:	f7ff ff19 	bl	8000cb0 <read_byte>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	4323      	orrs	r3, r4
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <read_accel_data+0x6c>)
 8000e88:	801a      	strh	r2, [r3, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	bd98      	pop	{r3, r4, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000bc 	.word	0x200000bc
 8000e94:	200000c2 	.word	0x200000c2
 8000e98:	200000ba 	.word	0x200000ba

08000e9c <INA260_read>:
#include "INA260.h"

#define SLAVEADRESS1 (0x40<<1)
//#define SLAVEADRESS2 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af02      	add	r7, sp, #8
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS1,&pointer_byte,1,100);
 8000ea6:	1dfa      	adds	r2, r7, #7
 8000ea8:	2364      	movs	r3, #100	; 0x64
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2301      	movs	r3, #1
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <INA260_read+0x48>)
 8000eb2:	f003 fdd3 	bl	8004a5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,SLAVEADRESS1,Rxdata,2,100);
 8000eb6:	f107 020c 	add.w	r2, r7, #12
 8000eba:	2364      	movs	r3, #100	; 0x64
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <INA260_read+0x48>)
 8000ec4:	f003 fec8 	bl	8004c58 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8000ec8:	7b3b      	ldrb	r3, [r7, #12]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	7b7b      	ldrb	r3, [r7, #13]
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	81fb      	strh	r3, [r7, #14]
	return val;
 8000ed8:	89fb      	ldrh	r3, [r7, #14]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000104 	.word	0x20000104

08000ee8 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	71bb      	strb	r3, [r7, #6]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	717b      	strb	r3, [r7, #5]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	733b      	strb	r3, [r7, #12]
 8000efe:	79bb      	ldrb	r3, [r7, #6]
 8000f00:	737b      	strb	r3, [r7, #13]
 8000f02:	797b      	ldrb	r3, [r7, #5]
 8000f04:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS1,Txcmd,3,100);
 8000f06:	f107 020c 	add.w	r2, r7, #12
 8000f0a:	2364      	movs	r3, #100	; 0x64
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2303      	movs	r3, #3
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	4803      	ldr	r0, [pc, #12]	; (8000f20 <INA260_write+0x38>)
 8000f14:	f003 fda2 	bl	8004a5c <HAL_I2C_Master_Transmit>
}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000104 	.word	0x20000104

08000f24 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460a      	mov	r2, r1
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4613      	mov	r3, r2
 8000f32:	71bb      	strb	r3, [r7, #6]
	INA260_write(0x00 , msbyte , lsbyte);
 8000f34:	79ba      	ldrb	r2, [r7, #6]
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f7ff ffd4 	bl	8000ee8 <INA260_write>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <INA260_init>:

void INA260_init() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	setConfig(0x00,0xDF);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8000f4c:	21df      	movs	r1, #223	; 0xdf
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffe8 	bl	8000f24 <setConfig>
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <mileage>:
float order_posR = 0.0f;
float order_posL = 0.0f;
float order_velR = 0.0f;
float order_velL = 0.0f;

float mileage(float mm) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	ed87 0a01 	vstr	s0, [r7, #4]
	return mm * ENC_PULSE_MM;
 8000f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f66:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f7c <mileage+0x24>
 8000f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	3c47ffde 	.word	0x3c47ffde

08000f80 <setup>:
#include "control.h"

void setup(void){
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
	unsigned short volt_reg;

	led_pattern(setup_mode);
 8000f86:	4bbe      	ldr	r3, [pc, #760]	; (8001280 <setup+0x300>)
 8000f88:	f993 3000 	ldrsb.w	r3, [r3]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 f984 	bl	800229c <led_pattern>

	switch(setup_mode) {
 8000f94:	4bba      	ldr	r3, [pc, #744]	; (8001280 <setup+0x300>)
 8000f96:	f993 3000 	ldrsb.w	r3, [r3]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	f200 82e9 	bhi.w	8001572 <setup+0x5f2>
 8000fa0:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <setup+0x28>)
 8000fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa6:	bf00      	nop
 8000fa8:	08000fc9 	.word	0x08000fc9
 8000fac:	08001341 	.word	0x08001341
 8000fb0:	080013c1 	.word	0x080013c1
 8000fb4:	08001465 	.word	0x08001465
 8000fb8:	080014fb 	.word	0x080014fb
 8000fbc:	08001519 	.word	0x08001519
 8000fc0:	08001537 	.word	0x08001537
 8000fc4:	08001555 	.word	0x08001555
		case 0:	//sensor check

		if( sw_center_state == 1 ) {	//buzzer
 8000fc8:	4bae      	ldr	r3, [pc, #696]	; (8001284 <setup+0x304>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d105      	bne.n	8000fdc <setup+0x5c>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2099);
 8000fd0:	4bad      	ldr	r3, [pc, #692]	; (8001288 <setup+0x308>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f640 0233 	movw	r2, #2099	; 0x833
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000fda:	e003      	b.n	8000fe4 <setup+0x64>
		}
		else __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000fdc:	4baa      	ldr	r3, [pc, #680]	; (8001288 <setup+0x308>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34

		switch(check_sens_val) {
 8000fe4:	4ba9      	ldr	r3, [pc, #676]	; (800128c <setup+0x30c>)
 8000fe6:	f993 3000 	ldrsb.w	r3, [r3]
 8000fea:	2b0b      	cmp	r3, #11
 8000fec:	f200 8146 	bhi.w	800127c <setup+0x2fc>
 8000ff0:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <setup+0x78>)
 8000ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff6:	bf00      	nop
 8000ff8:	08001029 	.word	0x08001029
 8000ffc:	08001053 	.word	0x08001053
 8001000:	0800107d 	.word	0x0800107d
 8001004:	080010a7 	.word	0x080010a7
 8001008:	080010d1 	.word	0x080010d1
 800100c:	080010fb 	.word	0x080010fb
 8001010:	08001125 	.word	0x08001125
 8001014:	08001167 	.word	0x08001167
 8001018:	08001195 	.word	0x08001195
 800101c:	080011c3 	.word	0x080011c3
 8001020:	080011f1 	.word	0x080011f1
 8001024:	08001233 	.word	0x08001233
			case 0:
				lcd_locate(0,0);
 8001028:	2100      	movs	r1, #0
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fdd7 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD0",line_sen0);
 8001030:	4b97      	ldr	r3, [pc, #604]	; (8001290 <setup+0x310>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	4897      	ldr	r0, [pc, #604]	; (8001294 <setup+0x314>)
 8001038:	f7ff fdfb 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 800103c:	2101      	movs	r1, #1
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff fdcd 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD1",line_sen1);
 8001044:	4b94      	ldr	r3, [pc, #592]	; (8001298 <setup+0x318>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	4894      	ldr	r0, [pc, #592]	; (800129c <setup+0x31c>)
 800104c:	f7ff fdf1 	bl	8000c32 <lcd_printf>
				break;
 8001050:	e115      	b.n	800127e <setup+0x2fe>
			case 1:
				lcd_locate(0,0);
 8001052:	2100      	movs	r1, #0
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff fdc2 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD2",line_sen2);
 800105a:	4b91      	ldr	r3, [pc, #580]	; (80012a0 <setup+0x320>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	4619      	mov	r1, r3
 8001060:	4890      	ldr	r0, [pc, #576]	; (80012a4 <setup+0x324>)
 8001062:	f7ff fde6 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 8001066:	2101      	movs	r1, #1
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff fdb8 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD3",line_sen3);
 800106e:	4b8e      	ldr	r3, [pc, #568]	; (80012a8 <setup+0x328>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	4619      	mov	r1, r3
 8001074:	488d      	ldr	r0, [pc, #564]	; (80012ac <setup+0x32c>)
 8001076:	f7ff fddc 	bl	8000c32 <lcd_printf>
				break;
 800107a:	e100      	b.n	800127e <setup+0x2fe>
			case 2:
				lcd_locate(0,0);
 800107c:	2100      	movs	r1, #0
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fdad 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD4",line_sen4);
 8001084:	4b8a      	ldr	r3, [pc, #552]	; (80012b0 <setup+0x330>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	488a      	ldr	r0, [pc, #552]	; (80012b4 <setup+0x334>)
 800108c:	f7ff fdd1 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 8001090:	2101      	movs	r1, #1
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff fda3 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD5",line_sen5);
 8001098:	4b87      	ldr	r3, [pc, #540]	; (80012b8 <setup+0x338>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	4887      	ldr	r0, [pc, #540]	; (80012bc <setup+0x33c>)
 80010a0:	f7ff fdc7 	bl	8000c32 <lcd_printf>
				break;
 80010a4:	e0eb      	b.n	800127e <setup+0x2fe>
			case 3:
				lcd_locate(0,0);
 80010a6:	2100      	movs	r1, #0
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff fd98 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD6",line_sen6);
 80010ae:	4b84      	ldr	r3, [pc, #528]	; (80012c0 <setup+0x340>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	4619      	mov	r1, r3
 80010b4:	4883      	ldr	r0, [pc, #524]	; (80012c4 <setup+0x344>)
 80010b6:	f7ff fdbc 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 80010ba:	2101      	movs	r1, #1
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff fd8e 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD7",line_sen7);
 80010c2:	4b81      	ldr	r3, [pc, #516]	; (80012c8 <setup+0x348>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	4619      	mov	r1, r3
 80010c8:	4880      	ldr	r0, [pc, #512]	; (80012cc <setup+0x34c>)
 80010ca:	f7ff fdb2 	bl	8000c32 <lcd_printf>
				break;
 80010ce:	e0d6      	b.n	800127e <setup+0x2fe>
			case 4:
				lcd_locate(0,0);
 80010d0:	2100      	movs	r1, #0
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fd83 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD8",line_sen8);
 80010d8:	4b7d      	ldr	r3, [pc, #500]	; (80012d0 <setup+0x350>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	487d      	ldr	r0, [pc, #500]	; (80012d4 <setup+0x354>)
 80010e0:	f7ff fda7 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 80010e4:	2101      	movs	r1, #1
 80010e6:	2000      	movs	r0, #0
 80010e8:	f7ff fd79 	bl	8000bde <lcd_locate>
				lcd_printf("%4d AD9",line_sen9);
 80010ec:	4b7a      	ldr	r3, [pc, #488]	; (80012d8 <setup+0x358>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	487a      	ldr	r0, [pc, #488]	; (80012dc <setup+0x35c>)
 80010f4:	f7ff fd9d 	bl	8000c32 <lcd_printf>
			break;
 80010f8:	e0c1      	b.n	800127e <setup+0x2fe>
			case 5:
				lcd_locate(0,0);
 80010fa:	2100      	movs	r1, #0
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff fd6e 	bl	8000bde <lcd_locate>
				lcd_printf("%4dAD10",line_sen10);
 8001102:	4b77      	ldr	r3, [pc, #476]	; (80012e0 <setup+0x360>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	4876      	ldr	r0, [pc, #472]	; (80012e4 <setup+0x364>)
 800110a:	f7ff fd92 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 800110e:	2101      	movs	r1, #1
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff fd64 	bl	8000bde <lcd_locate>
				lcd_printf("%4dAD11",line_sen11);
 8001116:	4b74      	ldr	r3, [pc, #464]	; (80012e8 <setup+0x368>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	4873      	ldr	r0, [pc, #460]	; (80012ec <setup+0x36c>)
 800111e:	f7ff fd88 	bl	8000c32 <lcd_printf>
				break;
 8001122:	e0ac      	b.n	800127e <setup+0x2fe>
			case 6:
				lcd_locate(0,0);
 8001124:	2100      	movs	r1, #0
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fd59 	bl	8000bde <lcd_locate>
				lcd_print("Encoder1");
 800112c:	4870      	ldr	r0, [pc, #448]	; (80012f0 <setup+0x370>)
 800112e:	f7ff fd6b 	bl	8000c08 <lcd_print>
				lcd_locate(0,1);
 8001132:	2101      	movs	r1, #1
 8001134:	2000      	movs	r0, #0
 8001136:	f7ff fd52 	bl	8000bde <lcd_locate>
				lcd_printf("%d", (int)mileage((float)enc_tim1_total));
 800113a:	4b6e      	ldr	r3, [pc, #440]	; (80012f4 <setup+0x374>)
 800113c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001140:	4618      	mov	r0, r3
 8001142:	4621      	mov	r1, r4
 8001144:	f7ff fb20 	bl	8000788 <__aeabi_l2f>
 8001148:	4603      	mov	r3, r0
 800114a:	ee00 3a10 	vmov	s0, r3
 800114e:	f7ff ff03 	bl	8000f58 <mileage>
 8001152:	eef0 7a40 	vmov.f32	s15, s0
 8001156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800115a:	ee17 1a90 	vmov	r1, s15
 800115e:	4866      	ldr	r0, [pc, #408]	; (80012f8 <setup+0x378>)
 8001160:	f7ff fd67 	bl	8000c32 <lcd_printf>
				break;
 8001164:	e08b      	b.n	800127e <setup+0x2fe>
			case 7:
				lcd_locate(0,0);
 8001166:	2100      	movs	r1, #0
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fd38 	bl	8000bde <lcd_locate>
				lcd_printf("XG%6x",xg);
 800116e:	4b63      	ldr	r3, [pc, #396]	; (80012fc <setup+0x37c>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4619      	mov	r1, r3
 8001176:	4862      	ldr	r0, [pc, #392]	; (8001300 <setup+0x380>)
 8001178:	f7ff fd5b 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 800117c:	2101      	movs	r1, #1
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff fd2d 	bl	8000bde <lcd_locate>
				lcd_printf("YG%6x",yg);
 8001184:	4b5f      	ldr	r3, [pc, #380]	; (8001304 <setup+0x384>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	b21b      	sxth	r3, r3
 800118a:	4619      	mov	r1, r3
 800118c:	485e      	ldr	r0, [pc, #376]	; (8001308 <setup+0x388>)
 800118e:	f7ff fd50 	bl	8000c32 <lcd_printf>
				break;
 8001192:	e074      	b.n	800127e <setup+0x2fe>
			case 8:
				lcd_locate(0,0);
 8001194:	2100      	movs	r1, #0
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff fd21 	bl	8000bde <lcd_locate>
				lcd_printf("ZG%6x",zg);
 800119c:	4b5b      	ldr	r3, [pc, #364]	; (800130c <setup+0x38c>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	4619      	mov	r1, r3
 80011a4:	485a      	ldr	r0, [pc, #360]	; (8001310 <setup+0x390>)
 80011a6:	f7ff fd44 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 80011aa:	2101      	movs	r1, #1
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff fd16 	bl	8000bde <lcd_locate>
				lcd_printf("XA%6x",xa);
 80011b2:	4b58      	ldr	r3, [pc, #352]	; (8001314 <setup+0x394>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4619      	mov	r1, r3
 80011ba:	4857      	ldr	r0, [pc, #348]	; (8001318 <setup+0x398>)
 80011bc:	f7ff fd39 	bl	8000c32 <lcd_printf>
				break;
 80011c0:	e05d      	b.n	800127e <setup+0x2fe>
			case 9:
				lcd_locate(0,0);
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff fd0a 	bl	8000bde <lcd_locate>
				lcd_printf("YA%6x",ya);
 80011ca:	4b54      	ldr	r3, [pc, #336]	; (800131c <setup+0x39c>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4619      	mov	r1, r3
 80011d2:	4853      	ldr	r0, [pc, #332]	; (8001320 <setup+0x3a0>)
 80011d4:	f7ff fd2d 	bl	8000c32 <lcd_printf>
				lcd_locate(0,1);
 80011d8:	2101      	movs	r1, #1
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fcff 	bl	8000bde <lcd_locate>
				lcd_printf("ZA%6x",za);
 80011e0:	4b50      	ldr	r3, [pc, #320]	; (8001324 <setup+0x3a4>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4619      	mov	r1, r3
 80011e8:	484f      	ldr	r0, [pc, #316]	; (8001328 <setup+0x3a8>)
 80011ea:	f7ff fd22 	bl	8000c32 <lcd_printf>
				break;
 80011ee:	e046      	b.n	800127e <setup+0x2fe>
			case 10:
				lcd_locate(0,0);
 80011f0:	2100      	movs	r1, #0
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fcf3 	bl	8000bde <lcd_locate>
				lcd_print("Encoder2");
 80011f8:	484c      	ldr	r0, [pc, #304]	; (800132c <setup+0x3ac>)
 80011fa:	f7ff fd05 	bl	8000c08 <lcd_print>
				lcd_locate(0,1);
 80011fe:	2101      	movs	r1, #1
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fcec 	bl	8000bde <lcd_locate>
				lcd_printf("%d", (int)mileage((float)enc_tim8_total));
 8001206:	4b4a      	ldr	r3, [pc, #296]	; (8001330 <setup+0x3b0>)
 8001208:	e9d3 3400 	ldrd	r3, r4, [r3]
 800120c:	4618      	mov	r0, r3
 800120e:	4621      	mov	r1, r4
 8001210:	f7ff faba 	bl	8000788 <__aeabi_l2f>
 8001214:	4603      	mov	r3, r0
 8001216:	ee00 3a10 	vmov	s0, r3
 800121a:	f7ff fe9d 	bl	8000f58 <mileage>
 800121e:	eef0 7a40 	vmov.f32	s15, s0
 8001222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001226:	ee17 1a90 	vmov	r1, s15
 800122a:	4833      	ldr	r0, [pc, #204]	; (80012f8 <setup+0x378>)
 800122c:	f7ff fd01 	bl	8000c32 <lcd_printf>
				break;
 8001230:	e025      	b.n	800127e <setup+0x2fe>
			case 11:
				lcd_locate(0,0);
 8001232:	2100      	movs	r1, #0
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff fcd2 	bl	8000bde <lcd_locate>
				lcd_print("Voltage_");
 800123a:	483e      	ldr	r0, [pc, #248]	; (8001334 <setup+0x3b4>)
 800123c:	f7ff fce4 	bl	8000c08 <lcd_print>
				lcd_locate(0,1);
 8001240:	2101      	movs	r1, #1
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff fccb 	bl	8000bde <lcd_locate>
				volt_reg = INA260_read(0x02);
 8001248:	2002      	movs	r0, #2
 800124a:	f7ff fe27 	bl	8000e9c <INA260_read>
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
				lcd_printf("   %1.2fV",(float)volt_reg*0.00125f);
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800125c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001338 <setup+0x3b8>
 8001260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001264:	ee17 0a90 	vmov	r0, s15
 8001268:	f7ff f966 	bl	8000538 <__aeabi_f2d>
 800126c:	4603      	mov	r3, r0
 800126e:	460c      	mov	r4, r1
 8001270:	461a      	mov	r2, r3
 8001272:	4623      	mov	r3, r4
 8001274:	4831      	ldr	r0, [pc, #196]	; (800133c <setup+0x3bc>)
 8001276:	f7ff fcdc 	bl	8000c32 <lcd_printf>
				break;
 800127a:	e000      	b.n	800127e <setup+0x2fe>
			default:
				break;
 800127c:	bf00      	nop
			}

			break;
 800127e:	e17b      	b.n	8001578 <setup+0x5f8>
 8001280:	200000a8 	.word	0x200000a8
 8001284:	200000aa 	.word	0x200000aa
 8001288:	200003ac 	.word	0x200003ac
 800128c:	200000a9 	.word	0x200000a9
 8001290:	20000498 	.word	0x20000498
 8001294:	08008738 	.word	0x08008738
 8001298:	20000492 	.word	0x20000492
 800129c:	08008740 	.word	0x08008740
 80012a0:	20000474 	.word	0x20000474
 80012a4:	08008748 	.word	0x08008748
 80012a8:	20000470 	.word	0x20000470
 80012ac:	08008750 	.word	0x08008750
 80012b0:	2000046e 	.word	0x2000046e
 80012b4:	08008758 	.word	0x08008758
 80012b8:	20000496 	.word	0x20000496
 80012bc:	08008760 	.word	0x08008760
 80012c0:	20000476 	.word	0x20000476
 80012c4:	08008768 	.word	0x08008768
 80012c8:	20000472 	.word	0x20000472
 80012cc:	08008770 	.word	0x08008770
 80012d0:	20000490 	.word	0x20000490
 80012d4:	08008778 	.word	0x08008778
 80012d8:	2000046c 	.word	0x2000046c
 80012dc:	08008780 	.word	0x08008780
 80012e0:	20000494 	.word	0x20000494
 80012e4:	08008788 	.word	0x08008788
 80012e8:	2000049a 	.word	0x2000049a
 80012ec:	08008790 	.word	0x08008790
 80012f0:	08008798 	.word	0x08008798
 80012f4:	20000090 	.word	0x20000090
 80012f8:	080087a4 	.word	0x080087a4
 80012fc:	200000c0 	.word	0x200000c0
 8001300:	080087a8 	.word	0x080087a8
 8001304:	200000be 	.word	0x200000be
 8001308:	080087b0 	.word	0x080087b0
 800130c:	200000b8 	.word	0x200000b8
 8001310:	080087b8 	.word	0x080087b8
 8001314:	200000bc 	.word	0x200000bc
 8001318:	080087c0 	.word	0x080087c0
 800131c:	200000c2 	.word	0x200000c2
 8001320:	080087c8 	.word	0x080087c8
 8001324:	200000ba 	.word	0x200000ba
 8001328:	080087d0 	.word	0x080087d0
 800132c:	080087d8 	.word	0x080087d8
 8001330:	20000098 	.word	0x20000098
 8001334:	080087e4 	.word	0x080087e4
 8001338:	3aa3d70a 	.word	0x3aa3d70a
 800133c:	080087f0 	.word	0x080087f0
		case 1:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001340:	4b8f      	ldr	r3, [pc, #572]	; (8001580 <setup+0x600>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2200      	movs	r2, #0
 8001346:	635a      	str	r2, [r3, #52]	; 0x34

			lcd_locate(0,0);
 8001348:	2100      	movs	r1, #0
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff fc47 	bl	8000bde <lcd_locate>
			lcd_print("test_ESC");
 8001350:	488c      	ldr	r0, [pc, #560]	; (8001584 <setup+0x604>)
 8001352:	f7ff fc59 	bl	8000c08 <lcd_print>
			lcd_locate(0,1);
 8001356:	2101      	movs	r1, #1
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff fc40 	bl	8000bde <lcd_locate>
			lcd_print("SW_PUSH_");
 800135e:	488a      	ldr	r0, [pc, #552]	; (8001588 <setup+0x608>)
 8001360:	f7ff fc52 	bl	8000c08 <lcd_print>

			if( sw_center_state == 1 ) {
 8001364:	4b89      	ldr	r3, [pc, #548]	; (800158c <setup+0x60c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d114      	bne.n	8001396 <setup+0x416>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2116);	//	1763(ESC_MIN) + 17.64 * 20
 800136c:	4b88      	ldr	r3, [pc, #544]	; (8001590 <setup+0x610>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f640 0244 	movw	r2, #2116	; 0x844
 8001374:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2116);
 8001376:	4b86      	ldr	r3, [pc, #536]	; (8001590 <setup+0x610>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f640 0244 	movw	r2, #2116	; 0x844
 800137e:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 2116);
 8001380:	4b83      	ldr	r3, [pc, #524]	; (8001590 <setup+0x610>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f640 0244 	movw	r2, #2116	; 0x844
 8001388:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 2116);
 800138a:	4b81      	ldr	r3, [pc, #516]	; (8001590 <setup+0x610>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f640 0244 	movw	r2, #2116	; 0x844
 8001392:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
			}
			break;
 8001394:	e0f0      	b.n	8001578 <setup+0x5f8>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 8001396:	4b7e      	ldr	r3, [pc, #504]	; (8001590 <setup+0x610>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 62e3 	movw	r2, #1763	; 0x6e3
 800139e:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 80013a0:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <setup+0x610>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 80013aa:	4b79      	ldr	r3, [pc, #484]	; (8001590 <setup+0x610>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80013b2:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 80013b4:	4b76      	ldr	r3, [pc, #472]	; (8001590 <setup+0x610>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80013be:	e0db      	b.n	8001578 <setup+0x5f8>
		case 2:
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 80013c0:	4b73      	ldr	r3, [pc, #460]	; (8001590 <setup+0x610>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80013c8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 80013ca:	4b71      	ldr	r3, [pc, #452]	; (8001590 <setup+0x610>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80013d2:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 80013d4:	4b6e      	ldr	r3, [pc, #440]	; (8001590 <setup+0x610>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80013dc:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 80013de:	4b6c      	ldr	r3, [pc, #432]	; (8001590 <setup+0x610>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80013e6:	641a      	str	r2, [r3, #64]	; 0x40

			lcd_locate(0,0);
 80013e8:	2100      	movs	r1, #0
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fbf7 	bl	8000bde <lcd_locate>
			lcd_print("test_MD_");
 80013f0:	4868      	ldr	r0, [pc, #416]	; (8001594 <setup+0x614>)
 80013f2:	f7ff fc09 	bl	8000c08 <lcd_print>
			lcd_locate(0,1);
 80013f6:	2101      	movs	r1, #1
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff fbf0 	bl	8000bde <lcd_locate>
			lcd_print("SW_PUSH_");
 80013fe:	4862      	ldr	r0, [pc, #392]	; (8001588 <setup+0x608>)
 8001400:	f7ff fc02 	bl	8000c08 <lcd_print>

			if( sw_center_state == 1 ) {
 8001404:	4b61      	ldr	r3, [pc, #388]	; (800158c <setup+0x60c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d116      	bne.n	800143a <setup+0x4ba>
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 400);
 800140c:	4b62      	ldr	r3, [pc, #392]	; (8001598 <setup+0x618>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 400);
 8001416:	4b60      	ldr	r3, [pc, #384]	; (8001598 <setup+0x618>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
				MR_SET;
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001426:	485d      	ldr	r0, [pc, #372]	; (800159c <setup+0x61c>)
 8001428:	f003 f9ae 	bl	8004788 <HAL_GPIO_WritePin>
				ML_SET;
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001432:	485a      	ldr	r0, [pc, #360]	; (800159c <setup+0x61c>)
 8001434:	f003 f9a8 	bl	8004788 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
				MR_SET;
				ML_SET;
			}
			break;
 8001438:	e09e      	b.n	8001578 <setup+0x5f8>
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 800143a:	4b57      	ldr	r3, [pc, #348]	; (8001598 <setup+0x618>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2200      	movs	r2, #0
 8001440:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8001442:	4b55      	ldr	r3, [pc, #340]	; (8001598 <setup+0x618>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	639a      	str	r2, [r3, #56]	; 0x38
				MR_SET;
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001450:	4852      	ldr	r0, [pc, #328]	; (800159c <setup+0x61c>)
 8001452:	f003 f999 	bl	8004788 <HAL_GPIO_WritePin>
				ML_SET;
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800145c:	484f      	ldr	r0, [pc, #316]	; (800159c <setup+0x61c>)
 800145e:	f003 f993 	bl	8004788 <HAL_GPIO_WritePin>
			break;
 8001462:	e089      	b.n	8001578 <setup+0x5f8>
		case 3:
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8001464:	4b4c      	ldr	r3, [pc, #304]	; (8001598 <setup+0x618>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2200      	movs	r2, #0
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 800146c:	4b4a      	ldr	r3, [pc, #296]	; (8001598 <setup+0x618>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2200      	movs	r2, #0
 8001472:	639a      	str	r2, [r3, #56]	; 0x38

			lcd_locate(0,0);
 8001474:	2100      	movs	r1, #0
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff fbb1 	bl	8000bde <lcd_locate>
			lcd_print("_erase__");
 800147c:	4848      	ldr	r0, [pc, #288]	; (80015a0 <setup+0x620>)
 800147e:	f7ff fbc3 	bl	8000c08 <lcd_print>
			lcd_locate(0,1);
 8001482:	2101      	movs	r1, #1
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff fbaa 	bl	8000bde <lcd_locate>
			lcd_print("SW_PUSH_");
 800148a:	483f      	ldr	r0, [pc, #252]	; (8001588 <setup+0x608>)
 800148c:	f7ff fbbc 	bl	8000c08 <lcd_print>

			if( sw_center_state == 1 ) {
 8001490:	4b3e      	ldr	r3, [pc, #248]	; (800158c <setup+0x60c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d16e      	bne.n	8001576 <setup+0x5f6>
				if( isnan( *(float*)start_adress_sector7 ) == 0 )  FLASH_EreaseSector(FLASH_SECTOR_7);
 8001498:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <setup+0x624>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	eef4 7a67 	vcmp.f32	s15, s15
 80014a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a8:	d602      	bvs.n	80014b0 <setup+0x530>
 80014aa:	2007      	movs	r0, #7
 80014ac:	f7ff fbe1 	bl	8000c72 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector9 ) == 0 )  FLASH_EreaseSector(FLASH_SECTOR_9);
 80014b0:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <setup+0x628>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	eef4 7a67 	vcmp.f32	s15, s15
 80014bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c0:	d602      	bvs.n	80014c8 <setup+0x548>
 80014c2:	2009      	movs	r0, #9
 80014c4:	f7ff fbd5 	bl	8000c72 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector10 ) == 0 ) FLASH_EreaseSector(FLASH_SECTOR_10);
 80014c8:	4b38      	ldr	r3, [pc, #224]	; (80015ac <setup+0x62c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	eef4 7a67 	vcmp.f32	s15, s15
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	d602      	bvs.n	80014e0 <setup+0x560>
 80014da:	200a      	movs	r0, #10
 80014dc:	f7ff fbc9 	bl	8000c72 <FLASH_EreaseSector>
				if( isnan( *(float*)start_adress_sector11 ) == 0 ) FLASH_EreaseSector(FLASH_SECTOR_11);
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <setup+0x630>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	eef4 7a67 	vcmp.f32	s15, s15
 80014ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f0:	d641      	bvs.n	8001576 <setup+0x5f6>
 80014f2:	200b      	movs	r0, #11
 80014f4:	f7ff fbbd 	bl	8000c72 <FLASH_EreaseSector>
			}

			break;
 80014f8:	e03d      	b.n	8001576 <setup+0x5f6>
		case 4:
			lcd_locate(0,0);
 80014fa:	2100      	movs	r1, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	f7ff fb6e 	bl	8000bde <lcd_locate>
			lcd_print("_case-4_");
 8001502:	482c      	ldr	r0, [pc, #176]	; (80015b4 <setup+0x634>)
 8001504:	f7ff fb80 	bl	8000c08 <lcd_print>
			lcd_locate(0,1);
 8001508:	2101      	movs	r1, #1
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff fb67 	bl	8000bde <lcd_locate>
			lcd_print("________");
 8001510:	4829      	ldr	r0, [pc, #164]	; (80015b8 <setup+0x638>)
 8001512:	f7ff fb79 	bl	8000c08 <lcd_print>
			break;
 8001516:	e02f      	b.n	8001578 <setup+0x5f8>
		case 5:
			lcd_locate(0,0);
 8001518:	2100      	movs	r1, #0
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fb5f 	bl	8000bde <lcd_locate>
			lcd_print("_case-5_");
 8001520:	4826      	ldr	r0, [pc, #152]	; (80015bc <setup+0x63c>)
 8001522:	f7ff fb71 	bl	8000c08 <lcd_print>
			lcd_locate(0,1);
 8001526:	2101      	movs	r1, #1
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fb58 	bl	8000bde <lcd_locate>
			lcd_print("        ");
 800152e:	4824      	ldr	r0, [pc, #144]	; (80015c0 <setup+0x640>)
 8001530:	f7ff fb6a 	bl	8000c08 <lcd_print>
			break;
 8001534:	e020      	b.n	8001578 <setup+0x5f8>
		case 6:
			lcd_locate(0,0);
 8001536:	2100      	movs	r1, #0
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff fb50 	bl	8000bde <lcd_locate>
			lcd_print("_case-6_");
 800153e:	4821      	ldr	r0, [pc, #132]	; (80015c4 <setup+0x644>)
 8001540:	f7ff fb62 	bl	8000c08 <lcd_print>
			lcd_locate(0,1);
 8001544:	2101      	movs	r1, #1
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff fb49 	bl	8000bde <lcd_locate>
			lcd_print("        ");
 800154c:	481c      	ldr	r0, [pc, #112]	; (80015c0 <setup+0x640>)
 800154e:	f7ff fb5b 	bl	8000c08 <lcd_print>
			break;
 8001552:	e011      	b.n	8001578 <setup+0x5f8>
		case 7:
			lcd_locate(0,0);
 8001554:	2100      	movs	r1, #0
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fb41 	bl	8000bde <lcd_locate>
			lcd_print("_case-7_");
 800155c:	481a      	ldr	r0, [pc, #104]	; (80015c8 <setup+0x648>)
 800155e:	f7ff fb53 	bl	8000c08 <lcd_print>
			lcd_locate(0,1);
 8001562:	2101      	movs	r1, #1
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff fb3a 	bl	8000bde <lcd_locate>
			lcd_print("        ");
 800156a:	4815      	ldr	r0, [pc, #84]	; (80015c0 <setup+0x640>)
 800156c:	f7ff fb4c 	bl	8000c08 <lcd_print>
			break;
 8001570:	e002      	b.n	8001578 <setup+0x5f8>
		default:
			break;
 8001572:	bf00      	nop
 8001574:	e000      	b.n	8001578 <setup+0x5f8>
			break;
 8001576:	bf00      	nop
	}
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	200003ac 	.word	0x200003ac
 8001584:	080087fc 	.word	0x080087fc
 8001588:	08008808 	.word	0x08008808
 800158c:	200000aa 	.word	0x200000aa
 8001590:	200001ac 	.word	0x200001ac
 8001594:	08008814 	.word	0x08008814
 8001598:	200003ec 	.word	0x200003ec
 800159c:	40020000 	.word	0x40020000
 80015a0:	08008820 	.word	0x08008820
 80015a4:	08008890 	.word	0x08008890
 80015a8:	08008894 	.word	0x08008894
 80015ac:	08008898 	.word	0x08008898
 80015b0:	0800889c 	.word	0x0800889c
 80015b4:	0800882c 	.word	0x0800882c
 80015b8:	08008838 	.word	0x08008838
 80015bc:	08008844 	.word	0x08008844
 80015c0:	08008850 	.word	0x08008850
 80015c4:	0800885c 	.word	0x0800885c
 80015c8:	08008868 	.word	0x08008868

080015cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

	if(htim->Instance == htim6.Instance){
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d107      	bne.n	80015f0 <HAL_TIM_PeriodElapsedCallback+0x24>
		getEncoder();
 80015e0:	f000 fe9e 	bl	8002320 <getEncoder>
		read_gyro_data();
 80015e4:	f7ff fbea 	bl	8000dbc <read_gyro_data>
		read_accel_data();
 80015e8:	f7ff fc20 	bl	8000e2c <read_accel_data>
		ADval_get();
 80015ec:	f000 fef8 	bl	80023e0 <ADval_get>
	}

	if(htim->Instance == htim7.Instance){

	}
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	2000032c 	.word	0x2000032c

080015fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001600:	f001 fc36 	bl	8002e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001604:	f000 f824 	bl	8001650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001608:	f000 fc92 	bl	8001f30 <MX_GPIO_Init>
  MX_DMA_Init();
 800160c:	f000 fc70 	bl	8001ef0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001610:	f000 f888 	bl	8001724 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001614:	f000 f972 	bl	80018fc <MX_I2C1_Init>
  MX_I2C2_Init();
 8001618:	f000 f99e 	bl	8001958 <MX_I2C2_Init>
  MX_SPI3_Init();
 800161c:	f000 f9ca 	bl	80019b4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001620:	f000 f9fe 	bl	8001a20 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001624:	f000 fa54 	bl	8001ad0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001628:	f000 faaa 	bl	8001b80 <MX_TIM3_Init>
  MX_TIM8_Init();
 800162c:	f000 fb8e 	bl	8001d4c <MX_TIM8_Init>
  MX_TIM12_Init();
 8001630:	f000 fbe4 	bl	8001dfc <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001634:	f000 fc32 	bl	8001e9c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001638:	f000 fb1c 	bl	8001c74 <MX_TIM6_Init>
  MX_TIM7_Init();
 800163c:	f000 fb50 	bl	8001ce0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  peripheral_init();
 8001640:	f000 fd6c 	bl	800211c <peripheral_init>
  led_pattern(7);
 8001644:	2007      	movs	r0, #7
 8001646:	f000 fe29 	bl	800229c <led_pattern>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  setup();
 800164a:	f7ff fc99 	bl	8000f80 <setup>
 800164e:	e7fc      	b.n	800164a <main+0x4e>

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b094      	sub	sp, #80	; 0x50
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	2230      	movs	r2, #48	; 0x30
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f006 fc59 	bl	8007f16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <SystemClock_Config+0xcc>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	4a27      	ldr	r2, [pc, #156]	; (800171c <SystemClock_Config+0xcc>)
 800167e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001682:	6413      	str	r3, [r2, #64]	; 0x40
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <SystemClock_Config+0xcc>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <SystemClock_Config+0xd0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a21      	ldr	r2, [pc, #132]	; (8001720 <SystemClock_Config+0xd0>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <SystemClock_Config+0xd0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ac:	2301      	movs	r3, #1
 80016ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b6:	2302      	movs	r3, #2
 80016b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80016c0:	2306      	movs	r3, #6
 80016c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016c4:	23a8      	movs	r3, #168	; 0xa8
 80016c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016cc:	2304      	movs	r3, #4
 80016ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	4618      	mov	r0, r3
 80016d6:	f004 f811 	bl	80056fc <HAL_RCC_OscConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016e0:	f000 fd14 	bl	800210c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e4:	230f      	movs	r3, #15
 80016e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e8:	2302      	movs	r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2105      	movs	r1, #5
 8001702:	4618      	mov	r0, r3
 8001704:	f004 fa6a 	bl	8005bdc <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800170e:	f000 fcfd 	bl	800210c <Error_Handler>
  }
}
 8001712:	bf00      	nop
 8001714:	3750      	adds	r7, #80	; 0x50
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40007000 	.word	0x40007000

08001724 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800172a:	463b      	mov	r3, r7
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001736:	4b6e      	ldr	r3, [pc, #440]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 8001738:	4a6e      	ldr	r2, [pc, #440]	; (80018f4 <MX_ADC1_Init+0x1d0>)
 800173a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800173c:	4b6c      	ldr	r3, [pc, #432]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 800173e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001742:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001744:	4b6a      	ldr	r3, [pc, #424]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800174a:	4b69      	ldr	r3, [pc, #420]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 800174c:	2201      	movs	r2, #1
 800174e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001750:	4b67      	ldr	r3, [pc, #412]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 8001752:	2201      	movs	r2, #1
 8001754:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001756:	4b66      	ldr	r3, [pc, #408]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800175e:	4b64      	ldr	r3, [pc, #400]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 8001760:	2200      	movs	r2, #0
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001764:	4b62      	ldr	r3, [pc, #392]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 8001766:	4a64      	ldr	r2, [pc, #400]	; (80018f8 <MX_ADC1_Init+0x1d4>)
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800176a:	4b61      	ldr	r3, [pc, #388]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8001770:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 8001772:	220c      	movs	r2, #12
 8001774:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001776:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800177e:	4b5c      	ldr	r3, [pc, #368]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 8001780:	2201      	movs	r2, #1
 8001782:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001784:	485a      	ldr	r0, [pc, #360]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 8001786:	f001 fc07 	bl	8002f98 <HAL_ADC_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001790:	f000 fcbc 	bl	800210c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001794:	2300      	movs	r3, #0
 8001796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001798:	2301      	movs	r3, #1
 800179a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800179c:	2302      	movs	r3, #2
 800179e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a0:	463b      	mov	r3, r7
 80017a2:	4619      	mov	r1, r3
 80017a4:	4852      	ldr	r0, [pc, #328]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 80017a6:	f001 fd4b 	bl	8003240 <HAL_ADC_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017b0:	f000 fcac 	bl	800210c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80017b8:	2302      	movs	r3, #2
 80017ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	484b      	ldr	r0, [pc, #300]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 80017c2:	f001 fd3d 	bl	8003240 <HAL_ADC_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80017cc:	f000 fc9e 	bl	800210c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80017d4:	2303      	movs	r3, #3
 80017d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	4619      	mov	r1, r3
 80017dc:	4844      	ldr	r0, [pc, #272]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 80017de:	f001 fd2f 	bl	8003240 <HAL_ADC_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80017e8:	f000 fc90 	bl	800210c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80017ec:	2303      	movs	r3, #3
 80017ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80017f0:	2304      	movs	r3, #4
 80017f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f4:	463b      	mov	r3, r7
 80017f6:	4619      	mov	r1, r3
 80017f8:	483d      	ldr	r0, [pc, #244]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 80017fa:	f001 fd21 	bl	8003240 <HAL_ADC_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001804:	f000 fc82 	bl	800210c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001808:	2304      	movs	r3, #4
 800180a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800180c:	2305      	movs	r3, #5
 800180e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001810:	463b      	mov	r3, r7
 8001812:	4619      	mov	r1, r3
 8001814:	4836      	ldr	r0, [pc, #216]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 8001816:	f001 fd13 	bl	8003240 <HAL_ADC_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001820:	f000 fc74 	bl	800210c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001824:	2305      	movs	r3, #5
 8001826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001828:	2306      	movs	r3, #6
 800182a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182c:	463b      	mov	r3, r7
 800182e:	4619      	mov	r1, r3
 8001830:	482f      	ldr	r0, [pc, #188]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 8001832:	f001 fd05 	bl	8003240 <HAL_ADC_ConfigChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800183c:	f000 fc66 	bl	800210c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001840:	2306      	movs	r3, #6
 8001842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001844:	2307      	movs	r3, #7
 8001846:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001848:	463b      	mov	r3, r7
 800184a:	4619      	mov	r1, r3
 800184c:	4828      	ldr	r0, [pc, #160]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 800184e:	f001 fcf7 	bl	8003240 <HAL_ADC_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001858:	f000 fc58 	bl	800210c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800185c:	2307      	movs	r3, #7
 800185e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001860:	2308      	movs	r3, #8
 8001862:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	4619      	mov	r1, r3
 8001868:	4821      	ldr	r0, [pc, #132]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 800186a:	f001 fce9 	bl	8003240 <HAL_ADC_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001874:	f000 fc4a 	bl	800210c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001878:	2308      	movs	r3, #8
 800187a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800187c:	2309      	movs	r3, #9
 800187e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	4619      	mov	r1, r3
 8001884:	481a      	ldr	r0, [pc, #104]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 8001886:	f001 fcdb 	bl	8003240 <HAL_ADC_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001890:	f000 fc3c 	bl	800210c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001894:	2309      	movs	r3, #9
 8001896:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001898:	230a      	movs	r3, #10
 800189a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189c:	463b      	mov	r3, r7
 800189e:	4619      	mov	r1, r3
 80018a0:	4813      	ldr	r0, [pc, #76]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 80018a2:	f001 fccd 	bl	8003240 <HAL_ADC_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80018ac:	f000 fc2e 	bl	800210c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80018b0:	230e      	movs	r3, #14
 80018b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80018b4:	230b      	movs	r3, #11
 80018b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b8:	463b      	mov	r3, r7
 80018ba:	4619      	mov	r1, r3
 80018bc:	480c      	ldr	r0, [pc, #48]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 80018be:	f001 fcbf 	bl	8003240 <HAL_ADC_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80018c8:	f000 fc20 	bl	800210c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80018cc:	230f      	movs	r3, #15
 80018ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80018d0:	230c      	movs	r3, #12
 80018d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d4:	463b      	mov	r3, r7
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_ADC1_Init+0x1cc>)
 80018da:	f001 fcb1 	bl	8003240 <HAL_ADC_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80018e4:	f000 fc12 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000244 	.word	0x20000244
 80018f4:	40012000 	.word	0x40012000
 80018f8:	0f000001 	.word	0x0f000001

080018fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <MX_I2C1_Init+0x50>)
 8001902:	4a13      	ldr	r2, [pc, #76]	; (8001950 <MX_I2C1_Init+0x54>)
 8001904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_I2C1_Init+0x50>)
 8001908:	4a12      	ldr	r2, [pc, #72]	; (8001954 <MX_I2C1_Init+0x58>)
 800190a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_I2C1_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_I2C1_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_I2C1_Init+0x50>)
 800191a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <MX_I2C1_Init+0x50>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_I2C1_Init+0x50>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <MX_I2C1_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_I2C1_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <MX_I2C1_Init+0x50>)
 800193a:	f002 ff57 	bl	80047ec <HAL_I2C_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001944:	f000 fbe2 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000104 	.word	0x20000104
 8001950:	40005400 	.word	0x40005400
 8001954:	00061a80 	.word	0x00061a80

08001958 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_I2C2_Init+0x50>)
 800195e:	4a13      	ldr	r2, [pc, #76]	; (80019ac <MX_I2C2_Init+0x54>)
 8001960:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_I2C2_Init+0x50>)
 8001964:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <MX_I2C2_Init+0x58>)
 8001966:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_I2C2_Init+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_I2C2_Init+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_I2C2_Init+0x50>)
 8001976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800197a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <MX_I2C2_Init+0x50>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_I2C2_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <MX_I2C2_Init+0x50>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_I2C2_Init+0x50>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <MX_I2C2_Init+0x50>)
 8001996:	f002 ff29 	bl	80047ec <HAL_I2C_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019a0:	f000 fbb4 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000158 	.word	0x20000158
 80019ac:	40005800 	.word	0x40005800
 80019b0:	000186a0 	.word	0x000186a0

080019b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019ba:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <MX_SPI3_Init+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80019be:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019d4:	2202      	movs	r2, #2
 80019d6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019da:	2201      	movs	r2, #1
 80019dc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019e8:	2220      	movs	r2, #32
 80019ea:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <MX_SPI3_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_SPI3_Init+0x64>)
 8001a00:	220a      	movs	r2, #10
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_SPI3_Init+0x64>)
 8001a06:	f004 fab5 	bl	8005f74 <HAL_SPI_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001a10:	f000 fb7c 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200001ec 	.word	0x200001ec
 8001a1c:	40003c00 	.word	0x40003c00

08001a20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	; 0x30
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	2224      	movs	r2, #36	; 0x24
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f006 fa71 	bl	8007f16 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a3c:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <MX_TIM1_Init+0xa8>)
 8001a3e:	4a23      	ldr	r2, [pc, #140]	; (8001acc <MX_TIM1_Init+0xac>)
 8001a40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <MX_TIM1_Init+0xa8>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a48:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <MX_TIM1_Init+0xa8>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <MX_TIM1_Init+0xa8>)
 8001a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <MX_TIM1_Init+0xa8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_TIM1_Init+0xa8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <MX_TIM1_Init+0xa8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a70:	2301      	movs	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a80:	2301      	movs	r3, #1
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	4619      	mov	r1, r3
 8001a92:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <MX_TIM1_Init+0xa8>)
 8001a94:	f005 f87a 	bl	8006b8c <HAL_TIM_Encoder_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001a9e:	f000 fb35 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <MX_TIM1_Init+0xa8>)
 8001ab0:	f005 fda2 	bl	80075f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001aba:	f000 fb27 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	3730      	adds	r7, #48	; 0x30
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2000036c 	.word	0x2000036c
 8001acc:	40010000 	.word	0x40010000

08001ad0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad6:	f107 0320 	add.w	r3, r7, #32
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]
 8001aee:	615a      	str	r2, [r3, #20]
 8001af0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af2:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <MX_TIM2_Init+0xac>)
 8001af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <MX_TIM2_Init+0xac>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <MX_TIM2_Init+0xac>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199;
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <MX_TIM2_Init+0xac>)
 8001b08:	f241 0267 	movw	r2, #4199	; 0x1067
 8001b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <MX_TIM2_Init+0xac>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <MX_TIM2_Init+0xac>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b1a:	4818      	ldr	r0, [pc, #96]	; (8001b7c <MX_TIM2_Init+0xac>)
 8001b1c:	f004 ffcd 	bl	8006aba <HAL_TIM_PWM_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b26:	f000 faf1 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b32:	f107 0320 	add.w	r3, r7, #32
 8001b36:	4619      	mov	r1, r3
 8001b38:	4810      	ldr	r0, [pc, #64]	; (8001b7c <MX_TIM2_Init+0xac>)
 8001b3a:	f005 fd5d 	bl	80075f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b44:	f000 fae2 	bl	800210c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b48:	2360      	movs	r3, #96	; 0x60
 8001b4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4807      	ldr	r0, [pc, #28]	; (8001b7c <MX_TIM2_Init+0xac>)
 8001b60:	f005 f9e6 	bl	8006f30 <HAL_TIM_PWM_ConfigChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b6a:	f000 facf 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b6e:	4803      	ldr	r0, [pc, #12]	; (8001b7c <MX_TIM2_Init+0xac>)
 8001b70:	f000 ffb4 	bl	8002adc <HAL_TIM_MspPostInit>

}
 8001b74:	bf00      	nop
 8001b76:	3728      	adds	r7, #40	; 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200003ac 	.word	0x200003ac

08001b80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b86:	f107 0320 	add.w	r3, r7, #32
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]
 8001b9e:	615a      	str	r2, [r3, #20]
 8001ba0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ba2:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <MX_TIM3_Init+0xec>)
 8001ba4:	4a32      	ldr	r2, [pc, #200]	; (8001c70 <MX_TIM3_Init+0xf0>)
 8001ba6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <MX_TIM3_Init+0xec>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bae:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <MX_TIM3_Init+0xec>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4199;
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <MX_TIM3_Init+0xec>)
 8001bb6:	f241 0267 	movw	r2, #4199	; 0x1067
 8001bba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <MX_TIM3_Init+0xec>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <MX_TIM3_Init+0xec>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bc8:	4828      	ldr	r0, [pc, #160]	; (8001c6c <MX_TIM3_Init+0xec>)
 8001bca:	f004 ff76 	bl	8006aba <HAL_TIM_PWM_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001bd4:	f000 fa9a 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001be0:	f107 0320 	add.w	r3, r7, #32
 8001be4:	4619      	mov	r1, r3
 8001be6:	4821      	ldr	r0, [pc, #132]	; (8001c6c <MX_TIM3_Init+0xec>)
 8001be8:	f005 fd06 	bl	80075f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001bf2:	f000 fa8b 	bl	800210c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf6:	2360      	movs	r3, #96	; 0x60
 8001bf8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4817      	ldr	r0, [pc, #92]	; (8001c6c <MX_TIM3_Init+0xec>)
 8001c0e:	f005 f98f 	bl	8006f30 <HAL_TIM_PWM_ConfigChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c18:	f000 fa78 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	2204      	movs	r2, #4
 8001c20:	4619      	mov	r1, r3
 8001c22:	4812      	ldr	r0, [pc, #72]	; (8001c6c <MX_TIM3_Init+0xec>)
 8001c24:	f005 f984 	bl	8006f30 <HAL_TIM_PWM_ConfigChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c2e:	f000 fa6d 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2208      	movs	r2, #8
 8001c36:	4619      	mov	r1, r3
 8001c38:	480c      	ldr	r0, [pc, #48]	; (8001c6c <MX_TIM3_Init+0xec>)
 8001c3a:	f005 f979 	bl	8006f30 <HAL_TIM_PWM_ConfigChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001c44:	f000 fa62 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4807      	ldr	r0, [pc, #28]	; (8001c6c <MX_TIM3_Init+0xec>)
 8001c50:	f005 f96e 	bl	8006f30 <HAL_TIM_PWM_ConfigChannel>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c5a:	f000 fa57 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c5e:	4803      	ldr	r0, [pc, #12]	; (8001c6c <MX_TIM3_Init+0xec>)
 8001c60:	f000 ff3c 	bl	8002adc <HAL_TIM_MspPostInit>

}
 8001c64:	bf00      	nop
 8001c66:	3728      	adds	r7, #40	; 0x28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200001ac 	.word	0x200001ac
 8001c70:	40000400 	.word	0x40000400

08001c74 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <MX_TIM6_Init+0x64>)
 8001c84:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <MX_TIM6_Init+0x68>)
 8001c86:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19;
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <MX_TIM6_Init+0x64>)
 8001c8a:	2213      	movs	r2, #19
 8001c8c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <MX_TIM6_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4199;
 8001c94:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <MX_TIM6_Init+0x64>)
 8001c96:	f241 0267 	movw	r2, #4199	; 0x1067
 8001c9a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_TIM6_Init+0x64>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ca2:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <MX_TIM6_Init+0x64>)
 8001ca4:	f004 feba 	bl	8006a1c <HAL_TIM_Base_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001cae:	f000 fa2d 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001cba:	463b      	mov	r3, r7
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <MX_TIM6_Init+0x64>)
 8001cc0:	f005 fc9a 	bl	80075f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001cca:	f000 fa1f 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000032c 	.word	0x2000032c
 8001cdc:	40001000 	.word	0x40001000

08001ce0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <MX_TIM7_Init+0x64>)
 8001cf0:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <MX_TIM7_Init+0x68>)
 8001cf2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <MX_TIM7_Init+0x64>)
 8001cf6:	22a7      	movs	r2, #167	; 0xa7
 8001cf8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <MX_TIM7_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 8001d00:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <MX_TIM7_Init+0x64>)
 8001d02:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d06:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_TIM7_Init+0x64>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d0e:	480d      	ldr	r0, [pc, #52]	; (8001d44 <MX_TIM7_Init+0x64>)
 8001d10:	f004 fe84 	bl	8006a1c <HAL_TIM_Base_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001d1a:	f000 f9f7 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d26:	463b      	mov	r3, r7
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4806      	ldr	r0, [pc, #24]	; (8001d44 <MX_TIM7_Init+0x64>)
 8001d2c:	f005 fc64 	bl	80075f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001d36:	f000 f9e9 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000042c 	.word	0x2000042c
 8001d48:	40001400 	.word	0x40001400

08001d4c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	; 0x30
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	2224      	movs	r2, #36	; 0x24
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f006 f8db 	bl	8007f16 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d68:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <MX_TIM8_Init+0xa8>)
 8001d6a:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <MX_TIM8_Init+0xac>)
 8001d6c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <MX_TIM8_Init+0xa8>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d74:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <MX_TIM8_Init+0xa8>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <MX_TIM8_Init+0xa8>)
 8001d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d80:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <MX_TIM8_Init+0xa8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_TIM8_Init+0xa8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <MX_TIM8_Init+0xa8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d94:	2303      	movs	r3, #3
 8001d96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001da8:	2302      	movs	r3, #2
 8001daa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dac:	2301      	movs	r3, #1
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480d      	ldr	r0, [pc, #52]	; (8001df4 <MX_TIM8_Init+0xa8>)
 8001dc0:	f004 fee4 	bl	8006b8c <HAL_TIM_Encoder_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001dca:	f000 f99f 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4806      	ldr	r0, [pc, #24]	; (8001df4 <MX_TIM8_Init+0xa8>)
 8001ddc:	f005 fc0c 	bl	80075f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001de6:	f000 f991 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	3730      	adds	r7, #48	; 0x30
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200000c4 	.word	0x200000c4
 8001df8:	40010400 	.word	0x40010400

08001dfc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
 8001e10:	615a      	str	r2, [r3, #20]
 8001e12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <MX_TIM12_Init+0x98>)
 8001e16:	4a20      	ldr	r2, [pc, #128]	; (8001e98 <MX_TIM12_Init+0x9c>)
 8001e18:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <MX_TIM12_Init+0x98>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <MX_TIM12_Init+0x98>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 839;
 8001e26:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <MX_TIM12_Init+0x98>)
 8001e28:	f240 3247 	movw	r2, #839	; 0x347
 8001e2c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <MX_TIM12_Init+0x98>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <MX_TIM12_Init+0x98>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001e3a:	4816      	ldr	r0, [pc, #88]	; (8001e94 <MX_TIM12_Init+0x98>)
 8001e3c:	f004 fe3d 	bl	8006aba <HAL_TIM_PWM_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001e46:	f000 f961 	bl	800210c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e4a:	2360      	movs	r3, #96	; 0x60
 8001e4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480c      	ldr	r0, [pc, #48]	; (8001e94 <MX_TIM12_Init+0x98>)
 8001e62:	f005 f865 	bl	8006f30 <HAL_TIM_PWM_ConfigChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001e6c:	f000 f94e 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	2204      	movs	r2, #4
 8001e74:	4619      	mov	r1, r3
 8001e76:	4807      	ldr	r0, [pc, #28]	; (8001e94 <MX_TIM12_Init+0x98>)
 8001e78:	f005 f85a 	bl	8006f30 <HAL_TIM_PWM_ConfigChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001e82:	f000 f943 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e86:	4803      	ldr	r0, [pc, #12]	; (8001e94 <MX_TIM12_Init+0x98>)
 8001e88:	f000 fe28 	bl	8002adc <HAL_TIM_MspPostInit>

}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200003ec 	.word	0x200003ec
 8001e98:	40001800 	.word	0x40001800

08001e9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <MX_USART1_UART_Init+0x50>)
 8001ea4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001ea8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001eac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_USART1_UART_Init+0x4c>)
 8001ed4:	f005 fc20 	bl	8007718 <HAL_UART_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ede:	f000 f915 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000028c 	.word	0x2000028c
 8001eec:	40011000 	.word	0x40011000

08001ef0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <MX_DMA_Init+0x3c>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <MX_DMA_Init+0x3c>)
 8001f00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <MX_DMA_Init+0x3c>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2105      	movs	r1, #5
 8001f16:	2038      	movs	r0, #56	; 0x38
 8001f18:	f001 fd0d 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f1c:	2038      	movs	r0, #56	; 0x38
 8001f1e:	f001 fd26 	bl	800396e <HAL_NVIC_EnableIRQ>

}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800

08001f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	4b69      	ldr	r3, [pc, #420]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a68      	ldr	r2, [pc, #416]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b66      	ldr	r3, [pc, #408]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a61      	ldr	r2, [pc, #388]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b5f      	ldr	r3, [pc, #380]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	4b5b      	ldr	r3, [pc, #364]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a5a      	ldr	r2, [pc, #360]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b58      	ldr	r3, [pc, #352]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	4b54      	ldr	r3, [pc, #336]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a53      	ldr	r2, [pc, #332]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b51      	ldr	r3, [pc, #324]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4b4d      	ldr	r3, [pc, #308]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a4c      	ldr	r2, [pc, #304]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	; (80020f0 <MX_GPIO_Init+0x1c0>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f242 0104 	movw	r1, #8196	; 0x2004
 8001fd8:	4846      	ldr	r0, [pc, #280]	; (80020f4 <MX_GPIO_Init+0x1c4>)
 8001fda:	f002 fbd5 	bl	8004788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001fe4:	4844      	ldr	r0, [pc, #272]	; (80020f8 <MX_GPIO_Init+0x1c8>)
 8001fe6:	f002 fbcf 	bl	8004788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2104      	movs	r1, #4
 8001fee:	4843      	ldr	r0, [pc, #268]	; (80020fc <MX_GPIO_Init+0x1cc>)
 8001ff0:	f002 fbca 	bl	8004788 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8001ff4:	f24a 0303 	movw	r3, #40963	; 0xa003
 8001ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <MX_GPIO_Init+0x1d0>)
 8001ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ffe:	2301      	movs	r3, #1
 8002000:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	4619      	mov	r1, r3
 8002008:	483e      	ldr	r0, [pc, #248]	; (8002104 <MX_GPIO_Init+0x1d4>)
 800200a:	f002 fa23 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800200e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002014:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <MX_GPIO_Init+0x1d8>)
 8002016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002018:	2301      	movs	r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	4838      	ldr	r0, [pc, #224]	; (8002104 <MX_GPIO_Init+0x1d4>)
 8002024:	f002 fa16 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13;
 8002028:	f242 0304 	movw	r3, #8196	; 0x2004
 800202c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202e:	2301      	movs	r3, #1
 8002030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	482c      	ldr	r0, [pc, #176]	; (80020f4 <MX_GPIO_Init+0x1c4>)
 8002042:	f002 fa07 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800204c:	4b2c      	ldr	r3, [pc, #176]	; (8002100 <MX_GPIO_Init+0x1d0>)
 800204e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002050:	2301      	movs	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4619      	mov	r1, r3
 800205a:	4826      	ldr	r0, [pc, #152]	; (80020f4 <MX_GPIO_Init+0x1c4>)
 800205c:	f002 f9fa 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002060:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	2301      	movs	r3, #1
 8002068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800206e:	2302      	movs	r3, #2
 8002070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	481f      	ldr	r0, [pc, #124]	; (80020f8 <MX_GPIO_Init+0x1c8>)
 800207a:	f002 f9eb 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800207e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002084:	2301      	movs	r3, #1
 8002086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4619      	mov	r1, r3
 8002096:	4818      	ldr	r0, [pc, #96]	; (80020f8 <MX_GPIO_Init+0x1c8>)
 8002098:	f002 f9dc 	bl	8004454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800209c:	2304      	movs	r3, #4
 800209e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	4812      	ldr	r0, [pc, #72]	; (80020fc <MX_GPIO_Init+0x1cc>)
 80020b4:	f002 f9ce 	bl	8004454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2006      	movs	r0, #6
 80020be:	f001 fc3a 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020c2:	2006      	movs	r0, #6
 80020c4:	f001 fc53 	bl	800396e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	2007      	movs	r0, #7
 80020ce:	f001 fc32 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020d2:	2007      	movs	r0, #7
 80020d4:	f001 fc4b 	bl	800396e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	2028      	movs	r0, #40	; 0x28
 80020de:	f001 fc2a 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020e2:	2028      	movs	r0, #40	; 0x28
 80020e4:	f001 fc43 	bl	800396e <HAL_NVIC_EnableIRQ>

}
 80020e8:	bf00      	nop
 80020ea:	3728      	adds	r7, #40	; 0x28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020400 	.word	0x40020400
 80020f8:	40020000 	.word	0x40020000
 80020fc:	40020c00 	.word	0x40020c00
 8002100:	10110000 	.word	0x10110000
 8002104:	40020800 	.word	0x40020800
 8002108:	10310000 	.word	0x10310000

0800210c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <peripheral_init>:
int64_t enc_tim_total = 0;
int8_t setup_mode = 0;
int8_t check_sens_val = 0;
uint8_t sw_center_state = 0;

void peripheral_init(void){
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	gpio_set();
 8002120:	f000 f890 	bl	8002244 <gpio_set>
	lcd_init();
 8002124:	f7fe fd1e 	bl	8000b64 <lcd_init>
	INA260_init();
 8002128:	f7fe ff0e 	bl	8000f48 <INA260_init>
	if( IMU_init() == 1 ) {
 800212c:	f7fe fe18 	bl	8000d60 <IMU_init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b01      	cmp	r3, #1
 8002134:	d10e      	bne.n	8002154 <peripheral_init+0x38>
		lcd_locate(0,0);
 8002136:	2100      	movs	r1, #0
 8002138:	2000      	movs	r0, #0
 800213a:	f7fe fd50 	bl	8000bde <lcd_locate>
		lcd_print("WHO_AM_I");
 800213e:	4835      	ldr	r0, [pc, #212]	; (8002214 <peripheral_init+0xf8>)
 8002140:	f7fe fd62 	bl	8000c08 <lcd_print>
		lcd_locate(0,1);
 8002144:	2101      	movs	r1, #1
 8002146:	2000      	movs	r0, #0
 8002148:	f7fe fd49 	bl	8000bde <lcd_locate>
		lcd_print("SUCCESS");
 800214c:	4832      	ldr	r0, [pc, #200]	; (8002218 <peripheral_init+0xfc>)
 800214e:	f7fe fd5b 	bl	8000c08 <lcd_print>
 8002152:	e00d      	b.n	8002170 <peripheral_init+0x54>
	}
	else {
		lcd_locate(0,0);
 8002154:	2100      	movs	r1, #0
 8002156:	2000      	movs	r0, #0
 8002158:	f7fe fd41 	bl	8000bde <lcd_locate>
		lcd_print("WHO_AM_I");
 800215c:	482d      	ldr	r0, [pc, #180]	; (8002214 <peripheral_init+0xf8>)
 800215e:	f7fe fd53 	bl	8000c08 <lcd_print>
		lcd_locate(0,1);
 8002162:	2101      	movs	r1, #1
 8002164:	2000      	movs	r0, #0
 8002166:	f7fe fd3a 	bl	8000bde <lcd_locate>
		lcd_print("Failed");
 800216a:	482c      	ldr	r0, [pc, #176]	; (800221c <peripheral_init+0x100>)
 800216c:	f7fe fd4c 	bl	8000c08 <lcd_print>
	}
	//set_encoder
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8002170:	213c      	movs	r1, #60	; 0x3c
 8002172:	482b      	ldr	r0, [pc, #172]	; (8002220 <peripheral_init+0x104>)
 8002174:	f004 fd9c 	bl	8006cb0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8002178:	213c      	movs	r1, #60	; 0x3c
 800217a:	482a      	ldr	r0, [pc, #168]	; (8002224 <peripheral_init+0x108>)
 800217c:	f004 fd98 	bl	8006cb0 <HAL_TIM_Encoder_Start>
	//set_motordrive
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002180:	2100      	movs	r1, #0
 8002182:	4829      	ldr	r0, [pc, #164]	; (8002228 <peripheral_init+0x10c>)
 8002184:	f004 fcc4 	bl	8006b10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8002188:	2104      	movs	r1, #4
 800218a:	4827      	ldr	r0, [pc, #156]	; (8002228 <peripheral_init+0x10c>)
 800218c:	f004 fcc0 	bl	8006b10 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <peripheral_init+0x10c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2200      	movs	r2, #0
 8002196:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8002198:	4b23      	ldr	r3, [pc, #140]	; (8002228 <peripheral_init+0x10c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2200      	movs	r2, #0
 800219e:	639a      	str	r2, [r3, #56]	; 0x38
	//set_buzzer
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80021a0:	2100      	movs	r1, #0
 80021a2:	4822      	ldr	r0, [pc, #136]	; (800222c <peripheral_init+0x110>)
 80021a4:	f004 fcb4 	bl	8006b10 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <peripheral_init+0x110>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	635a      	str	r2, [r3, #52]	; 0x34
	//set_4in1-esc
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80021b0:	2100      	movs	r1, #0
 80021b2:	481f      	ldr	r0, [pc, #124]	; (8002230 <peripheral_init+0x114>)
 80021b4:	f004 fcac 	bl	8006b10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80021b8:	2104      	movs	r1, #4
 80021ba:	481d      	ldr	r0, [pc, #116]	; (8002230 <peripheral_init+0x114>)
 80021bc:	f004 fca8 	bl	8006b10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80021c0:	2108      	movs	r1, #8
 80021c2:	481b      	ldr	r0, [pc, #108]	; (8002230 <peripheral_init+0x114>)
 80021c4:	f004 fca4 	bl	8006b10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80021c8:	210c      	movs	r1, #12
 80021ca:	4819      	ldr	r0, [pc, #100]	; (8002230 <peripheral_init+0x114>)
 80021cc:	f004 fca0 	bl	8006b10 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <peripheral_init+0x114>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <peripheral_init+0x114>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80021e2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <peripheral_init+0x114>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80021ec:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <peripheral_init+0x114>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
	//set_timer
	HAL_TIM_Base_Start_IT(&htim6);
 80021f8:	480e      	ldr	r0, [pc, #56]	; (8002234 <peripheral_init+0x118>)
 80021fa:	f004 fc3a 	bl	8006a72 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80021fe:	480e      	ldr	r0, [pc, #56]	; (8002238 <peripheral_init+0x11c>)
 8002200:	f004 fc37 	bl	8006a72 <HAL_TIM_Base_Start_IT>
	//ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC1_Buff, ADC_DATA_BUFFR_SIZE);
 8002204:	220c      	movs	r2, #12
 8002206:	490d      	ldr	r1, [pc, #52]	; (800223c <peripheral_init+0x120>)
 8002208:	480d      	ldr	r0, [pc, #52]	; (8002240 <peripheral_init+0x124>)
 800220a:	f000 ff09 	bl	8003020 <HAL_ADC_Start_DMA>

}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	08008874 	.word	0x08008874
 8002218:	08008880 	.word	0x08008880
 800221c:	08008888 	.word	0x08008888
 8002220:	2000036c 	.word	0x2000036c
 8002224:	200000c4 	.word	0x200000c4
 8002228:	200003ec 	.word	0x200003ec
 800222c:	200003ac 	.word	0x200003ac
 8002230:	200001ac 	.word	0x200001ac
 8002234:	2000032c 	.word	0x2000032c
 8002238:	2000042c 	.word	0x2000042c
 800223c:	20000478 	.word	0x20000478
 8002240:	20000244 	.word	0x20000244

08002244 <gpio_set>:

void gpio_set(void){
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
	CS_SET;
 8002248:	2201      	movs	r2, #1
 800224a:	2104      	movs	r1, #4
 800224c:	4810      	ldr	r0, [pc, #64]	; (8002290 <gpio_set+0x4c>)
 800224e:	f002 fa9b 	bl	8004788 <HAL_GPIO_WritePin>
	MR_SET;
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002258:	480e      	ldr	r0, [pc, #56]	; (8002294 <gpio_set+0x50>)
 800225a:	f002 fa95 	bl	8004788 <HAL_GPIO_WritePin>
	ML_SET;
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002264:	480b      	ldr	r0, [pc, #44]	; (8002294 <gpio_set+0x50>)
 8002266:	f002 fa8f 	bl	8004788 <HAL_GPIO_WritePin>
	LED_R_SET;
 800226a:	2201      	movs	r2, #1
 800226c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002270:	4809      	ldr	r0, [pc, #36]	; (8002298 <gpio_set+0x54>)
 8002272:	f002 fa89 	bl	8004788 <HAL_GPIO_WritePin>
	LED_G_SET;
 8002276:	2201      	movs	r2, #1
 8002278:	2104      	movs	r1, #4
 800227a:	4807      	ldr	r0, [pc, #28]	; (8002298 <gpio_set+0x54>)
 800227c:	f002 fa84 	bl	8004788 <HAL_GPIO_WritePin>
	LED_B_SET;
 8002280:	2201      	movs	r2, #1
 8002282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002286:	4803      	ldr	r0, [pc, #12]	; (8002294 <gpio_set+0x50>)
 8002288:	f002 fa7e 	bl	8004788 <HAL_GPIO_WritePin>
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40020000 	.word	0x40020000
 8002298:	40020400 	.word	0x40020400

0800229c <led_pattern>:

void led_pattern(uint8_t led){
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
	if(led & 0b001) LED_R_RESET;
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <led_pattern+0x22>
 80022b0:	2200      	movs	r2, #0
 80022b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022b6:	4818      	ldr	r0, [pc, #96]	; (8002318 <led_pattern+0x7c>)
 80022b8:	f002 fa66 	bl	8004788 <HAL_GPIO_WritePin>
 80022bc:	e005      	b.n	80022ca <led_pattern+0x2e>
		else LED_R_SET;
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c4:	4814      	ldr	r0, [pc, #80]	; (8002318 <led_pattern+0x7c>)
 80022c6:	f002 fa5f 	bl	8004788 <HAL_GPIO_WritePin>
	if(led & 0b010) LED_G_RESET;
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <led_pattern+0x44>
 80022d4:	2200      	movs	r2, #0
 80022d6:	2104      	movs	r1, #4
 80022d8:	480f      	ldr	r0, [pc, #60]	; (8002318 <led_pattern+0x7c>)
 80022da:	f002 fa55 	bl	8004788 <HAL_GPIO_WritePin>
 80022de:	e004      	b.n	80022ea <led_pattern+0x4e>
		else LED_G_SET;
 80022e0:	2201      	movs	r2, #1
 80022e2:	2104      	movs	r1, #4
 80022e4:	480c      	ldr	r0, [pc, #48]	; (8002318 <led_pattern+0x7c>)
 80022e6:	f002 fa4f 	bl	8004788 <HAL_GPIO_WritePin>
	if(led & 0b100) LED_B_RESET;
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d006      	beq.n	8002302 <led_pattern+0x66>
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022fa:	4808      	ldr	r0, [pc, #32]	; (800231c <led_pattern+0x80>)
 80022fc:	f002 fa44 	bl	8004788 <HAL_GPIO_WritePin>
		else LED_B_SET;
}
 8002300:	e005      	b.n	800230e <led_pattern+0x72>
		else LED_B_SET;
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002308:	4804      	ldr	r0, [pc, #16]	; (800231c <led_pattern+0x80>)
 800230a:	f002 fa3d 	bl	8004788 <HAL_GPIO_WritePin>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40020400 	.word	0x40020400
 800231c:	40020000 	.word	0x40020000

08002320 <getEncoder>:

void getEncoder(void) {
 8002320:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8002324:	af00      	add	r7, sp, #0

	enc_tim1_ms = TIM1 -> CNT;
 8002326:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <getEncoder+0xa4>)
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	b21a      	sxth	r2, r3
 800232c:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <getEncoder+0xa8>)
 800232e:	801a      	strh	r2, [r3, #0]
	enc_tim8_ms = TIM8 -> CNT;
 8002330:	4b26      	ldr	r3, [pc, #152]	; (80023cc <getEncoder+0xac>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	b21a      	sxth	r2, r3
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <getEncoder+0xb0>)
 8002338:	801a      	strh	r2, [r3, #0]

	TIM1 -> CNT = 0;
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <getEncoder+0xa4>)
 800233c:	2200      	movs	r2, #0
 800233e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = 0;
 8002340:	4b22      	ldr	r3, [pc, #136]	; (80023cc <getEncoder+0xac>)
 8002342:	2200      	movs	r2, #0
 8002344:	625a      	str	r2, [r3, #36]	; 0x24

	enc_tim1_total += enc_tim1_ms;
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <getEncoder+0xa8>)
 8002348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234c:	b219      	sxth	r1, r3
 800234e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <getEncoder+0xb4>)
 8002354:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8002358:	eb1b 0301 	adds.w	r3, fp, r1
 800235c:	eb4c 0402 	adc.w	r4, ip, r2
 8002360:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <getEncoder+0xb4>)
 8002362:	e9c2 3400 	strd	r3, r4, [r2]
	enc_tim8_total += enc_tim8_ms;
 8002366:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <getEncoder+0xb0>)
 8002368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800236c:	b219      	sxth	r1, r3
 800236e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <getEncoder+0xb8>)
 8002374:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8002378:	eb1b 0301 	adds.w	r3, fp, r1
 800237c:	eb4c 0402 	adc.w	r4, ip, r2
 8002380:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <getEncoder+0xb8>)
 8002382:	e9c2 3400 	strd	r3, r4, [r2]
	enc_tim_total = (enc_tim1_total + enc_tim8_total) / 2;
 8002386:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <getEncoder+0xb4>)
 8002388:	e9d3 1200 	ldrd	r1, r2, [r3]
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <getEncoder+0xb8>)
 800238e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002392:	eb13 0b01 	adds.w	fp, r3, r1
 8002396:	eb44 0c02 	adc.w	ip, r4, r2
 800239a:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 800239e:	4611      	mov	r1, r2
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	eb1b 0301 	adds.w	r3, fp, r1
 80023a8:	eb4c 0402 	adc.w	r4, ip, r2
 80023ac:	1064      	asrs	r4, r4, #1
 80023ae:	ea4f 0333 	mov.w	r3, r3, rrx
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <getEncoder+0xbc>)
 80023b4:	e9c2 3400 	strd	r3, r4, [r2]

}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40010000 	.word	0x40010000
 80023c8:	2000008c 	.word	0x2000008c
 80023cc:	40010400 	.word	0x40010400
 80023d0:	2000008e 	.word	0x2000008e
 80023d4:	20000090 	.word	0x20000090
 80023d8:	20000098 	.word	0x20000098
 80023dc:	200000a0 	.word	0x200000a0

080023e0 <ADval_get>:

//sensor-borad from left to right		AD9 AD8 AD15 AD14 AD7 AD6   AD5 AD4 AD3 AD2 AD1 AD0
//maker-borad  from left to right	 	ADxx 	ADxx
void ADval_get(void) {
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
	line_sen0  = ADC1_Buff[0];
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <ADval_get+0x70>)
 80023e6:	881a      	ldrh	r2, [r3, #0]
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <ADval_get+0x74>)
 80023ea:	801a      	strh	r2, [r3, #0]
	line_sen1  = ADC1_Buff[1];
 80023ec:	4b18      	ldr	r3, [pc, #96]	; (8002450 <ADval_get+0x70>)
 80023ee:	885a      	ldrh	r2, [r3, #2]
 80023f0:	4b19      	ldr	r3, [pc, #100]	; (8002458 <ADval_get+0x78>)
 80023f2:	801a      	strh	r2, [r3, #0]
	line_sen2  = ADC1_Buff[2];
 80023f4:	4b16      	ldr	r3, [pc, #88]	; (8002450 <ADval_get+0x70>)
 80023f6:	889a      	ldrh	r2, [r3, #4]
 80023f8:	4b18      	ldr	r3, [pc, #96]	; (800245c <ADval_get+0x7c>)
 80023fa:	801a      	strh	r2, [r3, #0]
	line_sen3  = ADC1_Buff[3];
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <ADval_get+0x70>)
 80023fe:	88da      	ldrh	r2, [r3, #6]
 8002400:	4b17      	ldr	r3, [pc, #92]	; (8002460 <ADval_get+0x80>)
 8002402:	801a      	strh	r2, [r3, #0]
	line_sen4  = ADC1_Buff[4];
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <ADval_get+0x70>)
 8002406:	891a      	ldrh	r2, [r3, #8]
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <ADval_get+0x84>)
 800240a:	801a      	strh	r2, [r3, #0]
	line_sen5  = ADC1_Buff[5];
 800240c:	4b10      	ldr	r3, [pc, #64]	; (8002450 <ADval_get+0x70>)
 800240e:	895a      	ldrh	r2, [r3, #10]
 8002410:	4b15      	ldr	r3, [pc, #84]	; (8002468 <ADval_get+0x88>)
 8002412:	801a      	strh	r2, [r3, #0]
	line_sen6  = ADC1_Buff[6];
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <ADval_get+0x70>)
 8002416:	899a      	ldrh	r2, [r3, #12]
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <ADval_get+0x8c>)
 800241a:	801a      	strh	r2, [r3, #0]
	line_sen7  = ADC1_Buff[7];
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <ADval_get+0x70>)
 800241e:	89da      	ldrh	r2, [r3, #14]
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <ADval_get+0x90>)
 8002422:	801a      	strh	r2, [r3, #0]
	line_sen8  = ADC1_Buff[8];
 8002424:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <ADval_get+0x70>)
 8002426:	8a1a      	ldrh	r2, [r3, #16]
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <ADval_get+0x94>)
 800242a:	801a      	strh	r2, [r3, #0]
	line_sen9  = ADC1_Buff[9];
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <ADval_get+0x70>)
 800242e:	8a5a      	ldrh	r2, [r3, #18]
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <ADval_get+0x98>)
 8002432:	801a      	strh	r2, [r3, #0]
	line_sen10 = ADC1_Buff[10];
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <ADval_get+0x70>)
 8002436:	8a9a      	ldrh	r2, [r3, #20]
 8002438:	4b10      	ldr	r3, [pc, #64]	; (800247c <ADval_get+0x9c>)
 800243a:	801a      	strh	r2, [r3, #0]
	line_sen11 = ADC1_Buff[11];
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <ADval_get+0x70>)
 800243e:	8ada      	ldrh	r2, [r3, #22]
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <ADval_get+0xa0>)
 8002442:	801a      	strh	r2, [r3, #0]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000478 	.word	0x20000478
 8002454:	20000498 	.word	0x20000498
 8002458:	20000492 	.word	0x20000492
 800245c:	20000474 	.word	0x20000474
 8002460:	20000470 	.word	0x20000470
 8002464:	2000046e 	.word	0x2000046e
 8002468:	20000496 	.word	0x20000496
 800246c:	20000476 	.word	0x20000476
 8002470:	20000472 	.word	0x20000472
 8002474:	20000490 	.word	0x20000490
 8002478:	2000046c 	.word	0x2000046c
 800247c:	20000494 	.word	0x20000494
 8002480:	2000049a 	.word	0x2000049a

08002484 <HAL_GPIO_EXTI_Callback>:

void buzzer(uint8_t bz){
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2099);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_0) ; 	//left

	if (GPIO_Pin == GPIO_PIN_1) { 	//up
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d110      	bne.n	80024b6 <HAL_GPIO_EXTI_Callback+0x32>
	  check_sens_val--;
 8002494:	4b29      	ldr	r3, [pc, #164]	; (800253c <HAL_GPIO_EXTI_Callback+0xb8>)
 8002496:	f993 3000 	ldrsb.w	r3, [r3]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	b25a      	sxtb	r2, r3
 80024a2:	4b26      	ldr	r3, [pc, #152]	; (800253c <HAL_GPIO_EXTI_Callback+0xb8>)
 80024a4:	701a      	strb	r2, [r3, #0]
	  if(check_sens_val < 0)  check_sens_val = CHECK_SENS_MAX;
 80024a6:	4b25      	ldr	r3, [pc, #148]	; (800253c <HAL_GPIO_EXTI_Callback+0xb8>)
 80024a8:	f993 3000 	ldrsb.w	r3, [r3]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	da02      	bge.n	80024b6 <HAL_GPIO_EXTI_Callback+0x32>
 80024b0:	4b22      	ldr	r3, [pc, #136]	; (800253c <HAL_GPIO_EXTI_Callback+0xb8>)
 80024b2:	220b      	movs	r2, #11
 80024b4:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_12) {	//push
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024bc:	d110      	bne.n	80024e0 <HAL_GPIO_EXTI_Callback+0x5c>
	  setup_mode++;
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_GPIO_EXTI_Callback+0xbc>)
 80024c0:	f993 3000 	ldrsb.w	r3, [r3]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	b25a      	sxtb	r2, r3
 80024cc:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <HAL_GPIO_EXTI_Callback+0xbc>)
 80024ce:	701a      	strb	r2, [r3, #0]
	  if(setup_mode >= 8) setup_mode = 0;
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_GPIO_EXTI_Callback+0xbc>)
 80024d2:	f993 3000 	ldrsb.w	r3, [r3]
 80024d6:	2b07      	cmp	r3, #7
 80024d8:	dd02      	ble.n	80024e0 <HAL_GPIO_EXTI_Callback+0x5c>
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_GPIO_EXTI_Callback+0xbc>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_13) {	//down
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e6:	d110      	bne.n	800250a <HAL_GPIO_EXTI_Callback+0x86>
	  check_sens_val++;
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <HAL_GPIO_EXTI_Callback+0xb8>)
 80024ea:	f993 3000 	ldrsb.w	r3, [r3]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	b25a      	sxtb	r2, r3
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_GPIO_EXTI_Callback+0xb8>)
 80024f8:	701a      	strb	r2, [r3, #0]
	  if(check_sens_val > CHECK_SENS_MAX) check_sens_val = 0;
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_GPIO_EXTI_Callback+0xb8>)
 80024fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002500:	2b0b      	cmp	r3, #11
 8002502:	dd02      	ble.n	800250a <HAL_GPIO_EXTI_Callback+0x86>
 8002504:	4b0d      	ldr	r3, [pc, #52]	; (800253c <HAL_GPIO_EXTI_Callback+0xb8>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_14) {	//center
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002510:	d10d      	bne.n	800252e <HAL_GPIO_EXTI_Callback+0xaa>
	  if(sw_center_state > 1) sw_center_state = 1;
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d902      	bls.n	8002520 <HAL_GPIO_EXTI_Callback+0x9c>
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <HAL_GPIO_EXTI_Callback+0xc0>)
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
	  sw_center_state ^= 1;
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	f083 0301 	eor.w	r3, r3, #1
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_GPIO_EXTI_Callback+0xc0>)
 800252c:	701a      	strb	r2, [r3, #0]

	if (GPIO_Pin == GPIO_PIN_15) ;	//right

	//HAL_Delay(10);

}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	200000a9 	.word	0x200000a9
 8002540:	200000a8 	.word	0x200000a8
 8002544:	200000aa 	.word	0x200000aa

08002548 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <HAL_MspInit+0x84>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <HAL_MspInit+0x84>)
 8002558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_MspInit+0x84>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <HAL_MspInit+0x84>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a16      	ldr	r2, [pc, #88]	; (80025cc <HAL_MspInit+0x84>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b14      	ldr	r3, [pc, #80]	; (80025cc <HAL_MspInit+0x84>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 5, 0);
 8002586:	2200      	movs	r2, #0
 8002588:	2105      	movs	r1, #5
 800258a:	f06f 000b 	mvn.w	r0, #11
 800258e:	f001 f9d2 	bl	8003936 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 5, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2105      	movs	r1, #5
 8002596:	f06f 000a 	mvn.w	r0, #10
 800259a:	f001 f9cc 	bl	8003936 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 5, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2105      	movs	r1, #5
 80025a2:	f06f 0009 	mvn.w	r0, #9
 80025a6:	f001 f9c6 	bl	8003936 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2105      	movs	r1, #5
 80025ae:	f06f 0004 	mvn.w	r0, #4
 80025b2:	f001 f9c0 	bl	8003936 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2105      	movs	r1, #5
 80025ba:	f06f 0003 	mvn.w	r0, #3
 80025be:	f001 f9ba 	bl	8003936 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800

080025d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08c      	sub	sp, #48	; 0x30
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 031c 	add.w	r3, r7, #28
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a49      	ldr	r2, [pc, #292]	; (8002714 <HAL_ADC_MspInit+0x144>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	f040 808c 	bne.w	800270c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_ADC_MspInit+0x148>)
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	4a46      	ldr	r2, [pc, #280]	; (8002718 <HAL_ADC_MspInit+0x148>)
 80025fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002602:	6453      	str	r3, [r2, #68]	; 0x44
 8002604:	4b44      	ldr	r3, [pc, #272]	; (8002718 <HAL_ADC_MspInit+0x148>)
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	4b40      	ldr	r3, [pc, #256]	; (8002718 <HAL_ADC_MspInit+0x148>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	4a3f      	ldr	r2, [pc, #252]	; (8002718 <HAL_ADC_MspInit+0x148>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6313      	str	r3, [r2, #48]	; 0x30
 8002620:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_ADC_MspInit+0x148>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	4b39      	ldr	r3, [pc, #228]	; (8002718 <HAL_ADC_MspInit+0x148>)
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	4a38      	ldr	r2, [pc, #224]	; (8002718 <HAL_ADC_MspInit+0x148>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6313      	str	r3, [r2, #48]	; 0x30
 800263c:	4b36      	ldr	r3, [pc, #216]	; (8002718 <HAL_ADC_MspInit+0x148>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	4b32      	ldr	r3, [pc, #200]	; (8002718 <HAL_ADC_MspInit+0x148>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	4a31      	ldr	r2, [pc, #196]	; (8002718 <HAL_ADC_MspInit+0x148>)
 8002652:	f043 0302 	orr.w	r3, r3, #2
 8002656:	6313      	str	r3, [r2, #48]	; 0x30
 8002658:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <HAL_ADC_MspInit+0x148>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002664:	23ff      	movs	r3, #255	; 0xff
 8002666:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002668:	2303      	movs	r3, #3
 800266a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	4619      	mov	r1, r3
 8002676:	4829      	ldr	r0, [pc, #164]	; (800271c <HAL_ADC_MspInit+0x14c>)
 8002678:	f001 feec 	bl	8004454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800267c:	2330      	movs	r3, #48	; 0x30
 800267e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002680:	2303      	movs	r3, #3
 8002682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	4619      	mov	r1, r3
 800268e:	4824      	ldr	r0, [pc, #144]	; (8002720 <HAL_ADC_MspInit+0x150>)
 8002690:	f001 fee0 	bl	8004454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002694:	2303      	movs	r3, #3
 8002696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002698:	2303      	movs	r3, #3
 800269a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	4619      	mov	r1, r3
 80026a6:	481f      	ldr	r0, [pc, #124]	; (8002724 <HAL_ADC_MspInit+0x154>)
 80026a8:	f001 fed4 	bl	8004454 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80026ac:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <HAL_ADC_MspInit+0x158>)
 80026ae:	4a1f      	ldr	r2, [pc, #124]	; (800272c <HAL_ADC_MspInit+0x15c>)
 80026b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_ADC_MspInit+0x158>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_ADC_MspInit+0x158>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026be:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <HAL_ADC_MspInit+0x158>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_ADC_MspInit+0x158>)
 80026c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026cc:	4b16      	ldr	r3, [pc, #88]	; (8002728 <HAL_ADC_MspInit+0x158>)
 80026ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <HAL_ADC_MspInit+0x158>)
 80026d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026da:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_ADC_MspInit+0x158>)
 80026de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026e4:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_ADC_MspInit+0x158>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ea:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <HAL_ADC_MspInit+0x158>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026f0:	480d      	ldr	r0, [pc, #52]	; (8002728 <HAL_ADC_MspInit+0x158>)
 80026f2:	f001 f957 	bl	80039a4 <HAL_DMA_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80026fc:	f7ff fd06 	bl	800210c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <HAL_ADC_MspInit+0x158>)
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
 8002706:	4a08      	ldr	r2, [pc, #32]	; (8002728 <HAL_ADC_MspInit+0x158>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800270c:	bf00      	nop
 800270e:	3730      	adds	r7, #48	; 0x30
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40012000 	.word	0x40012000
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000
 8002720:	40020800 	.word	0x40020800
 8002724:	40020400 	.word	0x40020400
 8002728:	200002cc 	.word	0x200002cc
 800272c:	40026410 	.word	0x40026410

08002730 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08c      	sub	sp, #48	; 0x30
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 031c 	add.w	r3, r7, #28
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a33      	ldr	r2, [pc, #204]	; (800281c <HAL_I2C_MspInit+0xec>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d12d      	bne.n	80027ae <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	4b32      	ldr	r3, [pc, #200]	; (8002820 <HAL_I2C_MspInit+0xf0>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a31      	ldr	r2, [pc, #196]	; (8002820 <HAL_I2C_MspInit+0xf0>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b2f      	ldr	r3, [pc, #188]	; (8002820 <HAL_I2C_MspInit+0xf0>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800276e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002774:	2312      	movs	r3, #18
 8002776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002778:	2301      	movs	r3, #1
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002780:	2304      	movs	r3, #4
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	4619      	mov	r1, r3
 800278a:	4826      	ldr	r0, [pc, #152]	; (8002824 <HAL_I2C_MspInit+0xf4>)
 800278c:	f001 fe62 	bl	8004454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	4b22      	ldr	r3, [pc, #136]	; (8002820 <HAL_I2C_MspInit+0xf0>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	4a21      	ldr	r2, [pc, #132]	; (8002820 <HAL_I2C_MspInit+0xf0>)
 800279a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800279e:	6413      	str	r3, [r2, #64]	; 0x40
 80027a0:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <HAL_I2C_MspInit+0xf0>)
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80027ac:	e031      	b.n	8002812 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1d      	ldr	r2, [pc, #116]	; (8002828 <HAL_I2C_MspInit+0xf8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d12c      	bne.n	8002812 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <HAL_I2C_MspInit+0xf0>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	4a17      	ldr	r2, [pc, #92]	; (8002820 <HAL_I2C_MspInit+0xf0>)
 80027c2:	f043 0302 	orr.w	r3, r3, #2
 80027c6:	6313      	str	r3, [r2, #48]	; 0x30
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_I2C_MspInit+0xf0>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027da:	2312      	movs	r3, #18
 80027dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027de:	2301      	movs	r3, #1
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027e6:	2304      	movs	r3, #4
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	4619      	mov	r1, r3
 80027f0:	480c      	ldr	r0, [pc, #48]	; (8002824 <HAL_I2C_MspInit+0xf4>)
 80027f2:	f001 fe2f 	bl	8004454 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_I2C_MspInit+0xf0>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a08      	ldr	r2, [pc, #32]	; (8002820 <HAL_I2C_MspInit+0xf0>)
 8002800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_I2C_MspInit+0xf0>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
}
 8002812:	bf00      	nop
 8002814:	3730      	adds	r7, #48	; 0x30
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40005400 	.word	0x40005400
 8002820:	40023800 	.word	0x40023800
 8002824:	40020400 	.word	0x40020400
 8002828:	40005800 	.word	0x40005800

0800282c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <HAL_SPI_MspInit+0x84>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d12c      	bne.n	80028a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a17      	ldr	r2, [pc, #92]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002886:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800288a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002894:	2303      	movs	r3, #3
 8002896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002898:	2306      	movs	r3, #6
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	4619      	mov	r1, r3
 80028a2:	4805      	ldr	r0, [pc, #20]	; (80028b8 <HAL_SPI_MspInit+0x8c>)
 80028a4:	f001 fdd6 	bl	8004454 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80028a8:	bf00      	nop
 80028aa:	3728      	adds	r7, #40	; 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40003c00 	.word	0x40003c00
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40020800 	.word	0x40020800

080028bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08c      	sub	sp, #48	; 0x30
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a32      	ldr	r2, [pc, #200]	; (80029a4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d12d      	bne.n	800293a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	4a30      	ldr	r2, [pc, #192]	; (80029a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6453      	str	r3, [r2, #68]	; 0x44
 80028ee:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a29      	ldr	r2, [pc, #164]	; (80029a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002916:	f44f 7340 	mov.w	r3, #768	; 0x300
 800291a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002928:	2301      	movs	r3, #1
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292c:	f107 031c 	add.w	r3, r7, #28
 8002930:	4619      	mov	r1, r3
 8002932:	481e      	ldr	r0, [pc, #120]	; (80029ac <HAL_TIM_Encoder_MspInit+0xf0>)
 8002934:	f001 fd8e 	bl	8004454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002938:	e030      	b.n	800299c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d12b      	bne.n	800299c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	4a16      	ldr	r2, [pc, #88]	; (80029a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800294e:	f043 0302 	orr.w	r3, r3, #2
 8002952:	6453      	str	r3, [r2, #68]	; 0x44
 8002954:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6313      	str	r3, [r2, #48]	; 0x30
 8002970:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800297c:	23c0      	movs	r3, #192	; 0xc0
 800297e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002988:	2300      	movs	r3, #0
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800298c:	2303      	movs	r3, #3
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002990:	f107 031c 	add.w	r3, r7, #28
 8002994:	4619      	mov	r1, r3
 8002996:	4807      	ldr	r0, [pc, #28]	; (80029b4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002998:	f001 fd5c 	bl	8004454 <HAL_GPIO_Init>
}
 800299c:	bf00      	nop
 800299e:	3730      	adds	r7, #48	; 0x30
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40010000 	.word	0x40010000
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40010400 	.word	0x40010400
 80029b4:	40020800 	.word	0x40020800

080029b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c8:	d10e      	bne.n	80029e8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_TIM_PWM_MspInit+0x8c>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <HAL_TIM_PWM_MspInit+0x8c>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <HAL_TIM_PWM_MspInit+0x8c>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80029e6:	e026      	b.n	8002a36 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <HAL_TIM_PWM_MspInit+0x90>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10e      	bne.n	8002a10 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <HAL_TIM_PWM_MspInit+0x8c>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <HAL_TIM_PWM_MspInit+0x8c>)
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	6413      	str	r3, [r2, #64]	; 0x40
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]
}
 8002a0e:	e012      	b.n	8002a36 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0d      	ldr	r2, [pc, #52]	; (8002a4c <HAL_TIM_PWM_MspInit+0x94>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d10d      	bne.n	8002a36 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a08      	ldr	r2, [pc, #32]	; (8002a44 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40000400 	.word	0x40000400
 8002a4c:	40001800 	.word	0x40001800

08002a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ad0 <HAL_TIM_Base_MspInit+0x80>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d116      	bne.n	8002a90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_TIM_Base_MspInit+0x84>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <HAL_TIM_Base_MspInit+0x84>)
 8002a6c:	f043 0310 	orr.w	r3, r3, #16
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_TIM_Base_MspInit+0x84>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2105      	movs	r1, #5
 8002a82:	2036      	movs	r0, #54	; 0x36
 8002a84:	f000 ff57 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a88:	2036      	movs	r0, #54	; 0x36
 8002a8a:	f000 ff70 	bl	800396e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002a8e:	e01a      	b.n	8002ac6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <HAL_TIM_Base_MspInit+0x88>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d115      	bne.n	8002ac6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <HAL_TIM_Base_MspInit+0x84>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a0c      	ldr	r2, [pc, #48]	; (8002ad4 <HAL_TIM_Base_MspInit+0x84>)
 8002aa4:	f043 0320 	orr.w	r3, r3, #32
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <HAL_TIM_Base_MspInit+0x84>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2105      	movs	r1, #5
 8002aba:	2037      	movs	r0, #55	; 0x37
 8002abc:	f000 ff3b 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002ac0:	2037      	movs	r0, #55	; 0x37
 8002ac2:	f000 ff54 	bl	800396e <HAL_NVIC_EnableIRQ>
}
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40001000 	.word	0x40001000
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40001400 	.word	0x40001400

08002adc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08c      	sub	sp, #48	; 0x30
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afc:	d11f      	bne.n	8002b3e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	4b44      	ldr	r3, [pc, #272]	; (8002c14 <HAL_TIM_MspPostInit+0x138>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a43      	ldr	r2, [pc, #268]	; (8002c14 <HAL_TIM_MspPostInit+0x138>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <HAL_TIM_MspPostInit+0x138>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b20:	2302      	movs	r3, #2
 8002b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b30:	f107 031c 	add.w	r3, r7, #28
 8002b34:	4619      	mov	r1, r3
 8002b36:	4838      	ldr	r0, [pc, #224]	; (8002c18 <HAL_TIM_MspPostInit+0x13c>)
 8002b38:	f001 fc8c 	bl	8004454 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002b3c:	e066      	b.n	8002c0c <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM3)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a36      	ldr	r2, [pc, #216]	; (8002c1c <HAL_TIM_MspPostInit+0x140>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d13d      	bne.n	8002bc4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <HAL_TIM_MspPostInit+0x138>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	4a30      	ldr	r2, [pc, #192]	; (8002c14 <HAL_TIM_MspPostInit+0x138>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	6313      	str	r3, [r2, #48]	; 0x30
 8002b58:	4b2e      	ldr	r3, [pc, #184]	; (8002c14 <HAL_TIM_MspPostInit+0x138>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <HAL_TIM_MspPostInit+0x138>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <HAL_TIM_MspPostInit+0x138>)
 8002b6e:	f043 0302 	orr.w	r3, r3, #2
 8002b72:	6313      	str	r3, [r2, #48]	; 0x30
 8002b74:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <HAL_TIM_MspPostInit+0x138>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b92:	2302      	movs	r3, #2
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b96:	f107 031c 	add.w	r3, r7, #28
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4820      	ldr	r0, [pc, #128]	; (8002c20 <HAL_TIM_MspPostInit+0x144>)
 8002b9e:	f001 fc59 	bl	8004454 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002ba2:	2330      	movs	r3, #48	; 0x30
 8002ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb6:	f107 031c 	add.w	r3, r7, #28
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4819      	ldr	r0, [pc, #100]	; (8002c24 <HAL_TIM_MspPostInit+0x148>)
 8002bbe:	f001 fc49 	bl	8004454 <HAL_GPIO_Init>
}
 8002bc2:	e023      	b.n	8002c0c <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM12)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <HAL_TIM_MspPostInit+0x14c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d11e      	bne.n	8002c0c <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_TIM_MspPostInit+0x138>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <HAL_TIM_MspPostInit+0x138>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <HAL_TIM_MspPostInit+0x138>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002bea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002bfc:	2309      	movs	r3, #9
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	4619      	mov	r1, r3
 8002c06:	4807      	ldr	r0, [pc, #28]	; (8002c24 <HAL_TIM_MspPostInit+0x148>)
 8002c08:	f001 fc24 	bl	8004454 <HAL_GPIO_Init>
}
 8002c0c:	bf00      	nop
 8002c0e:	3730      	adds	r7, #48	; 0x30
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40020000 	.word	0x40020000
 8002c1c:	40000400 	.word	0x40000400
 8002c20:	40020800 	.word	0x40020800
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40001800 	.word	0x40001800

08002c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <HAL_UART_MspInit+0x84>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d12b      	bne.n	8002ca6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_UART_MspInit+0x88>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <HAL_UART_MspInit+0x88>)
 8002c58:	f043 0310 	orr.w	r3, r3, #16
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <HAL_UART_MspInit+0x88>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <HAL_UART_MspInit+0x88>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a10      	ldr	r2, [pc, #64]	; (8002cb4 <HAL_UART_MspInit+0x88>)
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_UART_MspInit+0x88>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c86:	23c0      	movs	r3, #192	; 0xc0
 8002c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c92:	2303      	movs	r3, #3
 8002c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c96:	2307      	movs	r3, #7
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9a:	f107 0314 	add.w	r3, r7, #20
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4805      	ldr	r0, [pc, #20]	; (8002cb8 <HAL_UART_MspInit+0x8c>)
 8002ca2:	f001 fbd7 	bl	8004454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ca6:	bf00      	nop
 8002ca8:	3728      	adds	r7, #40	; 0x28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40011000 	.word	0x40011000
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40020400 	.word	0x40020400

08002cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cce:	e7fe      	b.n	8002cce <HardFault_Handler+0x4>

08002cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cd4:	e7fe      	b.n	8002cd4 <MemManage_Handler+0x4>

08002cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cda:	e7fe      	b.n	8002cda <BusFault_Handler+0x4>

08002cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce0:	e7fe      	b.n	8002ce0 <UsageFault_Handler+0x4>

08002ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d10:	f000 f900 	bl	8002f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f001 fd4d 	bl	80047bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002d2a:	2002      	movs	r0, #2
 8002d2c:	f001 fd46 	bl	80047bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002d38:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d3c:	f001 fd3e 	bl	80047bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d44:	f001 fd3a 	bl	80047bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002d48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d4c:	f001 fd36 	bl	80047bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002d50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002d54:	f001 fd32 	bl	80047bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d60:	4802      	ldr	r0, [pc, #8]	; (8002d6c <TIM6_DAC_IRQHandler+0x10>)
 8002d62:	f003 ffdc 	bl	8006d1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	2000032c 	.word	0x2000032c

08002d70 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d74:	4802      	ldr	r0, [pc, #8]	; (8002d80 <TIM7_IRQHandler+0x10>)
 8002d76:	f003 ffd2 	bl	8006d1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	2000042c 	.word	0x2000042c

08002d84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d88:	4802      	ldr	r0, [pc, #8]	; (8002d94 <DMA2_Stream0_IRQHandler+0x10>)
 8002d8a:	f000 ff11 	bl	8003bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	200002cc 	.word	0x200002cc

08002d98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <_sbrk+0x50>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <_sbrk+0x16>
		heap_end = &end;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <_sbrk+0x50>)
 8002daa:	4a10      	ldr	r2, [pc, #64]	; (8002dec <_sbrk+0x54>)
 8002dac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <_sbrk+0x50>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <_sbrk+0x50>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	466a      	mov	r2, sp
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d907      	bls.n	8002dd2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002dc2:	f005 f873 	bl	8007eac <__errno>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	230c      	movs	r3, #12
 8002dca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd0:	e006      	b.n	8002de0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <_sbrk+0x50>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	4a03      	ldr	r2, [pc, #12]	; (8002de8 <_sbrk+0x50>)
 8002ddc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002dde:	68fb      	ldr	r3, [r7, #12]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	200000ac 	.word	0x200000ac
 8002dec:	200004c8 	.word	0x200004c8

08002df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <SystemInit+0x28>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <SystemInit+0x28>)
 8002dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <SystemInit+0x28>)
 8002e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e0a:	609a      	str	r2, [r3, #8]
#endif
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e22:	e003      	b.n	8002e2c <LoopCopyDataInit>

08002e24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e2a:	3104      	adds	r1, #4

08002e2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e2c:	480b      	ldr	r0, [pc, #44]	; (8002e5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e34:	d3f6      	bcc.n	8002e24 <CopyDataInit>
  ldr  r2, =_sbss
 8002e36:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e38:	e002      	b.n	8002e40 <LoopFillZerobss>

08002e3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e3c:	f842 3b04 	str.w	r3, [r2], #4

08002e40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e44:	d3f9      	bcc.n	8002e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e46:	f7ff ffd3 	bl	8002df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e4a:	f005 f835 	bl	8007eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4e:	f7fe fbd5 	bl	80015fc <main>
  bx  lr    
 8002e52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e58:	08008904 	.word	0x08008904
  ldr  r0, =_sdata
 8002e5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e60:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002e64:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002e68:	200004c4 	.word	0x200004c4

08002e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e6c:	e7fe      	b.n	8002e6c <ADC_IRQHandler>
	...

08002e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_Init+0x40>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <HAL_Init+0x40>)
 8002e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_Init+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <HAL_Init+0x40>)
 8002e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a07      	ldr	r2, [pc, #28]	; (8002eb0 <HAL_Init+0x40>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e98:	2003      	movs	r0, #3
 8002e9a:	f000 fd41 	bl	8003920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f000 f808 	bl	8002eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ea4:	f7ff fb50 	bl	8002548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00

08002eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ebc:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_InitTick+0x54>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_InitTick+0x58>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fd59 	bl	800398a <HAL_SYSTICK_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00e      	b.n	8002f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b0f      	cmp	r3, #15
 8002ee6:	d80a      	bhi.n	8002efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	f000 fd21 	bl	8003936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ef4:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <HAL_InitTick+0x5c>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	20000008 	.word	0x20000008
 8002f10:	20000004 	.word	0x20000004

08002f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_IncTick+0x20>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_IncTick+0x24>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <HAL_IncTick+0x24>)
 8002f26:	6013      	str	r3, [r2, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000008 	.word	0x20000008
 8002f38:	2000049c 	.word	0x2000049c

08002f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_GetTick+0x14>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	2000049c 	.word	0x2000049c

08002f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff ffee 	bl	8002f3c <HAL_GetTick>
 8002f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d005      	beq.n	8002f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_Delay+0x40>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4413      	add	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f7a:	bf00      	nop
 8002f7c:	f7ff ffde 	bl	8002f3c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d8f7      	bhi.n	8002f7c <HAL_Delay+0x28>
  {
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000008 	.word	0x20000008

08002f98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e033      	b.n	8003016 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff fb0a 	bl	80025d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d118      	bne.n	8003008 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fde:	f023 0302 	bic.w	r3, r3, #2
 8002fe2:	f043 0202 	orr.w	r2, r3, #2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fa4a 	bl	8003484 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
 8003006:	e001      	b.n	800300c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_ADC_Start_DMA+0x1e>
 800303a:	2302      	movs	r3, #2
 800303c:	e0cc      	b.n	80031d8 <HAL_ADC_Start_DMA+0x1b8>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d018      	beq.n	8003086 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003064:	4b5e      	ldr	r3, [pc, #376]	; (80031e0 <HAL_ADC_Start_DMA+0x1c0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5e      	ldr	r2, [pc, #376]	; (80031e4 <HAL_ADC_Start_DMA+0x1c4>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0c9a      	lsrs	r2, r3, #18
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003078:	e002      	b.n	8003080 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	3b01      	subs	r3, #1
 800307e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f9      	bne.n	800307a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	f040 80a0 	bne.w	80031d6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d007      	beq.n	80030c8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d4:	d106      	bne.n	80030e4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	f023 0206 	bic.w	r2, r3, #6
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	645a      	str	r2, [r3, #68]	; 0x44
 80030e2:	e002      	b.n	80030ea <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030f2:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_ADC_Start_DMA+0x1c8>)
 80030f4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	4a3c      	ldr	r2, [pc, #240]	; (80031ec <HAL_ADC_Start_DMA+0x1cc>)
 80030fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	4a3b      	ldr	r2, [pc, #236]	; (80031f0 <HAL_ADC_Start_DMA+0x1d0>)
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	4a3a      	ldr	r2, [pc, #232]	; (80031f4 <HAL_ADC_Start_DMA+0x1d4>)
 800310c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003116:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003126:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003136:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	334c      	adds	r3, #76	; 0x4c
 8003142:	4619      	mov	r1, r3
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f000 fcda 	bl	8003b00 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	2b00      	cmp	r3, #0
 8003156:	d12a      	bne.n	80031ae <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <HAL_ADC_Start_DMA+0x1d8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d015      	beq.n	800318e <HAL_ADC_Start_DMA+0x16e>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a25      	ldr	r2, [pc, #148]	; (80031fc <HAL_ADC_Start_DMA+0x1dc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d105      	bne.n	8003178 <HAL_ADC_Start_DMA+0x158>
 800316c:	4b1e      	ldr	r3, [pc, #120]	; (80031e8 <HAL_ADC_Start_DMA+0x1c8>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a20      	ldr	r2, [pc, #128]	; (8003200 <HAL_ADC_Start_DMA+0x1e0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d129      	bne.n	80031d6 <HAL_ADC_Start_DMA+0x1b6>
 8003182:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_ADC_Start_DMA+0x1c8>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	2b0f      	cmp	r3, #15
 800318c:	d823      	bhi.n	80031d6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d11c      	bne.n	80031d6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	e013      	b.n	80031d6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a11      	ldr	r2, [pc, #68]	; (80031f8 <HAL_ADC_Start_DMA+0x1d8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d10e      	bne.n	80031d6 <HAL_ADC_Start_DMA+0x1b6>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d107      	bne.n	80031d6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031d4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000000 	.word	0x20000000
 80031e4:	431bde83 	.word	0x431bde83
 80031e8:	40012300 	.word	0x40012300
 80031ec:	0800367d 	.word	0x0800367d
 80031f0:	08003737 	.word	0x08003737
 80031f4:	08003753 	.word	0x08003753
 80031f8:	40012000 	.word	0x40012000
 80031fc:	40012100 	.word	0x40012100
 8003200:	40012200 	.word	0x40012200

08003204 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_ADC_ConfigChannel+0x1c>
 8003258:	2302      	movs	r3, #2
 800325a:	e105      	b.n	8003468 <HAL_ADC_ConfigChannel+0x228>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b09      	cmp	r3, #9
 800326a:	d925      	bls.n	80032b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68d9      	ldr	r1, [r3, #12]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	3b1e      	subs	r3, #30
 8003282:	2207      	movs	r2, #7
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43da      	mvns	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	400a      	ands	r2, r1
 8003290:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68d9      	ldr	r1, [r3, #12]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	4618      	mov	r0, r3
 80032a4:	4603      	mov	r3, r0
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4403      	add	r3, r0
 80032aa:	3b1e      	subs	r3, #30
 80032ac:	409a      	lsls	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	e022      	b.n	80032fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6919      	ldr	r1, [r3, #16]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	4613      	mov	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	4413      	add	r3, r2
 80032cc:	2207      	movs	r2, #7
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43da      	mvns	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	400a      	ands	r2, r1
 80032da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6919      	ldr	r1, [r3, #16]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	4618      	mov	r0, r3
 80032ee:	4603      	mov	r3, r0
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4403      	add	r3, r0
 80032f4:	409a      	lsls	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b06      	cmp	r3, #6
 8003304:	d824      	bhi.n	8003350 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	3b05      	subs	r3, #5
 8003318:	221f      	movs	r2, #31
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43da      	mvns	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	400a      	ands	r2, r1
 8003326:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	4618      	mov	r0, r3
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	3b05      	subs	r3, #5
 8003342:	fa00 f203 	lsl.w	r2, r0, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	635a      	str	r2, [r3, #52]	; 0x34
 800334e:	e04c      	b.n	80033ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b0c      	cmp	r3, #12
 8003356:	d824      	bhi.n	80033a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	3b23      	subs	r3, #35	; 0x23
 800336a:	221f      	movs	r2, #31
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43da      	mvns	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	400a      	ands	r2, r1
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	b29b      	uxth	r3, r3
 8003386:	4618      	mov	r0, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	3b23      	subs	r3, #35	; 0x23
 8003394:	fa00 f203 	lsl.w	r2, r0, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
 80033a0:	e023      	b.n	80033ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	3b41      	subs	r3, #65	; 0x41
 80033b4:	221f      	movs	r2, #31
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43da      	mvns	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	400a      	ands	r2, r1
 80033c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	4618      	mov	r0, r3
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	3b41      	subs	r3, #65	; 0x41
 80033de:	fa00 f203 	lsl.w	r2, r0, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033ea:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_ADC_ConfigChannel+0x234>)
 80033ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a21      	ldr	r2, [pc, #132]	; (8003478 <HAL_ADC_ConfigChannel+0x238>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d109      	bne.n	800340c <HAL_ADC_ConfigChannel+0x1cc>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b12      	cmp	r3, #18
 80033fe:	d105      	bne.n	800340c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a19      	ldr	r2, [pc, #100]	; (8003478 <HAL_ADC_ConfigChannel+0x238>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d123      	bne.n	800345e <HAL_ADC_ConfigChannel+0x21e>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b10      	cmp	r3, #16
 800341c:	d003      	beq.n	8003426 <HAL_ADC_ConfigChannel+0x1e6>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b11      	cmp	r3, #17
 8003424:	d11b      	bne.n	800345e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b10      	cmp	r3, #16
 8003438:	d111      	bne.n	800345e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800343a:	4b10      	ldr	r3, [pc, #64]	; (800347c <HAL_ADC_ConfigChannel+0x23c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a10      	ldr	r2, [pc, #64]	; (8003480 <HAL_ADC_ConfigChannel+0x240>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	0c9a      	lsrs	r2, r3, #18
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003450:	e002      	b.n	8003458 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3b01      	subs	r3, #1
 8003456:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f9      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	40012300 	.word	0x40012300
 8003478:	40012000 	.word	0x40012000
 800347c:	20000000 	.word	0x20000000
 8003480:	431bde83 	.word	0x431bde83

08003484 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800348c:	4b79      	ldr	r3, [pc, #484]	; (8003674 <ADC_Init+0x1f0>)
 800348e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	021a      	lsls	r2, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6899      	ldr	r1, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	4a58      	ldr	r2, [pc, #352]	; (8003678 <ADC_Init+0x1f4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d022      	beq.n	8003562 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800352a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6899      	ldr	r1, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800354c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6899      	ldr	r1, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	e00f      	b.n	8003582 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003580:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0202 	bic.w	r2, r2, #2
 8003590:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6899      	ldr	r1, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	7e1b      	ldrb	r3, [r3, #24]
 800359c:	005a      	lsls	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01b      	beq.n	80035e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	3b01      	subs	r3, #1
 80035dc:	035a      	lsls	r2, r3, #13
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	e007      	b.n	80035f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003606:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	3b01      	subs	r3, #1
 8003614:	051a      	lsls	r2, r3, #20
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800362c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6899      	ldr	r1, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800363a:	025a      	lsls	r2, r3, #9
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003652:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6899      	ldr	r1, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	029a      	lsls	r2, r3, #10
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40012300 	.word	0x40012300
 8003678:	0f000001 	.word	0x0f000001

0800367c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003692:	2b00      	cmp	r3, #0
 8003694:	d13c      	bne.n	8003710 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d12b      	bne.n	8003708 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d127      	bne.n	8003708 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d006      	beq.n	80036d4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d119      	bne.n	8003708 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0220 	bic.w	r2, r2, #32
 80036e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	f043 0201 	orr.w	r2, r3, #1
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f7ff fd7b 	bl	8003204 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800370e:	e00e      	b.n	800372e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f7ff fd85 	bl	800322c <HAL_ADC_ErrorCallback>
}
 8003722:	e004      	b.n	800372e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4798      	blx	r3
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f7ff fd67 	bl	8003218 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2240      	movs	r2, #64	; 0x40
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	f043 0204 	orr.w	r2, r3, #4
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff fd5a 	bl	800322c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800379c:	4013      	ands	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037b2:	4a04      	ldr	r2, [pc, #16]	; (80037c4 <__NVIC_SetPriorityGrouping+0x44>)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	60d3      	str	r3, [r2, #12]
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <__NVIC_GetPriorityGrouping+0x18>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	0a1b      	lsrs	r3, r3, #8
 80037d2:	f003 0307 	and.w	r3, r3, #7
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	db0b      	blt.n	800380e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	f003 021f 	and.w	r2, r3, #31
 80037fc:	4907      	ldr	r1, [pc, #28]	; (800381c <__NVIC_EnableIRQ+0x38>)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	2001      	movs	r0, #1
 8003806:	fa00 f202 	lsl.w	r2, r0, r2
 800380a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	e000e100 	.word	0xe000e100

08003820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003830:	2b00      	cmp	r3, #0
 8003832:	db0a      	blt.n	800384a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	490c      	ldr	r1, [pc, #48]	; (800386c <__NVIC_SetPriority+0x4c>)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	0112      	lsls	r2, r2, #4
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	440b      	add	r3, r1
 8003844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003848:	e00a      	b.n	8003860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4908      	ldr	r1, [pc, #32]	; (8003870 <__NVIC_SetPriority+0x50>)
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	3b04      	subs	r3, #4
 8003858:	0112      	lsls	r2, r2, #4
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	440b      	add	r3, r1
 800385e:	761a      	strb	r2, [r3, #24]
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000e100 	.word	0xe000e100
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	; 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f1c3 0307 	rsb	r3, r3, #7
 800388e:	2b04      	cmp	r3, #4
 8003890:	bf28      	it	cs
 8003892:	2304      	movcs	r3, #4
 8003894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3304      	adds	r3, #4
 800389a:	2b06      	cmp	r3, #6
 800389c:	d902      	bls.n	80038a4 <NVIC_EncodePriority+0x30>
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3b03      	subs	r3, #3
 80038a2:	e000      	b.n	80038a6 <NVIC_EncodePriority+0x32>
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43da      	mvns	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	401a      	ands	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038bc:	f04f 31ff 	mov.w	r1, #4294967295
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	fa01 f303 	lsl.w	r3, r1, r3
 80038c6:	43d9      	mvns	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	4313      	orrs	r3, r2
         );
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3724      	adds	r7, #36	; 0x24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ec:	d301      	bcc.n	80038f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00f      	b.n	8003912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038f2:	4a0a      	ldr	r2, [pc, #40]	; (800391c <SysTick_Config+0x40>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038fa:	210f      	movs	r1, #15
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	f7ff ff8e 	bl	8003820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <SysTick_Config+0x40>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800390a:	4b04      	ldr	r3, [pc, #16]	; (800391c <SysTick_Config+0x40>)
 800390c:	2207      	movs	r2, #7
 800390e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	e000e010 	.word	0xe000e010

08003920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff29 	bl	8003780 <__NVIC_SetPriorityGrouping>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	4603      	mov	r3, r0
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003948:	f7ff ff3e 	bl	80037c8 <__NVIC_GetPriorityGrouping>
 800394c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	6978      	ldr	r0, [r7, #20]
 8003954:	f7ff ff8e 	bl	8003874 <NVIC_EncodePriority>
 8003958:	4602      	mov	r2, r0
 800395a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff5d 	bl	8003820 <__NVIC_SetPriority>
}
 8003966:	bf00      	nop
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	4603      	mov	r3, r0
 8003976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ff31 	bl	80037e4 <__NVIC_EnableIRQ>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ffa2 	bl	80038dc <SysTick_Config>
 8003998:	4603      	mov	r3, r0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039b0:	f7ff fac4 	bl	8002f3c <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e099      	b.n	8003af4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0201 	bic.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039e0:	e00f      	b.n	8003a02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039e2:	f7ff faab 	bl	8002f3c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b05      	cmp	r3, #5
 80039ee:	d908      	bls.n	8003a02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2203      	movs	r2, #3
 80039fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e078      	b.n	8003af4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e8      	bne.n	80039e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4b38      	ldr	r3, [pc, #224]	; (8003afc <HAL_DMA_Init+0x158>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d107      	bne.n	8003a6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	4313      	orrs	r3, r2
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0307 	bic.w	r3, r3, #7
 8003a82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d117      	bne.n	8003ac6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00e      	beq.n	8003ac6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fa6f 	bl	8003f8c <DMA_CheckFifoParam>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2240      	movs	r2, #64	; 0x40
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e016      	b.n	8003af4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa26 	bl	8003f20 <DMA_CalcBaseAndBitshift>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	223f      	movs	r2, #63	; 0x3f
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	f010803f 	.word	0xf010803f

08003b00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_DMA_Start_IT+0x26>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e040      	b.n	8003ba8 <HAL_DMA_Start_IT+0xa8>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d12f      	bne.n	8003b9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f9b8 	bl	8003ec4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	223f      	movs	r2, #63	; 0x3f
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0216 	orr.w	r2, r2, #22
 8003b6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0208 	orr.w	r2, r2, #8
 8003b86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	e005      	b.n	8003ba6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bbc:	4b92      	ldr	r3, [pc, #584]	; (8003e08 <HAL_DMA_IRQHandler+0x258>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a92      	ldr	r2, [pc, #584]	; (8003e0c <HAL_DMA_IRQHandler+0x25c>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	0a9b      	lsrs	r3, r3, #10
 8003bc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bda:	2208      	movs	r2, #8
 8003bdc:	409a      	lsls	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01a      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d013      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0204 	bic.w	r2, r2, #4
 8003c02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	2208      	movs	r2, #8
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	f043 0201 	orr.w	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	2201      	movs	r2, #1
 8003c22:	409a      	lsls	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d012      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3e:	2201      	movs	r2, #1
 8003c40:	409a      	lsls	r2, r3
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4a:	f043 0202 	orr.w	r2, r3, #2
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c56:	2204      	movs	r2, #4
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d012      	beq.n	8003c88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00b      	beq.n	8003c88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	2204      	movs	r2, #4
 8003c76:	409a      	lsls	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c80:	f043 0204 	orr.w	r2, r3, #4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d043      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d03c      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003caa:	2210      	movs	r2, #16
 8003cac:	409a      	lsls	r2, r3
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d018      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d108      	bne.n	8003ce0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d024      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
 8003cde:	e01f      	b.n	8003d20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01b      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
 8003cf0:	e016      	b.n	8003d20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d107      	bne.n	8003d10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0208 	bic.w	r2, r2, #8
 8003d0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	2220      	movs	r2, #32
 8003d26:	409a      	lsls	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 808e 	beq.w	8003e4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8086 	beq.w	8003e4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	2220      	movs	r2, #32
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d136      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0216 	bic.w	r2, r2, #22
 8003d68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <HAL_DMA_IRQHandler+0x1da>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0208 	bic.w	r2, r2, #8
 8003d98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	223f      	movs	r2, #63	; 0x3f
 8003da0:	409a      	lsls	r2, r3
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d07d      	beq.n	8003eba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
        }
        return;
 8003dc6:	e078      	b.n	8003eba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01c      	beq.n	8003e10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d108      	bne.n	8003df6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d030      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
 8003df4:	e02b      	b.n	8003e4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d027      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
 8003e06:	e022      	b.n	8003e4e <HAL_DMA_IRQHandler+0x29e>
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10f      	bne.n	8003e3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0210 	bic.w	r2, r2, #16
 8003e2c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d032      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d022      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2205      	movs	r2, #5
 8003e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0201 	bic.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d307      	bcc.n	8003e96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f2      	bne.n	8003e7a <HAL_DMA_IRQHandler+0x2ca>
 8003e94:	e000      	b.n	8003e98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003e96:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	4798      	blx	r3
 8003eb8:	e000      	b.n	8003ebc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003eba:	bf00      	nop
    }
  }
}
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop

08003ec4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ee0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b40      	cmp	r3, #64	; 0x40
 8003ef0:	d108      	bne.n	8003f04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f02:	e007      	b.n	8003f14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	60da      	str	r2, [r3, #12]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	3b10      	subs	r3, #16
 8003f30:	4a14      	ldr	r2, [pc, #80]	; (8003f84 <DMA_CalcBaseAndBitshift+0x64>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f3a:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <DMA_CalcBaseAndBitshift+0x68>)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d909      	bls.n	8003f62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f56:	f023 0303 	bic.w	r3, r3, #3
 8003f5a:	1d1a      	adds	r2, r3, #4
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	659a      	str	r2, [r3, #88]	; 0x58
 8003f60:	e007      	b.n	8003f72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	aaaaaaab 	.word	0xaaaaaaab
 8003f88:	080088b8 	.word	0x080088b8

08003f8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d11f      	bne.n	8003fe6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d855      	bhi.n	8004058 <DMA_CheckFifoParam+0xcc>
 8003fac:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <DMA_CheckFifoParam+0x28>)
 8003fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb2:	bf00      	nop
 8003fb4:	08003fc5 	.word	0x08003fc5
 8003fb8:	08003fd7 	.word	0x08003fd7
 8003fbc:	08003fc5 	.word	0x08003fc5
 8003fc0:	08004059 	.word	0x08004059
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d045      	beq.n	800405c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd4:	e042      	b.n	800405c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fde:	d13f      	bne.n	8004060 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe4:	e03c      	b.n	8004060 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fee:	d121      	bne.n	8004034 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d836      	bhi.n	8004064 <DMA_CheckFifoParam+0xd8>
 8003ff6:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <DMA_CheckFifoParam+0x70>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	0800400d 	.word	0x0800400d
 8004000:	08004013 	.word	0x08004013
 8004004:	0800400d 	.word	0x0800400d
 8004008:	08004025 	.word	0x08004025
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
      break;
 8004010:	e02f      	b.n	8004072 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d024      	beq.n	8004068 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004022:	e021      	b.n	8004068 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800402c:	d11e      	bne.n	800406c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004032:	e01b      	b.n	800406c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d902      	bls.n	8004040 <DMA_CheckFifoParam+0xb4>
 800403a:	2b03      	cmp	r3, #3
 800403c:	d003      	beq.n	8004046 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800403e:	e018      	b.n	8004072 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
      break;
 8004044:	e015      	b.n	8004072 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00e      	beq.n	8004070 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	73fb      	strb	r3, [r7, #15]
      break;
 8004056:	e00b      	b.n	8004070 <DMA_CheckFifoParam+0xe4>
      break;
 8004058:	bf00      	nop
 800405a:	e00a      	b.n	8004072 <DMA_CheckFifoParam+0xe6>
      break;
 800405c:	bf00      	nop
 800405e:	e008      	b.n	8004072 <DMA_CheckFifoParam+0xe6>
      break;
 8004060:	bf00      	nop
 8004062:	e006      	b.n	8004072 <DMA_CheckFifoParam+0xe6>
      break;
 8004064:	bf00      	nop
 8004066:	e004      	b.n	8004072 <DMA_CheckFifoParam+0xe6>
      break;
 8004068:	bf00      	nop
 800406a:	e002      	b.n	8004072 <DMA_CheckFifoParam+0xe6>
      break;   
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <DMA_CheckFifoParam+0xe6>
      break;
 8004070:	bf00      	nop
    }
  } 
  
  return status; 
 8004072:	7bfb      	ldrb	r3, [r7, #15]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_FLASH_Unlock+0x38>)
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	da0b      	bge.n	80040aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004092:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <HAL_FLASH_Unlock+0x38>)
 8004094:	4a09      	ldr	r2, [pc, #36]	; (80040bc <HAL_FLASH_Unlock+0x3c>)
 8004096:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004098:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <HAL_FLASH_Unlock+0x38>)
 800409a:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <HAL_FLASH_Unlock+0x40>)
 800409c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_FLASH_Unlock+0x38>)
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	da01      	bge.n	80040aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80040aa:	79fb      	ldrb	r3, [r7, #7]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	40023c00 	.word	0x40023c00
 80040bc:	45670123 	.word	0x45670123
 80040c0:	cdef89ab 	.word	0xcdef89ab

080040c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_FLASH_Lock+0x1c>)
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	4a04      	ldr	r2, [pc, #16]	; (80040e0 <HAL_FLASH_Lock+0x1c>)
 80040ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040d2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40023c00 	.word	0x40023c00

080040e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040f0:	4b1a      	ldr	r3, [pc, #104]	; (800415c <FLASH_WaitForLastOperation+0x78>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80040f6:	f7fe ff21 	bl	8002f3c <HAL_GetTick>
 80040fa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80040fc:	e010      	b.n	8004120 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004104:	d00c      	beq.n	8004120 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <FLASH_WaitForLastOperation+0x38>
 800410c:	f7fe ff16 	bl	8002f3c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	429a      	cmp	r2, r3
 800411a:	d201      	bcs.n	8004120 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e019      	b.n	8004154 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <FLASH_WaitForLastOperation+0x7c>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e8      	bne.n	80040fe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <FLASH_WaitForLastOperation+0x7c>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <FLASH_WaitForLastOperation+0x7c>)
 800413a:	2201      	movs	r2, #1
 800413c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <FLASH_WaitForLastOperation+0x7c>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800414a:	f000 f80b 	bl	8004164 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
  
}  
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	200004a0 	.word	0x200004a0
 8004160:	40023c00 	.word	0x40023c00

08004164 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004168:	4b27      	ldr	r3, [pc, #156]	; (8004208 <FLASH_SetErrorCode+0xa4>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004174:	4b25      	ldr	r3, [pc, #148]	; (800420c <FLASH_SetErrorCode+0xa8>)
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	f043 0310 	orr.w	r3, r3, #16
 800417c:	4a23      	ldr	r2, [pc, #140]	; (800420c <FLASH_SetErrorCode+0xa8>)
 800417e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004180:	4b21      	ldr	r3, [pc, #132]	; (8004208 <FLASH_SetErrorCode+0xa4>)
 8004182:	2210      	movs	r2, #16
 8004184:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <FLASH_SetErrorCode+0xa4>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004192:	4b1e      	ldr	r3, [pc, #120]	; (800420c <FLASH_SetErrorCode+0xa8>)
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	f043 0308 	orr.w	r3, r3, #8
 800419a:	4a1c      	ldr	r2, [pc, #112]	; (800420c <FLASH_SetErrorCode+0xa8>)
 800419c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800419e:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <FLASH_SetErrorCode+0xa4>)
 80041a0:	2220      	movs	r2, #32
 80041a2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80041a4:	4b18      	ldr	r3, [pc, #96]	; (8004208 <FLASH_SetErrorCode+0xa4>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80041b0:	4b16      	ldr	r3, [pc, #88]	; (800420c <FLASH_SetErrorCode+0xa8>)
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f043 0304 	orr.w	r3, r3, #4
 80041b8:	4a14      	ldr	r2, [pc, #80]	; (800420c <FLASH_SetErrorCode+0xa8>)
 80041ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80041bc:	4b12      	ldr	r3, [pc, #72]	; (8004208 <FLASH_SetErrorCode+0xa4>)
 80041be:	2240      	movs	r2, #64	; 0x40
 80041c0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <FLASH_SetErrorCode+0xa4>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80041ce:	4b0f      	ldr	r3, [pc, #60]	; (800420c <FLASH_SetErrorCode+0xa8>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f043 0302 	orr.w	r3, r3, #2
 80041d6:	4a0d      	ldr	r2, [pc, #52]	; (800420c <FLASH_SetErrorCode+0xa8>)
 80041d8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80041da:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <FLASH_SetErrorCode+0xa4>)
 80041dc:	2280      	movs	r2, #128	; 0x80
 80041de:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <FLASH_SetErrorCode+0xa4>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80041ec:	4b07      	ldr	r3, [pc, #28]	; (800420c <FLASH_SetErrorCode+0xa8>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f043 0320 	orr.w	r3, r3, #32
 80041f4:	4a05      	ldr	r2, [pc, #20]	; (800420c <FLASH_SetErrorCode+0xa8>)
 80041f6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <FLASH_SetErrorCode+0xa4>)
 80041fa:	2202      	movs	r2, #2
 80041fc:	60da      	str	r2, [r3, #12]
  }
}
 80041fe:	bf00      	nop
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40023c00 	.word	0x40023c00
 800420c:	200004a0 	.word	0x200004a0

08004210 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004222:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <HAL_FLASHEx_Erase+0xd8>)
 8004224:	7e1b      	ldrb	r3, [r3, #24]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_FLASHEx_Erase+0x1e>
 800422a:	2302      	movs	r3, #2
 800422c:	e058      	b.n	80042e0 <HAL_FLASHEx_Erase+0xd0>
 800422e:	4b2e      	ldr	r3, [pc, #184]	; (80042e8 <HAL_FLASHEx_Erase+0xd8>)
 8004230:	2201      	movs	r2, #1
 8004232:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004234:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004238:	f7ff ff54 	bl	80040e4 <FLASH_WaitForLastOperation>
 800423c:	4603      	mov	r3, r0
 800423e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d148      	bne.n	80042d8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f04f 32ff 	mov.w	r2, #4294967295
 800424c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d115      	bne.n	8004282 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f000 f844 	bl	80042f0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004268:	f24c 3050 	movw	r0, #50000	; 0xc350
 800426c:	f7ff ff3a 	bl	80040e4 <FLASH_WaitForLastOperation>
 8004270:	4603      	mov	r3, r0
 8004272:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004274:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <HAL_FLASHEx_Erase+0xdc>)
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	4a1c      	ldr	r2, [pc, #112]	; (80042ec <HAL_FLASHEx_Erase+0xdc>)
 800427a:	f023 0304 	bic.w	r3, r3, #4
 800427e:	6113      	str	r3, [r2, #16]
 8004280:	e028      	b.n	80042d4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	e01c      	b.n	80042c4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	4619      	mov	r1, r3
 8004292:	68b8      	ldr	r0, [r7, #8]
 8004294:	f000 f850 	bl	8004338 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004298:	f24c 3050 	movw	r0, #50000	; 0xc350
 800429c:	f7ff ff22 	bl	80040e4 <FLASH_WaitForLastOperation>
 80042a0:	4603      	mov	r3, r0
 80042a2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80042a4:	4b11      	ldr	r3, [pc, #68]	; (80042ec <HAL_FLASHEx_Erase+0xdc>)
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	4a10      	ldr	r2, [pc, #64]	; (80042ec <HAL_FLASHEx_Erase+0xdc>)
 80042aa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80042ae:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	601a      	str	r2, [r3, #0]
          break;
 80042bc:	e00a      	b.n	80042d4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3301      	adds	r3, #1
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4413      	add	r3, r2
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d3da      	bcc.n	800428a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80042d4:	f000 f878 	bl	80043c8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80042d8:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <HAL_FLASHEx_Erase+0xd8>)
 80042da:	2200      	movs	r2, #0
 80042dc:	761a      	strb	r2, [r3, #24]

  return status;
 80042de:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	200004a0 	.word	0x200004a0
 80042ec:	40023c00 	.word	0x40023c00

080042f0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	6039      	str	r1, [r7, #0]
 80042fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <FLASH_MassErase+0x44>)
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	4a0c      	ldr	r2, [pc, #48]	; (8004334 <FLASH_MassErase+0x44>)
 8004302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004306:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <FLASH_MassErase+0x44>)
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	4a09      	ldr	r2, [pc, #36]	; (8004334 <FLASH_MassErase+0x44>)
 800430e:	f043 0304 	orr.w	r3, r3, #4
 8004312:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004314:	4b07      	ldr	r3, [pc, #28]	; (8004334 <FLASH_MassErase+0x44>)
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	4313      	orrs	r3, r2
 800431e:	4a05      	ldr	r2, [pc, #20]	; (8004334 <FLASH_MassErase+0x44>)
 8004320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004324:	6113      	str	r3, [r2, #16]
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40023c00 	.word	0x40023c00

08004338 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	e010      	b.n	8004376 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d103      	bne.n	8004362 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800435a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	e009      	b.n	8004376 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d103      	bne.n	8004370 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	e002      	b.n	8004376 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004370:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004374:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004376:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <FLASH_Erase_Sector+0x8c>)
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <FLASH_Erase_Sector+0x8c>)
 800437c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004380:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <FLASH_Erase_Sector+0x8c>)
 8004384:	691a      	ldr	r2, [r3, #16]
 8004386:	490f      	ldr	r1, [pc, #60]	; (80043c4 <FLASH_Erase_Sector+0x8c>)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800438e:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <FLASH_Erase_Sector+0x8c>)
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	4a0c      	ldr	r2, [pc, #48]	; (80043c4 <FLASH_Erase_Sector+0x8c>)
 8004394:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004398:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800439a:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <FLASH_Erase_Sector+0x8c>)
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	4313      	orrs	r3, r2
 80043a4:	4a07      	ldr	r2, [pc, #28]	; (80043c4 <FLASH_Erase_Sector+0x8c>)
 80043a6:	f043 0302 	orr.w	r3, r3, #2
 80043aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <FLASH_Erase_Sector+0x8c>)
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <FLASH_Erase_Sector+0x8c>)
 80043b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b6:	6113      	str	r3, [r2, #16]
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	40023c00 	.word	0x40023c00

080043c8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80043cc:	4b20      	ldr	r3, [pc, #128]	; (8004450 <FLASH_FlushCaches+0x88>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d017      	beq.n	8004408 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80043d8:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <FLASH_FlushCaches+0x88>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1c      	ldr	r2, [pc, #112]	; (8004450 <FLASH_FlushCaches+0x88>)
 80043de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80043e4:	4b1a      	ldr	r3, [pc, #104]	; (8004450 <FLASH_FlushCaches+0x88>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a19      	ldr	r2, [pc, #100]	; (8004450 <FLASH_FlushCaches+0x88>)
 80043ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4b17      	ldr	r3, [pc, #92]	; (8004450 <FLASH_FlushCaches+0x88>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a16      	ldr	r2, [pc, #88]	; (8004450 <FLASH_FlushCaches+0x88>)
 80043f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043fc:	4b14      	ldr	r3, [pc, #80]	; (8004450 <FLASH_FlushCaches+0x88>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <FLASH_FlushCaches+0x88>)
 8004402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004406:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004408:	4b11      	ldr	r3, [pc, #68]	; (8004450 <FLASH_FlushCaches+0x88>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004410:	2b00      	cmp	r3, #0
 8004412:	d017      	beq.n	8004444 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004414:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <FLASH_FlushCaches+0x88>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a0d      	ldr	r2, [pc, #52]	; (8004450 <FLASH_FlushCaches+0x88>)
 800441a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800441e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <FLASH_FlushCaches+0x88>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <FLASH_FlushCaches+0x88>)
 8004426:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	4b08      	ldr	r3, [pc, #32]	; (8004450 <FLASH_FlushCaches+0x88>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a07      	ldr	r2, [pc, #28]	; (8004450 <FLASH_FlushCaches+0x88>)
 8004432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004436:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <FLASH_FlushCaches+0x88>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a04      	ldr	r2, [pc, #16]	; (8004450 <FLASH_FlushCaches+0x88>)
 800443e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004442:	6013      	str	r3, [r2, #0]
  }
}
 8004444:	bf00      	nop
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40023c00 	.word	0x40023c00

08004454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004454:	b480      	push	{r7}
 8004456:	b089      	sub	sp, #36	; 0x24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004462:	2300      	movs	r3, #0
 8004464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004466:	2300      	movs	r3, #0
 8004468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	e16b      	b.n	8004748 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004470:	2201      	movs	r2, #1
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4013      	ands	r3, r2
 8004482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	429a      	cmp	r2, r3
 800448a:	f040 815a 	bne.w	8004742 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d00b      	beq.n	80044ae <HAL_GPIO_Init+0x5a>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d007      	beq.n	80044ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044a2:	2b11      	cmp	r3, #17
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b12      	cmp	r3, #18
 80044ac:	d130      	bne.n	8004510 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	2203      	movs	r2, #3
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4013      	ands	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044e4:	2201      	movs	r2, #1
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	091b      	lsrs	r3, r3, #4
 80044fa:	f003 0201 	and.w	r2, r3, #1
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	2203      	movs	r2, #3
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4013      	ands	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d003      	beq.n	8004550 <HAL_GPIO_Init+0xfc>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b12      	cmp	r3, #18
 800454e:	d123      	bne.n	8004598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	08da      	lsrs	r2, r3, #3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3208      	adds	r2, #8
 8004558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	220f      	movs	r2, #15
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4313      	orrs	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	08da      	lsrs	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3208      	adds	r2, #8
 8004592:	69b9      	ldr	r1, [r7, #24]
 8004594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	2203      	movs	r2, #3
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4013      	ands	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 0203 	and.w	r2, r3, #3
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 80b4 	beq.w	8004742 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	4b5f      	ldr	r3, [pc, #380]	; (800475c <HAL_GPIO_Init+0x308>)
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e2:	4a5e      	ldr	r2, [pc, #376]	; (800475c <HAL_GPIO_Init+0x308>)
 80045e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045e8:	6453      	str	r3, [r2, #68]	; 0x44
 80045ea:	4b5c      	ldr	r3, [pc, #368]	; (800475c <HAL_GPIO_Init+0x308>)
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045f6:	4a5a      	ldr	r2, [pc, #360]	; (8004760 <HAL_GPIO_Init+0x30c>)
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	089b      	lsrs	r3, r3, #2
 80045fc:	3302      	adds	r3, #2
 80045fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	220f      	movs	r2, #15
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43db      	mvns	r3, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4013      	ands	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a51      	ldr	r2, [pc, #324]	; (8004764 <HAL_GPIO_Init+0x310>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d02b      	beq.n	800467a <HAL_GPIO_Init+0x226>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a50      	ldr	r2, [pc, #320]	; (8004768 <HAL_GPIO_Init+0x314>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d025      	beq.n	8004676 <HAL_GPIO_Init+0x222>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a4f      	ldr	r2, [pc, #316]	; (800476c <HAL_GPIO_Init+0x318>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01f      	beq.n	8004672 <HAL_GPIO_Init+0x21e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a4e      	ldr	r2, [pc, #312]	; (8004770 <HAL_GPIO_Init+0x31c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d019      	beq.n	800466e <HAL_GPIO_Init+0x21a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a4d      	ldr	r2, [pc, #308]	; (8004774 <HAL_GPIO_Init+0x320>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <HAL_GPIO_Init+0x216>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a4c      	ldr	r2, [pc, #304]	; (8004778 <HAL_GPIO_Init+0x324>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00d      	beq.n	8004666 <HAL_GPIO_Init+0x212>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a4b      	ldr	r2, [pc, #300]	; (800477c <HAL_GPIO_Init+0x328>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d007      	beq.n	8004662 <HAL_GPIO_Init+0x20e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a4a      	ldr	r2, [pc, #296]	; (8004780 <HAL_GPIO_Init+0x32c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d101      	bne.n	800465e <HAL_GPIO_Init+0x20a>
 800465a:	2307      	movs	r3, #7
 800465c:	e00e      	b.n	800467c <HAL_GPIO_Init+0x228>
 800465e:	2308      	movs	r3, #8
 8004660:	e00c      	b.n	800467c <HAL_GPIO_Init+0x228>
 8004662:	2306      	movs	r3, #6
 8004664:	e00a      	b.n	800467c <HAL_GPIO_Init+0x228>
 8004666:	2305      	movs	r3, #5
 8004668:	e008      	b.n	800467c <HAL_GPIO_Init+0x228>
 800466a:	2304      	movs	r3, #4
 800466c:	e006      	b.n	800467c <HAL_GPIO_Init+0x228>
 800466e:	2303      	movs	r3, #3
 8004670:	e004      	b.n	800467c <HAL_GPIO_Init+0x228>
 8004672:	2302      	movs	r3, #2
 8004674:	e002      	b.n	800467c <HAL_GPIO_Init+0x228>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_GPIO_Init+0x228>
 800467a:	2300      	movs	r3, #0
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	f002 0203 	and.w	r2, r2, #3
 8004682:	0092      	lsls	r2, r2, #2
 8004684:	4093      	lsls	r3, r2
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4313      	orrs	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800468c:	4934      	ldr	r1, [pc, #208]	; (8004760 <HAL_GPIO_Init+0x30c>)
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	3302      	adds	r3, #2
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800469a:	4b3a      	ldr	r3, [pc, #232]	; (8004784 <HAL_GPIO_Init+0x330>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	43db      	mvns	r3, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4013      	ands	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046be:	4a31      	ldr	r2, [pc, #196]	; (8004784 <HAL_GPIO_Init+0x330>)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046c4:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <HAL_GPIO_Init+0x330>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4013      	ands	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046e8:	4a26      	ldr	r2, [pc, #152]	; (8004784 <HAL_GPIO_Init+0x330>)
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046ee:	4b25      	ldr	r3, [pc, #148]	; (8004784 <HAL_GPIO_Init+0x330>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	43db      	mvns	r3, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4013      	ands	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004712:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <HAL_GPIO_Init+0x330>)
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004718:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <HAL_GPIO_Init+0x330>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800473c:	4a11      	ldr	r2, [pc, #68]	; (8004784 <HAL_GPIO_Init+0x330>)
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	3301      	adds	r3, #1
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	2b0f      	cmp	r3, #15
 800474c:	f67f ae90 	bls.w	8004470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004750:	bf00      	nop
 8004752:	3724      	adds	r7, #36	; 0x24
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40023800 	.word	0x40023800
 8004760:	40013800 	.word	0x40013800
 8004764:	40020000 	.word	0x40020000
 8004768:	40020400 	.word	0x40020400
 800476c:	40020800 	.word	0x40020800
 8004770:	40020c00 	.word	0x40020c00
 8004774:	40021000 	.word	0x40021000
 8004778:	40021400 	.word	0x40021400
 800477c:	40021800 	.word	0x40021800
 8004780:	40021c00 	.word	0x40021c00
 8004784:	40013c00 	.word	0x40013c00

08004788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	807b      	strh	r3, [r7, #2]
 8004794:	4613      	mov	r3, r2
 8004796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004798:	787b      	ldrb	r3, [r7, #1]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800479e:	887a      	ldrh	r2, [r7, #2]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047a4:	e003      	b.n	80047ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047a6:	887b      	ldrh	r3, [r7, #2]
 80047a8:	041a      	lsls	r2, r3, #16
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	619a      	str	r2, [r3, #24]
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047c6:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	88fb      	ldrh	r3, [r7, #6]
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d006      	beq.n	80047e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047d2:	4a05      	ldr	r2, [pc, #20]	; (80047e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fd fe52 	bl	8002484 <HAL_GPIO_EXTI_Callback>
  }
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40013c00 	.word	0x40013c00

080047ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e11f      	b.n	8004a3e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d106      	bne.n	8004818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fd ff8c 	bl	8002730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2224      	movs	r2, #36	; 0x24
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800483e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800484e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004850:	f001 fb68 	bl	8005f24 <HAL_RCC_GetPCLK1Freq>
 8004854:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4a7b      	ldr	r2, [pc, #492]	; (8004a48 <HAL_I2C_Init+0x25c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d807      	bhi.n	8004870 <HAL_I2C_Init+0x84>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a7a      	ldr	r2, [pc, #488]	; (8004a4c <HAL_I2C_Init+0x260>)
 8004864:	4293      	cmp	r3, r2
 8004866:	bf94      	ite	ls
 8004868:	2301      	movls	r3, #1
 800486a:	2300      	movhi	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	e006      	b.n	800487e <HAL_I2C_Init+0x92>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4a77      	ldr	r2, [pc, #476]	; (8004a50 <HAL_I2C_Init+0x264>)
 8004874:	4293      	cmp	r3, r2
 8004876:	bf94      	ite	ls
 8004878:	2301      	movls	r3, #1
 800487a:	2300      	movhi	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e0db      	b.n	8004a3e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4a72      	ldr	r2, [pc, #456]	; (8004a54 <HAL_I2C_Init+0x268>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	0c9b      	lsrs	r3, r3, #18
 8004890:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4a64      	ldr	r2, [pc, #400]	; (8004a48 <HAL_I2C_Init+0x25c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d802      	bhi.n	80048c0 <HAL_I2C_Init+0xd4>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	3301      	adds	r3, #1
 80048be:	e009      	b.n	80048d4 <HAL_I2C_Init+0xe8>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	4a63      	ldr	r2, [pc, #396]	; (8004a58 <HAL_I2C_Init+0x26c>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	099b      	lsrs	r3, r3, #6
 80048d2:	3301      	adds	r3, #1
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	430b      	orrs	r3, r1
 80048da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4956      	ldr	r1, [pc, #344]	; (8004a48 <HAL_I2C_Init+0x25c>)
 80048f0:	428b      	cmp	r3, r1
 80048f2:	d80d      	bhi.n	8004910 <HAL_I2C_Init+0x124>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	1e59      	subs	r1, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004902:	3301      	adds	r3, #1
 8004904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004908:	2b04      	cmp	r3, #4
 800490a:	bf38      	it	cc
 800490c:	2304      	movcc	r3, #4
 800490e:	e04f      	b.n	80049b0 <HAL_I2C_Init+0x1c4>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d111      	bne.n	800493c <HAL_I2C_Init+0x150>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1e58      	subs	r0, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6859      	ldr	r1, [r3, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	440b      	add	r3, r1
 8004926:	fbb0 f3f3 	udiv	r3, r0, r3
 800492a:	3301      	adds	r3, #1
 800492c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf0c      	ite	eq
 8004934:	2301      	moveq	r3, #1
 8004936:	2300      	movne	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e012      	b.n	8004962 <HAL_I2C_Init+0x176>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1e58      	subs	r0, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6859      	ldr	r1, [r3, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	0099      	lsls	r1, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004952:	3301      	adds	r3, #1
 8004954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_I2C_Init+0x17e>
 8004966:	2301      	movs	r3, #1
 8004968:	e022      	b.n	80049b0 <HAL_I2C_Init+0x1c4>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10e      	bne.n	8004990 <HAL_I2C_Init+0x1a4>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1e58      	subs	r0, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6859      	ldr	r1, [r3, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	440b      	add	r3, r1
 8004980:	fbb0 f3f3 	udiv	r3, r0, r3
 8004984:	3301      	adds	r3, #1
 8004986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800498a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800498e:	e00f      	b.n	80049b0 <HAL_I2C_Init+0x1c4>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1e58      	subs	r0, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	0099      	lsls	r1, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a6:	3301      	adds	r3, #1
 80049a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	6809      	ldr	r1, [r1, #0]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69da      	ldr	r2, [r3, #28]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6911      	ldr	r1, [r2, #16]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	68d2      	ldr	r2, [r2, #12]
 80049ea:	4311      	orrs	r1, r2
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	430b      	orrs	r3, r1
 80049f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695a      	ldr	r2, [r3, #20]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	000186a0 	.word	0x000186a0
 8004a4c:	001e847f 	.word	0x001e847f
 8004a50:	003d08ff 	.word	0x003d08ff
 8004a54:	431bde83 	.word	0x431bde83
 8004a58:	10624dd3 	.word	0x10624dd3

08004a5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	607a      	str	r2, [r7, #4]
 8004a66:	461a      	mov	r2, r3
 8004a68:	460b      	mov	r3, r1
 8004a6a:	817b      	strh	r3, [r7, #10]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a70:	f7fe fa64 	bl	8002f3c <HAL_GetTick>
 8004a74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b20      	cmp	r3, #32
 8004a80:	f040 80e0 	bne.w	8004c44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	2319      	movs	r3, #25
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	4970      	ldr	r1, [pc, #448]	; (8004c50 <HAL_I2C_Master_Transmit+0x1f4>)
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 fc56 	bl	8005340 <I2C_WaitOnFlagUntilTimeout>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e0d3      	b.n	8004c46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_I2C_Master_Transmit+0x50>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e0cc      	b.n	8004c46 <HAL_I2C_Master_Transmit+0x1ea>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d007      	beq.n	8004ad2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ae0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2221      	movs	r2, #33	; 0x21
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2210      	movs	r2, #16
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	893a      	ldrh	r2, [r7, #8]
 8004b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4a50      	ldr	r2, [pc, #320]	; (8004c54 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b14:	8979      	ldrh	r1, [r7, #10]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	6a3a      	ldr	r2, [r7, #32]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fac2 	bl	80050a4 <I2C_MasterRequestWrite>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e08d      	b.n	8004c46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b40:	e066      	b.n	8004c10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	6a39      	ldr	r1, [r7, #32]
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 fcd0 	bl	80054ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00d      	beq.n	8004b6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d107      	bne.n	8004b6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e06b      	b.n	8004c46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	781a      	ldrb	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d11b      	bne.n	8004be4 <HAL_I2C_Master_Transmit+0x188>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d017      	beq.n	8004be4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	781a      	ldrb	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	6a39      	ldr	r1, [r7, #32]
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fcc0 	bl	800556e <I2C_WaitOnBTFFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00d      	beq.n	8004c10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d107      	bne.n	8004c0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e01a      	b.n	8004c46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d194      	bne.n	8004b42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e000      	b.n	8004c46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c44:	2302      	movs	r3, #2
  }
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	00100002 	.word	0x00100002
 8004c54:	ffff0000 	.word	0xffff0000

08004c58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08c      	sub	sp, #48	; 0x30
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	607a      	str	r2, [r7, #4]
 8004c62:	461a      	mov	r2, r3
 8004c64:	460b      	mov	r3, r1
 8004c66:	817b      	strh	r3, [r7, #10]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c6c:	f7fe f966 	bl	8002f3c <HAL_GetTick>
 8004c70:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	f040 820b 	bne.w	8005096 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	2319      	movs	r3, #25
 8004c86:	2201      	movs	r2, #1
 8004c88:	497c      	ldr	r1, [pc, #496]	; (8004e7c <HAL_I2C_Master_Receive+0x224>)
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 fb58 	bl	8005340 <I2C_WaitOnFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004c96:	2302      	movs	r3, #2
 8004c98:	e1fe      	b.n	8005098 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_I2C_Master_Receive+0x50>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e1f7      	b.n	8005098 <HAL_I2C_Master_Receive+0x440>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d007      	beq.n	8004cce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2222      	movs	r2, #34	; 0x22
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2210      	movs	r2, #16
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	893a      	ldrh	r2, [r7, #8]
 8004cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4a5c      	ldr	r2, [pc, #368]	; (8004e80 <HAL_I2C_Master_Receive+0x228>)
 8004d0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d10:	8979      	ldrh	r1, [r7, #10]
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 fa46 	bl	80051a8 <I2C_MasterRequestRead>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e1b8      	b.n	8005098 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d113      	bne.n	8004d56 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	623b      	str	r3, [r7, #32]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	623b      	str	r3, [r7, #32]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	623b      	str	r3, [r7, #32]
 8004d42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e18c      	b.n	8005070 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d11b      	bne.n	8004d96 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	e16c      	b.n	8005070 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d11b      	bne.n	8004dd6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	e14c      	b.n	8005070 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004de4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004dfc:	e138      	b.n	8005070 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	f200 80f1 	bhi.w	8004fea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d123      	bne.n	8004e58 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fbeb 	bl	80055f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e139      	b.n	8005098 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e56:	e10b      	b.n	8005070 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d14e      	bne.n	8004efe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	2200      	movs	r2, #0
 8004e68:	4906      	ldr	r1, [pc, #24]	; (8004e84 <HAL_I2C_Master_Receive+0x22c>)
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 fa68 	bl	8005340 <I2C_WaitOnFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d008      	beq.n	8004e88 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e10e      	b.n	8005098 <HAL_I2C_Master_Receive+0x440>
 8004e7a:	bf00      	nop
 8004e7c:	00100002 	.word	0x00100002
 8004e80:	ffff0000 	.word	0xffff0000
 8004e84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004efc:	e0b8      	b.n	8005070 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	2200      	movs	r2, #0
 8004f06:	4966      	ldr	r1, [pc, #408]	; (80050a0 <HAL_I2C_Master_Receive+0x448>)
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 fa19 	bl	8005340 <I2C_WaitOnFlagUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0bf      	b.n	8005098 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	2200      	movs	r2, #0
 8004f62:	494f      	ldr	r1, [pc, #316]	; (80050a0 <HAL_I2C_Master_Receive+0x448>)
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f9eb 	bl	8005340 <I2C_WaitOnFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e091      	b.n	8005098 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fe8:	e042      	b.n	8005070 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 fafe 	bl	80055f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e04c      	b.n	8005098 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b04      	cmp	r3, #4
 800503c:	d118      	bne.n	8005070 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	f47f aec2 	bne.w	8004dfe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	e000      	b.n	8005098 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005096:	2302      	movs	r3, #2
  }
}
 8005098:	4618      	mov	r0, r3
 800509a:	3728      	adds	r7, #40	; 0x28
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	00010004 	.word	0x00010004

080050a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	607a      	str	r2, [r7, #4]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	460b      	mov	r3, r1
 80050b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d006      	beq.n	80050ce <I2C_MasterRequestWrite+0x2a>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d003      	beq.n	80050ce <I2C_MasterRequestWrite+0x2a>
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050cc:	d108      	bne.n	80050e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	e00b      	b.n	80050f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	2b12      	cmp	r3, #18
 80050e6:	d107      	bne.n	80050f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f91b 	bl	8005340 <I2C_WaitOnFlagUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00c      	beq.n	800512a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005124:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e035      	b.n	8005196 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005132:	d108      	bne.n	8005146 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005134:	897b      	ldrh	r3, [r7, #10]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005142:	611a      	str	r2, [r3, #16]
 8005144:	e01b      	b.n	800517e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005146:	897b      	ldrh	r3, [r7, #10]
 8005148:	11db      	asrs	r3, r3, #7
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f003 0306 	and.w	r3, r3, #6
 8005150:	b2db      	uxtb	r3, r3
 8005152:	f063 030f 	orn	r3, r3, #15
 8005156:	b2da      	uxtb	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	490f      	ldr	r1, [pc, #60]	; (80051a0 <I2C_MasterRequestWrite+0xfc>)
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f942 	bl	80053ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e010      	b.n	8005196 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005174:	897b      	ldrh	r3, [r7, #10]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	4908      	ldr	r1, [pc, #32]	; (80051a4 <I2C_MasterRequestWrite+0x100>)
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f932 	bl	80053ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e000      	b.n	8005196 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	00010008 	.word	0x00010008
 80051a4:	00010002 	.word	0x00010002

080051a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	607a      	str	r2, [r7, #4]
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	460b      	mov	r3, r1
 80051b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d006      	beq.n	80051e2 <I2C_MasterRequestRead+0x3a>
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d003      	beq.n	80051e2 <I2C_MasterRequestRead+0x3a>
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051e0:	d108      	bne.n	80051f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	e00b      	b.n	800520c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	2b11      	cmp	r3, #17
 80051fa:	d107      	bne.n	800520c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800520a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f891 	bl	8005340 <I2C_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00c      	beq.n	800523e <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e078      	b.n	8005330 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005246:	d108      	bne.n	800525a <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005248:	897b      	ldrh	r3, [r7, #10]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	f043 0301 	orr.w	r3, r3, #1
 8005250:	b2da      	uxtb	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	611a      	str	r2, [r3, #16]
 8005258:	e05e      	b.n	8005318 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800525a:	897b      	ldrh	r3, [r7, #10]
 800525c:	11db      	asrs	r3, r3, #7
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f003 0306 	and.w	r3, r3, #6
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f063 030f 	orn	r3, r3, #15
 800526a:	b2da      	uxtb	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	4930      	ldr	r1, [pc, #192]	; (8005338 <I2C_MasterRequestRead+0x190>)
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f8b8 	bl	80053ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e053      	b.n	8005330 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005288:	897b      	ldrh	r3, [r7, #10]
 800528a:	b2da      	uxtb	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	4929      	ldr	r1, [pc, #164]	; (800533c <I2C_MasterRequestRead+0x194>)
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f8a8 	bl	80053ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e043      	b.n	8005330 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052a8:	2300      	movs	r3, #0
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052cc:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f830 	bl	8005340 <I2C_WaitOnFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00c      	beq.n	8005300 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e017      	b.n	8005330 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005300:	897b      	ldrh	r3, [r7, #10]
 8005302:	11db      	asrs	r3, r3, #7
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 0306 	and.w	r3, r3, #6
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f063 030e 	orn	r3, r3, #14
 8005310:	b2da      	uxtb	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4907      	ldr	r1, [pc, #28]	; (800533c <I2C_MasterRequestRead+0x194>)
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f865 	bl	80053ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	00010008 	.word	0x00010008
 800533c:	00010002 	.word	0x00010002

08005340 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005350:	e025      	b.n	800539e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005358:	d021      	beq.n	800539e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535a:	f7fd fdef 	bl	8002f3c <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d302      	bcc.n	8005370 <I2C_WaitOnFlagUntilTimeout+0x30>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d116      	bne.n	800539e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f043 0220 	orr.w	r2, r3, #32
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e023      	b.n	80053e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	0c1b      	lsrs	r3, r3, #16
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d10d      	bne.n	80053c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	43da      	mvns	r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4013      	ands	r3, r2
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	bf0c      	ite	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	2300      	movne	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	e00c      	b.n	80053de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	43da      	mvns	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4013      	ands	r3, r2
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bf0c      	ite	eq
 80053d6:	2301      	moveq	r3, #1
 80053d8:	2300      	movne	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d0b6      	beq.n	8005352 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
 80053fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053fc:	e051      	b.n	80054a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540c:	d123      	bne.n	8005456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800541c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005426:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f043 0204 	orr.w	r2, r3, #4
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e046      	b.n	80054e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545c:	d021      	beq.n	80054a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545e:	f7fd fd6d 	bl	8002f3c <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	429a      	cmp	r2, r3
 800546c:	d302      	bcc.n	8005474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d116      	bne.n	80054a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f043 0220 	orr.w	r2, r3, #32
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e020      	b.n	80054e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	0c1b      	lsrs	r3, r3, #16
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d10c      	bne.n	80054c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	43da      	mvns	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bf14      	ite	ne
 80054be:	2301      	movne	r3, #1
 80054c0:	2300      	moveq	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	e00b      	b.n	80054de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	43da      	mvns	r2, r3
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	4013      	ands	r3, r2
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bf14      	ite	ne
 80054d8:	2301      	movne	r3, #1
 80054da:	2300      	moveq	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d18d      	bne.n	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054f8:	e02d      	b.n	8005556 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f8ce 	bl	800569c <I2C_IsAcknowledgeFailed>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e02d      	b.n	8005566 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d021      	beq.n	8005556 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005512:	f7fd fd13 	bl	8002f3c <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	429a      	cmp	r2, r3
 8005520:	d302      	bcc.n	8005528 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d116      	bne.n	8005556 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	f043 0220 	orr.w	r2, r3, #32
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e007      	b.n	8005566 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005560:	2b80      	cmp	r3, #128	; 0x80
 8005562:	d1ca      	bne.n	80054fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800557a:	e02d      	b.n	80055d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f88d 	bl	800569c <I2C_IsAcknowledgeFailed>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e02d      	b.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005592:	d021      	beq.n	80055d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005594:	f7fd fcd2 	bl	8002f3c <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d302      	bcc.n	80055aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d116      	bne.n	80055d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	f043 0220 	orr.w	r2, r3, #32
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e007      	b.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d1ca      	bne.n	800557c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055fc:	e042      	b.n	8005684 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b10      	cmp	r3, #16
 800560a:	d119      	bne.n	8005640 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0210 	mvn.w	r2, #16
 8005614:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e029      	b.n	8005694 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005640:	f7fd fc7c 	bl	8002f3c <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	429a      	cmp	r2, r3
 800564e:	d302      	bcc.n	8005656 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d116      	bne.n	8005684 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	f043 0220 	orr.w	r2, r3, #32
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e007      	b.n	8005694 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b40      	cmp	r3, #64	; 0x40
 8005690:	d1b5      	bne.n	80055fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b2:	d11b      	bne.n	80056ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	f043 0204 	orr.w	r2, r3, #4
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e25b      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d075      	beq.n	8005806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800571a:	4ba3      	ldr	r3, [pc, #652]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 030c 	and.w	r3, r3, #12
 8005722:	2b04      	cmp	r3, #4
 8005724:	d00c      	beq.n	8005740 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005726:	4ba0      	ldr	r3, [pc, #640]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800572e:	2b08      	cmp	r3, #8
 8005730:	d112      	bne.n	8005758 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005732:	4b9d      	ldr	r3, [pc, #628]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800573a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800573e:	d10b      	bne.n	8005758 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005740:	4b99      	ldr	r3, [pc, #612]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d05b      	beq.n	8005804 <HAL_RCC_OscConfig+0x108>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d157      	bne.n	8005804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e236      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005760:	d106      	bne.n	8005770 <HAL_RCC_OscConfig+0x74>
 8005762:	4b91      	ldr	r3, [pc, #580]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a90      	ldr	r2, [pc, #576]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e01d      	b.n	80057ac <HAL_RCC_OscConfig+0xb0>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005778:	d10c      	bne.n	8005794 <HAL_RCC_OscConfig+0x98>
 800577a:	4b8b      	ldr	r3, [pc, #556]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a8a      	ldr	r2, [pc, #552]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	4b88      	ldr	r3, [pc, #544]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a87      	ldr	r2, [pc, #540]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 800578c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	e00b      	b.n	80057ac <HAL_RCC_OscConfig+0xb0>
 8005794:	4b84      	ldr	r3, [pc, #528]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a83      	ldr	r2, [pc, #524]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 800579a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	4b81      	ldr	r3, [pc, #516]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a80      	ldr	r2, [pc, #512]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 80057a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d013      	beq.n	80057dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b4:	f7fd fbc2 	bl	8002f3c <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057bc:	f7fd fbbe 	bl	8002f3c <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b64      	cmp	r3, #100	; 0x64
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e1fb      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ce:	4b76      	ldr	r3, [pc, #472]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0xc0>
 80057da:	e014      	b.n	8005806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057dc:	f7fd fbae 	bl	8002f3c <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057e4:	f7fd fbaa 	bl	8002f3c <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b64      	cmp	r3, #100	; 0x64
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e1e7      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057f6:	4b6c      	ldr	r3, [pc, #432]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0xe8>
 8005802:	e000      	b.n	8005806 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d063      	beq.n	80058da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005812:	4b65      	ldr	r3, [pc, #404]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 030c 	and.w	r3, r3, #12
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00b      	beq.n	8005836 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800581e:	4b62      	ldr	r3, [pc, #392]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005826:	2b08      	cmp	r3, #8
 8005828:	d11c      	bne.n	8005864 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800582a:	4b5f      	ldr	r3, [pc, #380]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d116      	bne.n	8005864 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005836:	4b5c      	ldr	r3, [pc, #368]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <HAL_RCC_OscConfig+0x152>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d001      	beq.n	800584e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e1bb      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800584e:	4b56      	ldr	r3, [pc, #344]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	4952      	ldr	r1, [pc, #328]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 800585e:	4313      	orrs	r3, r2
 8005860:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005862:	e03a      	b.n	80058da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d020      	beq.n	80058ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800586c:	4b4f      	ldr	r3, [pc, #316]	; (80059ac <HAL_RCC_OscConfig+0x2b0>)
 800586e:	2201      	movs	r2, #1
 8005870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005872:	f7fd fb63 	bl	8002f3c <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800587a:	f7fd fb5f 	bl	8002f3c <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e19c      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800588c:	4b46      	ldr	r3, [pc, #280]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0f0      	beq.n	800587a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005898:	4b43      	ldr	r3, [pc, #268]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	4940      	ldr	r1, [pc, #256]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	600b      	str	r3, [r1, #0]
 80058ac:	e015      	b.n	80058da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ae:	4b3f      	ldr	r3, [pc, #252]	; (80059ac <HAL_RCC_OscConfig+0x2b0>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b4:	f7fd fb42 	bl	8002f3c <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058bc:	f7fd fb3e 	bl	8002f3c <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e17b      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ce:	4b36      	ldr	r3, [pc, #216]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1f0      	bne.n	80058bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d030      	beq.n	8005948 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d016      	beq.n	800591c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058ee:	4b30      	ldr	r3, [pc, #192]	; (80059b0 <HAL_RCC_OscConfig+0x2b4>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f4:	f7fd fb22 	bl	8002f3c <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058fc:	f7fd fb1e 	bl	8002f3c <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e15b      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800590e:	4b26      	ldr	r3, [pc, #152]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f0      	beq.n	80058fc <HAL_RCC_OscConfig+0x200>
 800591a:	e015      	b.n	8005948 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800591c:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <HAL_RCC_OscConfig+0x2b4>)
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005922:	f7fd fb0b 	bl	8002f3c <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800592a:	f7fd fb07 	bl	8002f3c <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e144      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800593c:	4b1a      	ldr	r3, [pc, #104]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 800593e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1f0      	bne.n	800592a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 80a0 	beq.w	8005a96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005956:	2300      	movs	r3, #0
 8005958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800595a:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10f      	bne.n	8005986 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005966:	2300      	movs	r3, #0
 8005968:	60bb      	str	r3, [r7, #8]
 800596a:	4b0f      	ldr	r3, [pc, #60]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	4a0e      	ldr	r2, [pc, #56]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005974:	6413      	str	r3, [r2, #64]	; 0x40
 8005976:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <HAL_RCC_OscConfig+0x2ac>)
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800597e:	60bb      	str	r3, [r7, #8]
 8005980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005982:	2301      	movs	r3, #1
 8005984:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005986:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <HAL_RCC_OscConfig+0x2b8>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598e:	2b00      	cmp	r3, #0
 8005990:	d121      	bne.n	80059d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005992:	4b08      	ldr	r3, [pc, #32]	; (80059b4 <HAL_RCC_OscConfig+0x2b8>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a07      	ldr	r2, [pc, #28]	; (80059b4 <HAL_RCC_OscConfig+0x2b8>)
 8005998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800599c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800599e:	f7fd facd 	bl	8002f3c <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a4:	e011      	b.n	80059ca <HAL_RCC_OscConfig+0x2ce>
 80059a6:	bf00      	nop
 80059a8:	40023800 	.word	0x40023800
 80059ac:	42470000 	.word	0x42470000
 80059b0:	42470e80 	.word	0x42470e80
 80059b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059b8:	f7fd fac0 	bl	8002f3c <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e0fd      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ca:	4b81      	ldr	r3, [pc, #516]	; (8005bd0 <HAL_RCC_OscConfig+0x4d4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0f0      	beq.n	80059b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d106      	bne.n	80059ec <HAL_RCC_OscConfig+0x2f0>
 80059de:	4b7d      	ldr	r3, [pc, #500]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 80059e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e2:	4a7c      	ldr	r2, [pc, #496]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 80059e4:	f043 0301 	orr.w	r3, r3, #1
 80059e8:	6713      	str	r3, [r2, #112]	; 0x70
 80059ea:	e01c      	b.n	8005a26 <HAL_RCC_OscConfig+0x32a>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	2b05      	cmp	r3, #5
 80059f2:	d10c      	bne.n	8005a0e <HAL_RCC_OscConfig+0x312>
 80059f4:	4b77      	ldr	r3, [pc, #476]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 80059f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f8:	4a76      	ldr	r2, [pc, #472]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 80059fa:	f043 0304 	orr.w	r3, r3, #4
 80059fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005a00:	4b74      	ldr	r3, [pc, #464]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a04:	4a73      	ldr	r2, [pc, #460]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005a06:	f043 0301 	orr.w	r3, r3, #1
 8005a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0c:	e00b      	b.n	8005a26 <HAL_RCC_OscConfig+0x32a>
 8005a0e:	4b71      	ldr	r3, [pc, #452]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a12:	4a70      	ldr	r2, [pc, #448]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	6713      	str	r3, [r2, #112]	; 0x70
 8005a1a:	4b6e      	ldr	r3, [pc, #440]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1e:	4a6d      	ldr	r2, [pc, #436]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005a20:	f023 0304 	bic.w	r3, r3, #4
 8005a24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d015      	beq.n	8005a5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a2e:	f7fd fa85 	bl	8002f3c <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a34:	e00a      	b.n	8005a4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a36:	f7fd fa81 	bl	8002f3c <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e0bc      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a4c:	4b61      	ldr	r3, [pc, #388]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0ee      	beq.n	8005a36 <HAL_RCC_OscConfig+0x33a>
 8005a58:	e014      	b.n	8005a84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a5a:	f7fd fa6f 	bl	8002f3c <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a60:	e00a      	b.n	8005a78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a62:	f7fd fa6b 	bl	8002f3c <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e0a6      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a78:	4b56      	ldr	r3, [pc, #344]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1ee      	bne.n	8005a62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d105      	bne.n	8005a96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a8a:	4b52      	ldr	r3, [pc, #328]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	4a51      	ldr	r2, [pc, #324]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 8092 	beq.w	8005bc4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005aa0:	4b4c      	ldr	r3, [pc, #304]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 030c 	and.w	r3, r3, #12
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d05c      	beq.n	8005b66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d141      	bne.n	8005b38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab4:	4b48      	ldr	r3, [pc, #288]	; (8005bd8 <HAL_RCC_OscConfig+0x4dc>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aba:	f7fd fa3f 	bl	8002f3c <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac2:	f7fd fa3b 	bl	8002f3c <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e078      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ad4:	4b3f      	ldr	r3, [pc, #252]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f0      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	019b      	lsls	r3, r3, #6
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	085b      	lsrs	r3, r3, #1
 8005af8:	3b01      	subs	r3, #1
 8005afa:	041b      	lsls	r3, r3, #16
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b02:	061b      	lsls	r3, r3, #24
 8005b04:	4933      	ldr	r1, [pc, #204]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b0a:	4b33      	ldr	r3, [pc, #204]	; (8005bd8 <HAL_RCC_OscConfig+0x4dc>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b10:	f7fd fa14 	bl	8002f3c <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b18:	f7fd fa10 	bl	8002f3c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e04d      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b2a:	4b2a      	ldr	r3, [pc, #168]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f0      	beq.n	8005b18 <HAL_RCC_OscConfig+0x41c>
 8005b36:	e045      	b.n	8005bc4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b38:	4b27      	ldr	r3, [pc, #156]	; (8005bd8 <HAL_RCC_OscConfig+0x4dc>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b3e:	f7fd f9fd 	bl	8002f3c <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b44:	e008      	b.n	8005b58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b46:	f7fd f9f9 	bl	8002f3c <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e036      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b58:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1f0      	bne.n	8005b46 <HAL_RCC_OscConfig+0x44a>
 8005b64:	e02e      	b.n	8005bc4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d101      	bne.n	8005b72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e029      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b72:	4b18      	ldr	r3, [pc, #96]	; (8005bd4 <HAL_RCC_OscConfig+0x4d8>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d11c      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d115      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d10d      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d106      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d001      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	40007000 	.word	0x40007000
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	42470060 	.word	0x42470060

08005bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0cc      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf0:	4b68      	ldr	r3, [pc, #416]	; (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d90c      	bls.n	8005c18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfe:	4b65      	ldr	r3, [pc, #404]	; (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c06:	4b63      	ldr	r3, [pc, #396]	; (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d001      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0b8      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d020      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c30:	4b59      	ldr	r3, [pc, #356]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	4a58      	ldr	r2, [pc, #352]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c48:	4b53      	ldr	r3, [pc, #332]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	4a52      	ldr	r2, [pc, #328]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c54:	4b50      	ldr	r3, [pc, #320]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	494d      	ldr	r1, [pc, #308]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d044      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d107      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c7a:	4b47      	ldr	r3, [pc, #284]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d119      	bne.n	8005cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e07f      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d003      	beq.n	8005c9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d107      	bne.n	8005caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c9a:	4b3f      	ldr	r3, [pc, #252]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e06f      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005caa:	4b3b      	ldr	r3, [pc, #236]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e067      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cba:	4b37      	ldr	r3, [pc, #220]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f023 0203 	bic.w	r2, r3, #3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	4934      	ldr	r1, [pc, #208]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ccc:	f7fd f936 	bl	8002f3c <HAL_GetTick>
 8005cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd2:	e00a      	b.n	8005cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd4:	f7fd f932 	bl	8002f3c <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e04f      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cea:	4b2b      	ldr	r3, [pc, #172]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 020c 	and.w	r2, r3, #12
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d1eb      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cfc:	4b25      	ldr	r3, [pc, #148]	; (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d20c      	bcs.n	8005d24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0a:	4b22      	ldr	r3, [pc, #136]	; (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d12:	4b20      	ldr	r3, [pc, #128]	; (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d001      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e032      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d30:	4b19      	ldr	r3, [pc, #100]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	4916      	ldr	r1, [pc, #88]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d4e:	4b12      	ldr	r3, [pc, #72]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	490e      	ldr	r1, [pc, #56]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d62:	f000 f821 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 8005d66:	4601      	mov	r1, r0
 8005d68:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	091b      	lsrs	r3, r3, #4
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	4a0a      	ldr	r2, [pc, #40]	; (8005d9c <HAL_RCC_ClockConfig+0x1c0>)
 8005d74:	5cd3      	ldrb	r3, [r2, r3]
 8005d76:	fa21 f303 	lsr.w	r3, r1, r3
 8005d7a:	4a09      	ldr	r2, [pc, #36]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d7e:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fd f896 	bl	8002eb4 <HAL_InitTick>

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	40023c00 	.word	0x40023c00
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	080088a0 	.word	0x080088a0
 8005da0:	20000000 	.word	0x20000000
 8005da4:	20000004 	.word	0x20000004

08005da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	607b      	str	r3, [r7, #4]
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	2300      	movs	r3, #0
 8005db8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dbe:	4b50      	ldr	r3, [pc, #320]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d007      	beq.n	8005dda <HAL_RCC_GetSysClockFreq+0x32>
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d008      	beq.n	8005de0 <HAL_RCC_GetSysClockFreq+0x38>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f040 808d 	bne.w	8005eee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005dd4:	4b4b      	ldr	r3, [pc, #300]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005dd6:	60bb      	str	r3, [r7, #8]
       break;
 8005dd8:	e08c      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dda:	4b4b      	ldr	r3, [pc, #300]	; (8005f08 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ddc:	60bb      	str	r3, [r7, #8]
      break;
 8005dde:	e089      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005de0:	4b47      	ldr	r3, [pc, #284]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005de8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dea:	4b45      	ldr	r3, [pc, #276]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d023      	beq.n	8005e3e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005df6:	4b42      	ldr	r3, [pc, #264]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	099b      	lsrs	r3, r3, #6
 8005dfc:	f04f 0400 	mov.w	r4, #0
 8005e00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	ea03 0501 	and.w	r5, r3, r1
 8005e0c:	ea04 0602 	and.w	r6, r4, r2
 8005e10:	4a3d      	ldr	r2, [pc, #244]	; (8005f08 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e12:	fb02 f106 	mul.w	r1, r2, r6
 8005e16:	2200      	movs	r2, #0
 8005e18:	fb02 f205 	mul.w	r2, r2, r5
 8005e1c:	440a      	add	r2, r1
 8005e1e:	493a      	ldr	r1, [pc, #232]	; (8005f08 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e20:	fba5 0101 	umull	r0, r1, r5, r1
 8005e24:	1853      	adds	r3, r2, r1
 8005e26:	4619      	mov	r1, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f04f 0400 	mov.w	r4, #0
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4623      	mov	r3, r4
 8005e32:	f7fa fce7 	bl	8000804 <__aeabi_uldivmod>
 8005e36:	4603      	mov	r3, r0
 8005e38:	460c      	mov	r4, r1
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	e049      	b.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e3e:	4b30      	ldr	r3, [pc, #192]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	099b      	lsrs	r3, r3, #6
 8005e44:	f04f 0400 	mov.w	r4, #0
 8005e48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	ea03 0501 	and.w	r5, r3, r1
 8005e54:	ea04 0602 	and.w	r6, r4, r2
 8005e58:	4629      	mov	r1, r5
 8005e5a:	4632      	mov	r2, r6
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	f04f 0400 	mov.w	r4, #0
 8005e64:	0154      	lsls	r4, r2, #5
 8005e66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e6a:	014b      	lsls	r3, r1, #5
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4622      	mov	r2, r4
 8005e70:	1b49      	subs	r1, r1, r5
 8005e72:	eb62 0206 	sbc.w	r2, r2, r6
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	f04f 0400 	mov.w	r4, #0
 8005e7e:	0194      	lsls	r4, r2, #6
 8005e80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005e84:	018b      	lsls	r3, r1, #6
 8005e86:	1a5b      	subs	r3, r3, r1
 8005e88:	eb64 0402 	sbc.w	r4, r4, r2
 8005e8c:	f04f 0100 	mov.w	r1, #0
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	00e2      	lsls	r2, r4, #3
 8005e96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005e9a:	00d9      	lsls	r1, r3, #3
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4614      	mov	r4, r2
 8005ea0:	195b      	adds	r3, r3, r5
 8005ea2:	eb44 0406 	adc.w	r4, r4, r6
 8005ea6:	f04f 0100 	mov.w	r1, #0
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	02a2      	lsls	r2, r4, #10
 8005eb0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005eb4:	0299      	lsls	r1, r3, #10
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4614      	mov	r4, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f04f 0400 	mov.w	r4, #0
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4623      	mov	r3, r4
 8005ec8:	f7fa fc9c 	bl	8000804 <__aeabi_uldivmod>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ed2:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	0c1b      	lsrs	r3, r3, #16
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	3301      	adds	r3, #1
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eea:	60bb      	str	r3, [r7, #8]
      break;
 8005eec:	e002      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005eee:	4b05      	ldr	r3, [pc, #20]	; (8005f04 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005ef0:	60bb      	str	r3, [r7, #8]
      break;
 8005ef2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40023800 	.word	0x40023800
 8005f04:	00f42400 	.word	0x00f42400
 8005f08:	00b71b00 	.word	0x00b71b00

08005f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f10:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f12:	681b      	ldr	r3, [r3, #0]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20000000 	.word	0x20000000

08005f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f28:	f7ff fff0 	bl	8005f0c <HAL_RCC_GetHCLKFreq>
 8005f2c:	4601      	mov	r1, r0
 8005f2e:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	0a9b      	lsrs	r3, r3, #10
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	4a03      	ldr	r2, [pc, #12]	; (8005f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f3a:	5cd3      	ldrb	r3, [r2, r3]
 8005f3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40023800 	.word	0x40023800
 8005f48:	080088b0 	.word	0x080088b0

08005f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f50:	f7ff ffdc 	bl	8005f0c <HAL_RCC_GetHCLKFreq>
 8005f54:	4601      	mov	r1, r0
 8005f56:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	0b5b      	lsrs	r3, r3, #13
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	4a03      	ldr	r2, [pc, #12]	; (8005f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f62:	5cd3      	ldrb	r3, [r2, r3]
 8005f64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	080088b0 	.word	0x080088b0

08005f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e056      	b.n	8006034 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d106      	bne.n	8005fa6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7fc fc43 	bl	800282c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fbc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	ea42 0103 	orr.w	r1, r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	0c1b      	lsrs	r3, r3, #16
 8006004:	f003 0104 	and.w	r1, r3, #4
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69da      	ldr	r2, [r3, #28]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006022:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	603b      	str	r3, [r7, #0]
 8006048:	4613      	mov	r3, r2
 800604a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_SPI_Transmit+0x22>
 800605a:	2302      	movs	r3, #2
 800605c:	e11e      	b.n	800629c <HAL_SPI_Transmit+0x260>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006066:	f7fc ff69 	bl	8002f3c <HAL_GetTick>
 800606a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800606c:	88fb      	ldrh	r3, [r7, #6]
 800606e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b01      	cmp	r3, #1
 800607a:	d002      	beq.n	8006082 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800607c:	2302      	movs	r3, #2
 800607e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006080:	e103      	b.n	800628a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <HAL_SPI_Transmit+0x52>
 8006088:	88fb      	ldrh	r3, [r7, #6]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006092:	e0fa      	b.n	800628a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2203      	movs	r2, #3
 8006098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	88fa      	ldrh	r2, [r7, #6]
 80060ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	88fa      	ldrh	r2, [r7, #6]
 80060b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060da:	d107      	bne.n	80060ec <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b40      	cmp	r3, #64	; 0x40
 80060f8:	d007      	beq.n	800610a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006108:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006112:	d14b      	bne.n	80061ac <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HAL_SPI_Transmit+0xe6>
 800611c:	8afb      	ldrh	r3, [r7, #22]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d13e      	bne.n	80061a0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	881a      	ldrh	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	1c9a      	adds	r2, r3, #2
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006146:	e02b      	b.n	80061a0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b02      	cmp	r3, #2
 8006154:	d112      	bne.n	800617c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615a:	881a      	ldrh	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	1c9a      	adds	r2, r3, #2
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	86da      	strh	r2, [r3, #54]	; 0x36
 800617a:	e011      	b.n	80061a0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800617c:	f7fc fede 	bl	8002f3c <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d803      	bhi.n	8006194 <HAL_SPI_Transmit+0x158>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006192:	d102      	bne.n	800619a <HAL_SPI_Transmit+0x15e>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d102      	bne.n	80061a0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800619e:	e074      	b.n	800628a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1ce      	bne.n	8006148 <HAL_SPI_Transmit+0x10c>
 80061aa:	e04c      	b.n	8006246 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <HAL_SPI_Transmit+0x17e>
 80061b4:	8afb      	ldrh	r3, [r7, #22]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d140      	bne.n	800623c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	330c      	adds	r3, #12
 80061c4:	7812      	ldrb	r2, [r2, #0]
 80061c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061e0:	e02c      	b.n	800623c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d113      	bne.n	8006218 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	330c      	adds	r3, #12
 80061fa:	7812      	ldrb	r2, [r2, #0]
 80061fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	86da      	strh	r2, [r3, #54]	; 0x36
 8006216:	e011      	b.n	800623c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006218:	f7fc fe90 	bl	8002f3c <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	429a      	cmp	r2, r3
 8006226:	d803      	bhi.n	8006230 <HAL_SPI_Transmit+0x1f4>
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622e:	d102      	bne.n	8006236 <HAL_SPI_Transmit+0x1fa>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d102      	bne.n	800623c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	77fb      	strb	r3, [r7, #31]
          goto error;
 800623a:	e026      	b.n	800628a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1cd      	bne.n	80061e2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 fba4 	bl	8006998 <SPI_EndRxTxTransaction>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2220      	movs	r2, #32
 800625a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006264:	2300      	movs	r3, #0
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	77fb      	strb	r3, [r7, #31]
 8006286:	e000      	b.n	800628a <HAL_SPI_Transmit+0x24e>
  }

error:
 8006288:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800629a:	7ffb      	ldrb	r3, [r7, #31]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3720      	adds	r7, #32
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062c0:	d112      	bne.n	80062e8 <HAL_SPI_Receive+0x44>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10e      	bne.n	80062e8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2204      	movs	r2, #4
 80062ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80062d2:	88fa      	ldrh	r2, [r7, #6]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	4613      	mov	r3, r2
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f8e9 	bl	80064b6 <HAL_SPI_TransmitReceive>
 80062e4:	4603      	mov	r3, r0
 80062e6:	e0e2      	b.n	80064ae <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_SPI_Receive+0x52>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e0db      	b.n	80064ae <HAL_SPI_Receive+0x20a>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062fe:	f7fc fe1d 	bl	8002f3c <HAL_GetTick>
 8006302:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b01      	cmp	r3, #1
 800630e:	d002      	beq.n	8006316 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006310:	2302      	movs	r3, #2
 8006312:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006314:	e0c2      	b.n	800649c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_SPI_Receive+0x7e>
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006326:	e0b9      	b.n	800649c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2204      	movs	r2, #4
 800632c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	88fa      	ldrh	r2, [r7, #6]
 8006340:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	88fa      	ldrh	r2, [r7, #6]
 8006346:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800636e:	d107      	bne.n	8006380 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800637e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	d007      	beq.n	800639e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800639c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d162      	bne.n	800646c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063a6:	e02e      	b.n	8006406 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d115      	bne.n	80063e2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f103 020c 	add.w	r2, r3, #12
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	7812      	ldrb	r2, [r2, #0]
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063e0:	e011      	b.n	8006406 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063e2:	f7fc fdab 	bl	8002f3c <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d803      	bhi.n	80063fa <HAL_SPI_Receive+0x156>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f8:	d102      	bne.n	8006400 <HAL_SPI_Receive+0x15c>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d102      	bne.n	8006406 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006404:	e04a      	b.n	800649c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1cb      	bne.n	80063a8 <HAL_SPI_Receive+0x104>
 8006410:	e031      	b.n	8006476 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b01      	cmp	r3, #1
 800641e:	d113      	bne.n	8006448 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	b292      	uxth	r2, r2
 800642c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	1c9a      	adds	r2, r3, #2
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006446:	e011      	b.n	800646c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006448:	f7fc fd78 	bl	8002f3c <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d803      	bhi.n	8006460 <HAL_SPI_Receive+0x1bc>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645e:	d102      	bne.n	8006466 <HAL_SPI_Receive+0x1c2>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d102      	bne.n	800646c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	75fb      	strb	r3, [r7, #23]
          goto error;
 800646a:	e017      	b.n	800649c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006470:	b29b      	uxth	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1cd      	bne.n	8006412 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 fa27 	bl	80068ce <SPI_EndRxTransaction>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2220      	movs	r2, #32
 800648a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
 8006498:	e000      	b.n	800649c <HAL_SPI_Receive+0x1f8>
  }

error :
 800649a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b08c      	sub	sp, #48	; 0x30
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064c4:	2301      	movs	r3, #1
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_SPI_TransmitReceive+0x26>
 80064d8:	2302      	movs	r3, #2
 80064da:	e18a      	b.n	80067f2 <HAL_SPI_TransmitReceive+0x33c>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064e4:	f7fc fd2a 	bl	8002f3c <HAL_GetTick>
 80064e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80064fa:	887b      	ldrh	r3, [r7, #2]
 80064fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006502:	2b01      	cmp	r3, #1
 8006504:	d00f      	beq.n	8006526 <HAL_SPI_TransmitReceive+0x70>
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800650c:	d107      	bne.n	800651e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d103      	bne.n	800651e <HAL_SPI_TransmitReceive+0x68>
 8006516:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800651a:	2b04      	cmp	r3, #4
 800651c:	d003      	beq.n	8006526 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800651e:	2302      	movs	r3, #2
 8006520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006524:	e15b      	b.n	80067de <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_SPI_TransmitReceive+0x82>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <HAL_SPI_TransmitReceive+0x82>
 8006532:	887b      	ldrh	r3, [r7, #2]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d103      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800653e:	e14e      	b.n	80067de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b04      	cmp	r3, #4
 800654a:	d003      	beq.n	8006554 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2205      	movs	r2, #5
 8006550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	887a      	ldrh	r2, [r7, #2]
 8006564:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	887a      	ldrh	r2, [r7, #2]
 800656a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	887a      	ldrh	r2, [r7, #2]
 8006576:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	887a      	ldrh	r2, [r7, #2]
 800657c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b40      	cmp	r3, #64	; 0x40
 8006596:	d007      	beq.n	80065a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b0:	d178      	bne.n	80066a4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <HAL_SPI_TransmitReceive+0x10a>
 80065ba:	8b7b      	ldrh	r3, [r7, #26]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d166      	bne.n	800668e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	881a      	ldrh	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	1c9a      	adds	r2, r3, #2
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065e4:	e053      	b.n	800668e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d11b      	bne.n	800662c <HAL_SPI_TransmitReceive+0x176>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d016      	beq.n	800662c <HAL_SPI_TransmitReceive+0x176>
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	2b01      	cmp	r3, #1
 8006602:	d113      	bne.n	800662c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	881a      	ldrh	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	1c9a      	adds	r2, r3, #2
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800661e:	b29b      	uxth	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b01      	cmp	r3, #1
 8006638:	d119      	bne.n	800666e <HAL_SPI_TransmitReceive+0x1b8>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d014      	beq.n	800666e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	b292      	uxth	r2, r2
 8006650:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	1c9a      	adds	r2, r3, #2
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800666a:	2301      	movs	r3, #1
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800666e:	f7fc fc65 	bl	8002f3c <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800667a:	429a      	cmp	r2, r3
 800667c:	d807      	bhi.n	800668e <HAL_SPI_TransmitReceive+0x1d8>
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006684:	d003      	beq.n	800668e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800668c:	e0a7      	b.n	80067de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1a6      	bne.n	80065e6 <HAL_SPI_TransmitReceive+0x130>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1a1      	bne.n	80065e6 <HAL_SPI_TransmitReceive+0x130>
 80066a2:	e07c      	b.n	800679e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <HAL_SPI_TransmitReceive+0x1fc>
 80066ac:	8b7b      	ldrh	r3, [r7, #26]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d16b      	bne.n	800678a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	7812      	ldrb	r2, [r2, #0]
 80066be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066d8:	e057      	b.n	800678a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d11c      	bne.n	8006722 <HAL_SPI_TransmitReceive+0x26c>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d017      	beq.n	8006722 <HAL_SPI_TransmitReceive+0x26c>
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d114      	bne.n	8006722 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	330c      	adds	r3, #12
 8006702:	7812      	ldrb	r2, [r2, #0]
 8006704:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006714:	b29b      	uxth	r3, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b01      	cmp	r3, #1
 800672e:	d119      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x2ae>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d014      	beq.n	8006764 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006760:	2301      	movs	r3, #1
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006764:	f7fc fbea 	bl	8002f3c <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006770:	429a      	cmp	r2, r3
 8006772:	d803      	bhi.n	800677c <HAL_SPI_TransmitReceive+0x2c6>
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677a:	d102      	bne.n	8006782 <HAL_SPI_TransmitReceive+0x2cc>
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	2b00      	cmp	r3, #0
 8006780:	d103      	bne.n	800678a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006788:	e029      	b.n	80067de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1a2      	bne.n	80066da <HAL_SPI_TransmitReceive+0x224>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d19d      	bne.n	80066da <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800679e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f8f8 	bl	8006998 <SPI_EndRxTxTransaction>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d006      	beq.n	80067bc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2220      	movs	r2, #32
 80067b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80067ba:	e010      	b.n	80067de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10b      	bne.n	80067dc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	e000      	b.n	80067de <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80067dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3730      	adds	r7, #48	; 0x30
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	603b      	str	r3, [r7, #0]
 8006806:	4613      	mov	r3, r2
 8006808:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800680a:	e04c      	b.n	80068a6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006812:	d048      	beq.n	80068a6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006814:	f7fc fb92 	bl	8002f3c <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d902      	bls.n	800682a <SPI_WaitFlagStateUntilTimeout+0x30>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d13d      	bne.n	80068a6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006838:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006842:	d111      	bne.n	8006868 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800684c:	d004      	beq.n	8006858 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006856:	d107      	bne.n	8006868 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006870:	d10f      	bne.n	8006892 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006890:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e00f      	b.n	80068c6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4013      	ands	r3, r2
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	bf0c      	ite	eq
 80068b6:	2301      	moveq	r3, #1
 80068b8:	2300      	movne	r3, #0
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	79fb      	ldrb	r3, [r7, #7]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d1a3      	bne.n	800680c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b086      	sub	sp, #24
 80068d2:	af02      	add	r7, sp, #8
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068e2:	d111      	bne.n	8006908 <SPI_EndRxTransaction+0x3a>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ec:	d004      	beq.n	80068f8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f6:	d107      	bne.n	8006908 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006906:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006910:	d12a      	bne.n	8006968 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800691a:	d012      	beq.n	8006942 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	2180      	movs	r1, #128	; 0x80
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7ff ff67 	bl	80067fa <SPI_WaitFlagStateUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d02d      	beq.n	800698e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006936:	f043 0220 	orr.w	r2, r3, #32
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e026      	b.n	8006990 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2200      	movs	r2, #0
 800694a:	2101      	movs	r1, #1
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f7ff ff54 	bl	80067fa <SPI_WaitFlagStateUntilTimeout>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01a      	beq.n	800698e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695c:	f043 0220 	orr.w	r2, r3, #32
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e013      	b.n	8006990 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2200      	movs	r2, #0
 8006970:	2101      	movs	r1, #1
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7ff ff41 	bl	80067fa <SPI_WaitFlagStateUntilTimeout>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d007      	beq.n	800698e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006982:	f043 0220 	orr.w	r2, r3, #32
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e000      	b.n	8006990 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af02      	add	r7, sp, #8
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069a4:	4b1b      	ldr	r3, [pc, #108]	; (8006a14 <SPI_EndRxTxTransaction+0x7c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a1b      	ldr	r2, [pc, #108]	; (8006a18 <SPI_EndRxTxTransaction+0x80>)
 80069aa:	fba2 2303 	umull	r2, r3, r2, r3
 80069ae:	0d5b      	lsrs	r3, r3, #21
 80069b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069b4:	fb02 f303 	mul.w	r3, r2, r3
 80069b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c2:	d112      	bne.n	80069ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2200      	movs	r2, #0
 80069cc:	2180      	movs	r1, #128	; 0x80
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f7ff ff13 	bl	80067fa <SPI_WaitFlagStateUntilTimeout>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d016      	beq.n	8006a08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069de:	f043 0220 	orr.w	r2, r3, #32
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e00f      	b.n	8006a0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a00:	2b80      	cmp	r3, #128	; 0x80
 8006a02:	d0f2      	beq.n	80069ea <SPI_EndRxTxTransaction+0x52>
 8006a04:	e000      	b.n	8006a08 <SPI_EndRxTxTransaction+0x70>
        break;
 8006a06:	bf00      	nop
  }

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000000 	.word	0x20000000
 8006a18:	165e9f81 	.word	0x165e9f81

08006a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e01d      	b.n	8006a6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7fc f804 	bl	8002a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f000 fb56 	bl	800710c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b085      	sub	sp, #20
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f042 0201 	orr.w	r2, r2, #1
 8006a88:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f003 0307 	and.w	r3, r3, #7
 8006a94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b06      	cmp	r3, #6
 8006a9a:	d007      	beq.n	8006aac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0201 	orr.w	r2, r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e01d      	b.n	8006b08 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d106      	bne.n	8006ae6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7fb ff69 	bl	80029b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3304      	adds	r3, #4
 8006af6:	4619      	mov	r1, r3
 8006af8:	4610      	mov	r0, r2
 8006afa:	f000 fb07 	bl	800710c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fd42 	bl	80075ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a15      	ldr	r2, [pc, #84]	; (8006b84 <HAL_TIM_PWM_Start+0x74>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d004      	beq.n	8006b3c <HAL_TIM_PWM_Start+0x2c>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a14      	ldr	r2, [pc, #80]	; (8006b88 <HAL_TIM_PWM_Start+0x78>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d101      	bne.n	8006b40 <HAL_TIM_PWM_Start+0x30>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <HAL_TIM_PWM_Start+0x32>
 8006b40:	2300      	movs	r3, #0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d007      	beq.n	8006b56 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b06      	cmp	r3, #6
 8006b66:	d007      	beq.n	8006b78 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	40010000 	.word	0x40010000
 8006b88:	40010400 	.word	0x40010400

08006b8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e083      	b.n	8006ca8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7fb fe81 	bl	80028bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bd0:	f023 0307 	bic.w	r3, r3, #7
 8006bd4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	4619      	mov	r1, r3
 8006be0:	4610      	mov	r0, r2
 8006be2:	f000 fa93 	bl	800710c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0e:	f023 0303 	bic.w	r3, r3, #3
 8006c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006c2c:	f023 030c 	bic.w	r3, r3, #12
 8006c30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	011a      	lsls	r2, r3, #4
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	031b      	lsls	r3, r3, #12
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006c6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006c72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	011b      	lsls	r3, r3, #4
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <HAL_TIM_Encoder_Start+0x16>
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	d008      	beq.n	8006cd6 <HAL_TIM_Encoder_Start+0x26>
 8006cc4:	e00f      	b.n	8006ce6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	2100      	movs	r1, #0
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fc6c 	bl	80075ac <TIM_CCxChannelCmd>
      break;
 8006cd4:	e016      	b.n	8006d04 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	2104      	movs	r1, #4
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fc64 	bl	80075ac <TIM_CCxChannelCmd>
      break;
 8006ce4:	e00e      	b.n	8006d04 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2201      	movs	r2, #1
 8006cec:	2100      	movs	r1, #0
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fc5c 	bl	80075ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	2104      	movs	r1, #4
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fc55 	bl	80075ac <TIM_CCxChannelCmd>
      break;
 8006d02:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0201 	orr.w	r2, r2, #1
 8006d12:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d122      	bne.n	8006d7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d11b      	bne.n	8006d7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f06f 0202 	mvn.w	r2, #2
 8006d4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	f003 0303 	and.w	r3, r3, #3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f9b5 	bl	80070d0 <HAL_TIM_IC_CaptureCallback>
 8006d66:	e005      	b.n	8006d74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f9a7 	bl	80070bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f9b8 	bl	80070e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d122      	bne.n	8006dce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f003 0304 	and.w	r3, r3, #4
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d11b      	bne.n	8006dce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f06f 0204 	mvn.w	r2, #4
 8006d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f98b 	bl	80070d0 <HAL_TIM_IC_CaptureCallback>
 8006dba:	e005      	b.n	8006dc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f97d 	bl	80070bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f98e 	bl	80070e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	f003 0308 	and.w	r3, r3, #8
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d122      	bne.n	8006e22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b08      	cmp	r3, #8
 8006de8:	d11b      	bne.n	8006e22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f06f 0208 	mvn.w	r2, #8
 8006df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2204      	movs	r2, #4
 8006df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	f003 0303 	and.w	r3, r3, #3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f961 	bl	80070d0 <HAL_TIM_IC_CaptureCallback>
 8006e0e:	e005      	b.n	8006e1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f953 	bl	80070bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f964 	bl	80070e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	f003 0310 	and.w	r3, r3, #16
 8006e2c:	2b10      	cmp	r3, #16
 8006e2e:	d122      	bne.n	8006e76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f003 0310 	and.w	r3, r3, #16
 8006e3a:	2b10      	cmp	r3, #16
 8006e3c:	d11b      	bne.n	8006e76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f06f 0210 	mvn.w	r2, #16
 8006e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2208      	movs	r2, #8
 8006e4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f937 	bl	80070d0 <HAL_TIM_IC_CaptureCallback>
 8006e62:	e005      	b.n	8006e70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f929 	bl	80070bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f93a 	bl	80070e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d10e      	bne.n	8006ea2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d107      	bne.n	8006ea2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f06f 0201 	mvn.w	r2, #1
 8006e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7fa fb95 	bl	80015cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eac:	2b80      	cmp	r3, #128	; 0x80
 8006eae:	d10e      	bne.n	8006ece <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eba:	2b80      	cmp	r3, #128	; 0x80
 8006ebc:	d107      	bne.n	8006ece <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fc1b 	bl	8007704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed8:	2b40      	cmp	r3, #64	; 0x40
 8006eda:	d10e      	bne.n	8006efa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee6:	2b40      	cmp	r3, #64	; 0x40
 8006ee8:	d107      	bne.n	8006efa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f8ff 	bl	80070f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d10e      	bne.n	8006f26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b20      	cmp	r3, #32
 8006f14:	d107      	bne.n	8006f26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f06f 0220 	mvn.w	r2, #32
 8006f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fbe5 	bl	80076f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e0b4      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2202      	movs	r2, #2
 8006f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b0c      	cmp	r3, #12
 8006f5e:	f200 809f 	bhi.w	80070a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006f62:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006f9d 	.word	0x08006f9d
 8006f6c:	080070a1 	.word	0x080070a1
 8006f70:	080070a1 	.word	0x080070a1
 8006f74:	080070a1 	.word	0x080070a1
 8006f78:	08006fdd 	.word	0x08006fdd
 8006f7c:	080070a1 	.word	0x080070a1
 8006f80:	080070a1 	.word	0x080070a1
 8006f84:	080070a1 	.word	0x080070a1
 8006f88:	0800701f 	.word	0x0800701f
 8006f8c:	080070a1 	.word	0x080070a1
 8006f90:	080070a1 	.word	0x080070a1
 8006f94:	080070a1 	.word	0x080070a1
 8006f98:	0800705f 	.word	0x0800705f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 f952 	bl	800724c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0208 	orr.w	r2, r2, #8
 8006fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0204 	bic.w	r2, r2, #4
 8006fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6999      	ldr	r1, [r3, #24]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	619a      	str	r2, [r3, #24]
      break;
 8006fda:	e062      	b.n	80070a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68b9      	ldr	r1, [r7, #8]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 f9a2 	bl	800732c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6999      	ldr	r1, [r3, #24]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	021a      	lsls	r2, r3, #8
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	619a      	str	r2, [r3, #24]
      break;
 800701c:	e041      	b.n	80070a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	4618      	mov	r0, r3
 8007026:	f000 f9f7 	bl	8007418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0208 	orr.w	r2, r2, #8
 8007038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69da      	ldr	r2, [r3, #28]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0204 	bic.w	r2, r2, #4
 8007048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69d9      	ldr	r1, [r3, #28]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	691a      	ldr	r2, [r3, #16]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	61da      	str	r2, [r3, #28]
      break;
 800705c:	e021      	b.n	80070a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68b9      	ldr	r1, [r7, #8]
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fa4b 	bl	8007500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69da      	ldr	r2, [r3, #28]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69da      	ldr	r2, [r3, #28]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69d9      	ldr	r1, [r3, #28]
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	021a      	lsls	r2, r3, #8
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	61da      	str	r2, [r3, #28]
      break;
 800709e:	e000      	b.n	80070a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80070a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a40      	ldr	r2, [pc, #256]	; (8007220 <TIM_Base_SetConfig+0x114>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d013      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712a:	d00f      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a3d      	ldr	r2, [pc, #244]	; (8007224 <TIM_Base_SetConfig+0x118>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00b      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a3c      	ldr	r2, [pc, #240]	; (8007228 <TIM_Base_SetConfig+0x11c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d007      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a3b      	ldr	r2, [pc, #236]	; (800722c <TIM_Base_SetConfig+0x120>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_Base_SetConfig+0x40>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a3a      	ldr	r2, [pc, #232]	; (8007230 <TIM_Base_SetConfig+0x124>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d108      	bne.n	800715e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a2f      	ldr	r2, [pc, #188]	; (8007220 <TIM_Base_SetConfig+0x114>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d02b      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716c:	d027      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a2c      	ldr	r2, [pc, #176]	; (8007224 <TIM_Base_SetConfig+0x118>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d023      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a2b      	ldr	r2, [pc, #172]	; (8007228 <TIM_Base_SetConfig+0x11c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d01f      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a2a      	ldr	r2, [pc, #168]	; (800722c <TIM_Base_SetConfig+0x120>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d01b      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a29      	ldr	r2, [pc, #164]	; (8007230 <TIM_Base_SetConfig+0x124>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d017      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a28      	ldr	r2, [pc, #160]	; (8007234 <TIM_Base_SetConfig+0x128>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d013      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a27      	ldr	r2, [pc, #156]	; (8007238 <TIM_Base_SetConfig+0x12c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d00f      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a26      	ldr	r2, [pc, #152]	; (800723c <TIM_Base_SetConfig+0x130>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00b      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a25      	ldr	r2, [pc, #148]	; (8007240 <TIM_Base_SetConfig+0x134>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d007      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a24      	ldr	r2, [pc, #144]	; (8007244 <TIM_Base_SetConfig+0x138>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d003      	beq.n	80071be <TIM_Base_SetConfig+0xb2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a23      	ldr	r2, [pc, #140]	; (8007248 <TIM_Base_SetConfig+0x13c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d108      	bne.n	80071d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a0a      	ldr	r2, [pc, #40]	; (8007220 <TIM_Base_SetConfig+0x114>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d003      	beq.n	8007204 <TIM_Base_SetConfig+0xf8>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a0c      	ldr	r2, [pc, #48]	; (8007230 <TIM_Base_SetConfig+0x124>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d103      	bne.n	800720c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	615a      	str	r2, [r3, #20]
}
 8007212:	bf00      	nop
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	40010000 	.word	0x40010000
 8007224:	40000400 	.word	0x40000400
 8007228:	40000800 	.word	0x40000800
 800722c:	40000c00 	.word	0x40000c00
 8007230:	40010400 	.word	0x40010400
 8007234:	40014000 	.word	0x40014000
 8007238:	40014400 	.word	0x40014400
 800723c:	40014800 	.word	0x40014800
 8007240:	40001800 	.word	0x40001800
 8007244:	40001c00 	.word	0x40001c00
 8007248:	40002000 	.word	0x40002000

0800724c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	f023 0201 	bic.w	r2, r3, #1
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 0303 	bic.w	r3, r3, #3
 8007282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f023 0302 	bic.w	r3, r3, #2
 8007294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a20      	ldr	r2, [pc, #128]	; (8007324 <TIM_OC1_SetConfig+0xd8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d003      	beq.n	80072b0 <TIM_OC1_SetConfig+0x64>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a1f      	ldr	r2, [pc, #124]	; (8007328 <TIM_OC1_SetConfig+0xdc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d10c      	bne.n	80072ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f023 0308 	bic.w	r3, r3, #8
 80072b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	4313      	orrs	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f023 0304 	bic.w	r3, r3, #4
 80072c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a15      	ldr	r2, [pc, #84]	; (8007324 <TIM_OC1_SetConfig+0xd8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d003      	beq.n	80072da <TIM_OC1_SetConfig+0x8e>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a14      	ldr	r2, [pc, #80]	; (8007328 <TIM_OC1_SetConfig+0xdc>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d111      	bne.n	80072fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	621a      	str	r2, [r3, #32]
}
 8007318:	bf00      	nop
 800731a:	371c      	adds	r7, #28
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	40010000 	.word	0x40010000
 8007328:	40010400 	.word	0x40010400

0800732c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	f023 0210 	bic.w	r2, r3, #16
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800735a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f023 0320 	bic.w	r3, r3, #32
 8007376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	011b      	lsls	r3, r3, #4
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	4313      	orrs	r3, r2
 8007382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a22      	ldr	r2, [pc, #136]	; (8007410 <TIM_OC2_SetConfig+0xe4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d003      	beq.n	8007394 <TIM_OC2_SetConfig+0x68>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a21      	ldr	r2, [pc, #132]	; (8007414 <TIM_OC2_SetConfig+0xe8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d10d      	bne.n	80073b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800739a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	011b      	lsls	r3, r3, #4
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a17      	ldr	r2, [pc, #92]	; (8007410 <TIM_OC2_SetConfig+0xe4>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d003      	beq.n	80073c0 <TIM_OC2_SetConfig+0x94>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a16      	ldr	r2, [pc, #88]	; (8007414 <TIM_OC2_SetConfig+0xe8>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d113      	bne.n	80073e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40010000 	.word	0x40010000
 8007414:	40010400 	.word	0x40010400

08007418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 0303 	bic.w	r3, r3, #3
 800744e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	4313      	orrs	r3, r2
 800746c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a21      	ldr	r2, [pc, #132]	; (80074f8 <TIM_OC3_SetConfig+0xe0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d003      	beq.n	800747e <TIM_OC3_SetConfig+0x66>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a20      	ldr	r2, [pc, #128]	; (80074fc <TIM_OC3_SetConfig+0xe4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d10d      	bne.n	800749a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007484:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	021b      	lsls	r3, r3, #8
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	4313      	orrs	r3, r2
 8007490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a16      	ldr	r2, [pc, #88]	; (80074f8 <TIM_OC3_SetConfig+0xe0>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d003      	beq.n	80074aa <TIM_OC3_SetConfig+0x92>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a15      	ldr	r2, [pc, #84]	; (80074fc <TIM_OC3_SetConfig+0xe4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d113      	bne.n	80074d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	011b      	lsls	r3, r3, #4
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	621a      	str	r2, [r3, #32]
}
 80074ec:	bf00      	nop
 80074ee:	371c      	adds	r7, #28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	40010000 	.word	0x40010000
 80074fc:	40010400 	.word	0x40010400

08007500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800754a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	031b      	lsls	r3, r3, #12
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	4313      	orrs	r3, r2
 8007556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a12      	ldr	r2, [pc, #72]	; (80075a4 <TIM_OC4_SetConfig+0xa4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d003      	beq.n	8007568 <TIM_OC4_SetConfig+0x68>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a11      	ldr	r2, [pc, #68]	; (80075a8 <TIM_OC4_SetConfig+0xa8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d109      	bne.n	800757c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800756e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	019b      	lsls	r3, r3, #6
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4313      	orrs	r3, r2
 800757a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	621a      	str	r2, [r3, #32]
}
 8007596:	bf00      	nop
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40010000 	.word	0x40010000
 80075a8:	40010400 	.word	0x40010400

080075ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f003 031f 	and.w	r3, r3, #31
 80075be:	2201      	movs	r2, #1
 80075c0:	fa02 f303 	lsl.w	r3, r2, r3
 80075c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6a1a      	ldr	r2, [r3, #32]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	43db      	mvns	r3, r3
 80075ce:	401a      	ands	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a1a      	ldr	r2, [r3, #32]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f003 031f 	and.w	r3, r3, #31
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	fa01 f303 	lsl.w	r3, r1, r3
 80075e4:	431a      	orrs	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	621a      	str	r2, [r3, #32]
}
 80075ea:	bf00      	nop
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800760c:	2302      	movs	r3, #2
 800760e:	e05a      	b.n	80076c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a21      	ldr	r2, [pc, #132]	; (80076d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d022      	beq.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765c:	d01d      	beq.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a1d      	ldr	r2, [pc, #116]	; (80076d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d018      	beq.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a1b      	ldr	r2, [pc, #108]	; (80076dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d013      	beq.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a1a      	ldr	r2, [pc, #104]	; (80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00e      	beq.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a18      	ldr	r2, [pc, #96]	; (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d009      	beq.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a17      	ldr	r2, [pc, #92]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d004      	beq.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a15      	ldr	r2, [pc, #84]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d10c      	bne.n	80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	40010000 	.word	0x40010000
 80076d8:	40000400 	.word	0x40000400
 80076dc:	40000800 	.word	0x40000800
 80076e0:	40000c00 	.word	0x40000c00
 80076e4:	40010400 	.word	0x40010400
 80076e8:	40014000 	.word	0x40014000
 80076ec:	40001800 	.word	0x40001800

080076f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e03f      	b.n	80077aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fb fa74 	bl	8002c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2224      	movs	r2, #36	; 0x24
 8007748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800775a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f829 	bl	80077b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	691a      	ldr	r2, [r3, #16]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	695a      	ldr	r2, [r3, #20]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b8:	b085      	sub	sp, #20
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	431a      	orrs	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80077f6:	f023 030c 	bic.w	r3, r3, #12
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6812      	ldr	r2, [r2, #0]
 80077fe:	68f9      	ldr	r1, [r7, #12]
 8007800:	430b      	orrs	r3, r1
 8007802:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699a      	ldr	r2, [r3, #24]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007822:	f040 818b 	bne.w	8007b3c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4ac1      	ldr	r2, [pc, #772]	; (8007b30 <UART_SetConfig+0x37c>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d005      	beq.n	800783c <UART_SetConfig+0x88>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4abf      	ldr	r2, [pc, #764]	; (8007b34 <UART_SetConfig+0x380>)
 8007836:	4293      	cmp	r3, r2
 8007838:	f040 80bd 	bne.w	80079b6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800783c:	f7fe fb86 	bl	8005f4c <HAL_RCC_GetPCLK2Freq>
 8007840:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	461d      	mov	r5, r3
 8007846:	f04f 0600 	mov.w	r6, #0
 800784a:	46a8      	mov	r8, r5
 800784c:	46b1      	mov	r9, r6
 800784e:	eb18 0308 	adds.w	r3, r8, r8
 8007852:	eb49 0409 	adc.w	r4, r9, r9
 8007856:	4698      	mov	r8, r3
 8007858:	46a1      	mov	r9, r4
 800785a:	eb18 0805 	adds.w	r8, r8, r5
 800785e:	eb49 0906 	adc.w	r9, r9, r6
 8007862:	f04f 0100 	mov.w	r1, #0
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800786e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007872:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007876:	4688      	mov	r8, r1
 8007878:	4691      	mov	r9, r2
 800787a:	eb18 0005 	adds.w	r0, r8, r5
 800787e:	eb49 0106 	adc.w	r1, r9, r6
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	461d      	mov	r5, r3
 8007888:	f04f 0600 	mov.w	r6, #0
 800788c:	196b      	adds	r3, r5, r5
 800788e:	eb46 0406 	adc.w	r4, r6, r6
 8007892:	461a      	mov	r2, r3
 8007894:	4623      	mov	r3, r4
 8007896:	f7f8 ffb5 	bl	8000804 <__aeabi_uldivmod>
 800789a:	4603      	mov	r3, r0
 800789c:	460c      	mov	r4, r1
 800789e:	461a      	mov	r2, r3
 80078a0:	4ba5      	ldr	r3, [pc, #660]	; (8007b38 <UART_SetConfig+0x384>)
 80078a2:	fba3 2302 	umull	r2, r3, r3, r2
 80078a6:	095b      	lsrs	r3, r3, #5
 80078a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	461d      	mov	r5, r3
 80078b0:	f04f 0600 	mov.w	r6, #0
 80078b4:	46a9      	mov	r9, r5
 80078b6:	46b2      	mov	sl, r6
 80078b8:	eb19 0309 	adds.w	r3, r9, r9
 80078bc:	eb4a 040a 	adc.w	r4, sl, sl
 80078c0:	4699      	mov	r9, r3
 80078c2:	46a2      	mov	sl, r4
 80078c4:	eb19 0905 	adds.w	r9, r9, r5
 80078c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80078cc:	f04f 0100 	mov.w	r1, #0
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078e0:	4689      	mov	r9, r1
 80078e2:	4692      	mov	sl, r2
 80078e4:	eb19 0005 	adds.w	r0, r9, r5
 80078e8:	eb4a 0106 	adc.w	r1, sl, r6
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	461d      	mov	r5, r3
 80078f2:	f04f 0600 	mov.w	r6, #0
 80078f6:	196b      	adds	r3, r5, r5
 80078f8:	eb46 0406 	adc.w	r4, r6, r6
 80078fc:	461a      	mov	r2, r3
 80078fe:	4623      	mov	r3, r4
 8007900:	f7f8 ff80 	bl	8000804 <__aeabi_uldivmod>
 8007904:	4603      	mov	r3, r0
 8007906:	460c      	mov	r4, r1
 8007908:	461a      	mov	r2, r3
 800790a:	4b8b      	ldr	r3, [pc, #556]	; (8007b38 <UART_SetConfig+0x384>)
 800790c:	fba3 1302 	umull	r1, r3, r3, r2
 8007910:	095b      	lsrs	r3, r3, #5
 8007912:	2164      	movs	r1, #100	; 0x64
 8007914:	fb01 f303 	mul.w	r3, r1, r3
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	3332      	adds	r3, #50	; 0x32
 800791e:	4a86      	ldr	r2, [pc, #536]	; (8007b38 <UART_SetConfig+0x384>)
 8007920:	fba2 2303 	umull	r2, r3, r2, r3
 8007924:	095b      	lsrs	r3, r3, #5
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800792c:	4498      	add	r8, r3
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	461d      	mov	r5, r3
 8007932:	f04f 0600 	mov.w	r6, #0
 8007936:	46a9      	mov	r9, r5
 8007938:	46b2      	mov	sl, r6
 800793a:	eb19 0309 	adds.w	r3, r9, r9
 800793e:	eb4a 040a 	adc.w	r4, sl, sl
 8007942:	4699      	mov	r9, r3
 8007944:	46a2      	mov	sl, r4
 8007946:	eb19 0905 	adds.w	r9, r9, r5
 800794a:	eb4a 0a06 	adc.w	sl, sl, r6
 800794e:	f04f 0100 	mov.w	r1, #0
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800795a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800795e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007962:	4689      	mov	r9, r1
 8007964:	4692      	mov	sl, r2
 8007966:	eb19 0005 	adds.w	r0, r9, r5
 800796a:	eb4a 0106 	adc.w	r1, sl, r6
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	461d      	mov	r5, r3
 8007974:	f04f 0600 	mov.w	r6, #0
 8007978:	196b      	adds	r3, r5, r5
 800797a:	eb46 0406 	adc.w	r4, r6, r6
 800797e:	461a      	mov	r2, r3
 8007980:	4623      	mov	r3, r4
 8007982:	f7f8 ff3f 	bl	8000804 <__aeabi_uldivmod>
 8007986:	4603      	mov	r3, r0
 8007988:	460c      	mov	r4, r1
 800798a:	461a      	mov	r2, r3
 800798c:	4b6a      	ldr	r3, [pc, #424]	; (8007b38 <UART_SetConfig+0x384>)
 800798e:	fba3 1302 	umull	r1, r3, r3, r2
 8007992:	095b      	lsrs	r3, r3, #5
 8007994:	2164      	movs	r1, #100	; 0x64
 8007996:	fb01 f303 	mul.w	r3, r1, r3
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	3332      	adds	r3, #50	; 0x32
 80079a0:	4a65      	ldr	r2, [pc, #404]	; (8007b38 <UART_SetConfig+0x384>)
 80079a2:	fba2 2303 	umull	r2, r3, r2, r3
 80079a6:	095b      	lsrs	r3, r3, #5
 80079a8:	f003 0207 	and.w	r2, r3, #7
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4442      	add	r2, r8
 80079b2:	609a      	str	r2, [r3, #8]
 80079b4:	e26f      	b.n	8007e96 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079b6:	f7fe fab5 	bl	8005f24 <HAL_RCC_GetPCLK1Freq>
 80079ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	461d      	mov	r5, r3
 80079c0:	f04f 0600 	mov.w	r6, #0
 80079c4:	46a8      	mov	r8, r5
 80079c6:	46b1      	mov	r9, r6
 80079c8:	eb18 0308 	adds.w	r3, r8, r8
 80079cc:	eb49 0409 	adc.w	r4, r9, r9
 80079d0:	4698      	mov	r8, r3
 80079d2:	46a1      	mov	r9, r4
 80079d4:	eb18 0805 	adds.w	r8, r8, r5
 80079d8:	eb49 0906 	adc.w	r9, r9, r6
 80079dc:	f04f 0100 	mov.w	r1, #0
 80079e0:	f04f 0200 	mov.w	r2, #0
 80079e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80079e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80079ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80079f0:	4688      	mov	r8, r1
 80079f2:	4691      	mov	r9, r2
 80079f4:	eb18 0005 	adds.w	r0, r8, r5
 80079f8:	eb49 0106 	adc.w	r1, r9, r6
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	461d      	mov	r5, r3
 8007a02:	f04f 0600 	mov.w	r6, #0
 8007a06:	196b      	adds	r3, r5, r5
 8007a08:	eb46 0406 	adc.w	r4, r6, r6
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4623      	mov	r3, r4
 8007a10:	f7f8 fef8 	bl	8000804 <__aeabi_uldivmod>
 8007a14:	4603      	mov	r3, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4b47      	ldr	r3, [pc, #284]	; (8007b38 <UART_SetConfig+0x384>)
 8007a1c:	fba3 2302 	umull	r2, r3, r3, r2
 8007a20:	095b      	lsrs	r3, r3, #5
 8007a22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	461d      	mov	r5, r3
 8007a2a:	f04f 0600 	mov.w	r6, #0
 8007a2e:	46a9      	mov	r9, r5
 8007a30:	46b2      	mov	sl, r6
 8007a32:	eb19 0309 	adds.w	r3, r9, r9
 8007a36:	eb4a 040a 	adc.w	r4, sl, sl
 8007a3a:	4699      	mov	r9, r3
 8007a3c:	46a2      	mov	sl, r4
 8007a3e:	eb19 0905 	adds.w	r9, r9, r5
 8007a42:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a46:	f04f 0100 	mov.w	r1, #0
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a5a:	4689      	mov	r9, r1
 8007a5c:	4692      	mov	sl, r2
 8007a5e:	eb19 0005 	adds.w	r0, r9, r5
 8007a62:	eb4a 0106 	adc.w	r1, sl, r6
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	461d      	mov	r5, r3
 8007a6c:	f04f 0600 	mov.w	r6, #0
 8007a70:	196b      	adds	r3, r5, r5
 8007a72:	eb46 0406 	adc.w	r4, r6, r6
 8007a76:	461a      	mov	r2, r3
 8007a78:	4623      	mov	r3, r4
 8007a7a:	f7f8 fec3 	bl	8000804 <__aeabi_uldivmod>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	460c      	mov	r4, r1
 8007a82:	461a      	mov	r2, r3
 8007a84:	4b2c      	ldr	r3, [pc, #176]	; (8007b38 <UART_SetConfig+0x384>)
 8007a86:	fba3 1302 	umull	r1, r3, r3, r2
 8007a8a:	095b      	lsrs	r3, r3, #5
 8007a8c:	2164      	movs	r1, #100	; 0x64
 8007a8e:	fb01 f303 	mul.w	r3, r1, r3
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	00db      	lsls	r3, r3, #3
 8007a96:	3332      	adds	r3, #50	; 0x32
 8007a98:	4a27      	ldr	r2, [pc, #156]	; (8007b38 <UART_SetConfig+0x384>)
 8007a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a9e:	095b      	lsrs	r3, r3, #5
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007aa6:	4498      	add	r8, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	461d      	mov	r5, r3
 8007aac:	f04f 0600 	mov.w	r6, #0
 8007ab0:	46a9      	mov	r9, r5
 8007ab2:	46b2      	mov	sl, r6
 8007ab4:	eb19 0309 	adds.w	r3, r9, r9
 8007ab8:	eb4a 040a 	adc.w	r4, sl, sl
 8007abc:	4699      	mov	r9, r3
 8007abe:	46a2      	mov	sl, r4
 8007ac0:	eb19 0905 	adds.w	r9, r9, r5
 8007ac4:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ac8:	f04f 0100 	mov.w	r1, #0
 8007acc:	f04f 0200 	mov.w	r2, #0
 8007ad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ad4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ad8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007adc:	4689      	mov	r9, r1
 8007ade:	4692      	mov	sl, r2
 8007ae0:	eb19 0005 	adds.w	r0, r9, r5
 8007ae4:	eb4a 0106 	adc.w	r1, sl, r6
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	461d      	mov	r5, r3
 8007aee:	f04f 0600 	mov.w	r6, #0
 8007af2:	196b      	adds	r3, r5, r5
 8007af4:	eb46 0406 	adc.w	r4, r6, r6
 8007af8:	461a      	mov	r2, r3
 8007afa:	4623      	mov	r3, r4
 8007afc:	f7f8 fe82 	bl	8000804 <__aeabi_uldivmod>
 8007b00:	4603      	mov	r3, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	461a      	mov	r2, r3
 8007b06:	4b0c      	ldr	r3, [pc, #48]	; (8007b38 <UART_SetConfig+0x384>)
 8007b08:	fba3 1302 	umull	r1, r3, r3, r2
 8007b0c:	095b      	lsrs	r3, r3, #5
 8007b0e:	2164      	movs	r1, #100	; 0x64
 8007b10:	fb01 f303 	mul.w	r3, r1, r3
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	3332      	adds	r3, #50	; 0x32
 8007b1a:	4a07      	ldr	r2, [pc, #28]	; (8007b38 <UART_SetConfig+0x384>)
 8007b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b20:	095b      	lsrs	r3, r3, #5
 8007b22:	f003 0207 	and.w	r2, r3, #7
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4442      	add	r2, r8
 8007b2c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007b2e:	e1b2      	b.n	8007e96 <UART_SetConfig+0x6e2>
 8007b30:	40011000 	.word	0x40011000
 8007b34:	40011400 	.word	0x40011400
 8007b38:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4ad7      	ldr	r2, [pc, #860]	; (8007ea0 <UART_SetConfig+0x6ec>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d005      	beq.n	8007b52 <UART_SetConfig+0x39e>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4ad6      	ldr	r2, [pc, #856]	; (8007ea4 <UART_SetConfig+0x6f0>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	f040 80d1 	bne.w	8007cf4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b52:	f7fe f9fb 	bl	8005f4c <HAL_RCC_GetPCLK2Freq>
 8007b56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	469a      	mov	sl, r3
 8007b5c:	f04f 0b00 	mov.w	fp, #0
 8007b60:	46d0      	mov	r8, sl
 8007b62:	46d9      	mov	r9, fp
 8007b64:	eb18 0308 	adds.w	r3, r8, r8
 8007b68:	eb49 0409 	adc.w	r4, r9, r9
 8007b6c:	4698      	mov	r8, r3
 8007b6e:	46a1      	mov	r9, r4
 8007b70:	eb18 080a 	adds.w	r8, r8, sl
 8007b74:	eb49 090b 	adc.w	r9, r9, fp
 8007b78:	f04f 0100 	mov.w	r1, #0
 8007b7c:	f04f 0200 	mov.w	r2, #0
 8007b80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007b84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007b88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007b8c:	4688      	mov	r8, r1
 8007b8e:	4691      	mov	r9, r2
 8007b90:	eb1a 0508 	adds.w	r5, sl, r8
 8007b94:	eb4b 0609 	adc.w	r6, fp, r9
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	f04f 0200 	mov.w	r2, #0
 8007ba2:	f04f 0300 	mov.w	r3, #0
 8007ba6:	f04f 0400 	mov.w	r4, #0
 8007baa:	0094      	lsls	r4, r2, #2
 8007bac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bb0:	008b      	lsls	r3, r1, #2
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	4623      	mov	r3, r4
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	4631      	mov	r1, r6
 8007bba:	f7f8 fe23 	bl	8000804 <__aeabi_uldivmod>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	4bb8      	ldr	r3, [pc, #736]	; (8007ea8 <UART_SetConfig+0x6f4>)
 8007bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bca:	095b      	lsrs	r3, r3, #5
 8007bcc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	469b      	mov	fp, r3
 8007bd4:	f04f 0c00 	mov.w	ip, #0
 8007bd8:	46d9      	mov	r9, fp
 8007bda:	46e2      	mov	sl, ip
 8007bdc:	eb19 0309 	adds.w	r3, r9, r9
 8007be0:	eb4a 040a 	adc.w	r4, sl, sl
 8007be4:	4699      	mov	r9, r3
 8007be6:	46a2      	mov	sl, r4
 8007be8:	eb19 090b 	adds.w	r9, r9, fp
 8007bec:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007bf0:	f04f 0100 	mov.w	r1, #0
 8007bf4:	f04f 0200 	mov.w	r2, #0
 8007bf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c04:	4689      	mov	r9, r1
 8007c06:	4692      	mov	sl, r2
 8007c08:	eb1b 0509 	adds.w	r5, fp, r9
 8007c0c:	eb4c 060a 	adc.w	r6, ip, sl
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	4619      	mov	r1, r3
 8007c16:	f04f 0200 	mov.w	r2, #0
 8007c1a:	f04f 0300 	mov.w	r3, #0
 8007c1e:	f04f 0400 	mov.w	r4, #0
 8007c22:	0094      	lsls	r4, r2, #2
 8007c24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c28:	008b      	lsls	r3, r1, #2
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	4623      	mov	r3, r4
 8007c2e:	4628      	mov	r0, r5
 8007c30:	4631      	mov	r1, r6
 8007c32:	f7f8 fde7 	bl	8000804 <__aeabi_uldivmod>
 8007c36:	4603      	mov	r3, r0
 8007c38:	460c      	mov	r4, r1
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4b9a      	ldr	r3, [pc, #616]	; (8007ea8 <UART_SetConfig+0x6f4>)
 8007c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c42:	095b      	lsrs	r3, r3, #5
 8007c44:	2164      	movs	r1, #100	; 0x64
 8007c46:	fb01 f303 	mul.w	r3, r1, r3
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	3332      	adds	r3, #50	; 0x32
 8007c50:	4a95      	ldr	r2, [pc, #596]	; (8007ea8 <UART_SetConfig+0x6f4>)
 8007c52:	fba2 2303 	umull	r2, r3, r2, r3
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c5c:	4498      	add	r8, r3
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	469b      	mov	fp, r3
 8007c62:	f04f 0c00 	mov.w	ip, #0
 8007c66:	46d9      	mov	r9, fp
 8007c68:	46e2      	mov	sl, ip
 8007c6a:	eb19 0309 	adds.w	r3, r9, r9
 8007c6e:	eb4a 040a 	adc.w	r4, sl, sl
 8007c72:	4699      	mov	r9, r3
 8007c74:	46a2      	mov	sl, r4
 8007c76:	eb19 090b 	adds.w	r9, r9, fp
 8007c7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c7e:	f04f 0100 	mov.w	r1, #0
 8007c82:	f04f 0200 	mov.w	r2, #0
 8007c86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c92:	4689      	mov	r9, r1
 8007c94:	4692      	mov	sl, r2
 8007c96:	eb1b 0509 	adds.w	r5, fp, r9
 8007c9a:	eb4c 060a 	adc.w	r6, ip, sl
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	f04f 0200 	mov.w	r2, #0
 8007ca8:	f04f 0300 	mov.w	r3, #0
 8007cac:	f04f 0400 	mov.w	r4, #0
 8007cb0:	0094      	lsls	r4, r2, #2
 8007cb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cb6:	008b      	lsls	r3, r1, #2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4623      	mov	r3, r4
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	f7f8 fda0 	bl	8000804 <__aeabi_uldivmod>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4b77      	ldr	r3, [pc, #476]	; (8007ea8 <UART_SetConfig+0x6f4>)
 8007ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8007cd0:	095b      	lsrs	r3, r3, #5
 8007cd2:	2164      	movs	r1, #100	; 0x64
 8007cd4:	fb01 f303 	mul.w	r3, r1, r3
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	011b      	lsls	r3, r3, #4
 8007cdc:	3332      	adds	r3, #50	; 0x32
 8007cde:	4a72      	ldr	r2, [pc, #456]	; (8007ea8 <UART_SetConfig+0x6f4>)
 8007ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce4:	095b      	lsrs	r3, r3, #5
 8007ce6:	f003 020f 	and.w	r2, r3, #15
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4442      	add	r2, r8
 8007cf0:	609a      	str	r2, [r3, #8]
 8007cf2:	e0d0      	b.n	8007e96 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cf4:	f7fe f916 	bl	8005f24 <HAL_RCC_GetPCLK1Freq>
 8007cf8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	469a      	mov	sl, r3
 8007cfe:	f04f 0b00 	mov.w	fp, #0
 8007d02:	46d0      	mov	r8, sl
 8007d04:	46d9      	mov	r9, fp
 8007d06:	eb18 0308 	adds.w	r3, r8, r8
 8007d0a:	eb49 0409 	adc.w	r4, r9, r9
 8007d0e:	4698      	mov	r8, r3
 8007d10:	46a1      	mov	r9, r4
 8007d12:	eb18 080a 	adds.w	r8, r8, sl
 8007d16:	eb49 090b 	adc.w	r9, r9, fp
 8007d1a:	f04f 0100 	mov.w	r1, #0
 8007d1e:	f04f 0200 	mov.w	r2, #0
 8007d22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d2e:	4688      	mov	r8, r1
 8007d30:	4691      	mov	r9, r2
 8007d32:	eb1a 0508 	adds.w	r5, sl, r8
 8007d36:	eb4b 0609 	adc.w	r6, fp, r9
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	f04f 0200 	mov.w	r2, #0
 8007d44:	f04f 0300 	mov.w	r3, #0
 8007d48:	f04f 0400 	mov.w	r4, #0
 8007d4c:	0094      	lsls	r4, r2, #2
 8007d4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d52:	008b      	lsls	r3, r1, #2
 8007d54:	461a      	mov	r2, r3
 8007d56:	4623      	mov	r3, r4
 8007d58:	4628      	mov	r0, r5
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	f7f8 fd52 	bl	8000804 <__aeabi_uldivmod>
 8007d60:	4603      	mov	r3, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	461a      	mov	r2, r3
 8007d66:	4b50      	ldr	r3, [pc, #320]	; (8007ea8 <UART_SetConfig+0x6f4>)
 8007d68:	fba3 2302 	umull	r2, r3, r3, r2
 8007d6c:	095b      	lsrs	r3, r3, #5
 8007d6e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	469b      	mov	fp, r3
 8007d76:	f04f 0c00 	mov.w	ip, #0
 8007d7a:	46d9      	mov	r9, fp
 8007d7c:	46e2      	mov	sl, ip
 8007d7e:	eb19 0309 	adds.w	r3, r9, r9
 8007d82:	eb4a 040a 	adc.w	r4, sl, sl
 8007d86:	4699      	mov	r9, r3
 8007d88:	46a2      	mov	sl, r4
 8007d8a:	eb19 090b 	adds.w	r9, r9, fp
 8007d8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d92:	f04f 0100 	mov.w	r1, #0
 8007d96:	f04f 0200 	mov.w	r2, #0
 8007d9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007da2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007da6:	4689      	mov	r9, r1
 8007da8:	4692      	mov	sl, r2
 8007daa:	eb1b 0509 	adds.w	r5, fp, r9
 8007dae:	eb4c 060a 	adc.w	r6, ip, sl
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	4619      	mov	r1, r3
 8007db8:	f04f 0200 	mov.w	r2, #0
 8007dbc:	f04f 0300 	mov.w	r3, #0
 8007dc0:	f04f 0400 	mov.w	r4, #0
 8007dc4:	0094      	lsls	r4, r2, #2
 8007dc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007dca:	008b      	lsls	r3, r1, #2
 8007dcc:	461a      	mov	r2, r3
 8007dce:	4623      	mov	r3, r4
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	4631      	mov	r1, r6
 8007dd4:	f7f8 fd16 	bl	8000804 <__aeabi_uldivmod>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	460c      	mov	r4, r1
 8007ddc:	461a      	mov	r2, r3
 8007dde:	4b32      	ldr	r3, [pc, #200]	; (8007ea8 <UART_SetConfig+0x6f4>)
 8007de0:	fba3 1302 	umull	r1, r3, r3, r2
 8007de4:	095b      	lsrs	r3, r3, #5
 8007de6:	2164      	movs	r1, #100	; 0x64
 8007de8:	fb01 f303 	mul.w	r3, r1, r3
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	011b      	lsls	r3, r3, #4
 8007df0:	3332      	adds	r3, #50	; 0x32
 8007df2:	4a2d      	ldr	r2, [pc, #180]	; (8007ea8 <UART_SetConfig+0x6f4>)
 8007df4:	fba2 2303 	umull	r2, r3, r2, r3
 8007df8:	095b      	lsrs	r3, r3, #5
 8007dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dfe:	4498      	add	r8, r3
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	469b      	mov	fp, r3
 8007e04:	f04f 0c00 	mov.w	ip, #0
 8007e08:	46d9      	mov	r9, fp
 8007e0a:	46e2      	mov	sl, ip
 8007e0c:	eb19 0309 	adds.w	r3, r9, r9
 8007e10:	eb4a 040a 	adc.w	r4, sl, sl
 8007e14:	4699      	mov	r9, r3
 8007e16:	46a2      	mov	sl, r4
 8007e18:	eb19 090b 	adds.w	r9, r9, fp
 8007e1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e20:	f04f 0100 	mov.w	r1, #0
 8007e24:	f04f 0200 	mov.w	r2, #0
 8007e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e34:	4689      	mov	r9, r1
 8007e36:	4692      	mov	sl, r2
 8007e38:	eb1b 0509 	adds.w	r5, fp, r9
 8007e3c:	eb4c 060a 	adc.w	r6, ip, sl
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	4619      	mov	r1, r3
 8007e46:	f04f 0200 	mov.w	r2, #0
 8007e4a:	f04f 0300 	mov.w	r3, #0
 8007e4e:	f04f 0400 	mov.w	r4, #0
 8007e52:	0094      	lsls	r4, r2, #2
 8007e54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e58:	008b      	lsls	r3, r1, #2
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	4623      	mov	r3, r4
 8007e5e:	4628      	mov	r0, r5
 8007e60:	4631      	mov	r1, r6
 8007e62:	f7f8 fccf 	bl	8000804 <__aeabi_uldivmod>
 8007e66:	4603      	mov	r3, r0
 8007e68:	460c      	mov	r4, r1
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ea8 <UART_SetConfig+0x6f4>)
 8007e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	2164      	movs	r1, #100	; 0x64
 8007e76:	fb01 f303 	mul.w	r3, r1, r3
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	011b      	lsls	r3, r3, #4
 8007e7e:	3332      	adds	r3, #50	; 0x32
 8007e80:	4a09      	ldr	r2, [pc, #36]	; (8007ea8 <UART_SetConfig+0x6f4>)
 8007e82:	fba2 2303 	umull	r2, r3, r2, r3
 8007e86:	095b      	lsrs	r3, r3, #5
 8007e88:	f003 020f 	and.w	r2, r3, #15
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4442      	add	r2, r8
 8007e92:	609a      	str	r2, [r3, #8]
}
 8007e94:	e7ff      	b.n	8007e96 <UART_SetConfig+0x6e2>
 8007e96:	bf00      	nop
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea0:	40011000 	.word	0x40011000
 8007ea4:	40011400 	.word	0x40011400
 8007ea8:	51eb851f 	.word	0x51eb851f

08007eac <__errno>:
 8007eac:	4b01      	ldr	r3, [pc, #4]	; (8007eb4 <__errno+0x8>)
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	2000000c 	.word	0x2000000c

08007eb8 <__libc_init_array>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4e0d      	ldr	r6, [pc, #52]	; (8007ef0 <__libc_init_array+0x38>)
 8007ebc:	4c0d      	ldr	r4, [pc, #52]	; (8007ef4 <__libc_init_array+0x3c>)
 8007ebe:	1ba4      	subs	r4, r4, r6
 8007ec0:	10a4      	asrs	r4, r4, #2
 8007ec2:	2500      	movs	r5, #0
 8007ec4:	42a5      	cmp	r5, r4
 8007ec6:	d109      	bne.n	8007edc <__libc_init_array+0x24>
 8007ec8:	4e0b      	ldr	r6, [pc, #44]	; (8007ef8 <__libc_init_array+0x40>)
 8007eca:	4c0c      	ldr	r4, [pc, #48]	; (8007efc <__libc_init_array+0x44>)
 8007ecc:	f000 fc28 	bl	8008720 <_init>
 8007ed0:	1ba4      	subs	r4, r4, r6
 8007ed2:	10a4      	asrs	r4, r4, #2
 8007ed4:	2500      	movs	r5, #0
 8007ed6:	42a5      	cmp	r5, r4
 8007ed8:	d105      	bne.n	8007ee6 <__libc_init_array+0x2e>
 8007eda:	bd70      	pop	{r4, r5, r6, pc}
 8007edc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ee0:	4798      	blx	r3
 8007ee2:	3501      	adds	r5, #1
 8007ee4:	e7ee      	b.n	8007ec4 <__libc_init_array+0xc>
 8007ee6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007eea:	4798      	blx	r3
 8007eec:	3501      	adds	r5, #1
 8007eee:	e7f2      	b.n	8007ed6 <__libc_init_array+0x1e>
 8007ef0:	080088fc 	.word	0x080088fc
 8007ef4:	080088fc 	.word	0x080088fc
 8007ef8:	080088fc 	.word	0x080088fc
 8007efc:	08008900 	.word	0x08008900

08007f00 <memcpy>:
 8007f00:	b510      	push	{r4, lr}
 8007f02:	1e43      	subs	r3, r0, #1
 8007f04:	440a      	add	r2, r1
 8007f06:	4291      	cmp	r1, r2
 8007f08:	d100      	bne.n	8007f0c <memcpy+0xc>
 8007f0a:	bd10      	pop	{r4, pc}
 8007f0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f14:	e7f7      	b.n	8007f06 <memcpy+0x6>

08007f16 <memset>:
 8007f16:	4402      	add	r2, r0
 8007f18:	4603      	mov	r3, r0
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d100      	bne.n	8007f20 <memset+0xa>
 8007f1e:	4770      	bx	lr
 8007f20:	f803 1b01 	strb.w	r1, [r3], #1
 8007f24:	e7f9      	b.n	8007f1a <memset+0x4>
	...

08007f28 <_vsiprintf_r>:
 8007f28:	b500      	push	{lr}
 8007f2a:	b09b      	sub	sp, #108	; 0x6c
 8007f2c:	9100      	str	r1, [sp, #0]
 8007f2e:	9104      	str	r1, [sp, #16]
 8007f30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f34:	9105      	str	r1, [sp, #20]
 8007f36:	9102      	str	r1, [sp, #8]
 8007f38:	4905      	ldr	r1, [pc, #20]	; (8007f50 <_vsiprintf_r+0x28>)
 8007f3a:	9103      	str	r1, [sp, #12]
 8007f3c:	4669      	mov	r1, sp
 8007f3e:	f000 f86d 	bl	800801c <_svfiprintf_r>
 8007f42:	9b00      	ldr	r3, [sp, #0]
 8007f44:	2200      	movs	r2, #0
 8007f46:	701a      	strb	r2, [r3, #0]
 8007f48:	b01b      	add	sp, #108	; 0x6c
 8007f4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f4e:	bf00      	nop
 8007f50:	ffff0208 	.word	0xffff0208

08007f54 <vsiprintf>:
 8007f54:	4613      	mov	r3, r2
 8007f56:	460a      	mov	r2, r1
 8007f58:	4601      	mov	r1, r0
 8007f5a:	4802      	ldr	r0, [pc, #8]	; (8007f64 <vsiprintf+0x10>)
 8007f5c:	6800      	ldr	r0, [r0, #0]
 8007f5e:	f7ff bfe3 	b.w	8007f28 <_vsiprintf_r>
 8007f62:	bf00      	nop
 8007f64:	2000000c 	.word	0x2000000c

08007f68 <__ssputs_r>:
 8007f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6c:	688e      	ldr	r6, [r1, #8]
 8007f6e:	429e      	cmp	r6, r3
 8007f70:	4682      	mov	sl, r0
 8007f72:	460c      	mov	r4, r1
 8007f74:	4690      	mov	r8, r2
 8007f76:	4699      	mov	r9, r3
 8007f78:	d837      	bhi.n	8007fea <__ssputs_r+0x82>
 8007f7a:	898a      	ldrh	r2, [r1, #12]
 8007f7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f80:	d031      	beq.n	8007fe6 <__ssputs_r+0x7e>
 8007f82:	6825      	ldr	r5, [r4, #0]
 8007f84:	6909      	ldr	r1, [r1, #16]
 8007f86:	1a6f      	subs	r7, r5, r1
 8007f88:	6965      	ldr	r5, [r4, #20]
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f90:	fb95 f5f3 	sdiv	r5, r5, r3
 8007f94:	f109 0301 	add.w	r3, r9, #1
 8007f98:	443b      	add	r3, r7
 8007f9a:	429d      	cmp	r5, r3
 8007f9c:	bf38      	it	cc
 8007f9e:	461d      	movcc	r5, r3
 8007fa0:	0553      	lsls	r3, r2, #21
 8007fa2:	d530      	bpl.n	8008006 <__ssputs_r+0x9e>
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	f000 fb21 	bl	80085ec <_malloc_r>
 8007faa:	4606      	mov	r6, r0
 8007fac:	b950      	cbnz	r0, 8007fc4 <__ssputs_r+0x5c>
 8007fae:	230c      	movs	r3, #12
 8007fb0:	f8ca 3000 	str.w	r3, [sl]
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fba:	81a3      	strh	r3, [r4, #12]
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc4:	463a      	mov	r2, r7
 8007fc6:	6921      	ldr	r1, [r4, #16]
 8007fc8:	f7ff ff9a 	bl	8007f00 <memcpy>
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd6:	81a3      	strh	r3, [r4, #12]
 8007fd8:	6126      	str	r6, [r4, #16]
 8007fda:	6165      	str	r5, [r4, #20]
 8007fdc:	443e      	add	r6, r7
 8007fde:	1bed      	subs	r5, r5, r7
 8007fe0:	6026      	str	r6, [r4, #0]
 8007fe2:	60a5      	str	r5, [r4, #8]
 8007fe4:	464e      	mov	r6, r9
 8007fe6:	454e      	cmp	r6, r9
 8007fe8:	d900      	bls.n	8007fec <__ssputs_r+0x84>
 8007fea:	464e      	mov	r6, r9
 8007fec:	4632      	mov	r2, r6
 8007fee:	4641      	mov	r1, r8
 8007ff0:	6820      	ldr	r0, [r4, #0]
 8007ff2:	f000 fa93 	bl	800851c <memmove>
 8007ff6:	68a3      	ldr	r3, [r4, #8]
 8007ff8:	1b9b      	subs	r3, r3, r6
 8007ffa:	60a3      	str	r3, [r4, #8]
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	441e      	add	r6, r3
 8008000:	6026      	str	r6, [r4, #0]
 8008002:	2000      	movs	r0, #0
 8008004:	e7dc      	b.n	8007fc0 <__ssputs_r+0x58>
 8008006:	462a      	mov	r2, r5
 8008008:	f000 fb4a 	bl	80086a0 <_realloc_r>
 800800c:	4606      	mov	r6, r0
 800800e:	2800      	cmp	r0, #0
 8008010:	d1e2      	bne.n	8007fd8 <__ssputs_r+0x70>
 8008012:	6921      	ldr	r1, [r4, #16]
 8008014:	4650      	mov	r0, sl
 8008016:	f000 fa9b 	bl	8008550 <_free_r>
 800801a:	e7c8      	b.n	8007fae <__ssputs_r+0x46>

0800801c <_svfiprintf_r>:
 800801c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008020:	461d      	mov	r5, r3
 8008022:	898b      	ldrh	r3, [r1, #12]
 8008024:	061f      	lsls	r7, r3, #24
 8008026:	b09d      	sub	sp, #116	; 0x74
 8008028:	4680      	mov	r8, r0
 800802a:	460c      	mov	r4, r1
 800802c:	4616      	mov	r6, r2
 800802e:	d50f      	bpl.n	8008050 <_svfiprintf_r+0x34>
 8008030:	690b      	ldr	r3, [r1, #16]
 8008032:	b96b      	cbnz	r3, 8008050 <_svfiprintf_r+0x34>
 8008034:	2140      	movs	r1, #64	; 0x40
 8008036:	f000 fad9 	bl	80085ec <_malloc_r>
 800803a:	6020      	str	r0, [r4, #0]
 800803c:	6120      	str	r0, [r4, #16]
 800803e:	b928      	cbnz	r0, 800804c <_svfiprintf_r+0x30>
 8008040:	230c      	movs	r3, #12
 8008042:	f8c8 3000 	str.w	r3, [r8]
 8008046:	f04f 30ff 	mov.w	r0, #4294967295
 800804a:	e0c8      	b.n	80081de <_svfiprintf_r+0x1c2>
 800804c:	2340      	movs	r3, #64	; 0x40
 800804e:	6163      	str	r3, [r4, #20]
 8008050:	2300      	movs	r3, #0
 8008052:	9309      	str	r3, [sp, #36]	; 0x24
 8008054:	2320      	movs	r3, #32
 8008056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800805a:	2330      	movs	r3, #48	; 0x30
 800805c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008060:	9503      	str	r5, [sp, #12]
 8008062:	f04f 0b01 	mov.w	fp, #1
 8008066:	4637      	mov	r7, r6
 8008068:	463d      	mov	r5, r7
 800806a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800806e:	b10b      	cbz	r3, 8008074 <_svfiprintf_r+0x58>
 8008070:	2b25      	cmp	r3, #37	; 0x25
 8008072:	d13e      	bne.n	80080f2 <_svfiprintf_r+0xd6>
 8008074:	ebb7 0a06 	subs.w	sl, r7, r6
 8008078:	d00b      	beq.n	8008092 <_svfiprintf_r+0x76>
 800807a:	4653      	mov	r3, sl
 800807c:	4632      	mov	r2, r6
 800807e:	4621      	mov	r1, r4
 8008080:	4640      	mov	r0, r8
 8008082:	f7ff ff71 	bl	8007f68 <__ssputs_r>
 8008086:	3001      	adds	r0, #1
 8008088:	f000 80a4 	beq.w	80081d4 <_svfiprintf_r+0x1b8>
 800808c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800808e:	4453      	add	r3, sl
 8008090:	9309      	str	r3, [sp, #36]	; 0x24
 8008092:	783b      	ldrb	r3, [r7, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 809d 	beq.w	80081d4 <_svfiprintf_r+0x1b8>
 800809a:	2300      	movs	r3, #0
 800809c:	f04f 32ff 	mov.w	r2, #4294967295
 80080a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	9307      	str	r3, [sp, #28]
 80080a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080ac:	931a      	str	r3, [sp, #104]	; 0x68
 80080ae:	462f      	mov	r7, r5
 80080b0:	2205      	movs	r2, #5
 80080b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80080b6:	4850      	ldr	r0, [pc, #320]	; (80081f8 <_svfiprintf_r+0x1dc>)
 80080b8:	f7f8 f88a 	bl	80001d0 <memchr>
 80080bc:	9b04      	ldr	r3, [sp, #16]
 80080be:	b9d0      	cbnz	r0, 80080f6 <_svfiprintf_r+0xda>
 80080c0:	06d9      	lsls	r1, r3, #27
 80080c2:	bf44      	itt	mi
 80080c4:	2220      	movmi	r2, #32
 80080c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080ca:	071a      	lsls	r2, r3, #28
 80080cc:	bf44      	itt	mi
 80080ce:	222b      	movmi	r2, #43	; 0x2b
 80080d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080d4:	782a      	ldrb	r2, [r5, #0]
 80080d6:	2a2a      	cmp	r2, #42	; 0x2a
 80080d8:	d015      	beq.n	8008106 <_svfiprintf_r+0xea>
 80080da:	9a07      	ldr	r2, [sp, #28]
 80080dc:	462f      	mov	r7, r5
 80080de:	2000      	movs	r0, #0
 80080e0:	250a      	movs	r5, #10
 80080e2:	4639      	mov	r1, r7
 80080e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080e8:	3b30      	subs	r3, #48	; 0x30
 80080ea:	2b09      	cmp	r3, #9
 80080ec:	d94d      	bls.n	800818a <_svfiprintf_r+0x16e>
 80080ee:	b1b8      	cbz	r0, 8008120 <_svfiprintf_r+0x104>
 80080f0:	e00f      	b.n	8008112 <_svfiprintf_r+0xf6>
 80080f2:	462f      	mov	r7, r5
 80080f4:	e7b8      	b.n	8008068 <_svfiprintf_r+0x4c>
 80080f6:	4a40      	ldr	r2, [pc, #256]	; (80081f8 <_svfiprintf_r+0x1dc>)
 80080f8:	1a80      	subs	r0, r0, r2
 80080fa:	fa0b f000 	lsl.w	r0, fp, r0
 80080fe:	4318      	orrs	r0, r3
 8008100:	9004      	str	r0, [sp, #16]
 8008102:	463d      	mov	r5, r7
 8008104:	e7d3      	b.n	80080ae <_svfiprintf_r+0x92>
 8008106:	9a03      	ldr	r2, [sp, #12]
 8008108:	1d11      	adds	r1, r2, #4
 800810a:	6812      	ldr	r2, [r2, #0]
 800810c:	9103      	str	r1, [sp, #12]
 800810e:	2a00      	cmp	r2, #0
 8008110:	db01      	blt.n	8008116 <_svfiprintf_r+0xfa>
 8008112:	9207      	str	r2, [sp, #28]
 8008114:	e004      	b.n	8008120 <_svfiprintf_r+0x104>
 8008116:	4252      	negs	r2, r2
 8008118:	f043 0302 	orr.w	r3, r3, #2
 800811c:	9207      	str	r2, [sp, #28]
 800811e:	9304      	str	r3, [sp, #16]
 8008120:	783b      	ldrb	r3, [r7, #0]
 8008122:	2b2e      	cmp	r3, #46	; 0x2e
 8008124:	d10c      	bne.n	8008140 <_svfiprintf_r+0x124>
 8008126:	787b      	ldrb	r3, [r7, #1]
 8008128:	2b2a      	cmp	r3, #42	; 0x2a
 800812a:	d133      	bne.n	8008194 <_svfiprintf_r+0x178>
 800812c:	9b03      	ldr	r3, [sp, #12]
 800812e:	1d1a      	adds	r2, r3, #4
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	9203      	str	r2, [sp, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	bfb8      	it	lt
 8008138:	f04f 33ff 	movlt.w	r3, #4294967295
 800813c:	3702      	adds	r7, #2
 800813e:	9305      	str	r3, [sp, #20]
 8008140:	4d2e      	ldr	r5, [pc, #184]	; (80081fc <_svfiprintf_r+0x1e0>)
 8008142:	7839      	ldrb	r1, [r7, #0]
 8008144:	2203      	movs	r2, #3
 8008146:	4628      	mov	r0, r5
 8008148:	f7f8 f842 	bl	80001d0 <memchr>
 800814c:	b138      	cbz	r0, 800815e <_svfiprintf_r+0x142>
 800814e:	2340      	movs	r3, #64	; 0x40
 8008150:	1b40      	subs	r0, r0, r5
 8008152:	fa03 f000 	lsl.w	r0, r3, r0
 8008156:	9b04      	ldr	r3, [sp, #16]
 8008158:	4303      	orrs	r3, r0
 800815a:	3701      	adds	r7, #1
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	7839      	ldrb	r1, [r7, #0]
 8008160:	4827      	ldr	r0, [pc, #156]	; (8008200 <_svfiprintf_r+0x1e4>)
 8008162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008166:	2206      	movs	r2, #6
 8008168:	1c7e      	adds	r6, r7, #1
 800816a:	f7f8 f831 	bl	80001d0 <memchr>
 800816e:	2800      	cmp	r0, #0
 8008170:	d038      	beq.n	80081e4 <_svfiprintf_r+0x1c8>
 8008172:	4b24      	ldr	r3, [pc, #144]	; (8008204 <_svfiprintf_r+0x1e8>)
 8008174:	bb13      	cbnz	r3, 80081bc <_svfiprintf_r+0x1a0>
 8008176:	9b03      	ldr	r3, [sp, #12]
 8008178:	3307      	adds	r3, #7
 800817a:	f023 0307 	bic.w	r3, r3, #7
 800817e:	3308      	adds	r3, #8
 8008180:	9303      	str	r3, [sp, #12]
 8008182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008184:	444b      	add	r3, r9
 8008186:	9309      	str	r3, [sp, #36]	; 0x24
 8008188:	e76d      	b.n	8008066 <_svfiprintf_r+0x4a>
 800818a:	fb05 3202 	mla	r2, r5, r2, r3
 800818e:	2001      	movs	r0, #1
 8008190:	460f      	mov	r7, r1
 8008192:	e7a6      	b.n	80080e2 <_svfiprintf_r+0xc6>
 8008194:	2300      	movs	r3, #0
 8008196:	3701      	adds	r7, #1
 8008198:	9305      	str	r3, [sp, #20]
 800819a:	4619      	mov	r1, r3
 800819c:	250a      	movs	r5, #10
 800819e:	4638      	mov	r0, r7
 80081a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081a4:	3a30      	subs	r2, #48	; 0x30
 80081a6:	2a09      	cmp	r2, #9
 80081a8:	d903      	bls.n	80081b2 <_svfiprintf_r+0x196>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0c8      	beq.n	8008140 <_svfiprintf_r+0x124>
 80081ae:	9105      	str	r1, [sp, #20]
 80081b0:	e7c6      	b.n	8008140 <_svfiprintf_r+0x124>
 80081b2:	fb05 2101 	mla	r1, r5, r1, r2
 80081b6:	2301      	movs	r3, #1
 80081b8:	4607      	mov	r7, r0
 80081ba:	e7f0      	b.n	800819e <_svfiprintf_r+0x182>
 80081bc:	ab03      	add	r3, sp, #12
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	4622      	mov	r2, r4
 80081c2:	4b11      	ldr	r3, [pc, #68]	; (8008208 <_svfiprintf_r+0x1ec>)
 80081c4:	a904      	add	r1, sp, #16
 80081c6:	4640      	mov	r0, r8
 80081c8:	f3af 8000 	nop.w
 80081cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80081d0:	4681      	mov	r9, r0
 80081d2:	d1d6      	bne.n	8008182 <_svfiprintf_r+0x166>
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	065b      	lsls	r3, r3, #25
 80081d8:	f53f af35 	bmi.w	8008046 <_svfiprintf_r+0x2a>
 80081dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081de:	b01d      	add	sp, #116	; 0x74
 80081e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e4:	ab03      	add	r3, sp, #12
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	4622      	mov	r2, r4
 80081ea:	4b07      	ldr	r3, [pc, #28]	; (8008208 <_svfiprintf_r+0x1ec>)
 80081ec:	a904      	add	r1, sp, #16
 80081ee:	4640      	mov	r0, r8
 80081f0:	f000 f882 	bl	80082f8 <_printf_i>
 80081f4:	e7ea      	b.n	80081cc <_svfiprintf_r+0x1b0>
 80081f6:	bf00      	nop
 80081f8:	080088c0 	.word	0x080088c0
 80081fc:	080088c6 	.word	0x080088c6
 8008200:	080088ca 	.word	0x080088ca
 8008204:	00000000 	.word	0x00000000
 8008208:	08007f69 	.word	0x08007f69

0800820c <_printf_common>:
 800820c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008210:	4691      	mov	r9, r2
 8008212:	461f      	mov	r7, r3
 8008214:	688a      	ldr	r2, [r1, #8]
 8008216:	690b      	ldr	r3, [r1, #16]
 8008218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800821c:	4293      	cmp	r3, r2
 800821e:	bfb8      	it	lt
 8008220:	4613      	movlt	r3, r2
 8008222:	f8c9 3000 	str.w	r3, [r9]
 8008226:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800822a:	4606      	mov	r6, r0
 800822c:	460c      	mov	r4, r1
 800822e:	b112      	cbz	r2, 8008236 <_printf_common+0x2a>
 8008230:	3301      	adds	r3, #1
 8008232:	f8c9 3000 	str.w	r3, [r9]
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	0699      	lsls	r1, r3, #26
 800823a:	bf42      	ittt	mi
 800823c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008240:	3302      	addmi	r3, #2
 8008242:	f8c9 3000 	strmi.w	r3, [r9]
 8008246:	6825      	ldr	r5, [r4, #0]
 8008248:	f015 0506 	ands.w	r5, r5, #6
 800824c:	d107      	bne.n	800825e <_printf_common+0x52>
 800824e:	f104 0a19 	add.w	sl, r4, #25
 8008252:	68e3      	ldr	r3, [r4, #12]
 8008254:	f8d9 2000 	ldr.w	r2, [r9]
 8008258:	1a9b      	subs	r3, r3, r2
 800825a:	42ab      	cmp	r3, r5
 800825c:	dc28      	bgt.n	80082b0 <_printf_common+0xa4>
 800825e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	3300      	adds	r3, #0
 8008266:	bf18      	it	ne
 8008268:	2301      	movne	r3, #1
 800826a:	0692      	lsls	r2, r2, #26
 800826c:	d42d      	bmi.n	80082ca <_printf_common+0xbe>
 800826e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008272:	4639      	mov	r1, r7
 8008274:	4630      	mov	r0, r6
 8008276:	47c0      	blx	r8
 8008278:	3001      	adds	r0, #1
 800827a:	d020      	beq.n	80082be <_printf_common+0xb2>
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	68e5      	ldr	r5, [r4, #12]
 8008280:	f8d9 2000 	ldr.w	r2, [r9]
 8008284:	f003 0306 	and.w	r3, r3, #6
 8008288:	2b04      	cmp	r3, #4
 800828a:	bf08      	it	eq
 800828c:	1aad      	subeq	r5, r5, r2
 800828e:	68a3      	ldr	r3, [r4, #8]
 8008290:	6922      	ldr	r2, [r4, #16]
 8008292:	bf0c      	ite	eq
 8008294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008298:	2500      	movne	r5, #0
 800829a:	4293      	cmp	r3, r2
 800829c:	bfc4      	itt	gt
 800829e:	1a9b      	subgt	r3, r3, r2
 80082a0:	18ed      	addgt	r5, r5, r3
 80082a2:	f04f 0900 	mov.w	r9, #0
 80082a6:	341a      	adds	r4, #26
 80082a8:	454d      	cmp	r5, r9
 80082aa:	d11a      	bne.n	80082e2 <_printf_common+0xd6>
 80082ac:	2000      	movs	r0, #0
 80082ae:	e008      	b.n	80082c2 <_printf_common+0xb6>
 80082b0:	2301      	movs	r3, #1
 80082b2:	4652      	mov	r2, sl
 80082b4:	4639      	mov	r1, r7
 80082b6:	4630      	mov	r0, r6
 80082b8:	47c0      	blx	r8
 80082ba:	3001      	adds	r0, #1
 80082bc:	d103      	bne.n	80082c6 <_printf_common+0xba>
 80082be:	f04f 30ff 	mov.w	r0, #4294967295
 80082c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c6:	3501      	adds	r5, #1
 80082c8:	e7c3      	b.n	8008252 <_printf_common+0x46>
 80082ca:	18e1      	adds	r1, r4, r3
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	2030      	movs	r0, #48	; 0x30
 80082d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082d4:	4422      	add	r2, r4
 80082d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082de:	3302      	adds	r3, #2
 80082e0:	e7c5      	b.n	800826e <_printf_common+0x62>
 80082e2:	2301      	movs	r3, #1
 80082e4:	4622      	mov	r2, r4
 80082e6:	4639      	mov	r1, r7
 80082e8:	4630      	mov	r0, r6
 80082ea:	47c0      	blx	r8
 80082ec:	3001      	adds	r0, #1
 80082ee:	d0e6      	beq.n	80082be <_printf_common+0xb2>
 80082f0:	f109 0901 	add.w	r9, r9, #1
 80082f4:	e7d8      	b.n	80082a8 <_printf_common+0x9c>
	...

080082f8 <_printf_i>:
 80082f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008300:	460c      	mov	r4, r1
 8008302:	7e09      	ldrb	r1, [r1, #24]
 8008304:	b085      	sub	sp, #20
 8008306:	296e      	cmp	r1, #110	; 0x6e
 8008308:	4617      	mov	r7, r2
 800830a:	4606      	mov	r6, r0
 800830c:	4698      	mov	r8, r3
 800830e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008310:	f000 80b3 	beq.w	800847a <_printf_i+0x182>
 8008314:	d822      	bhi.n	800835c <_printf_i+0x64>
 8008316:	2963      	cmp	r1, #99	; 0x63
 8008318:	d036      	beq.n	8008388 <_printf_i+0x90>
 800831a:	d80a      	bhi.n	8008332 <_printf_i+0x3a>
 800831c:	2900      	cmp	r1, #0
 800831e:	f000 80b9 	beq.w	8008494 <_printf_i+0x19c>
 8008322:	2958      	cmp	r1, #88	; 0x58
 8008324:	f000 8083 	beq.w	800842e <_printf_i+0x136>
 8008328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800832c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008330:	e032      	b.n	8008398 <_printf_i+0xa0>
 8008332:	2964      	cmp	r1, #100	; 0x64
 8008334:	d001      	beq.n	800833a <_printf_i+0x42>
 8008336:	2969      	cmp	r1, #105	; 0x69
 8008338:	d1f6      	bne.n	8008328 <_printf_i+0x30>
 800833a:	6820      	ldr	r0, [r4, #0]
 800833c:	6813      	ldr	r3, [r2, #0]
 800833e:	0605      	lsls	r5, r0, #24
 8008340:	f103 0104 	add.w	r1, r3, #4
 8008344:	d52a      	bpl.n	800839c <_printf_i+0xa4>
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6011      	str	r1, [r2, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	da03      	bge.n	8008356 <_printf_i+0x5e>
 800834e:	222d      	movs	r2, #45	; 0x2d
 8008350:	425b      	negs	r3, r3
 8008352:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008356:	486f      	ldr	r0, [pc, #444]	; (8008514 <_printf_i+0x21c>)
 8008358:	220a      	movs	r2, #10
 800835a:	e039      	b.n	80083d0 <_printf_i+0xd8>
 800835c:	2973      	cmp	r1, #115	; 0x73
 800835e:	f000 809d 	beq.w	800849c <_printf_i+0x1a4>
 8008362:	d808      	bhi.n	8008376 <_printf_i+0x7e>
 8008364:	296f      	cmp	r1, #111	; 0x6f
 8008366:	d020      	beq.n	80083aa <_printf_i+0xb2>
 8008368:	2970      	cmp	r1, #112	; 0x70
 800836a:	d1dd      	bne.n	8008328 <_printf_i+0x30>
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	f043 0320 	orr.w	r3, r3, #32
 8008372:	6023      	str	r3, [r4, #0]
 8008374:	e003      	b.n	800837e <_printf_i+0x86>
 8008376:	2975      	cmp	r1, #117	; 0x75
 8008378:	d017      	beq.n	80083aa <_printf_i+0xb2>
 800837a:	2978      	cmp	r1, #120	; 0x78
 800837c:	d1d4      	bne.n	8008328 <_printf_i+0x30>
 800837e:	2378      	movs	r3, #120	; 0x78
 8008380:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008384:	4864      	ldr	r0, [pc, #400]	; (8008518 <_printf_i+0x220>)
 8008386:	e055      	b.n	8008434 <_printf_i+0x13c>
 8008388:	6813      	ldr	r3, [r2, #0]
 800838a:	1d19      	adds	r1, r3, #4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6011      	str	r1, [r2, #0]
 8008390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008398:	2301      	movs	r3, #1
 800839a:	e08c      	b.n	80084b6 <_printf_i+0x1be>
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	6011      	str	r1, [r2, #0]
 80083a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083a4:	bf18      	it	ne
 80083a6:	b21b      	sxthne	r3, r3
 80083a8:	e7cf      	b.n	800834a <_printf_i+0x52>
 80083aa:	6813      	ldr	r3, [r2, #0]
 80083ac:	6825      	ldr	r5, [r4, #0]
 80083ae:	1d18      	adds	r0, r3, #4
 80083b0:	6010      	str	r0, [r2, #0]
 80083b2:	0628      	lsls	r0, r5, #24
 80083b4:	d501      	bpl.n	80083ba <_printf_i+0xc2>
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	e002      	b.n	80083c0 <_printf_i+0xc8>
 80083ba:	0668      	lsls	r0, r5, #25
 80083bc:	d5fb      	bpl.n	80083b6 <_printf_i+0xbe>
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	4854      	ldr	r0, [pc, #336]	; (8008514 <_printf_i+0x21c>)
 80083c2:	296f      	cmp	r1, #111	; 0x6f
 80083c4:	bf14      	ite	ne
 80083c6:	220a      	movne	r2, #10
 80083c8:	2208      	moveq	r2, #8
 80083ca:	2100      	movs	r1, #0
 80083cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083d0:	6865      	ldr	r5, [r4, #4]
 80083d2:	60a5      	str	r5, [r4, #8]
 80083d4:	2d00      	cmp	r5, #0
 80083d6:	f2c0 8095 	blt.w	8008504 <_printf_i+0x20c>
 80083da:	6821      	ldr	r1, [r4, #0]
 80083dc:	f021 0104 	bic.w	r1, r1, #4
 80083e0:	6021      	str	r1, [r4, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d13d      	bne.n	8008462 <_printf_i+0x16a>
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	f040 808e 	bne.w	8008508 <_printf_i+0x210>
 80083ec:	4665      	mov	r5, ip
 80083ee:	2a08      	cmp	r2, #8
 80083f0:	d10b      	bne.n	800840a <_printf_i+0x112>
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	07db      	lsls	r3, r3, #31
 80083f6:	d508      	bpl.n	800840a <_printf_i+0x112>
 80083f8:	6923      	ldr	r3, [r4, #16]
 80083fa:	6862      	ldr	r2, [r4, #4]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	bfde      	ittt	le
 8008400:	2330      	movle	r3, #48	; 0x30
 8008402:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008406:	f105 35ff 	addle.w	r5, r5, #4294967295
 800840a:	ebac 0305 	sub.w	r3, ip, r5
 800840e:	6123      	str	r3, [r4, #16]
 8008410:	f8cd 8000 	str.w	r8, [sp]
 8008414:	463b      	mov	r3, r7
 8008416:	aa03      	add	r2, sp, #12
 8008418:	4621      	mov	r1, r4
 800841a:	4630      	mov	r0, r6
 800841c:	f7ff fef6 	bl	800820c <_printf_common>
 8008420:	3001      	adds	r0, #1
 8008422:	d14d      	bne.n	80084c0 <_printf_i+0x1c8>
 8008424:	f04f 30ff 	mov.w	r0, #4294967295
 8008428:	b005      	add	sp, #20
 800842a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800842e:	4839      	ldr	r0, [pc, #228]	; (8008514 <_printf_i+0x21c>)
 8008430:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008434:	6813      	ldr	r3, [r2, #0]
 8008436:	6821      	ldr	r1, [r4, #0]
 8008438:	1d1d      	adds	r5, r3, #4
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6015      	str	r5, [r2, #0]
 800843e:	060a      	lsls	r2, r1, #24
 8008440:	d50b      	bpl.n	800845a <_printf_i+0x162>
 8008442:	07ca      	lsls	r2, r1, #31
 8008444:	bf44      	itt	mi
 8008446:	f041 0120 	orrmi.w	r1, r1, #32
 800844a:	6021      	strmi	r1, [r4, #0]
 800844c:	b91b      	cbnz	r3, 8008456 <_printf_i+0x15e>
 800844e:	6822      	ldr	r2, [r4, #0]
 8008450:	f022 0220 	bic.w	r2, r2, #32
 8008454:	6022      	str	r2, [r4, #0]
 8008456:	2210      	movs	r2, #16
 8008458:	e7b7      	b.n	80083ca <_printf_i+0xd2>
 800845a:	064d      	lsls	r5, r1, #25
 800845c:	bf48      	it	mi
 800845e:	b29b      	uxthmi	r3, r3
 8008460:	e7ef      	b.n	8008442 <_printf_i+0x14a>
 8008462:	4665      	mov	r5, ip
 8008464:	fbb3 f1f2 	udiv	r1, r3, r2
 8008468:	fb02 3311 	mls	r3, r2, r1, r3
 800846c:	5cc3      	ldrb	r3, [r0, r3]
 800846e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008472:	460b      	mov	r3, r1
 8008474:	2900      	cmp	r1, #0
 8008476:	d1f5      	bne.n	8008464 <_printf_i+0x16c>
 8008478:	e7b9      	b.n	80083ee <_printf_i+0xf6>
 800847a:	6813      	ldr	r3, [r2, #0]
 800847c:	6825      	ldr	r5, [r4, #0]
 800847e:	6961      	ldr	r1, [r4, #20]
 8008480:	1d18      	adds	r0, r3, #4
 8008482:	6010      	str	r0, [r2, #0]
 8008484:	0628      	lsls	r0, r5, #24
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	d501      	bpl.n	800848e <_printf_i+0x196>
 800848a:	6019      	str	r1, [r3, #0]
 800848c:	e002      	b.n	8008494 <_printf_i+0x19c>
 800848e:	066a      	lsls	r2, r5, #25
 8008490:	d5fb      	bpl.n	800848a <_printf_i+0x192>
 8008492:	8019      	strh	r1, [r3, #0]
 8008494:	2300      	movs	r3, #0
 8008496:	6123      	str	r3, [r4, #16]
 8008498:	4665      	mov	r5, ip
 800849a:	e7b9      	b.n	8008410 <_printf_i+0x118>
 800849c:	6813      	ldr	r3, [r2, #0]
 800849e:	1d19      	adds	r1, r3, #4
 80084a0:	6011      	str	r1, [r2, #0]
 80084a2:	681d      	ldr	r5, [r3, #0]
 80084a4:	6862      	ldr	r2, [r4, #4]
 80084a6:	2100      	movs	r1, #0
 80084a8:	4628      	mov	r0, r5
 80084aa:	f7f7 fe91 	bl	80001d0 <memchr>
 80084ae:	b108      	cbz	r0, 80084b4 <_printf_i+0x1bc>
 80084b0:	1b40      	subs	r0, r0, r5
 80084b2:	6060      	str	r0, [r4, #4]
 80084b4:	6863      	ldr	r3, [r4, #4]
 80084b6:	6123      	str	r3, [r4, #16]
 80084b8:	2300      	movs	r3, #0
 80084ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084be:	e7a7      	b.n	8008410 <_printf_i+0x118>
 80084c0:	6923      	ldr	r3, [r4, #16]
 80084c2:	462a      	mov	r2, r5
 80084c4:	4639      	mov	r1, r7
 80084c6:	4630      	mov	r0, r6
 80084c8:	47c0      	blx	r8
 80084ca:	3001      	adds	r0, #1
 80084cc:	d0aa      	beq.n	8008424 <_printf_i+0x12c>
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	079b      	lsls	r3, r3, #30
 80084d2:	d413      	bmi.n	80084fc <_printf_i+0x204>
 80084d4:	68e0      	ldr	r0, [r4, #12]
 80084d6:	9b03      	ldr	r3, [sp, #12]
 80084d8:	4298      	cmp	r0, r3
 80084da:	bfb8      	it	lt
 80084dc:	4618      	movlt	r0, r3
 80084de:	e7a3      	b.n	8008428 <_printf_i+0x130>
 80084e0:	2301      	movs	r3, #1
 80084e2:	464a      	mov	r2, r9
 80084e4:	4639      	mov	r1, r7
 80084e6:	4630      	mov	r0, r6
 80084e8:	47c0      	blx	r8
 80084ea:	3001      	adds	r0, #1
 80084ec:	d09a      	beq.n	8008424 <_printf_i+0x12c>
 80084ee:	3501      	adds	r5, #1
 80084f0:	68e3      	ldr	r3, [r4, #12]
 80084f2:	9a03      	ldr	r2, [sp, #12]
 80084f4:	1a9b      	subs	r3, r3, r2
 80084f6:	42ab      	cmp	r3, r5
 80084f8:	dcf2      	bgt.n	80084e0 <_printf_i+0x1e8>
 80084fa:	e7eb      	b.n	80084d4 <_printf_i+0x1dc>
 80084fc:	2500      	movs	r5, #0
 80084fe:	f104 0919 	add.w	r9, r4, #25
 8008502:	e7f5      	b.n	80084f0 <_printf_i+0x1f8>
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1ac      	bne.n	8008462 <_printf_i+0x16a>
 8008508:	7803      	ldrb	r3, [r0, #0]
 800850a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800850e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008512:	e76c      	b.n	80083ee <_printf_i+0xf6>
 8008514:	080088d1 	.word	0x080088d1
 8008518:	080088e2 	.word	0x080088e2

0800851c <memmove>:
 800851c:	4288      	cmp	r0, r1
 800851e:	b510      	push	{r4, lr}
 8008520:	eb01 0302 	add.w	r3, r1, r2
 8008524:	d807      	bhi.n	8008536 <memmove+0x1a>
 8008526:	1e42      	subs	r2, r0, #1
 8008528:	4299      	cmp	r1, r3
 800852a:	d00a      	beq.n	8008542 <memmove+0x26>
 800852c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008530:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008534:	e7f8      	b.n	8008528 <memmove+0xc>
 8008536:	4283      	cmp	r3, r0
 8008538:	d9f5      	bls.n	8008526 <memmove+0xa>
 800853a:	1881      	adds	r1, r0, r2
 800853c:	1ad2      	subs	r2, r2, r3
 800853e:	42d3      	cmn	r3, r2
 8008540:	d100      	bne.n	8008544 <memmove+0x28>
 8008542:	bd10      	pop	{r4, pc}
 8008544:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008548:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800854c:	e7f7      	b.n	800853e <memmove+0x22>
	...

08008550 <_free_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4605      	mov	r5, r0
 8008554:	2900      	cmp	r1, #0
 8008556:	d045      	beq.n	80085e4 <_free_r+0x94>
 8008558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800855c:	1f0c      	subs	r4, r1, #4
 800855e:	2b00      	cmp	r3, #0
 8008560:	bfb8      	it	lt
 8008562:	18e4      	addlt	r4, r4, r3
 8008564:	f000 f8d2 	bl	800870c <__malloc_lock>
 8008568:	4a1f      	ldr	r2, [pc, #124]	; (80085e8 <_free_r+0x98>)
 800856a:	6813      	ldr	r3, [r2, #0]
 800856c:	4610      	mov	r0, r2
 800856e:	b933      	cbnz	r3, 800857e <_free_r+0x2e>
 8008570:	6063      	str	r3, [r4, #4]
 8008572:	6014      	str	r4, [r2, #0]
 8008574:	4628      	mov	r0, r5
 8008576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800857a:	f000 b8c8 	b.w	800870e <__malloc_unlock>
 800857e:	42a3      	cmp	r3, r4
 8008580:	d90c      	bls.n	800859c <_free_r+0x4c>
 8008582:	6821      	ldr	r1, [r4, #0]
 8008584:	1862      	adds	r2, r4, r1
 8008586:	4293      	cmp	r3, r2
 8008588:	bf04      	itt	eq
 800858a:	681a      	ldreq	r2, [r3, #0]
 800858c:	685b      	ldreq	r3, [r3, #4]
 800858e:	6063      	str	r3, [r4, #4]
 8008590:	bf04      	itt	eq
 8008592:	1852      	addeq	r2, r2, r1
 8008594:	6022      	streq	r2, [r4, #0]
 8008596:	6004      	str	r4, [r0, #0]
 8008598:	e7ec      	b.n	8008574 <_free_r+0x24>
 800859a:	4613      	mov	r3, r2
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	b10a      	cbz	r2, 80085a4 <_free_r+0x54>
 80085a0:	42a2      	cmp	r2, r4
 80085a2:	d9fa      	bls.n	800859a <_free_r+0x4a>
 80085a4:	6819      	ldr	r1, [r3, #0]
 80085a6:	1858      	adds	r0, r3, r1
 80085a8:	42a0      	cmp	r0, r4
 80085aa:	d10b      	bne.n	80085c4 <_free_r+0x74>
 80085ac:	6820      	ldr	r0, [r4, #0]
 80085ae:	4401      	add	r1, r0
 80085b0:	1858      	adds	r0, r3, r1
 80085b2:	4282      	cmp	r2, r0
 80085b4:	6019      	str	r1, [r3, #0]
 80085b6:	d1dd      	bne.n	8008574 <_free_r+0x24>
 80085b8:	6810      	ldr	r0, [r2, #0]
 80085ba:	6852      	ldr	r2, [r2, #4]
 80085bc:	605a      	str	r2, [r3, #4]
 80085be:	4401      	add	r1, r0
 80085c0:	6019      	str	r1, [r3, #0]
 80085c2:	e7d7      	b.n	8008574 <_free_r+0x24>
 80085c4:	d902      	bls.n	80085cc <_free_r+0x7c>
 80085c6:	230c      	movs	r3, #12
 80085c8:	602b      	str	r3, [r5, #0]
 80085ca:	e7d3      	b.n	8008574 <_free_r+0x24>
 80085cc:	6820      	ldr	r0, [r4, #0]
 80085ce:	1821      	adds	r1, r4, r0
 80085d0:	428a      	cmp	r2, r1
 80085d2:	bf04      	itt	eq
 80085d4:	6811      	ldreq	r1, [r2, #0]
 80085d6:	6852      	ldreq	r2, [r2, #4]
 80085d8:	6062      	str	r2, [r4, #4]
 80085da:	bf04      	itt	eq
 80085dc:	1809      	addeq	r1, r1, r0
 80085de:	6021      	streq	r1, [r4, #0]
 80085e0:	605c      	str	r4, [r3, #4]
 80085e2:	e7c7      	b.n	8008574 <_free_r+0x24>
 80085e4:	bd38      	pop	{r3, r4, r5, pc}
 80085e6:	bf00      	nop
 80085e8:	200000b0 	.word	0x200000b0

080085ec <_malloc_r>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	1ccd      	adds	r5, r1, #3
 80085f0:	f025 0503 	bic.w	r5, r5, #3
 80085f4:	3508      	adds	r5, #8
 80085f6:	2d0c      	cmp	r5, #12
 80085f8:	bf38      	it	cc
 80085fa:	250c      	movcc	r5, #12
 80085fc:	2d00      	cmp	r5, #0
 80085fe:	4606      	mov	r6, r0
 8008600:	db01      	blt.n	8008606 <_malloc_r+0x1a>
 8008602:	42a9      	cmp	r1, r5
 8008604:	d903      	bls.n	800860e <_malloc_r+0x22>
 8008606:	230c      	movs	r3, #12
 8008608:	6033      	str	r3, [r6, #0]
 800860a:	2000      	movs	r0, #0
 800860c:	bd70      	pop	{r4, r5, r6, pc}
 800860e:	f000 f87d 	bl	800870c <__malloc_lock>
 8008612:	4a21      	ldr	r2, [pc, #132]	; (8008698 <_malloc_r+0xac>)
 8008614:	6814      	ldr	r4, [r2, #0]
 8008616:	4621      	mov	r1, r4
 8008618:	b991      	cbnz	r1, 8008640 <_malloc_r+0x54>
 800861a:	4c20      	ldr	r4, [pc, #128]	; (800869c <_malloc_r+0xb0>)
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	b91b      	cbnz	r3, 8008628 <_malloc_r+0x3c>
 8008620:	4630      	mov	r0, r6
 8008622:	f000 f863 	bl	80086ec <_sbrk_r>
 8008626:	6020      	str	r0, [r4, #0]
 8008628:	4629      	mov	r1, r5
 800862a:	4630      	mov	r0, r6
 800862c:	f000 f85e 	bl	80086ec <_sbrk_r>
 8008630:	1c43      	adds	r3, r0, #1
 8008632:	d124      	bne.n	800867e <_malloc_r+0x92>
 8008634:	230c      	movs	r3, #12
 8008636:	6033      	str	r3, [r6, #0]
 8008638:	4630      	mov	r0, r6
 800863a:	f000 f868 	bl	800870e <__malloc_unlock>
 800863e:	e7e4      	b.n	800860a <_malloc_r+0x1e>
 8008640:	680b      	ldr	r3, [r1, #0]
 8008642:	1b5b      	subs	r3, r3, r5
 8008644:	d418      	bmi.n	8008678 <_malloc_r+0x8c>
 8008646:	2b0b      	cmp	r3, #11
 8008648:	d90f      	bls.n	800866a <_malloc_r+0x7e>
 800864a:	600b      	str	r3, [r1, #0]
 800864c:	50cd      	str	r5, [r1, r3]
 800864e:	18cc      	adds	r4, r1, r3
 8008650:	4630      	mov	r0, r6
 8008652:	f000 f85c 	bl	800870e <__malloc_unlock>
 8008656:	f104 000b 	add.w	r0, r4, #11
 800865a:	1d23      	adds	r3, r4, #4
 800865c:	f020 0007 	bic.w	r0, r0, #7
 8008660:	1ac3      	subs	r3, r0, r3
 8008662:	d0d3      	beq.n	800860c <_malloc_r+0x20>
 8008664:	425a      	negs	r2, r3
 8008666:	50e2      	str	r2, [r4, r3]
 8008668:	e7d0      	b.n	800860c <_malloc_r+0x20>
 800866a:	428c      	cmp	r4, r1
 800866c:	684b      	ldr	r3, [r1, #4]
 800866e:	bf16      	itet	ne
 8008670:	6063      	strne	r3, [r4, #4]
 8008672:	6013      	streq	r3, [r2, #0]
 8008674:	460c      	movne	r4, r1
 8008676:	e7eb      	b.n	8008650 <_malloc_r+0x64>
 8008678:	460c      	mov	r4, r1
 800867a:	6849      	ldr	r1, [r1, #4]
 800867c:	e7cc      	b.n	8008618 <_malloc_r+0x2c>
 800867e:	1cc4      	adds	r4, r0, #3
 8008680:	f024 0403 	bic.w	r4, r4, #3
 8008684:	42a0      	cmp	r0, r4
 8008686:	d005      	beq.n	8008694 <_malloc_r+0xa8>
 8008688:	1a21      	subs	r1, r4, r0
 800868a:	4630      	mov	r0, r6
 800868c:	f000 f82e 	bl	80086ec <_sbrk_r>
 8008690:	3001      	adds	r0, #1
 8008692:	d0cf      	beq.n	8008634 <_malloc_r+0x48>
 8008694:	6025      	str	r5, [r4, #0]
 8008696:	e7db      	b.n	8008650 <_malloc_r+0x64>
 8008698:	200000b0 	.word	0x200000b0
 800869c:	200000b4 	.word	0x200000b4

080086a0 <_realloc_r>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	4607      	mov	r7, r0
 80086a4:	4614      	mov	r4, r2
 80086a6:	460e      	mov	r6, r1
 80086a8:	b921      	cbnz	r1, 80086b4 <_realloc_r+0x14>
 80086aa:	4611      	mov	r1, r2
 80086ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086b0:	f7ff bf9c 	b.w	80085ec <_malloc_r>
 80086b4:	b922      	cbnz	r2, 80086c0 <_realloc_r+0x20>
 80086b6:	f7ff ff4b 	bl	8008550 <_free_r>
 80086ba:	4625      	mov	r5, r4
 80086bc:	4628      	mov	r0, r5
 80086be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c0:	f000 f826 	bl	8008710 <_malloc_usable_size_r>
 80086c4:	42a0      	cmp	r0, r4
 80086c6:	d20f      	bcs.n	80086e8 <_realloc_r+0x48>
 80086c8:	4621      	mov	r1, r4
 80086ca:	4638      	mov	r0, r7
 80086cc:	f7ff ff8e 	bl	80085ec <_malloc_r>
 80086d0:	4605      	mov	r5, r0
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d0f2      	beq.n	80086bc <_realloc_r+0x1c>
 80086d6:	4631      	mov	r1, r6
 80086d8:	4622      	mov	r2, r4
 80086da:	f7ff fc11 	bl	8007f00 <memcpy>
 80086de:	4631      	mov	r1, r6
 80086e0:	4638      	mov	r0, r7
 80086e2:	f7ff ff35 	bl	8008550 <_free_r>
 80086e6:	e7e9      	b.n	80086bc <_realloc_r+0x1c>
 80086e8:	4635      	mov	r5, r6
 80086ea:	e7e7      	b.n	80086bc <_realloc_r+0x1c>

080086ec <_sbrk_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	4c06      	ldr	r4, [pc, #24]	; (8008708 <_sbrk_r+0x1c>)
 80086f0:	2300      	movs	r3, #0
 80086f2:	4605      	mov	r5, r0
 80086f4:	4608      	mov	r0, r1
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	f7fa fb4e 	bl	8002d98 <_sbrk>
 80086fc:	1c43      	adds	r3, r0, #1
 80086fe:	d102      	bne.n	8008706 <_sbrk_r+0x1a>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	b103      	cbz	r3, 8008706 <_sbrk_r+0x1a>
 8008704:	602b      	str	r3, [r5, #0]
 8008706:	bd38      	pop	{r3, r4, r5, pc}
 8008708:	200004c0 	.word	0x200004c0

0800870c <__malloc_lock>:
 800870c:	4770      	bx	lr

0800870e <__malloc_unlock>:
 800870e:	4770      	bx	lr

08008710 <_malloc_usable_size_r>:
 8008710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008714:	1f18      	subs	r0, r3, #4
 8008716:	2b00      	cmp	r3, #0
 8008718:	bfbc      	itt	lt
 800871a:	580b      	ldrlt	r3, [r1, r0]
 800871c:	18c0      	addlt	r0, r0, r3
 800871e:	4770      	bx	lr

08008720 <_init>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	bf00      	nop
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr

0800872c <_fini>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr
