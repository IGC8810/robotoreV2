
robotoreV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006264  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080063ec  080063ec  000163ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006420  08006420  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006420  08006420  00016420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006428  08006428  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006428  08006428  00016428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800642c  0800642c  0001642c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  2000000c  0800643c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800643c  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f22  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002941  00000000  00000000  00035f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d8  00000000  00000000  000388a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b0  00000000  00000000  00039b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002128c  00000000  00000000  0003ad28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f1ba  00000000  00000000  0005bfb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7dbb  00000000  00000000  0006b16e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132f29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc4  00000000  00000000  00132fa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080063d4 	.word	0x080063d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080063d4 	.word	0x080063d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <lcd_cmd>:
//AQM0802.c Ver.1.0
#include "AQM0802.h"

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 80004d2:	2300      	movs	r3, #0
 80004d4:	733b      	strb	r3, [r7, #12]
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 80004da:	f107 020c 	add.w	r2, r7, #12
 80004de:	2364      	movs	r3, #100	; 0x64
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2302      	movs	r3, #2
 80004e4:	217c      	movs	r1, #124	; 0x7c
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <lcd_cmd+0x2c>)
 80004e8:	f003 f868 	bl	80035bc <HAL_I2C_Master_Transmit>
}
 80004ec:	bf00      	nop
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000068 	.word	0x20000068

080004f8 <lcd_data>:

void lcd_data(uint8_t data) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000502:	2340      	movs	r3, #64	; 0x40
 8000504:	733b      	strb	r3, [r7, #12]
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 800050a:	f107 020c 	add.w	r2, r7, #12
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2302      	movs	r3, #2
 8000514:	217c      	movs	r1, #124	; 0x7c
 8000516:	4803      	ldr	r0, [pc, #12]	; (8000524 <lcd_data+0x2c>)
 8000518:	f003 f850 	bl	80035bc <HAL_I2C_Master_Transmit>
}
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000068 	.word	0x20000068

08000528 <lcd_init>:

void lcd_init(){
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
	HAL_Delay(40);
 800052c:	2028      	movs	r0, #40	; 0x28
 800052e:	f001 fcc3 	bl	8001eb8 <HAL_Delay>
	lcd_cmd(0x38);
 8000532:	2038      	movs	r0, #56	; 0x38
 8000534:	f7ff ffc8 	bl	80004c8 <lcd_cmd>
	HAL_Delay(1);
 8000538:	2001      	movs	r0, #1
 800053a:	f001 fcbd 	bl	8001eb8 <HAL_Delay>
	lcd_cmd(0x39);
 800053e:	2039      	movs	r0, #57	; 0x39
 8000540:	f7ff ffc2 	bl	80004c8 <lcd_cmd>
	HAL_Delay(1);
 8000544:	2001      	movs	r0, #1
 8000546:	f001 fcb7 	bl	8001eb8 <HAL_Delay>
	lcd_cmd(0x14);
 800054a:	2014      	movs	r0, #20
 800054c:	f7ff ffbc 	bl	80004c8 <lcd_cmd>
	HAL_Delay(1);
 8000550:	2001      	movs	r0, #1
 8000552:	f001 fcb1 	bl	8001eb8 <HAL_Delay>
	lcd_cmd(0x70);
 8000556:	2070      	movs	r0, #112	; 0x70
 8000558:	f7ff ffb6 	bl	80004c8 <lcd_cmd>
	HAL_Delay(1);
 800055c:	2001      	movs	r0, #1
 800055e:	f001 fcab 	bl	8001eb8 <HAL_Delay>
	lcd_cmd(0x56);
 8000562:	2056      	movs	r0, #86	; 0x56
 8000564:	f7ff ffb0 	bl	80004c8 <lcd_cmd>
	HAL_Delay(1);
 8000568:	2001      	movs	r0, #1
 800056a:	f001 fca5 	bl	8001eb8 <HAL_Delay>
	lcd_cmd(0x6C);
 800056e:	206c      	movs	r0, #108	; 0x6c
 8000570:	f7ff ffaa 	bl	80004c8 <lcd_cmd>
	HAL_Delay(200);
 8000574:	20c8      	movs	r0, #200	; 0xc8
 8000576:	f001 fc9f 	bl	8001eb8 <HAL_Delay>
	lcd_cmd(0x38);
 800057a:	2038      	movs	r0, #56	; 0x38
 800057c:	f7ff ffa4 	bl	80004c8 <lcd_cmd>
	HAL_Delay(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f001 fc99 	bl	8001eb8 <HAL_Delay>
	lcd_cmd(0x0C);
 8000586:	200c      	movs	r0, #12
 8000588:	f7ff ff9e 	bl	80004c8 <lcd_cmd>
	HAL_Delay(1);
 800058c:	2001      	movs	r0, #1
 800058e:	f001 fc93 	bl	8001eb8 <HAL_Delay>
	lcd_cmd(0x01);
 8000592:	2001      	movs	r0, #1
 8000594:	f7ff ff98 	bl	80004c8 <lcd_cmd>
	HAL_Delay(1);
 8000598:	2001      	movs	r0, #1
 800059a:	f001 fc8d 	bl	8001eb8 <HAL_Delay>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <lcd_locate>:
	HAL_Delay(1);
	lcd_cmd(0x02);
	HAL_Delay(1);
}

void lcd_locate(int x, int y) {
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	3302      	adds	r3, #2
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	019b      	lsls	r3, r3, #6
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4413      	add	r3, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ff82 	bl	80004c8 <lcd_cmd>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <lcd_print>:

void lcd_print(const char *str) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80005d4:	e007      	b.n	80005e6 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ff8c 	bl	80004f8 <lcd_data>
			str++;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1f3      	bne.n	80005d6 <lcd_print+0xa>
	}
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <read_byte>:
#include "ICM20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000608:	b2db      	uxtb	r3, r3
 800060a:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800060c:	2200      	movs	r2, #0
 800060e:	2104      	movs	r1, #4
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <read_byte+0x50>)
 8000612:	f002 fe81 	bl	8003318 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8000616:	f107 010f 	add.w	r1, r7, #15
 800061a:	2364      	movs	r3, #100	; 0x64
 800061c:	2201      	movs	r2, #1
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <read_byte+0x54>)
 8000620:	f003 ff74 	bl	800450c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 8000624:	f107 010e 	add.w	r1, r7, #14
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	2201      	movs	r2, #1
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <read_byte+0x54>)
 800062e:	f004 f8a1 	bl	8004774 <HAL_SPI_Receive>
	CS_SET;
 8000632:	2201      	movs	r2, #1
 8000634:	2104      	movs	r1, #4
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <read_byte+0x50>)
 8000638:	f002 fe6e 	bl	8003318 <HAL_GPIO_WritePin>

	return val;
 800063c:	7bbb      	ldrb	r3, [r7, #14]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40020c00 	.word	0x40020c00
 800064c:	20000150 	.word	0x20000150

08000650 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	460a      	mov	r2, r1
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	4613      	mov	r3, r2
 800065e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000666:	b2db      	uxtb	r3, r3
 8000668:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800066a:	2200      	movs	r2, #0
 800066c:	2104      	movs	r1, #4
 800066e:	480c      	ldr	r0, [pc, #48]	; (80006a0 <write_byte+0x50>)
 8000670:	f002 fe52 	bl	8003318 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8000674:	f107 010f 	add.w	r1, r7, #15
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	2201      	movs	r2, #1
 800067c:	4809      	ldr	r0, [pc, #36]	; (80006a4 <write_byte+0x54>)
 800067e:	f003 ff45 	bl	800450c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 8000682:	1db9      	adds	r1, r7, #6
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	2201      	movs	r2, #1
 8000688:	4806      	ldr	r0, [pc, #24]	; (80006a4 <write_byte+0x54>)
 800068a:	f003 ff3f 	bl	800450c <HAL_SPI_Transmit>
	CS_SET;
 800068e:	2201      	movs	r2, #1
 8000690:	2104      	movs	r1, #4
 8000692:	4803      	ldr	r0, [pc, #12]	; (80006a0 <write_byte+0x50>)
 8000694:	f002 fe40 	bl	8003318 <HAL_GPIO_WritePin>
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40020c00 	.word	0x40020c00
 80006a4:	20000150 	.word	0x20000150

080006a8 <IMU_init>:

uint8_t IMU_init() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80006ae:	2000      	movs	r0, #0
 80006b0:	f7ff ffa2 	bl	80005f8 <read_byte>
 80006b4:	4603      	mov	r3, r0
 80006b6:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	2be0      	cmp	r3, #224	; 0xe0
 80006bc:	d11c      	bne.n	80006f8 <IMU_init+0x50>
		ret = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80006c2:	2101      	movs	r1, #1
 80006c4:	2006      	movs	r0, #6
 80006c6:	f7ff ffc3 	bl	8000650 <write_byte>
		HAL_Delay(100);
 80006ca:	2064      	movs	r0, #100	; 0x64
 80006cc:	f001 fbf4 	bl	8001eb8 <HAL_Delay>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80006d0:	2110      	movs	r1, #16
 80006d2:	2003      	movs	r0, #3
 80006d4:	f7ff ffbc 	bl	8000650 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80006d8:	2120      	movs	r1, #32
 80006da:	207f      	movs	r0, #127	; 0x7f
 80006dc:	f7ff ffb8 	bl	8000650 <write_byte>
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable
		write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 80006e0:	2107      	movs	r1, #7
 80006e2:	2001      	movs	r0, #1
 80006e4:	f7ff ffb4 	bl	8000650 <write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x00);	//range±2g
 80006e8:	2100      	movs	r1, #0
 80006ea:	2014      	movs	r0, #20
 80006ec:	f7ff ffb0 	bl	8000650 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80006f0:	2100      	movs	r1, #0
 80006f2:	207f      	movs	r0, #127	; 0x7f
 80006f4:	f7ff ffac 	bl	8000650 <write_byte>
	}
	return ret;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <INA260_write>:
	HAL_I2C_Master_Receive(&hi2c2,SLAVEADRESS1,Rxdata,2,100);
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
	return val;
}

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af02      	add	r7, sp, #8
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
 800070e:	460b      	mov	r3, r1
 8000710:	71bb      	strb	r3, [r7, #6]
 8000712:	4613      	mov	r3, r2
 8000714:	717b      	strb	r3, [r7, #5]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	733b      	strb	r3, [r7, #12]
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	737b      	strb	r3, [r7, #13]
 800071e:	797b      	ldrb	r3, [r7, #5]
 8000720:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2,SLAVEADRESS1,Txcmd,3,100);
 8000722:	f107 020c 	add.w	r2, r7, #12
 8000726:	2364      	movs	r3, #100	; 0x64
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2303      	movs	r3, #3
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	4803      	ldr	r0, [pc, #12]	; (800073c <INA260_write+0x38>)
 8000730:	f002 ff44 	bl	80035bc <HAL_I2C_Master_Transmit>
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000bc 	.word	0x200000bc

08000740 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	460a      	mov	r2, r1
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	4613      	mov	r3, r2
 800074e:	71bb      	strb	r3, [r7, #6]
	INA260_write(0x00 , msbyte , lsbyte);
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4619      	mov	r1, r3
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff ffd4 	bl	8000704 <INA260_write>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <INA260_init>:

void INA260_init() {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	setConfig(0x00,0xDF);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8000768:	21df      	movs	r1, #223	; 0xdf
 800076a:	2000      	movs	r0, #0
 800076c:	f7ff ffe8 	bl	8000740 <setConfig>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}

08000774 <HAL_TIM_PeriodElapsedCallback>:

void setup(){

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	}

	if(htim->Instance == htim7.Instance){

	}
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078c:	f001 fb22 	bl	8001dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000790:	f000 f84e 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000794:	f000 fcbc 	bl	8001110 <MX_GPIO_Init>
  MX_DMA_Init();
 8000798:	f000 fc9a 	bl	80010d0 <MX_DMA_Init>
  MX_ADC1_Init();
 800079c:	f000 f8b2 	bl	8000904 <MX_ADC1_Init>
  MX_I2C1_Init();
 80007a0:	f000 f99c 	bl	8000adc <MX_I2C1_Init>
  MX_I2C2_Init();
 80007a4:	f000 f9c8 	bl	8000b38 <MX_I2C2_Init>
  MX_SPI3_Init();
 80007a8:	f000 f9f4 	bl	8000b94 <MX_SPI3_Init>
  MX_TIM1_Init();
 80007ac:	f000 fa28 	bl	8000c00 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007b0:	f000 fa7e 	bl	8000cb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007b4:	f000 fad4 	bl	8000d60 <MX_TIM3_Init>
  MX_TIM6_Init();
 80007b8:	f000 fb4c 	bl	8000e54 <MX_TIM6_Init>
  MX_TIM7_Init();
 80007bc:	f000 fb80 	bl	8000ec0 <MX_TIM7_Init>
  MX_TIM8_Init();
 80007c0:	f000 fbb4 	bl	8000f2c <MX_TIM8_Init>
  MX_TIM12_Init();
 80007c4:	f000 fc0a 	bl	8000fdc <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80007c8:	f000 fc58 	bl	800107c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  peripheral_init();
 80007cc:	f000 fd70 	bl	80012b0 <peripheral_init>
  led_pattern(7);
 80007d0:	2007      	movs	r0, #7
 80007d2:	f000 fe0f 	bl	80013f4 <led_pattern>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 209);
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <main+0xa0>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	22d1      	movs	r2, #209	; 0xd1
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 209);
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <main+0xa0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	22d1      	movs	r2, #209	; 0xd1
 80007e4:	639a      	str	r2, [r3, #56]	; 0x38
  while (1)
  {
	MR_SET;
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ec:	480f      	ldr	r0, [pc, #60]	; (800082c <main+0xa4>)
 80007ee:	f002 fd93 	bl	8003318 <HAL_GPIO_WritePin>
	ML_SET;
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <main+0xa4>)
 80007fa:	f002 fd8d 	bl	8003318 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80007fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000802:	f001 fb59 	bl	8001eb8 <HAL_Delay>
	MR_RESET;
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <main+0xa4>)
 800080e:	f002 fd83 	bl	8003318 <HAL_GPIO_WritePin>
	ML_RESET;
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <main+0xa4>)
 800081a:	f002 fd7d 	bl	8003318 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800081e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000822:	f001 fb49 	bl	8001eb8 <HAL_Delay>
	MR_SET;
 8000826:	e7de      	b.n	80007e6 <main+0x5e>
 8000828:	20000350 	.word	0x20000350
 800082c:	40020000 	.word	0x40020000

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	; 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	2230      	movs	r2, #48	; 0x30
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f005 fdc0 	bl	80063c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	4b28      	ldr	r3, [pc, #160]	; (80008fc <SystemClock_Config+0xcc>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	4a27      	ldr	r2, [pc, #156]	; (80008fc <SystemClock_Config+0xcc>)
 800085e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000862:	6413      	str	r3, [r2, #64]	; 0x40
 8000864:	4b25      	ldr	r3, [pc, #148]	; (80008fc <SystemClock_Config+0xcc>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <SystemClock_Config+0xd0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a21      	ldr	r2, [pc, #132]	; (8000900 <SystemClock_Config+0xd0>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <SystemClock_Config+0xd0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000890:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80008a0:	2306      	movs	r3, #6
 80008a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008a4:	23a8      	movs	r3, #168	; 0xa8
 80008a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ac:	2304      	movs	r3, #4
 80008ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 0320 	add.w	r3, r7, #32
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 f989 	bl	8003bcc <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008c0:	f000 fcee 	bl	80012a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	230f      	movs	r3, #15
 80008c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c8:	2302      	movs	r3, #2
 80008ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2105      	movs	r1, #5
 80008e2:	4618      	mov	r0, r3
 80008e4:	f003 fbe2 	bl	80040ac <HAL_RCC_ClockConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ee:	f000 fcd7 	bl	80012a0 <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3750      	adds	r7, #80	; 0x50
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090a:	463b      	mov	r3, r7
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000916:	4b6e      	ldr	r3, [pc, #440]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000918:	4a6e      	ldr	r2, [pc, #440]	; (8000ad4 <MX_ADC1_Init+0x1d0>)
 800091a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800091c:	4b6c      	ldr	r3, [pc, #432]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 800091e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000922:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000924:	4b6a      	ldr	r3, [pc, #424]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800092a:	4b69      	ldr	r3, [pc, #420]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 800092c:	2201      	movs	r2, #1
 800092e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000930:	4b67      	ldr	r3, [pc, #412]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000932:	2201      	movs	r2, #1
 8000934:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000936:	4b66      	ldr	r3, [pc, #408]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093e:	4b64      	ldr	r3, [pc, #400]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000940:	2200      	movs	r2, #0
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000944:	4b62      	ldr	r3, [pc, #392]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000946:	4a64      	ldr	r2, [pc, #400]	; (8000ad8 <MX_ADC1_Init+0x1d4>)
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800094a:	4b61      	ldr	r3, [pc, #388]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8000950:	4b5f      	ldr	r3, [pc, #380]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000952:	220c      	movs	r2, #12
 8000954:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000956:	4b5e      	ldr	r3, [pc, #376]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000958:	2201      	movs	r2, #1
 800095a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095e:	4b5c      	ldr	r3, [pc, #368]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000960:	2201      	movs	r2, #1
 8000962:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000964:	485a      	ldr	r0, [pc, #360]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000966:	f001 fac9 	bl	8001efc <HAL_ADC_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000970:	f000 fc96 	bl	80012a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000974:	2300      	movs	r3, #0
 8000976:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000978:	2301      	movs	r3, #1
 800097a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	4619      	mov	r1, r3
 8000984:	4852      	ldr	r0, [pc, #328]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000986:	f001 fc0d 	bl	80021a4 <HAL_ADC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000990:	f000 fc86 	bl	80012a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000994:	2301      	movs	r3, #1
 8000996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000998:	2302      	movs	r3, #2
 800099a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	484b      	ldr	r0, [pc, #300]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 80009a2:	f001 fbff 	bl	80021a4 <HAL_ADC_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009ac:	f000 fc78 	bl	80012a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009b4:	2303      	movs	r3, #3
 80009b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	4844      	ldr	r0, [pc, #272]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 80009be:	f001 fbf1 	bl	80021a4 <HAL_ADC_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80009c8:	f000 fc6a 	bl	80012a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009cc:	2303      	movs	r3, #3
 80009ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80009d0:	2304      	movs	r3, #4
 80009d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	483d      	ldr	r0, [pc, #244]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 80009da:	f001 fbe3 	bl	80021a4 <HAL_ADC_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80009e4:	f000 fc5c 	bl	80012a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009e8:	2304      	movs	r3, #4
 80009ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80009ec:	2305      	movs	r3, #5
 80009ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f0:	463b      	mov	r3, r7
 80009f2:	4619      	mov	r1, r3
 80009f4:	4836      	ldr	r0, [pc, #216]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 80009f6:	f001 fbd5 	bl	80021a4 <HAL_ADC_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000a00:	f000 fc4e 	bl	80012a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a04:	2305      	movs	r3, #5
 8000a06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000a08:	2306      	movs	r3, #6
 8000a0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	482f      	ldr	r0, [pc, #188]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000a12:	f001 fbc7 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000a1c:	f000 fc40 	bl	80012a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a20:	2306      	movs	r3, #6
 8000a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000a24:	2307      	movs	r3, #7
 8000a26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4828      	ldr	r0, [pc, #160]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000a2e:	f001 fbb9 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000a38:	f000 fc32 	bl	80012a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000a40:	2308      	movs	r3, #8
 8000a42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4619      	mov	r1, r3
 8000a48:	4821      	ldr	r0, [pc, #132]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000a4a:	f001 fbab 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000a54:	f000 fc24 	bl	80012a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000a5c:	2309      	movs	r3, #9
 8000a5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a60:	463b      	mov	r3, r7
 8000a62:	4619      	mov	r1, r3
 8000a64:	481a      	ldr	r0, [pc, #104]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000a66:	f001 fb9d 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000a70:	f000 fc16 	bl	80012a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a74:	2309      	movs	r3, #9
 8000a76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8000a78:	230a      	movs	r3, #10
 8000a7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4813      	ldr	r0, [pc, #76]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000a82:	f001 fb8f 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000a8c:	f000 fc08 	bl	80012a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000a90:	230e      	movs	r3, #14
 8000a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8000a94:	230b      	movs	r3, #11
 8000a96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a98:	463b      	mov	r3, r7
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000a9e:	f001 fb81 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8000aa8:	f000 fbfa 	bl	80012a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000aac:	230f      	movs	r3, #15
 8000aae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_ADC1_Init+0x1cc>)
 8000aba:	f001 fb73 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8000ac4:	f000 fbec 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200001a8 	.word	0x200001a8
 8000ad4:	40012000 	.word	0x40012000
 8000ad8:	0f000001 	.word	0x0f000001

08000adc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000ae2:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <MX_I2C1_Init+0x54>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000ae8:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MX_I2C1_Init+0x58>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000afa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_I2C1_Init+0x50>)
 8000b1a:	f002 fc17 	bl	800334c <HAL_I2C_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b24:	f000 fbbc 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000068 	.word	0x20000068
 8000b30:	40005400 	.word	0x40005400
 8000b34:	00061a80 	.word	0x00061a80

08000b38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <MX_I2C2_Init+0x54>)
 8000b40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_I2C2_Init+0x58>)
 8000b46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b76:	f002 fbe9 	bl	800334c <HAL_I2C_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b80:	f000 fb8e 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000bc 	.word	0x200000bc
 8000b8c:	40005800 	.word	0x40005800
 8000b90:	000186a0 	.word	0x000186a0

08000b94 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_SPI3_Init+0x64>)
 8000b9a:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <MX_SPI3_Init+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_SPI3_Init+0x64>)
 8000ba0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_SPI3_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_SPI3_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_SPI3_Init+0x64>)
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_SPI3_Init+0x64>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_SPI3_Init+0x64>)
 8000bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_SPI3_Init+0x64>)
 8000bc8:	2220      	movs	r2, #32
 8000bca:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_SPI3_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_SPI3_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_SPI3_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_SPI3_Init+0x64>)
 8000be0:	220a      	movs	r2, #10
 8000be2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_SPI3_Init+0x64>)
 8000be6:	f003 fc2d 	bl	8004444 <HAL_SPI_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000bf0:	f000 fb56 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000150 	.word	0x20000150
 8000bfc:	40003c00 	.word	0x40003c00

08000c00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	; 0x30
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2224      	movs	r2, #36	; 0x24
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f005 fbd8 	bl	80063c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c1c:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <MX_TIM1_Init+0xa8>)
 8000c1e:	4a23      	ldr	r2, [pc, #140]	; (8000cac <MX_TIM1_Init+0xac>)
 8000c20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <MX_TIM1_Init+0xa8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_TIM1_Init+0xa8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_TIM1_Init+0xa8>)
 8000c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_TIM1_Init+0xa8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_TIM1_Init+0xa8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <MX_TIM1_Init+0xa8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c50:	2301      	movs	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c60:	2301      	movs	r3, #1
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <MX_TIM1_Init+0xa8>)
 8000c74:	f004 f9f2 	bl	800505c <HAL_TIM_Encoder_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c7e:	f000 fb0f 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <MX_TIM1_Init+0xa8>)
 8000c90:	f004 ff1a 	bl	8005ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000c9a:	f000 fb01 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	3730      	adds	r7, #48	; 0x30
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200002d0 	.word	0x200002d0
 8000cac:	40010000 	.word	0x40010000

08000cb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb6:	f107 0320 	add.w	r3, r7, #32
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
 8000cce:	615a      	str	r2, [r3, #20]
 8000cd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cd2:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_TIM2_Init+0xac>)
 8000cd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <MX_TIM2_Init+0xac>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_TIM2_Init+0xac>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_TIM2_Init+0xac>)
 8000ce8:	f241 0267 	movw	r2, #4199	; 0x1067
 8000cec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_TIM2_Init+0xac>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_TIM2_Init+0xac>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cfa:	4818      	ldr	r0, [pc, #96]	; (8000d5c <MX_TIM2_Init+0xac>)
 8000cfc:	f004 f945 	bl	8004f8a <HAL_TIM_PWM_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d06:	f000 facb 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d12:	f107 0320 	add.w	r3, r7, #32
 8000d16:	4619      	mov	r1, r3
 8000d18:	4810      	ldr	r0, [pc, #64]	; (8000d5c <MX_TIM2_Init+0xac>)
 8000d1a:	f004 fed5 	bl	8005ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d24:	f000 fabc 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d28:	2360      	movs	r3, #96	; 0x60
 8000d2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4807      	ldr	r0, [pc, #28]	; (8000d5c <MX_TIM2_Init+0xac>)
 8000d40:	f004 fb5e 	bl	8005400 <HAL_TIM_PWM_ConfigChannel>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d4a:	f000 faa9 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d4e:	4803      	ldr	r0, [pc, #12]	; (8000d5c <MX_TIM2_Init+0xac>)
 8000d50:	f000 fec4 	bl	8001adc <HAL_TIM_MspPostInit>

}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000310 	.word	0x20000310

08000d60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
 8000d7e:	615a      	str	r2, [r3, #20]
 8000d80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d82:	4b32      	ldr	r3, [pc, #200]	; (8000e4c <MX_TIM3_Init+0xec>)
 8000d84:	4a32      	ldr	r2, [pc, #200]	; (8000e50 <MX_TIM3_Init+0xf0>)
 8000d86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000d88:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <MX_TIM3_Init+0xec>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <MX_TIM3_Init+0xec>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4199;
 8000d94:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <MX_TIM3_Init+0xec>)
 8000d96:	f241 0267 	movw	r2, #4199	; 0x1067
 8000d9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <MX_TIM3_Init+0xec>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <MX_TIM3_Init+0xec>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000da8:	4828      	ldr	r0, [pc, #160]	; (8000e4c <MX_TIM3_Init+0xec>)
 8000daa:	f004 f8ee 	bl	8004f8a <HAL_TIM_PWM_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000db4:	f000 fa74 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc0:	f107 0320 	add.w	r3, r7, #32
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4821      	ldr	r0, [pc, #132]	; (8000e4c <MX_TIM3_Init+0xec>)
 8000dc8:	f004 fe7e 	bl	8005ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000dd2:	f000 fa65 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd6:	2360      	movs	r3, #96	; 0x60
 8000dd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	4619      	mov	r1, r3
 8000dec:	4817      	ldr	r0, [pc, #92]	; (8000e4c <MX_TIM3_Init+0xec>)
 8000dee:	f004 fb07 	bl	8005400 <HAL_TIM_PWM_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000df8:	f000 fa52 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2204      	movs	r2, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4812      	ldr	r0, [pc, #72]	; (8000e4c <MX_TIM3_Init+0xec>)
 8000e04:	f004 fafc 	bl	8005400 <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e0e:	f000 fa47 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2208      	movs	r2, #8
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_TIM3_Init+0xec>)
 8000e1a:	f004 faf1 	bl	8005400 <HAL_TIM_PWM_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000e24:	f000 fa3c 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <MX_TIM3_Init+0xec>)
 8000e30:	f004 fae6 	bl	8005400 <HAL_TIM_PWM_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000e3a:	f000 fa31 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e3e:	4803      	ldr	r0, [pc, #12]	; (8000e4c <MX_TIM3_Init+0xec>)
 8000e40:	f000 fe4c 	bl	8001adc <HAL_TIM_MspPostInit>

}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000110 	.word	0x20000110
 8000e50:	40000400 	.word	0x40000400

08000e54 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_TIM6_Init+0x64>)
 8000e64:	4a15      	ldr	r2, [pc, #84]	; (8000ebc <MX_TIM6_Init+0x68>)
 8000e66:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19;
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_TIM6_Init+0x64>)
 8000e6a:	2213      	movs	r2, #19
 8000e6c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_TIM6_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4199;
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <MX_TIM6_Init+0x64>)
 8000e76:	f241 0267 	movw	r2, #4199	; 0x1067
 8000e7a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_TIM6_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <MX_TIM6_Init+0x64>)
 8000e84:	f004 f832 	bl	8004eec <HAL_TIM_Base_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000e8e:	f000 fa07 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <MX_TIM6_Init+0x64>)
 8000ea0:	f004 fe12 	bl	8005ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000eaa:	f000 f9f9 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000290 	.word	0x20000290
 8000ebc:	40001000 	.word	0x40001000

08000ec0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_TIM7_Init+0x64>)
 8000ed0:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <MX_TIM7_Init+0x68>)
 8000ed2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 167;
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <MX_TIM7_Init+0x64>)
 8000ed6:	22a7      	movs	r2, #167	; 0xa7
 8000ed8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_TIM7_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_TIM7_Init+0x64>)
 8000ee2:	f241 3287 	movw	r2, #4999	; 0x1387
 8000ee6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_TIM7_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000eee:	480d      	ldr	r0, [pc, #52]	; (8000f24 <MX_TIM7_Init+0x64>)
 8000ef0:	f003 fffc 	bl	8004eec <HAL_TIM_Base_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000efa:	f000 f9d1 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <MX_TIM7_Init+0x64>)
 8000f0c:	f004 fddc 	bl	8005ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000f16:	f000 f9c3 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000390 	.word	0x20000390
 8000f28:	40001400 	.word	0x40001400

08000f2c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	2224      	movs	r2, #36	; 0x24
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f005 fa42 	bl	80063c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <MX_TIM8_Init+0xa8>)
 8000f4a:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <MX_TIM8_Init+0xac>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <MX_TIM8_Init+0xa8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <MX_TIM8_Init+0xa8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <MX_TIM8_Init+0xa8>)
 8000f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f60:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_TIM8_Init+0xa8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_TIM8_Init+0xa8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_TIM8_Init+0xa8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f74:	2303      	movs	r3, #3
 8000f76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <MX_TIM8_Init+0xa8>)
 8000fa0:	f004 f85c 	bl	800505c <HAL_TIM_Encoder_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8000faa:	f000 f979 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <MX_TIM8_Init+0xa8>)
 8000fbc:	f004 fd84 	bl	8005ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8000fc6:	f000 f96b 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3730      	adds	r7, #48	; 0x30
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000028 	.word	0x20000028
 8000fd8:	40010400 	.word	0x40010400

08000fdc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]
 8000ff2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <MX_TIM12_Init+0x98>)
 8000ff6:	4a20      	ldr	r2, [pc, #128]	; (8001078 <MX_TIM12_Init+0x9c>)
 8000ff8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1;
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <MX_TIM12_Init+0x98>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <MX_TIM12_Init+0x98>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 839;
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <MX_TIM12_Init+0x98>)
 8001008:	f240 3247 	movw	r2, #839	; 0x347
 800100c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <MX_TIM12_Init+0x98>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_TIM12_Init+0x98>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800101a:	4816      	ldr	r0, [pc, #88]	; (8001074 <MX_TIM12_Init+0x98>)
 800101c:	f003 ffb5 	bl	8004f8a <HAL_TIM_PWM_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001026:	f000 f93b 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102a:	2360      	movs	r3, #96	; 0x60
 800102c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_TIM12_Init+0x98>)
 8001042:	f004 f9dd 	bl	8005400 <HAL_TIM_PWM_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800104c:	f000 f928 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2204      	movs	r2, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4807      	ldr	r0, [pc, #28]	; (8001074 <MX_TIM12_Init+0x98>)
 8001058:	f004 f9d2 	bl	8005400 <HAL_TIM_PWM_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001062:	f000 f91d 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001066:	4803      	ldr	r0, [pc, #12]	; (8001074 <MX_TIM12_Init+0x98>)
 8001068:	f000 fd38 	bl	8001adc <HAL_TIM_MspPostInit>

}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000350 	.word	0x20000350
 8001078:	40001800 	.word	0x40001800

0800107c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <MX_USART1_UART_Init+0x50>)
 8001084:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 8001088:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800108c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_USART1_UART_Init+0x4c>)
 80010b4:	f004 fd98 	bl	8005be8 <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010be:	f000 f8ef 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200001f0 	.word	0x200001f0
 80010cc:	40011000 	.word	0x40011000

080010d0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_DMA_Init+0x3c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <MX_DMA_Init+0x3c>)
 80010e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_DMA_Init+0x3c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2038      	movs	r0, #56	; 0x38
 80010f8:	f001 fbcf 	bl	800289a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010fc:	2038      	movs	r0, #56	; 0x38
 80010fe:	f001 fbe8 	bl	80028d2 <HAL_NVIC_EnableIRQ>

}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b57      	ldr	r3, [pc, #348]	; (8001288 <MX_GPIO_Init+0x178>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a56      	ldr	r2, [pc, #344]	; (8001288 <MX_GPIO_Init+0x178>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b54      	ldr	r3, [pc, #336]	; (8001288 <MX_GPIO_Init+0x178>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b50      	ldr	r3, [pc, #320]	; (8001288 <MX_GPIO_Init+0x178>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a4f      	ldr	r2, [pc, #316]	; (8001288 <MX_GPIO_Init+0x178>)
 800114c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b4d      	ldr	r3, [pc, #308]	; (8001288 <MX_GPIO_Init+0x178>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	4b49      	ldr	r3, [pc, #292]	; (8001288 <MX_GPIO_Init+0x178>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a48      	ldr	r2, [pc, #288]	; (8001288 <MX_GPIO_Init+0x178>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b46      	ldr	r3, [pc, #280]	; (8001288 <MX_GPIO_Init+0x178>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b42      	ldr	r3, [pc, #264]	; (8001288 <MX_GPIO_Init+0x178>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a41      	ldr	r2, [pc, #260]	; (8001288 <MX_GPIO_Init+0x178>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <MX_GPIO_Init+0x178>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <MX_GPIO_Init+0x178>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a3a      	ldr	r2, [pc, #232]	; (8001288 <MX_GPIO_Init+0x178>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <MX_GPIO_Init+0x178>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f242 0104 	movw	r1, #8196	; 0x2004
 80011b8:	4834      	ldr	r0, [pc, #208]	; (800128c <MX_GPIO_Init+0x17c>)
 80011ba:	f002 f8ad 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80011c4:	4832      	ldr	r0, [pc, #200]	; (8001290 <MX_GPIO_Init+0x180>)
 80011c6:	f002 f8a7 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2104      	movs	r1, #4
 80011ce:	4831      	ldr	r0, [pc, #196]	; (8001294 <MX_GPIO_Init+0x184>)
 80011d0:	f002 f8a2 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 80011d4:	f24e 0303 	movw	r3, #57347	; 0xe003
 80011d8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011da:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <MX_GPIO_Init+0x188>)
 80011dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011de:	2301      	movs	r3, #1
 80011e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	482c      	ldr	r0, [pc, #176]	; (800129c <MX_GPIO_Init+0x18c>)
 80011ea:	f001 fefb 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13;
 80011ee:	f242 0304 	movw	r3, #8196	; 0x2004
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4821      	ldr	r0, [pc, #132]	; (800128c <MX_GPIO_Init+0x17c>)
 8001208:	f001 feec 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800120c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <MX_GPIO_Init+0x188>)
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001216:	2301      	movs	r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	481a      	ldr	r0, [pc, #104]	; (800128c <MX_GPIO_Init+0x17c>)
 8001222:	f001 fedf 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001226:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001234:	2302      	movs	r3, #2
 8001236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4814      	ldr	r0, [pc, #80]	; (8001290 <MX_GPIO_Init+0x180>)
 8001240:	f001 fed0 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <MX_GPIO_Init+0x180>)
 800125e:	f001 fec1 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001262:	2304      	movs	r3, #4
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <MX_GPIO_Init+0x184>)
 800127a:	f001 feb3 	bl	8002fe4 <HAL_GPIO_Init>

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40020400 	.word	0x40020400
 8001290:	40020000 	.word	0x40020000
 8001294:	40020c00 	.word	0x40020c00
 8001298:	10110000 	.word	0x10110000
 800129c:	40020800 	.word	0x40020800

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <peripheral_init>:
uint16_t line_sen8;
uint16_t line_sen9;
uint16_t line_sen10;
uint16_t line_sen11;

void peripheral_init(){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	gpio_set();
 80012b4:	f000 f872 	bl	800139c <gpio_set>
	lcd_init();
 80012b8:	f7ff f936 	bl	8000528 <lcd_init>
	INA260_init();
 80012bc:	f7ff fa52 	bl	8000764 <INA260_init>
	if( IMU_init() == 1 ) {
 80012c0:	f7ff f9f2 	bl	80006a8 <IMU_init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d10d      	bne.n	80012e6 <peripheral_init+0x36>
		lcd_locate(0,0);
 80012ca:	2100      	movs	r1, #0
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff f968 	bl	80005a2 <lcd_locate>
		lcd_print("WHO_AM_I");
 80012d2:	4827      	ldr	r0, [pc, #156]	; (8001370 <peripheral_init+0xc0>)
 80012d4:	f7ff f97a 	bl	80005cc <lcd_print>
		lcd_locate(0,1);
 80012d8:	2101      	movs	r1, #1
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff f961 	bl	80005a2 <lcd_locate>
		lcd_print("SUCCESS");
 80012e0:	4824      	ldr	r0, [pc, #144]	; (8001374 <peripheral_init+0xc4>)
 80012e2:	f7ff f973 	bl	80005cc <lcd_print>
	}
	//set_encoder
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80012e6:	213c      	movs	r1, #60	; 0x3c
 80012e8:	4823      	ldr	r0, [pc, #140]	; (8001378 <peripheral_init+0xc8>)
 80012ea:	f003 ff49 	bl	8005180 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80012ee:	213c      	movs	r1, #60	; 0x3c
 80012f0:	4822      	ldr	r0, [pc, #136]	; (800137c <peripheral_init+0xcc>)
 80012f2:	f003 ff45 	bl	8005180 <HAL_TIM_Encoder_Start>
	//set_motordrive
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80012f6:	2100      	movs	r1, #0
 80012f8:	4821      	ldr	r0, [pc, #132]	; (8001380 <peripheral_init+0xd0>)
 80012fa:	f003 fe71 	bl	8004fe0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80012fe:	2104      	movs	r1, #4
 8001300:	481f      	ldr	r0, [pc, #124]	; (8001380 <peripheral_init+0xd0>)
 8001302:	f003 fe6d 	bl	8004fe0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8001306:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <peripheral_init+0xd0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <peripheral_init+0xd0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	639a      	str	r2, [r3, #56]	; 0x38
	//set_buzzer
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001316:	2100      	movs	r1, #0
 8001318:	481a      	ldr	r0, [pc, #104]	; (8001384 <peripheral_init+0xd4>)
 800131a:	f003 fe61 	bl	8004fe0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <peripheral_init+0xd4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2200      	movs	r2, #0
 8001324:	635a      	str	r2, [r3, #52]	; 0x34
	//set_4in1-esc
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_ALL);
 8001326:	213c      	movs	r1, #60	; 0x3c
 8001328:	4817      	ldr	r0, [pc, #92]	; (8001388 <peripheral_init+0xd8>)
 800132a:	f003 fe59 	bl	8004fe0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN);
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <peripheral_init+0xd8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8001336:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN);
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <peripheral_init+0xd8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8001340:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ESC_MIN);
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <peripheral_init+0xd8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f240 62e3 	movw	r2, #1763	; 0x6e3
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ESC_MIN);
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <peripheral_init+0xd8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f240 62e3 	movw	r2, #1763	; 0x6e3
 8001354:	641a      	str	r2, [r3, #64]	; 0x40
	//set_timer
	HAL_TIM_Base_Start_IT(&htim6);
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <peripheral_init+0xdc>)
 8001358:	f003 fdf3 	bl	8004f42 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <peripheral_init+0xe0>)
 800135e:	f003 fdf0 	bl	8004f42 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADC1_Buff, ADC_DATA_BUFFR_SIZE);
 8001362:	220c      	movs	r2, #12
 8001364:	490b      	ldr	r1, [pc, #44]	; (8001394 <peripheral_init+0xe4>)
 8001366:	480c      	ldr	r0, [pc, #48]	; (8001398 <peripheral_init+0xe8>)
 8001368:	f000 fe0c 	bl	8001f84 <HAL_ADC_Start_DMA>
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	080063ec 	.word	0x080063ec
 8001374:	080063f8 	.word	0x080063f8
 8001378:	200002d0 	.word	0x200002d0
 800137c:	20000028 	.word	0x20000028
 8001380:	20000350 	.word	0x20000350
 8001384:	20000310 	.word	0x20000310
 8001388:	20000110 	.word	0x20000110
 800138c:	20000290 	.word	0x20000290
 8001390:	20000390 	.word	0x20000390
 8001394:	200003dc 	.word	0x200003dc
 8001398:	200001a8 	.word	0x200001a8

0800139c <gpio_set>:

void gpio_set(){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	CS_SET;
 80013a0:	2201      	movs	r2, #1
 80013a2:	2104      	movs	r1, #4
 80013a4:	4810      	ldr	r0, [pc, #64]	; (80013e8 <gpio_set+0x4c>)
 80013a6:	f001 ffb7 	bl	8003318 <HAL_GPIO_WritePin>
	MR_SET;
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b0:	480e      	ldr	r0, [pc, #56]	; (80013ec <gpio_set+0x50>)
 80013b2:	f001 ffb1 	bl	8003318 <HAL_GPIO_WritePin>
	ML_SET;
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013bc:	480b      	ldr	r0, [pc, #44]	; (80013ec <gpio_set+0x50>)
 80013be:	f001 ffab 	bl	8003318 <HAL_GPIO_WritePin>
	LED_R_SET;
 80013c2:	2201      	movs	r2, #1
 80013c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <gpio_set+0x54>)
 80013ca:	f001 ffa5 	bl	8003318 <HAL_GPIO_WritePin>
	LED_G_SET;
 80013ce:	2201      	movs	r2, #1
 80013d0:	2104      	movs	r1, #4
 80013d2:	4807      	ldr	r0, [pc, #28]	; (80013f0 <gpio_set+0x54>)
 80013d4:	f001 ffa0 	bl	8003318 <HAL_GPIO_WritePin>
	LED_B_SET;
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013de:	4803      	ldr	r0, [pc, #12]	; (80013ec <gpio_set+0x50>)
 80013e0:	f001 ff9a 	bl	8003318 <HAL_GPIO_WritePin>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40020c00 	.word	0x40020c00
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40020400 	.word	0x40020400

080013f4 <led_pattern>:

void led_pattern(uint8_t led){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	switch(led) {
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b07      	cmp	r3, #7
 8001402:	f200 80a3 	bhi.w	800154c <led_pattern+0x158>
 8001406:	a201      	add	r2, pc, #4	; (adr r2, 800140c <led_pattern+0x18>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	0800142d 	.word	0x0800142d
 8001410:	08001451 	.word	0x08001451
 8001414:	08001475 	.word	0x08001475
 8001418:	08001499 	.word	0x08001499
 800141c:	080014bd 	.word	0x080014bd
 8001420:	080014e1 	.word	0x080014e1
 8001424:	08001505 	.word	0x08001505
 8001428:	08001529 	.word	0x08001529
		case 0:	//無
			LED_R_SET;
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001432:	4851      	ldr	r0, [pc, #324]	; (8001578 <led_pattern+0x184>)
 8001434:	f001 ff70 	bl	8003318 <HAL_GPIO_WritePin>
			LED_G_SET;
 8001438:	2201      	movs	r2, #1
 800143a:	2104      	movs	r1, #4
 800143c:	484e      	ldr	r0, [pc, #312]	; (8001578 <led_pattern+0x184>)
 800143e:	f001 ff6b 	bl	8003318 <HAL_GPIO_WritePin>
			LED_B_SET;
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001448:	484c      	ldr	r0, [pc, #304]	; (800157c <led_pattern+0x188>)
 800144a:	f001 ff65 	bl	8003318 <HAL_GPIO_WritePin>
			break;
 800144e:	e08f      	b.n	8001570 <led_pattern+0x17c>
		case 1:	//赤
			LED_R_RESET;
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001456:	4848      	ldr	r0, [pc, #288]	; (8001578 <led_pattern+0x184>)
 8001458:	f001 ff5e 	bl	8003318 <HAL_GPIO_WritePin>
			LED_G_SET;
 800145c:	2201      	movs	r2, #1
 800145e:	2104      	movs	r1, #4
 8001460:	4845      	ldr	r0, [pc, #276]	; (8001578 <led_pattern+0x184>)
 8001462:	f001 ff59 	bl	8003318 <HAL_GPIO_WritePin>
			LED_B_SET;
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800146c:	4843      	ldr	r0, [pc, #268]	; (800157c <led_pattern+0x188>)
 800146e:	f001 ff53 	bl	8003318 <HAL_GPIO_WritePin>
			break;
 8001472:	e07d      	b.n	8001570 <led_pattern+0x17c>
		case 2:	//緑
			LED_R_SET;
 8001474:	2201      	movs	r2, #1
 8001476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147a:	483f      	ldr	r0, [pc, #252]	; (8001578 <led_pattern+0x184>)
 800147c:	f001 ff4c 	bl	8003318 <HAL_GPIO_WritePin>
			LED_G_RESET;
 8001480:	2200      	movs	r2, #0
 8001482:	2104      	movs	r1, #4
 8001484:	483c      	ldr	r0, [pc, #240]	; (8001578 <led_pattern+0x184>)
 8001486:	f001 ff47 	bl	8003318 <HAL_GPIO_WritePin>
			LED_B_SET;
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001490:	483a      	ldr	r0, [pc, #232]	; (800157c <led_pattern+0x188>)
 8001492:	f001 ff41 	bl	8003318 <HAL_GPIO_WritePin>
			break;
 8001496:	e06b      	b.n	8001570 <led_pattern+0x17c>
		case 3:	//青
			LED_R_SET;
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800149e:	4836      	ldr	r0, [pc, #216]	; (8001578 <led_pattern+0x184>)
 80014a0:	f001 ff3a 	bl	8003318 <HAL_GPIO_WritePin>
			LED_G_SET;
 80014a4:	2201      	movs	r2, #1
 80014a6:	2104      	movs	r1, #4
 80014a8:	4833      	ldr	r0, [pc, #204]	; (8001578 <led_pattern+0x184>)
 80014aa:	f001 ff35 	bl	8003318 <HAL_GPIO_WritePin>
			LED_B_RESET;
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b4:	4831      	ldr	r0, [pc, #196]	; (800157c <led_pattern+0x188>)
 80014b6:	f001 ff2f 	bl	8003318 <HAL_GPIO_WritePin>
			break;
 80014ba:	e059      	b.n	8001570 <led_pattern+0x17c>
		case 4:	//黄
			LED_R_RESET;
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c2:	482d      	ldr	r0, [pc, #180]	; (8001578 <led_pattern+0x184>)
 80014c4:	f001 ff28 	bl	8003318 <HAL_GPIO_WritePin>
			LED_G_RESET;
 80014c8:	2200      	movs	r2, #0
 80014ca:	2104      	movs	r1, #4
 80014cc:	482a      	ldr	r0, [pc, #168]	; (8001578 <led_pattern+0x184>)
 80014ce:	f001 ff23 	bl	8003318 <HAL_GPIO_WritePin>
			LED_B_SET;
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d8:	4828      	ldr	r0, [pc, #160]	; (800157c <led_pattern+0x188>)
 80014da:	f001 ff1d 	bl	8003318 <HAL_GPIO_WritePin>
			break;
 80014de:	e047      	b.n	8001570 <led_pattern+0x17c>
		case 5:	//水
			LED_R_SET;
 80014e0:	2201      	movs	r2, #1
 80014e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e6:	4824      	ldr	r0, [pc, #144]	; (8001578 <led_pattern+0x184>)
 80014e8:	f001 ff16 	bl	8003318 <HAL_GPIO_WritePin>
			LED_G_RESET;
 80014ec:	2200      	movs	r2, #0
 80014ee:	2104      	movs	r1, #4
 80014f0:	4821      	ldr	r0, [pc, #132]	; (8001578 <led_pattern+0x184>)
 80014f2:	f001 ff11 	bl	8003318 <HAL_GPIO_WritePin>
			LED_B_RESET;
 80014f6:	2200      	movs	r2, #0
 80014f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fc:	481f      	ldr	r0, [pc, #124]	; (800157c <led_pattern+0x188>)
 80014fe:	f001 ff0b 	bl	8003318 <HAL_GPIO_WritePin>
			break;
 8001502:	e035      	b.n	8001570 <led_pattern+0x17c>
		case 6:	//紫
			LED_R_RESET;
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150a:	481b      	ldr	r0, [pc, #108]	; (8001578 <led_pattern+0x184>)
 800150c:	f001 ff04 	bl	8003318 <HAL_GPIO_WritePin>
			LED_G_SET;
 8001510:	2201      	movs	r2, #1
 8001512:	2104      	movs	r1, #4
 8001514:	4818      	ldr	r0, [pc, #96]	; (8001578 <led_pattern+0x184>)
 8001516:	f001 feff 	bl	8003318 <HAL_GPIO_WritePin>
			LED_B_RESET;
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001520:	4816      	ldr	r0, [pc, #88]	; (800157c <led_pattern+0x188>)
 8001522:	f001 fef9 	bl	8003318 <HAL_GPIO_WritePin>
			break;
 8001526:	e023      	b.n	8001570 <led_pattern+0x17c>
		case 7:	//白
			LED_R_RESET;
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152e:	4812      	ldr	r0, [pc, #72]	; (8001578 <led_pattern+0x184>)
 8001530:	f001 fef2 	bl	8003318 <HAL_GPIO_WritePin>
			LED_G_RESET;
 8001534:	2200      	movs	r2, #0
 8001536:	2104      	movs	r1, #4
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <led_pattern+0x184>)
 800153a:	f001 feed 	bl	8003318 <HAL_GPIO_WritePin>
			LED_B_RESET;
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <led_pattern+0x188>)
 8001546:	f001 fee7 	bl	8003318 <HAL_GPIO_WritePin>
			break;
 800154a:	e011      	b.n	8001570 <led_pattern+0x17c>
		default://無
			LED_R_SET;
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001552:	4809      	ldr	r0, [pc, #36]	; (8001578 <led_pattern+0x184>)
 8001554:	f001 fee0 	bl	8003318 <HAL_GPIO_WritePin>
			LED_G_SET;
 8001558:	2201      	movs	r2, #1
 800155a:	2104      	movs	r1, #4
 800155c:	4806      	ldr	r0, [pc, #24]	; (8001578 <led_pattern+0x184>)
 800155e:	f001 fedb 	bl	8003318 <HAL_GPIO_WritePin>
			LED_B_SET;
 8001562:	2201      	movs	r2, #1
 8001564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <led_pattern+0x188>)
 800156a:	f001 fed5 	bl	8003318 <HAL_GPIO_WritePin>
			break;
 800156e:	bf00      	nop
	}
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40020400 	.word	0x40020400
 800157c:	40020000 	.word	0x40020000

08001580 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <HAL_MspInit+0x4c>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_MspInit+0x4c>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a49      	ldr	r2, [pc, #292]	; (8001714 <HAL_ADC_MspInit+0x144>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	f040 808c 	bne.w	800170c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	4b47      	ldr	r3, [pc, #284]	; (8001718 <HAL_ADC_MspInit+0x148>)
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	4a46      	ldr	r2, [pc, #280]	; (8001718 <HAL_ADC_MspInit+0x148>)
 80015fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001602:	6453      	str	r3, [r2, #68]	; 0x44
 8001604:	4b44      	ldr	r3, [pc, #272]	; (8001718 <HAL_ADC_MspInit+0x148>)
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	4b40      	ldr	r3, [pc, #256]	; (8001718 <HAL_ADC_MspInit+0x148>)
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	4a3f      	ldr	r2, [pc, #252]	; (8001718 <HAL_ADC_MspInit+0x148>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6313      	str	r3, [r2, #48]	; 0x30
 8001620:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <HAL_ADC_MspInit+0x148>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	4b39      	ldr	r3, [pc, #228]	; (8001718 <HAL_ADC_MspInit+0x148>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	4a38      	ldr	r2, [pc, #224]	; (8001718 <HAL_ADC_MspInit+0x148>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6313      	str	r3, [r2, #48]	; 0x30
 800163c:	4b36      	ldr	r3, [pc, #216]	; (8001718 <HAL_ADC_MspInit+0x148>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <HAL_ADC_MspInit+0x148>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	4a31      	ldr	r2, [pc, #196]	; (8001718 <HAL_ADC_MspInit+0x148>)
 8001652:	f043 0302 	orr.w	r3, r3, #2
 8001656:	6313      	str	r3, [r2, #48]	; 0x30
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <HAL_ADC_MspInit+0x148>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001664:	23ff      	movs	r3, #255	; 0xff
 8001666:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001668:	2303      	movs	r3, #3
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4619      	mov	r1, r3
 8001676:	4829      	ldr	r0, [pc, #164]	; (800171c <HAL_ADC_MspInit+0x14c>)
 8001678:	f001 fcb4 	bl	8002fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800167c:	2330      	movs	r3, #48	; 0x30
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001680:	2303      	movs	r3, #3
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	4619      	mov	r1, r3
 800168e:	4824      	ldr	r0, [pc, #144]	; (8001720 <HAL_ADC_MspInit+0x150>)
 8001690:	f001 fca8 	bl	8002fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001694:	2303      	movs	r3, #3
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001698:	2303      	movs	r3, #3
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	4619      	mov	r1, r3
 80016a6:	481f      	ldr	r0, [pc, #124]	; (8001724 <HAL_ADC_MspInit+0x154>)
 80016a8:	f001 fc9c 	bl	8002fe4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <HAL_ADC_MspInit+0x158>)
 80016ae:	4a1f      	ldr	r2, [pc, #124]	; (800172c <HAL_ADC_MspInit+0x15c>)
 80016b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_ADC_MspInit+0x158>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_ADC_MspInit+0x158>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_ADC_MspInit+0x158>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_ADC_MspInit+0x158>)
 80016c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_ADC_MspInit+0x158>)
 80016ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_ADC_MspInit+0x158>)
 80016d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016da:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_ADC_MspInit+0x158>)
 80016de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_ADC_MspInit+0x158>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_ADC_MspInit+0x158>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <HAL_ADC_MspInit+0x158>)
 80016f2:	f001 f909 	bl	8002908 <HAL_DMA_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80016fc:	f7ff fdd0 	bl	80012a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a09      	ldr	r2, [pc, #36]	; (8001728 <HAL_ADC_MspInit+0x158>)
 8001704:	639a      	str	r2, [r3, #56]	; 0x38
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_ADC_MspInit+0x158>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3730      	adds	r7, #48	; 0x30
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40012000 	.word	0x40012000
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000
 8001720:	40020800 	.word	0x40020800
 8001724:	40020400 	.word	0x40020400
 8001728:	20000230 	.word	0x20000230
 800172c:	40026410 	.word	0x40026410

08001730 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	; 0x30
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a33      	ldr	r2, [pc, #204]	; (800181c <HAL_I2C_MspInit+0xec>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d12d      	bne.n	80017ae <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	4b32      	ldr	r3, [pc, #200]	; (8001820 <HAL_I2C_MspInit+0xf0>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a31      	ldr	r2, [pc, #196]	; (8001820 <HAL_I2C_MspInit+0xf0>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <HAL_I2C_MspInit+0xf0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800176e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001774:	2312      	movs	r3, #18
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001778:	2301      	movs	r3, #1
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001780:	2304      	movs	r3, #4
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	4826      	ldr	r0, [pc, #152]	; (8001824 <HAL_I2C_MspInit+0xf4>)
 800178c:	f001 fc2a 	bl	8002fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <HAL_I2C_MspInit+0xf0>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	4a21      	ldr	r2, [pc, #132]	; (8001820 <HAL_I2C_MspInit+0xf0>)
 800179a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800179e:	6413      	str	r3, [r2, #64]	; 0x40
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <HAL_I2C_MspInit+0xf0>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017ac:	e031      	b.n	8001812 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <HAL_I2C_MspInit+0xf8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d12c      	bne.n	8001812 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_I2C_MspInit+0xf0>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	4a17      	ldr	r2, [pc, #92]	; (8001820 <HAL_I2C_MspInit+0xf0>)
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	6313      	str	r3, [r2, #48]	; 0x30
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_I2C_MspInit+0xf0>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017da:	2312      	movs	r3, #18
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017de:	2301      	movs	r3, #1
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017e6:	2304      	movs	r3, #4
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <HAL_I2C_MspInit+0xf4>)
 80017f2:	f001 fbf7 	bl	8002fe4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_I2C_MspInit+0xf0>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_I2C_MspInit+0xf0>)
 8001800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_I2C_MspInit+0xf0>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
}
 8001812:	bf00      	nop
 8001814:	3730      	adds	r7, #48	; 0x30
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40005400 	.word	0x40005400
 8001820:	40023800 	.word	0x40023800
 8001824:	40020400 	.word	0x40020400
 8001828:	40005800 	.word	0x40005800

0800182c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <HAL_SPI_MspInit+0x84>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d12c      	bne.n	80018a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_SPI_MspInit+0x88>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <HAL_SPI_MspInit+0x88>)
 8001858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_SPI_MspInit+0x88>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_SPI_MspInit+0x88>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <HAL_SPI_MspInit+0x88>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_SPI_MspInit+0x88>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001886:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001898:	2306      	movs	r3, #6
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_SPI_MspInit+0x8c>)
 80018a4:	f001 fb9e 	bl	8002fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	; 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40003c00 	.word	0x40003c00
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020800 	.word	0x40020800

080018bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	; 0x30
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a32      	ldr	r2, [pc, #200]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d12d      	bne.n	800193a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001916:	f44f 7340 	mov.w	r3, #768	; 0x300
 800191a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001928:	2301      	movs	r3, #1
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	4619      	mov	r1, r3
 8001932:	481e      	ldr	r0, [pc, #120]	; (80019ac <HAL_TIM_Encoder_MspInit+0xf0>)
 8001934:	f001 fb56 	bl	8002fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001938:	e030      	b.n	800199c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM8)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a1c      	ldr	r2, [pc, #112]	; (80019b0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d12b      	bne.n	800199c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	6453      	str	r3, [r2, #68]	; 0x44
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6313      	str	r3, [r2, #48]	; 0x30
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800197c:	23c0      	movs	r3, #192	; 0xc0
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800198c:	2303      	movs	r3, #3
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	4619      	mov	r1, r3
 8001996:	4807      	ldr	r0, [pc, #28]	; (80019b4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001998:	f001 fb24 	bl	8002fe4 <HAL_GPIO_Init>
}
 800199c:	bf00      	nop
 800199e:	3730      	adds	r7, #48	; 0x30
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40010000 	.word	0x40010000
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40010400 	.word	0x40010400
 80019b4:	40020800 	.word	0x40020800

080019b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c8:	d10e      	bne.n	80019e8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_TIM_PWM_MspInit+0x8c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_TIM_PWM_MspInit+0x8c>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_TIM_PWM_MspInit+0x8c>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80019e6:	e026      	b.n	8001a36 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <HAL_TIM_PWM_MspInit+0x90>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10e      	bne.n	8001a10 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_TIM_PWM_MspInit+0x8c>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <HAL_TIM_PWM_MspInit+0x8c>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
}
 8001a0e:	e012      	b.n	8001a36 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <HAL_TIM_PWM_MspInit+0x94>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10d      	bne.n	8001a36 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
}
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40000400 	.word	0x40000400
 8001a4c:	40001800 	.word	0x40001800

08001a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <HAL_TIM_Base_MspInit+0x80>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d116      	bne.n	8001a90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_TIM_Base_MspInit+0x84>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <HAL_TIM_Base_MspInit+0x84>)
 8001a6c:	f043 0310 	orr.w	r3, r3, #16
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_TIM_Base_MspInit+0x84>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	2036      	movs	r0, #54	; 0x36
 8001a84:	f000 ff09 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a88:	2036      	movs	r0, #54	; 0x36
 8001a8a:	f000 ff22 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001a8e:	e01a      	b.n	8001ac6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_TIM_Base_MspInit+0x88>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d115      	bne.n	8001ac6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_TIM_Base_MspInit+0x84>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <HAL_TIM_Base_MspInit+0x84>)
 8001aa4:	f043 0320 	orr.w	r3, r3, #32
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_TIM_Base_MspInit+0x84>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 0320 	and.w	r3, r3, #32
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2037      	movs	r0, #55	; 0x37
 8001abc:	f000 feed 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ac0:	2037      	movs	r0, #55	; 0x37
 8001ac2:	f000 ff06 	bl	80028d2 <HAL_NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40001000 	.word	0x40001000
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40001400 	.word	0x40001400

08001adc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	; 0x30
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afc:	d11f      	bne.n	8001b3e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <HAL_TIM_MspPostInit+0x138>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a43      	ldr	r2, [pc, #268]	; (8001c14 <HAL_TIM_MspPostInit+0x138>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <HAL_TIM_MspPostInit+0x138>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 031c 	add.w	r3, r7, #28
 8001b34:	4619      	mov	r1, r3
 8001b36:	4838      	ldr	r0, [pc, #224]	; (8001c18 <HAL_TIM_MspPostInit+0x13c>)
 8001b38:	f001 fa54 	bl	8002fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001b3c:	e066      	b.n	8001c0c <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM3)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a36      	ldr	r2, [pc, #216]	; (8001c1c <HAL_TIM_MspPostInit+0x140>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d13d      	bne.n	8001bc4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <HAL_TIM_MspPostInit+0x138>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	4a30      	ldr	r2, [pc, #192]	; (8001c14 <HAL_TIM_MspPostInit+0x138>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	6313      	str	r3, [r2, #48]	; 0x30
 8001b58:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <HAL_TIM_MspPostInit+0x138>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <HAL_TIM_MspPostInit+0x138>)
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6c:	4a29      	ldr	r2, [pc, #164]	; (8001c14 <HAL_TIM_MspPostInit+0x138>)
 8001b6e:	f043 0302 	orr.w	r3, r3, #2
 8001b72:	6313      	str	r3, [r2, #48]	; 0x30
 8001b74:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <HAL_TIM_MspPostInit+0x138>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b92:	2302      	movs	r3, #2
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4820      	ldr	r0, [pc, #128]	; (8001c20 <HAL_TIM_MspPostInit+0x144>)
 8001b9e:	f001 fa21 	bl	8002fe4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ba2:	2330      	movs	r3, #48	; 0x30
 8001ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4819      	ldr	r0, [pc, #100]	; (8001c24 <HAL_TIM_MspPostInit+0x148>)
 8001bbe:	f001 fa11 	bl	8002fe4 <HAL_GPIO_Init>
}
 8001bc2:	e023      	b.n	8001c0c <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM12)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <HAL_TIM_MspPostInit+0x14c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d11e      	bne.n	8001c0c <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_TIM_MspPostInit+0x138>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a0f      	ldr	r2, [pc, #60]	; (8001c14 <HAL_TIM_MspPostInit+0x138>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_TIM_MspPostInit+0x138>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001bea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001bfc:	2309      	movs	r3, #9
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	4807      	ldr	r0, [pc, #28]	; (8001c24 <HAL_TIM_MspPostInit+0x148>)
 8001c08:	f001 f9ec 	bl	8002fe4 <HAL_GPIO_Init>
}
 8001c0c:	bf00      	nop
 8001c0e:	3730      	adds	r7, #48	; 0x30
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40000400 	.word	0x40000400
 8001c20:	40020800 	.word	0x40020800
 8001c24:	40020400 	.word	0x40020400
 8001c28:	40001800 	.word	0x40001800

08001c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_UART_MspInit+0x84>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d12b      	bne.n	8001ca6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_UART_MspInit+0x88>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <HAL_UART_MspInit+0x88>)
 8001c58:	f043 0310 	orr.w	r3, r3, #16
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_UART_MspInit+0x88>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_UART_MspInit+0x88>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <HAL_UART_MspInit+0x88>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_UART_MspInit+0x88>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c86:	23c0      	movs	r3, #192	; 0xc0
 8001c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c92:	2303      	movs	r3, #3
 8001c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c96:	2307      	movs	r3, #7
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <HAL_UART_MspInit+0x8c>)
 8001ca2:	f001 f99f 	bl	8002fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3728      	adds	r7, #40	; 0x28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40011000 	.word	0x40011000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020400 	.word	0x40020400

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cce:	e7fe      	b.n	8001cce <HardFault_Handler+0x4>

08001cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <MemManage_Handler+0x4>

08001cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cda:	e7fe      	b.n	8001cda <BusFault_Handler+0x4>

08001cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <UsageFault_Handler+0x4>

08001ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d10:	f000 f8b2 	bl	8001e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <TIM6_DAC_IRQHandler+0x10>)
 8001d1e:	f003 fa66 	bl	80051ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000290 	.word	0x20000290

08001d2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <TIM7_IRQHandler+0x10>)
 8001d32:	f003 fa5c 	bl	80051ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000390 	.word	0x20000390

08001d40 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <DMA2_Stream0_IRQHandler+0x10>)
 8001d46:	f000 fee5 	bl	8002b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000230 	.word	0x20000230

08001d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <SystemInit+0x28>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5e:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <SystemInit+0x28>)
 8001d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <SystemInit+0x28>)
 8001d6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d6e:	609a      	str	r2, [r3, #8]
#endif
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d86:	e003      	b.n	8001d90 <LoopCopyDataInit>

08001d88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d8e:	3104      	adds	r1, #4

08001d90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d90:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d98:	d3f6      	bcc.n	8001d88 <CopyDataInit>
  ldr  r2, =_sbss
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d9c:	e002      	b.n	8001da4 <LoopFillZerobss>

08001d9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001da0:	f842 3b04 	str.w	r3, [r2], #4

08001da4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001da6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001da8:	d3f9      	bcc.n	8001d9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001daa:	f7ff ffd3 	bl	8001d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dae:	f004 fae5 	bl	800637c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001db2:	f7fe fce9 	bl	8000788 <main>
  bx  lr    
 8001db6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001db8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dbc:	08006430 	.word	0x08006430
  ldr  r0, =_sdata
 8001dc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dc4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001dc8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001dcc:	20000404 	.word	0x20000404

08001dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd0:	e7fe      	b.n	8001dd0 <ADC_IRQHandler>
	...

08001dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_Init+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <HAL_Init+0x40>)
 8001dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_Init+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_Init+0x40>)
 8001dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <HAL_Init+0x40>)
 8001df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	f000 fd41 	bl	8002884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f000 f808 	bl	8001e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e08:	f7ff fbba 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023c00 	.word	0x40023c00

08001e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_InitTick+0x54>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_InitTick+0x58>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fd59 	bl	80028ee <HAL_SYSTICK_Config>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00e      	b.n	8001e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b0f      	cmp	r3, #15
 8001e4a:	d80a      	bhi.n	8001e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f000 fd21 	bl	800289a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e58:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <HAL_InitTick+0x5c>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e000      	b.n	8001e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000008 	.word	0x20000008
 8001e74:	20000004 	.word	0x20000004

08001e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_IncTick+0x20>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_IncTick+0x24>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_IncTick+0x24>)
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	20000400 	.word	0x20000400

08001ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_GetTick+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000400 	.word	0x20000400

08001eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec0:	f7ff ffee 	bl	8001ea0 <HAL_GetTick>
 8001ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d005      	beq.n	8001ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_Delay+0x40>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ede:	bf00      	nop
 8001ee0:	f7ff ffde 	bl	8001ea0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d8f7      	bhi.n	8001ee0 <HAL_Delay+0x28>
  {
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000008 	.word	0x20000008

08001efc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e033      	b.n	8001f7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff fb58 	bl	80015d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d118      	bne.n	8001f6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f42:	f023 0302 	bic.w	r3, r3, #2
 8001f46:	f043 0202 	orr.w	r2, r3, #2
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fa4a 	bl	80023e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
 8001f6a:	e001      	b.n	8001f70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ADC_Start_DMA+0x1e>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e0cc      	b.n	800213c <HAL_ADC_Start_DMA+0x1b8>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d018      	beq.n	8001fea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc8:	4b5e      	ldr	r3, [pc, #376]	; (8002144 <HAL_ADC_Start_DMA+0x1c0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a5e      	ldr	r2, [pc, #376]	; (8002148 <HAL_ADC_Start_DMA+0x1c4>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0c9a      	lsrs	r2, r3, #18
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001fdc:	e002      	b.n	8001fe4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f9      	bne.n	8001fde <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	f040 80a0 	bne.w	800213a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002024:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002038:	d106      	bne.n	8002048 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f023 0206 	bic.w	r2, r3, #6
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
 8002046:	e002      	b.n	800204e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002056:	4b3d      	ldr	r3, [pc, #244]	; (800214c <HAL_ADC_Start_DMA+0x1c8>)
 8002058:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	4a3c      	ldr	r2, [pc, #240]	; (8002150 <HAL_ADC_Start_DMA+0x1cc>)
 8002060:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002066:	4a3b      	ldr	r2, [pc, #236]	; (8002154 <HAL_ADC_Start_DMA+0x1d0>)
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206e:	4a3a      	ldr	r2, [pc, #232]	; (8002158 <HAL_ADC_Start_DMA+0x1d4>)
 8002070:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800207a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800208a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800209a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	334c      	adds	r3, #76	; 0x4c
 80020a6:	4619      	mov	r1, r3
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f000 fcda 	bl	8002a64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d12a      	bne.n	8002112 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a26      	ldr	r2, [pc, #152]	; (800215c <HAL_ADC_Start_DMA+0x1d8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d015      	beq.n	80020f2 <HAL_ADC_Start_DMA+0x16e>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a25      	ldr	r2, [pc, #148]	; (8002160 <HAL_ADC_Start_DMA+0x1dc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d105      	bne.n	80020dc <HAL_ADC_Start_DMA+0x158>
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <HAL_ADC_Start_DMA+0x1c8>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a20      	ldr	r2, [pc, #128]	; (8002164 <HAL_ADC_Start_DMA+0x1e0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d129      	bne.n	800213a <HAL_ADC_Start_DMA+0x1b6>
 80020e6:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_ADC_Start_DMA+0x1c8>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2b0f      	cmp	r3, #15
 80020f0:	d823      	bhi.n	800213a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d11c      	bne.n	800213a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	e013      	b.n	800213a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a11      	ldr	r2, [pc, #68]	; (800215c <HAL_ADC_Start_DMA+0x1d8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d10e      	bne.n	800213a <HAL_ADC_Start_DMA+0x1b6>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d107      	bne.n	800213a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002138:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000000 	.word	0x20000000
 8002148:	431bde83 	.word	0x431bde83
 800214c:	40012300 	.word	0x40012300
 8002150:	080025e1 	.word	0x080025e1
 8002154:	0800269b 	.word	0x0800269b
 8002158:	080026b7 	.word	0x080026b7
 800215c:	40012000 	.word	0x40012000
 8002160:	40012100 	.word	0x40012100
 8002164:	40012200 	.word	0x40012200

08002168 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x1c>
 80021bc:	2302      	movs	r3, #2
 80021be:	e105      	b.n	80023cc <HAL_ADC_ConfigChannel+0x228>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b09      	cmp	r3, #9
 80021ce:	d925      	bls.n	800221c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68d9      	ldr	r1, [r3, #12]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	3b1e      	subs	r3, #30
 80021e6:	2207      	movs	r2, #7
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43da      	mvns	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	400a      	ands	r2, r1
 80021f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68d9      	ldr	r1, [r3, #12]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	4618      	mov	r0, r3
 8002208:	4603      	mov	r3, r0
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4403      	add	r3, r0
 800220e:	3b1e      	subs	r3, #30
 8002210:	409a      	lsls	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	e022      	b.n	8002262 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6919      	ldr	r1, [r3, #16]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	2207      	movs	r2, #7
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	400a      	ands	r2, r1
 800223e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6919      	ldr	r1, [r3, #16]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	4618      	mov	r0, r3
 8002252:	4603      	mov	r3, r0
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4403      	add	r3, r0
 8002258:	409a      	lsls	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b06      	cmp	r3, #6
 8002268:	d824      	bhi.n	80022b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b05      	subs	r3, #5
 800227c:	221f      	movs	r2, #31
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	400a      	ands	r2, r1
 800228a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	4618      	mov	r0, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	3b05      	subs	r3, #5
 80022a6:	fa00 f203 	lsl.w	r2, r0, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	635a      	str	r2, [r3, #52]	; 0x34
 80022b2:	e04c      	b.n	800234e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b0c      	cmp	r3, #12
 80022ba:	d824      	bhi.n	8002306 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	3b23      	subs	r3, #35	; 0x23
 80022ce:	221f      	movs	r2, #31
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43da      	mvns	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	400a      	ands	r2, r1
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	3b23      	subs	r3, #35	; 0x23
 80022f8:	fa00 f203 	lsl.w	r2, r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
 8002304:	e023      	b.n	800234e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	3b41      	subs	r3, #65	; 0x41
 8002318:	221f      	movs	r2, #31
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43da      	mvns	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	400a      	ands	r2, r1
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	3b41      	subs	r3, #65	; 0x41
 8002342:	fa00 f203 	lsl.w	r2, r0, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800234e:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_ADC_ConfigChannel+0x234>)
 8002350:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a21      	ldr	r2, [pc, #132]	; (80023dc <HAL_ADC_ConfigChannel+0x238>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d109      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1cc>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b12      	cmp	r3, #18
 8002362:	d105      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a19      	ldr	r2, [pc, #100]	; (80023dc <HAL_ADC_ConfigChannel+0x238>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d123      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x21e>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b10      	cmp	r3, #16
 8002380:	d003      	beq.n	800238a <HAL_ADC_ConfigChannel+0x1e6>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b11      	cmp	r3, #17
 8002388:	d11b      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b10      	cmp	r3, #16
 800239c:	d111      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_ADC_ConfigChannel+0x23c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <HAL_ADC_ConfigChannel+0x240>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	0c9a      	lsrs	r2, r3, #18
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023b4:	e002      	b.n	80023bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f9      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	40012300 	.word	0x40012300
 80023dc:	40012000 	.word	0x40012000
 80023e0:	20000000 	.word	0x20000000
 80023e4:	431bde83 	.word	0x431bde83

080023e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f0:	4b79      	ldr	r3, [pc, #484]	; (80025d8 <ADC_Init+0x1f0>)
 80023f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	431a      	orrs	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800241c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	021a      	lsls	r2, r3, #8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002440:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002462:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6899      	ldr	r1, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	4a58      	ldr	r2, [pc, #352]	; (80025dc <ADC_Init+0x1f4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d022      	beq.n	80024c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800248e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6899      	ldr	r1, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6899      	ldr	r1, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	e00f      	b.n	80024e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0202 	bic.w	r2, r2, #2
 80024f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6899      	ldr	r1, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7e1b      	ldrb	r3, [r3, #24]
 8002500:	005a      	lsls	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01b      	beq.n	800254c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002522:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002532:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6859      	ldr	r1, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	3b01      	subs	r3, #1
 8002540:	035a      	lsls	r2, r3, #13
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	e007      	b.n	800255c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800255a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	3b01      	subs	r3, #1
 8002578:	051a      	lsls	r2, r3, #20
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002590:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6899      	ldr	r1, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800259e:	025a      	lsls	r2, r3, #9
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6899      	ldr	r1, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	029a      	lsls	r2, r3, #10
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	609a      	str	r2, [r3, #8]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40012300 	.word	0x40012300
 80025dc:	0f000001 	.word	0x0f000001

080025e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d13c      	bne.n	8002674 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d12b      	bne.n	800266c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002618:	2b00      	cmp	r3, #0
 800261a:	d127      	bne.n	800266c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002634:	2b00      	cmp	r3, #0
 8002636:	d119      	bne.n	800266c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0220 	bic.w	r2, r2, #32
 8002646:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f043 0201 	orr.w	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f7ff fd7b 	bl	8002168 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002672:	e00e      	b.n	8002692 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f7ff fd85 	bl	8002190 <HAL_ADC_ErrorCallback>
}
 8002686:	e004      	b.n	8002692 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	4798      	blx	r3
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f7ff fd67 	bl	800217c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2240      	movs	r2, #64	; 0x40
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f043 0204 	orr.w	r2, r3, #4
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f7ff fd5a 	bl	8002190 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026dc:	bf00      	nop
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	db0b      	blt.n	8002772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4907      	ldr	r1, [pc, #28]	; (8002780 <__NVIC_EnableIRQ+0x38>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2001      	movs	r0, #1
 800276a:	fa00 f202 	lsl.w	r2, r0, r2
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100

08002784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	2b00      	cmp	r3, #0
 8002796:	db0a      	blt.n	80027ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	b2da      	uxtb	r2, r3
 800279c:	490c      	ldr	r1, [pc, #48]	; (80027d0 <__NVIC_SetPriority+0x4c>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	0112      	lsls	r2, r2, #4
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	440b      	add	r3, r1
 80027a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ac:	e00a      	b.n	80027c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4908      	ldr	r1, [pc, #32]	; (80027d4 <__NVIC_SetPriority+0x50>)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	3b04      	subs	r3, #4
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	440b      	add	r3, r1
 80027c2:	761a      	strb	r2, [r3, #24]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000e100 	.word	0xe000e100
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	; 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f1c3 0307 	rsb	r3, r3, #7
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	bf28      	it	cs
 80027f6:	2304      	movcs	r3, #4
 80027f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d902      	bls.n	8002808 <NVIC_EncodePriority+0x30>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3b03      	subs	r3, #3
 8002806:	e000      	b.n	800280a <NVIC_EncodePriority+0x32>
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	f04f 32ff 	mov.w	r2, #4294967295
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43da      	mvns	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	401a      	ands	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	43d9      	mvns	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	4313      	orrs	r3, r2
         );
}
 8002832:	4618      	mov	r0, r3
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002850:	d301      	bcc.n	8002856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002852:	2301      	movs	r3, #1
 8002854:	e00f      	b.n	8002876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <SysTick_Config+0x40>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285e:	210f      	movs	r1, #15
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	f7ff ff8e 	bl	8002784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <SysTick_Config+0x40>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <SysTick_Config+0x40>)
 8002870:	2207      	movs	r2, #7
 8002872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	e000e010 	.word	0xe000e010

08002884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff29 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ac:	f7ff ff3e 	bl	800272c <__NVIC_GetPriorityGrouping>
 80028b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	6978      	ldr	r0, [r7, #20]
 80028b8:	f7ff ff8e 	bl	80027d8 <NVIC_EncodePriority>
 80028bc:	4602      	mov	r2, r0
 80028be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff5d 	bl	8002784 <__NVIC_SetPriority>
}
 80028ca:	bf00      	nop
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff31 	bl	8002748 <__NVIC_EnableIRQ>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ffa2 	bl	8002840 <SysTick_Config>
 80028fc:	4603      	mov	r3, r0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002914:	f7ff fac4 	bl	8001ea0 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e099      	b.n	8002a58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002944:	e00f      	b.n	8002966 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002946:	f7ff faab 	bl	8001ea0 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b05      	cmp	r3, #5
 8002952:	d908      	bls.n	8002966 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2203      	movs	r2, #3
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e078      	b.n	8002a58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e8      	bne.n	8002946 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4b38      	ldr	r3, [pc, #224]	; (8002a60 <HAL_DMA_Init+0x158>)
 8002980:	4013      	ands	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002992:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d107      	bne.n	80029d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	4313      	orrs	r3, r2
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f023 0307 	bic.w	r3, r3, #7
 80029e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d117      	bne.n	8002a2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00e      	beq.n	8002a2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fa6f 	bl	8002ef0 <DMA_CheckFifoParam>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2240      	movs	r2, #64	; 0x40
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a26:	2301      	movs	r3, #1
 8002a28:	e016      	b.n	8002a58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 fa26 	bl	8002e84 <DMA_CalcBaseAndBitshift>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	223f      	movs	r2, #63	; 0x3f
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	f010803f 	.word	0xf010803f

08002a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_DMA_Start_IT+0x26>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e040      	b.n	8002b0c <HAL_DMA_Start_IT+0xa8>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d12f      	bne.n	8002afe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f9b8 	bl	8002e28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	223f      	movs	r2, #63	; 0x3f
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0216 	orr.w	r2, r2, #22
 8002ad2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0208 	orr.w	r2, r2, #8
 8002aea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e005      	b.n	8002b0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
 8002b08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b20:	4b92      	ldr	r3, [pc, #584]	; (8002d6c <HAL_DMA_IRQHandler+0x258>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a92      	ldr	r2, [pc, #584]	; (8002d70 <HAL_DMA_IRQHandler+0x25c>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	0a9b      	lsrs	r3, r3, #10
 8002b2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	2208      	movs	r2, #8
 8002b40:	409a      	lsls	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d01a      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0204 	bic.w	r2, r2, #4
 8002b66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	f043 0201 	orr.w	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	2201      	movs	r2, #1
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d012      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	f043 0202 	orr.w	r2, r3, #2
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bba:	2204      	movs	r2, #4
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d012      	beq.n	8002bec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00b      	beq.n	8002bec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	2204      	movs	r2, #4
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	f043 0204 	orr.w	r2, r3, #4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d043      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d03c      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	2210      	movs	r2, #16
 8002c10:	409a      	lsls	r2, r3
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d018      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d108      	bne.n	8002c44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d024      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
 8002c42:	e01f      	b.n	8002c84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01b      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4798      	blx	r3
 8002c54:	e016      	b.n	8002c84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d107      	bne.n	8002c74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0208 	bic.w	r2, r2, #8
 8002c72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	2220      	movs	r2, #32
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 808e 	beq.w	8002db2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8086 	beq.w	8002db2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002caa:	2220      	movs	r2, #32
 8002cac:	409a      	lsls	r2, r3
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d136      	bne.n	8002d2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0216 	bic.w	r2, r2, #22
 8002ccc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <HAL_DMA_IRQHandler+0x1da>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d007      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0208 	bic.w	r2, r2, #8
 8002cfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d02:	223f      	movs	r2, #63	; 0x3f
 8002d04:	409a      	lsls	r2, r3
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d07d      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	4798      	blx	r3
        }
        return;
 8002d2a:	e078      	b.n	8002e1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d01c      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d108      	bne.n	8002d5a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d030      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	4798      	blx	r3
 8002d58:	e02b      	b.n	8002db2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d027      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4798      	blx	r3
 8002d6a:	e022      	b.n	8002db2 <HAL_DMA_IRQHandler+0x29e>
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10f      	bne.n	8002da2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0210 	bic.w	r2, r2, #16
 8002d90:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d032      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d022      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2205      	movs	r2, #5
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	3301      	adds	r3, #1
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d307      	bcc.n	8002dfa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f2      	bne.n	8002dde <HAL_DMA_IRQHandler+0x2ca>
 8002df8:	e000      	b.n	8002dfc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002dfa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
 8002e1c:	e000      	b.n	8002e20 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e1e:	bf00      	nop
    }
  }
}
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop

08002e28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d108      	bne.n	8002e68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e66:	e007      	b.n	8002e78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	60da      	str	r2, [r3, #12]
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	3b10      	subs	r3, #16
 8002e94:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <DMA_CalcBaseAndBitshift+0x64>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e9e:	4a13      	ldr	r2, [pc, #76]	; (8002eec <DMA_CalcBaseAndBitshift+0x68>)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d909      	bls.n	8002ec6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	1d1a      	adds	r2, r3, #4
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ec4:	e007      	b.n	8002ed6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ece:	f023 0303 	bic.w	r3, r3, #3
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	aaaaaaab 	.word	0xaaaaaaab
 8002eec:	08006418 	.word	0x08006418

08002ef0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d11f      	bne.n	8002f4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d855      	bhi.n	8002fbc <DMA_CheckFifoParam+0xcc>
 8002f10:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <DMA_CheckFifoParam+0x28>)
 8002f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f16:	bf00      	nop
 8002f18:	08002f29 	.word	0x08002f29
 8002f1c:	08002f3b 	.word	0x08002f3b
 8002f20:	08002f29 	.word	0x08002f29
 8002f24:	08002fbd 	.word	0x08002fbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d045      	beq.n	8002fc0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f38:	e042      	b.n	8002fc0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f42:	d13f      	bne.n	8002fc4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f48:	e03c      	b.n	8002fc4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f52:	d121      	bne.n	8002f98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d836      	bhi.n	8002fc8 <DMA_CheckFifoParam+0xd8>
 8002f5a:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <DMA_CheckFifoParam+0x70>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08002f71 	.word	0x08002f71
 8002f64:	08002f77 	.word	0x08002f77
 8002f68:	08002f71 	.word	0x08002f71
 8002f6c:	08002f89 	.word	0x08002f89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
      break;
 8002f74:	e02f      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d024      	beq.n	8002fcc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f86:	e021      	b.n	8002fcc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f90:	d11e      	bne.n	8002fd0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f96:	e01b      	b.n	8002fd0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d902      	bls.n	8002fa4 <DMA_CheckFifoParam+0xb4>
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d003      	beq.n	8002faa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fa2:	e018      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa8:	e015      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00e      	beq.n	8002fd4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8002fba:	e00b      	b.n	8002fd4 <DMA_CheckFifoParam+0xe4>
      break;
 8002fbc:	bf00      	nop
 8002fbe:	e00a      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fc0:	bf00      	nop
 8002fc2:	e008      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fc4:	bf00      	nop
 8002fc6:	e006      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fc8:	bf00      	nop
 8002fca:	e004      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fcc:	bf00      	nop
 8002fce:	e002      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      break;   
 8002fd0:	bf00      	nop
 8002fd2:	e000      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fd4:	bf00      	nop
    }
  } 
  
  return status; 
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	; 0x24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	e16b      	b.n	80032d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003000:	2201      	movs	r2, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	429a      	cmp	r2, r3
 800301a:	f040 815a 	bne.w	80032d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d00b      	beq.n	800303e <HAL_GPIO_Init+0x5a>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d007      	beq.n	800303e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003032:	2b11      	cmp	r3, #17
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b12      	cmp	r3, #18
 800303c:	d130      	bne.n	80030a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	2203      	movs	r2, #3
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003074:	2201      	movs	r2, #1
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 0201 	and.w	r2, r3, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d003      	beq.n	80030e0 <HAL_GPIO_Init+0xfc>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b12      	cmp	r3, #18
 80030de:	d123      	bne.n	8003128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	08da      	lsrs	r2, r3, #3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3208      	adds	r2, #8
 80030e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	220f      	movs	r2, #15
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	08da      	lsrs	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3208      	adds	r2, #8
 8003122:	69b9      	ldr	r1, [r7, #24]
 8003124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0203 	and.w	r2, r3, #3
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80b4 	beq.w	80032d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	4b5f      	ldr	r3, [pc, #380]	; (80032ec <HAL_GPIO_Init+0x308>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	4a5e      	ldr	r2, [pc, #376]	; (80032ec <HAL_GPIO_Init+0x308>)
 8003174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003178:	6453      	str	r3, [r2, #68]	; 0x44
 800317a:	4b5c      	ldr	r3, [pc, #368]	; (80032ec <HAL_GPIO_Init+0x308>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003186:	4a5a      	ldr	r2, [pc, #360]	; (80032f0 <HAL_GPIO_Init+0x30c>)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	3302      	adds	r3, #2
 800318e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	220f      	movs	r2, #15
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a51      	ldr	r2, [pc, #324]	; (80032f4 <HAL_GPIO_Init+0x310>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d02b      	beq.n	800320a <HAL_GPIO_Init+0x226>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a50      	ldr	r2, [pc, #320]	; (80032f8 <HAL_GPIO_Init+0x314>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d025      	beq.n	8003206 <HAL_GPIO_Init+0x222>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4f      	ldr	r2, [pc, #316]	; (80032fc <HAL_GPIO_Init+0x318>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01f      	beq.n	8003202 <HAL_GPIO_Init+0x21e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4e      	ldr	r2, [pc, #312]	; (8003300 <HAL_GPIO_Init+0x31c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d019      	beq.n	80031fe <HAL_GPIO_Init+0x21a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4d      	ldr	r2, [pc, #308]	; (8003304 <HAL_GPIO_Init+0x320>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_GPIO_Init+0x216>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4c      	ldr	r2, [pc, #304]	; (8003308 <HAL_GPIO_Init+0x324>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00d      	beq.n	80031f6 <HAL_GPIO_Init+0x212>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4b      	ldr	r2, [pc, #300]	; (800330c <HAL_GPIO_Init+0x328>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <HAL_GPIO_Init+0x20e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <HAL_GPIO_Init+0x32c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_GPIO_Init+0x20a>
 80031ea:	2307      	movs	r3, #7
 80031ec:	e00e      	b.n	800320c <HAL_GPIO_Init+0x228>
 80031ee:	2308      	movs	r3, #8
 80031f0:	e00c      	b.n	800320c <HAL_GPIO_Init+0x228>
 80031f2:	2306      	movs	r3, #6
 80031f4:	e00a      	b.n	800320c <HAL_GPIO_Init+0x228>
 80031f6:	2305      	movs	r3, #5
 80031f8:	e008      	b.n	800320c <HAL_GPIO_Init+0x228>
 80031fa:	2304      	movs	r3, #4
 80031fc:	e006      	b.n	800320c <HAL_GPIO_Init+0x228>
 80031fe:	2303      	movs	r3, #3
 8003200:	e004      	b.n	800320c <HAL_GPIO_Init+0x228>
 8003202:	2302      	movs	r3, #2
 8003204:	e002      	b.n	800320c <HAL_GPIO_Init+0x228>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_GPIO_Init+0x228>
 800320a:	2300      	movs	r3, #0
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	f002 0203 	and.w	r2, r2, #3
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	4093      	lsls	r3, r2
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800321c:	4934      	ldr	r1, [pc, #208]	; (80032f0 <HAL_GPIO_Init+0x30c>)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800322a:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <HAL_GPIO_Init+0x330>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800324e:	4a31      	ldr	r2, [pc, #196]	; (8003314 <HAL_GPIO_Init+0x330>)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003254:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <HAL_GPIO_Init+0x330>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <HAL_GPIO_Init+0x330>)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800327e:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_GPIO_Init+0x330>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032a2:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <HAL_GPIO_Init+0x330>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_GPIO_Init+0x330>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032cc:	4a11      	ldr	r2, [pc, #68]	; (8003314 <HAL_GPIO_Init+0x330>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3301      	adds	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	f67f ae90 	bls.w	8003000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	3724      	adds	r7, #36	; 0x24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40013800 	.word	0x40013800
 80032f4:	40020000 	.word	0x40020000
 80032f8:	40020400 	.word	0x40020400
 80032fc:	40020800 	.word	0x40020800
 8003300:	40020c00 	.word	0x40020c00
 8003304:	40021000 	.word	0x40021000
 8003308:	40021400 	.word	0x40021400
 800330c:	40021800 	.word	0x40021800
 8003310:	40021c00 	.word	0x40021c00
 8003314:	40013c00 	.word	0x40013c00

08003318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
 8003324:	4613      	mov	r3, r2
 8003326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003328:	787b      	ldrb	r3, [r7, #1]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332e:	887a      	ldrh	r2, [r7, #2]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003334:	e003      	b.n	800333e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003336:	887b      	ldrh	r3, [r7, #2]
 8003338:	041a      	lsls	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	619a      	str	r2, [r3, #24]
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e11f      	b.n	800359e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe f9dc 	bl	8001730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2224      	movs	r2, #36	; 0x24
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0201 	bic.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800339e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033b0:	f001 f820 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
 80033b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a7b      	ldr	r2, [pc, #492]	; (80035a8 <HAL_I2C_Init+0x25c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d807      	bhi.n	80033d0 <HAL_I2C_Init+0x84>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4a7a      	ldr	r2, [pc, #488]	; (80035ac <HAL_I2C_Init+0x260>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	bf94      	ite	ls
 80033c8:	2301      	movls	r3, #1
 80033ca:	2300      	movhi	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e006      	b.n	80033de <HAL_I2C_Init+0x92>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a77      	ldr	r2, [pc, #476]	; (80035b0 <HAL_I2C_Init+0x264>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	bf94      	ite	ls
 80033d8:	2301      	movls	r3, #1
 80033da:	2300      	movhi	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e0db      	b.n	800359e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a72      	ldr	r2, [pc, #456]	; (80035b4 <HAL_I2C_Init+0x268>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0c9b      	lsrs	r3, r3, #18
 80033f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a64      	ldr	r2, [pc, #400]	; (80035a8 <HAL_I2C_Init+0x25c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d802      	bhi.n	8003420 <HAL_I2C_Init+0xd4>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	3301      	adds	r3, #1
 800341e:	e009      	b.n	8003434 <HAL_I2C_Init+0xe8>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	4a63      	ldr	r2, [pc, #396]	; (80035b8 <HAL_I2C_Init+0x26c>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	3301      	adds	r3, #1
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	430b      	orrs	r3, r1
 800343a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003446:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4956      	ldr	r1, [pc, #344]	; (80035a8 <HAL_I2C_Init+0x25c>)
 8003450:	428b      	cmp	r3, r1
 8003452:	d80d      	bhi.n	8003470 <HAL_I2C_Init+0x124>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1e59      	subs	r1, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003462:	3301      	adds	r3, #1
 8003464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003468:	2b04      	cmp	r3, #4
 800346a:	bf38      	it	cc
 800346c:	2304      	movcc	r3, #4
 800346e:	e04f      	b.n	8003510 <HAL_I2C_Init+0x1c4>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d111      	bne.n	800349c <HAL_I2C_Init+0x150>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1e58      	subs	r0, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	440b      	add	r3, r1
 8003486:	fbb0 f3f3 	udiv	r3, r0, r3
 800348a:	3301      	adds	r3, #1
 800348c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	e012      	b.n	80034c2 <HAL_I2C_Init+0x176>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e58      	subs	r0, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	0099      	lsls	r1, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b2:	3301      	adds	r3, #1
 80034b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Init+0x17e>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e022      	b.n	8003510 <HAL_I2C_Init+0x1c4>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10e      	bne.n	80034f0 <HAL_I2C_Init+0x1a4>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1e58      	subs	r0, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	440b      	add	r3, r1
 80034e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ee:	e00f      	b.n	8003510 <HAL_I2C_Init+0x1c4>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1e58      	subs	r0, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	0099      	lsls	r1, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	fbb0 f3f3 	udiv	r3, r0, r3
 8003506:	3301      	adds	r3, #1
 8003508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	6809      	ldr	r1, [r1, #0]
 8003514:	4313      	orrs	r3, r2
 8003516:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800353e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6911      	ldr	r1, [r2, #16]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68d2      	ldr	r2, [r2, #12]
 800354a:	4311      	orrs	r1, r2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	430b      	orrs	r3, r1
 8003552:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	000186a0 	.word	0x000186a0
 80035ac:	001e847f 	.word	0x001e847f
 80035b0:	003d08ff 	.word	0x003d08ff
 80035b4:	431bde83 	.word	0x431bde83
 80035b8:	10624dd3 	.word	0x10624dd3

080035bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	461a      	mov	r2, r3
 80035c8:	460b      	mov	r3, r1
 80035ca:	817b      	strh	r3, [r7, #10]
 80035cc:	4613      	mov	r3, r2
 80035ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035d0:	f7fe fc66 	bl	8001ea0 <HAL_GetTick>
 80035d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b20      	cmp	r3, #32
 80035e0:	f040 80e0 	bne.w	80037a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	2319      	movs	r3, #25
 80035ea:	2201      	movs	r2, #1
 80035ec:	4970      	ldr	r1, [pc, #448]	; (80037b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f964 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
 80035fc:	e0d3      	b.n	80037a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_I2C_Master_Transmit+0x50>
 8003608:	2302      	movs	r3, #2
 800360a:	e0cc      	b.n	80037a6 <HAL_I2C_Master_Transmit+0x1ea>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d007      	beq.n	8003632 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003640:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2221      	movs	r2, #33	; 0x21
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2210      	movs	r2, #16
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	893a      	ldrh	r2, [r7, #8]
 8003662:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4a50      	ldr	r2, [pc, #320]	; (80037b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003672:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003674:	8979      	ldrh	r1, [r7, #10]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	6a3a      	ldr	r2, [r7, #32]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f89c 	bl	80037b8 <I2C_MasterRequestWrite>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e08d      	b.n	80037a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036a0:	e066      	b.n	8003770 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	6a39      	ldr	r1, [r7, #32]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f9de 	bl	8003a68 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00d      	beq.n	80036ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d107      	bne.n	80036ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e06b      	b.n	80037a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	781a      	ldrb	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d11b      	bne.n	8003744 <HAL_I2C_Master_Transmit+0x188>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003710:	2b00      	cmp	r3, #0
 8003712:	d017      	beq.n	8003744 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	6a39      	ldr	r1, [r7, #32]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f9ce 	bl	8003aea <I2C_WaitOnBTFFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	2b04      	cmp	r3, #4
 800375a:	d107      	bne.n	800376c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e01a      	b.n	80037a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003774:	2b00      	cmp	r3, #0
 8003776:	d194      	bne.n	80036a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e000      	b.n	80037a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037a4:	2302      	movs	r3, #2
  }
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	00100002 	.word	0x00100002
 80037b4:	ffff0000 	.word	0xffff0000

080037b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af02      	add	r7, sp, #8
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	460b      	mov	r3, r1
 80037c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d006      	beq.n	80037e2 <I2C_MasterRequestWrite+0x2a>
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d003      	beq.n	80037e2 <I2C_MasterRequestWrite+0x2a>
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037e0:	d108      	bne.n	80037f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e00b      	b.n	800380c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	2b12      	cmp	r3, #18
 80037fa:	d107      	bne.n	800380c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800380a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f84f 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00c      	beq.n	800383e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e035      	b.n	80038aa <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003846:	d108      	bne.n	800385a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003848:	897b      	ldrh	r3, [r7, #10]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003856:	611a      	str	r2, [r3, #16]
 8003858:	e01b      	b.n	8003892 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800385a:	897b      	ldrh	r3, [r7, #10]
 800385c:	11db      	asrs	r3, r3, #7
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f003 0306 	and.w	r3, r3, #6
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f063 030f 	orn	r3, r3, #15
 800386a:	b2da      	uxtb	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	490f      	ldr	r1, [pc, #60]	; (80038b4 <I2C_MasterRequestWrite+0xfc>)
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f876 	bl	800396a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e010      	b.n	80038aa <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003888:	897b      	ldrh	r3, [r7, #10]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4908      	ldr	r1, [pc, #32]	; (80038b8 <I2C_MasterRequestWrite+0x100>)
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f866 	bl	800396a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	00010008 	.word	0x00010008
 80038b8:	00010002 	.word	0x00010002

080038bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038cc:	e025      	b.n	800391a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d021      	beq.n	800391a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d6:	f7fe fae3 	bl	8001ea0 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d302      	bcc.n	80038ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d116      	bne.n	800391a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f043 0220 	orr.w	r2, r3, #32
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e023      	b.n	8003962 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	0c1b      	lsrs	r3, r3, #16
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d10d      	bne.n	8003940 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	43da      	mvns	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4013      	ands	r3, r2
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	bf0c      	ite	eq
 8003936:	2301      	moveq	r3, #1
 8003938:	2300      	movne	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
 800393e:	e00c      	b.n	800395a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	43da      	mvns	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4013      	ands	r3, r2
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	429a      	cmp	r2, r3
 800395e:	d0b6      	beq.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003978:	e051      	b.n	8003a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003988:	d123      	bne.n	80039d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003998:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f043 0204 	orr.w	r2, r3, #4
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e046      	b.n	8003a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d021      	beq.n	8003a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039da:	f7fe fa61 	bl	8001ea0 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d302      	bcc.n	80039f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d116      	bne.n	8003a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f043 0220 	orr.w	r2, r3, #32
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e020      	b.n	8003a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	0c1b      	lsrs	r3, r3, #16
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d10c      	bne.n	8003a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4013      	ands	r3, r2
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bf14      	ite	ne
 8003a3a:	2301      	movne	r3, #1
 8003a3c:	2300      	moveq	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	e00b      	b.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	43da      	mvns	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf14      	ite	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	2300      	moveq	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d18d      	bne.n	800397a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a74:	e02d      	b.n	8003ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f878 	bl	8003b6c <I2C_IsAcknowledgeFailed>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e02d      	b.n	8003ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8c:	d021      	beq.n	8003ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8e:	f7fe fa07 	bl	8001ea0 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d116      	bne.n	8003ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f043 0220 	orr.w	r2, r3, #32
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e007      	b.n	8003ae2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003adc:	2b80      	cmp	r3, #128	; 0x80
 8003ade:	d1ca      	bne.n	8003a76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003af6:	e02d      	b.n	8003b54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f837 	bl	8003b6c <I2C_IsAcknowledgeFailed>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e02d      	b.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d021      	beq.n	8003b54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b10:	f7fe f9c6 	bl	8001ea0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d302      	bcc.n	8003b26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d116      	bne.n	8003b54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	f043 0220 	orr.w	r2, r3, #32
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e007      	b.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d1ca      	bne.n	8003af8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b82:	d11b      	bne.n	8003bbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	f043 0204 	orr.w	r2, r3, #4
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e25b      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d075      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bea:	4ba3      	ldr	r3, [pc, #652]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d00c      	beq.n	8003c10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bf6:	4ba0      	ldr	r3, [pc, #640]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d112      	bne.n	8003c28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c02:	4b9d      	ldr	r3, [pc, #628]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c0e:	d10b      	bne.n	8003c28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c10:	4b99      	ldr	r3, [pc, #612]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d05b      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x108>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d157      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e236      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c30:	d106      	bne.n	8003c40 <HAL_RCC_OscConfig+0x74>
 8003c32:	4b91      	ldr	r3, [pc, #580]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a90      	ldr	r2, [pc, #576]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e01d      	b.n	8003c7c <HAL_RCC_OscConfig+0xb0>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x98>
 8003c4a:	4b8b      	ldr	r3, [pc, #556]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a8a      	ldr	r2, [pc, #552]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	4b88      	ldr	r3, [pc, #544]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a87      	ldr	r2, [pc, #540]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	e00b      	b.n	8003c7c <HAL_RCC_OscConfig+0xb0>
 8003c64:	4b84      	ldr	r3, [pc, #528]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a83      	ldr	r2, [pc, #524]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	4b81      	ldr	r3, [pc, #516]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a80      	ldr	r2, [pc, #512]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d013      	beq.n	8003cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7fe f90c 	bl	8001ea0 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c8c:	f7fe f908 	bl	8001ea0 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b64      	cmp	r3, #100	; 0x64
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e1fb      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9e:	4b76      	ldr	r3, [pc, #472]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0xc0>
 8003caa:	e014      	b.n	8003cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe f8f8 	bl	8001ea0 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe f8f4 	bl	8001ea0 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e1e7      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc6:	4b6c      	ldr	r3, [pc, #432]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0xe8>
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d063      	beq.n	8003daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ce2:	4b65      	ldr	r3, [pc, #404]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cee:	4b62      	ldr	r3, [pc, #392]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d11c      	bne.n	8003d34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfa:	4b5f      	ldr	r3, [pc, #380]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d116      	bne.n	8003d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d06:	4b5c      	ldr	r3, [pc, #368]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <HAL_RCC_OscConfig+0x152>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d001      	beq.n	8003d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e1bb      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1e:	4b56      	ldr	r3, [pc, #344]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4952      	ldr	r1, [pc, #328]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d32:	e03a      	b.n	8003daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d020      	beq.n	8003d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d3c:	4b4f      	ldr	r3, [pc, #316]	; (8003e7c <HAL_RCC_OscConfig+0x2b0>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7fe f8ad 	bl	8001ea0 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4a:	f7fe f8a9 	bl	8001ea0 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e19c      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5c:	4b46      	ldr	r3, [pc, #280]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0f0      	beq.n	8003d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d68:	4b43      	ldr	r3, [pc, #268]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4940      	ldr	r1, [pc, #256]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	600b      	str	r3, [r1, #0]
 8003d7c:	e015      	b.n	8003daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d7e:	4b3f      	ldr	r3, [pc, #252]	; (8003e7c <HAL_RCC_OscConfig+0x2b0>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe f88c 	bl	8001ea0 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d8c:	f7fe f888 	bl	8001ea0 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e17b      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9e:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d030      	beq.n	8003e18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d016      	beq.n	8003dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dbe:	4b30      	ldr	r3, [pc, #192]	; (8003e80 <HAL_RCC_OscConfig+0x2b4>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fe f86c 	bl	8001ea0 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dcc:	f7fe f868 	bl	8001ea0 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e15b      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dde:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x200>
 8003dea:	e015      	b.n	8003e18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dec:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <HAL_RCC_OscConfig+0x2b4>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df2:	f7fe f855 	bl	8001ea0 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dfa:	f7fe f851 	bl	8001ea0 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e144      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e0c:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f0      	bne.n	8003dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80a0 	beq.w	8003f66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e26:	2300      	movs	r3, #0
 8003e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e2a:	4b13      	ldr	r3, [pc, #76]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10f      	bne.n	8003e56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	4a0e      	ldr	r2, [pc, #56]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e44:	6413      	str	r3, [r2, #64]	; 0x40
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e56:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_RCC_OscConfig+0x2b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d121      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e62:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <HAL_RCC_OscConfig+0x2b8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <HAL_RCC_OscConfig+0x2b8>)
 8003e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6e:	f7fe f817 	bl	8001ea0 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e74:	e011      	b.n	8003e9a <HAL_RCC_OscConfig+0x2ce>
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	42470000 	.word	0x42470000
 8003e80:	42470e80 	.word	0x42470e80
 8003e84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e88:	f7fe f80a 	bl	8001ea0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e0fd      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9a:	4b81      	ldr	r3, [pc, #516]	; (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d106      	bne.n	8003ebc <HAL_RCC_OscConfig+0x2f0>
 8003eae:	4b7d      	ldr	r3, [pc, #500]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a7c      	ldr	r2, [pc, #496]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eba:	e01c      	b.n	8003ef6 <HAL_RCC_OscConfig+0x32a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	d10c      	bne.n	8003ede <HAL_RCC_OscConfig+0x312>
 8003ec4:	4b77      	ldr	r3, [pc, #476]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a76      	ldr	r2, [pc, #472]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003eca:	f043 0304 	orr.w	r3, r3, #4
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed0:	4b74      	ldr	r3, [pc, #464]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a73      	ldr	r2, [pc, #460]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
 8003edc:	e00b      	b.n	8003ef6 <HAL_RCC_OscConfig+0x32a>
 8003ede:	4b71      	ldr	r3, [pc, #452]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a70      	ldr	r2, [pc, #448]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eea:	4b6e      	ldr	r3, [pc, #440]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	4a6d      	ldr	r2, [pc, #436]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ef0:	f023 0304 	bic.w	r3, r3, #4
 8003ef4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d015      	beq.n	8003f2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efe:	f7fd ffcf 	bl	8001ea0 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f04:	e00a      	b.n	8003f1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fd ffcb 	bl	8001ea0 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e0bc      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	4b61      	ldr	r3, [pc, #388]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ee      	beq.n	8003f06 <HAL_RCC_OscConfig+0x33a>
 8003f28:	e014      	b.n	8003f54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2a:	f7fd ffb9 	bl	8001ea0 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f30:	e00a      	b.n	8003f48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f32:	f7fd ffb5 	bl	8001ea0 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e0a6      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f48:	4b56      	ldr	r3, [pc, #344]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ee      	bne.n	8003f32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5a:	4b52      	ldr	r3, [pc, #328]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	4a51      	ldr	r2, [pc, #324]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 8092 	beq.w	8004094 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f70:	4b4c      	ldr	r3, [pc, #304]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 030c 	and.w	r3, r3, #12
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d05c      	beq.n	8004036 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d141      	bne.n	8004008 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f84:	4b48      	ldr	r3, [pc, #288]	; (80040a8 <HAL_RCC_OscConfig+0x4dc>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fd ff89 	bl	8001ea0 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fd ff85 	bl	8001ea0 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e078      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa4:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	019b      	lsls	r3, r3, #6
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	061b      	lsls	r3, r3, #24
 8003fd4:	4933      	ldr	r1, [pc, #204]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fda:	4b33      	ldr	r3, [pc, #204]	; (80040a8 <HAL_RCC_OscConfig+0x4dc>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fd ff5e 	bl	8001ea0 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7fd ff5a 	bl	8001ea0 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e04d      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffa:	4b2a      	ldr	r3, [pc, #168]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x41c>
 8004006:	e045      	b.n	8004094 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004008:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <HAL_RCC_OscConfig+0x4dc>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400e:	f7fd ff47 	bl	8001ea0 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004016:	f7fd ff43 	bl	8001ea0 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e036      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004028:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f0      	bne.n	8004016 <HAL_RCC_OscConfig+0x44a>
 8004034:	e02e      	b.n	8004094 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e029      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004042:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	429a      	cmp	r2, r3
 8004054:	d11c      	bne.n	8004090 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d115      	bne.n	8004090 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800406a:	4013      	ands	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004070:	4293      	cmp	r3, r2
 8004072:	d10d      	bne.n	8004090 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d106      	bne.n	8004090 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40007000 	.word	0x40007000
 80040a4:	40023800 	.word	0x40023800
 80040a8:	42470060 	.word	0x42470060

080040ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0cc      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c0:	4b68      	ldr	r3, [pc, #416]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d90c      	bls.n	80040e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b65      	ldr	r3, [pc, #404]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b63      	ldr	r3, [pc, #396]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0b8      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004100:	4b59      	ldr	r3, [pc, #356]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4a58      	ldr	r2, [pc, #352]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800410a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004118:	4b53      	ldr	r3, [pc, #332]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a52      	ldr	r2, [pc, #328]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b50      	ldr	r3, [pc, #320]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	494d      	ldr	r1, [pc, #308]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d044      	beq.n	80041cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d119      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e07f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d003      	beq.n	800416a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004166:	2b03      	cmp	r3, #3
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416a:	4b3f      	ldr	r3, [pc, #252]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e06f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417a:	4b3b      	ldr	r3, [pc, #236]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e067      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800418a:	4b37      	ldr	r3, [pc, #220]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f023 0203 	bic.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4934      	ldr	r1, [pc, #208]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	4313      	orrs	r3, r2
 800419a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800419c:	f7fd fe80 	bl	8001ea0 <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a4:	f7fd fe7c 	bl	8001ea0 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e04f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	4b2b      	ldr	r3, [pc, #172]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 020c 	and.w	r2, r3, #12
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d1eb      	bne.n	80041a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041cc:	4b25      	ldr	r3, [pc, #148]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d20c      	bcs.n	80041f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b22      	ldr	r3, [pc, #136]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e032      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4916      	ldr	r1, [pc, #88]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800421e:	4b12      	ldr	r3, [pc, #72]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	490e      	ldr	r1, [pc, #56]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004232:	f000 f821 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 8004236:	4601      	mov	r1, r0
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <HAL_RCC_ClockConfig+0x1c0>)
 8004244:	5cd3      	ldrb	r3, [r2, r3]
 8004246:	fa21 f303 	lsr.w	r3, r1, r3
 800424a:	4a09      	ldr	r2, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd fde0 	bl	8001e18 <HAL_InitTick>

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40023c00 	.word	0x40023c00
 8004268:	40023800 	.word	0x40023800
 800426c:	08006400 	.word	0x08006400
 8004270:	20000000 	.word	0x20000000
 8004274:	20000004 	.word	0x20000004

08004278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	2300      	movs	r3, #0
 8004288:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800428e:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b04      	cmp	r3, #4
 8004298:	d007      	beq.n	80042aa <HAL_RCC_GetSysClockFreq+0x32>
 800429a:	2b08      	cmp	r3, #8
 800429c:	d008      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0x38>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f040 808d 	bne.w	80043be <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a4:	4b4b      	ldr	r3, [pc, #300]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80042a6:	60bb      	str	r3, [r7, #8]
       break;
 80042a8:	e08c      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042aa:	4b4b      	ldr	r3, [pc, #300]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80042ac:	60bb      	str	r3, [r7, #8]
      break;
 80042ae:	e089      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b0:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ba:	4b45      	ldr	r3, [pc, #276]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d023      	beq.n	800430e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c6:	4b42      	ldr	r3, [pc, #264]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	f04f 0400 	mov.w	r4, #0
 80042d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	ea03 0501 	and.w	r5, r3, r1
 80042dc:	ea04 0602 	and.w	r6, r4, r2
 80042e0:	4a3d      	ldr	r2, [pc, #244]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80042e2:	fb02 f106 	mul.w	r1, r2, r6
 80042e6:	2200      	movs	r2, #0
 80042e8:	fb02 f205 	mul.w	r2, r2, r5
 80042ec:	440a      	add	r2, r1
 80042ee:	493a      	ldr	r1, [pc, #232]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80042f0:	fba5 0101 	umull	r0, r1, r5, r1
 80042f4:	1853      	adds	r3, r2, r1
 80042f6:	4619      	mov	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f04f 0400 	mov.w	r4, #0
 80042fe:	461a      	mov	r2, r3
 8004300:	4623      	mov	r3, r4
 8004302:	f7fb ff61 	bl	80001c8 <__aeabi_uldivmod>
 8004306:	4603      	mov	r3, r0
 8004308:	460c      	mov	r4, r1
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	e049      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430e:	4b30      	ldr	r3, [pc, #192]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	099b      	lsrs	r3, r3, #6
 8004314:	f04f 0400 	mov.w	r4, #0
 8004318:	f240 11ff 	movw	r1, #511	; 0x1ff
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	ea03 0501 	and.w	r5, r3, r1
 8004324:	ea04 0602 	and.w	r6, r4, r2
 8004328:	4629      	mov	r1, r5
 800432a:	4632      	mov	r2, r6
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	f04f 0400 	mov.w	r4, #0
 8004334:	0154      	lsls	r4, r2, #5
 8004336:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800433a:	014b      	lsls	r3, r1, #5
 800433c:	4619      	mov	r1, r3
 800433e:	4622      	mov	r2, r4
 8004340:	1b49      	subs	r1, r1, r5
 8004342:	eb62 0206 	sbc.w	r2, r2, r6
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	f04f 0400 	mov.w	r4, #0
 800434e:	0194      	lsls	r4, r2, #6
 8004350:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004354:	018b      	lsls	r3, r1, #6
 8004356:	1a5b      	subs	r3, r3, r1
 8004358:	eb64 0402 	sbc.w	r4, r4, r2
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	00e2      	lsls	r2, r4, #3
 8004366:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800436a:	00d9      	lsls	r1, r3, #3
 800436c:	460b      	mov	r3, r1
 800436e:	4614      	mov	r4, r2
 8004370:	195b      	adds	r3, r3, r5
 8004372:	eb44 0406 	adc.w	r4, r4, r6
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	02a2      	lsls	r2, r4, #10
 8004380:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004384:	0299      	lsls	r1, r3, #10
 8004386:	460b      	mov	r3, r1
 8004388:	4614      	mov	r4, r2
 800438a:	4618      	mov	r0, r3
 800438c:	4621      	mov	r1, r4
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f04f 0400 	mov.w	r4, #0
 8004394:	461a      	mov	r2, r3
 8004396:	4623      	mov	r3, r4
 8004398:	f7fb ff16 	bl	80001c8 <__aeabi_uldivmod>
 800439c:	4603      	mov	r3, r0
 800439e:	460c      	mov	r4, r1
 80043a0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043a2:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	0c1b      	lsrs	r3, r3, #16
 80043a8:	f003 0303 	and.w	r3, r3, #3
 80043ac:	3301      	adds	r3, #1
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ba:	60bb      	str	r3, [r7, #8]
      break;
 80043bc:	e002      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80043c0:	60bb      	str	r3, [r7, #8]
      break;
 80043c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c4:	68bb      	ldr	r3, [r7, #8]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800
 80043d4:	00f42400 	.word	0x00f42400
 80043d8:	00b71b00 	.word	0x00b71b00

080043dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e0:	4b03      	ldr	r3, [pc, #12]	; (80043f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043e2:	681b      	ldr	r3, [r3, #0]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000000 	.word	0x20000000

080043f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043f8:	f7ff fff0 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 80043fc:	4601      	mov	r1, r0
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	0a9b      	lsrs	r3, r3, #10
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	4a03      	ldr	r2, [pc, #12]	; (8004418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800440a:	5cd3      	ldrb	r3, [r2, r3]
 800440c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004410:	4618      	mov	r0, r3
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40023800 	.word	0x40023800
 8004418:	08006410 	.word	0x08006410

0800441c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004420:	f7ff ffdc 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8004424:	4601      	mov	r1, r0
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	0b5b      	lsrs	r3, r3, #13
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	4a03      	ldr	r2, [pc, #12]	; (8004440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004432:	5cd3      	ldrb	r3, [r2, r3]
 8004434:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40023800 	.word	0x40023800
 8004440:	08006410 	.word	0x08006410

08004444 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e056      	b.n	8004504 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d106      	bne.n	8004476 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7fd f9db 	bl	800182c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2202      	movs	r2, #2
 800447a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	ea42 0103 	orr.w	r1, r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	0c1b      	lsrs	r3, r3, #16
 80044d4:	f003 0104 	and.w	r1, r3, #4
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	69da      	ldr	r2, [r3, #28]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_SPI_Transmit+0x22>
 800452a:	2302      	movs	r3, #2
 800452c:	e11e      	b.n	800476c <HAL_SPI_Transmit+0x260>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004536:	f7fd fcb3 	bl	8001ea0 <HAL_GetTick>
 800453a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	d002      	beq.n	8004552 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800454c:	2302      	movs	r3, #2
 800454e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004550:	e103      	b.n	800475a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_SPI_Transmit+0x52>
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d102      	bne.n	8004564 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004562:	e0fa      	b.n	800475a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2203      	movs	r2, #3
 8004568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	88fa      	ldrh	r2, [r7, #6]
 800457c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	88fa      	ldrh	r2, [r7, #6]
 8004582:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045aa:	d107      	bne.n	80045bc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	d007      	beq.n	80045da <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045e2:	d14b      	bne.n	800467c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_SPI_Transmit+0xe6>
 80045ec:	8afb      	ldrh	r3, [r7, #22]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d13e      	bne.n	8004670 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	881a      	ldrh	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	1c9a      	adds	r2, r3, #2
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004616:	e02b      	b.n	8004670 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b02      	cmp	r3, #2
 8004624:	d112      	bne.n	800464c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	881a      	ldrh	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	1c9a      	adds	r2, r3, #2
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	86da      	strh	r2, [r3, #54]	; 0x36
 800464a:	e011      	b.n	8004670 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800464c:	f7fd fc28 	bl	8001ea0 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d803      	bhi.n	8004664 <HAL_SPI_Transmit+0x158>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004662:	d102      	bne.n	800466a <HAL_SPI_Transmit+0x15e>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d102      	bne.n	8004670 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800466e:	e074      	b.n	800475a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1ce      	bne.n	8004618 <HAL_SPI_Transmit+0x10c>
 800467a:	e04c      	b.n	8004716 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <HAL_SPI_Transmit+0x17e>
 8004684:	8afb      	ldrh	r3, [r7, #22]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d140      	bne.n	800470c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	330c      	adds	r3, #12
 8004694:	7812      	ldrb	r2, [r2, #0]
 8004696:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046b0:	e02c      	b.n	800470c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d113      	bne.n	80046e8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	7812      	ldrb	r2, [r2, #0]
 80046cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80046e6:	e011      	b.n	800470c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046e8:	f7fd fbda 	bl	8001ea0 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d803      	bhi.n	8004700 <HAL_SPI_Transmit+0x1f4>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d102      	bne.n	8004706 <HAL_SPI_Transmit+0x1fa>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	77fb      	strb	r3, [r7, #31]
          goto error;
 800470a:	e026      	b.n	800475a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1cd      	bne.n	80046b2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	6839      	ldr	r1, [r7, #0]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 fba4 	bl	8004e68 <SPI_EndRxTxTransaction>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	77fb      	strb	r3, [r7, #31]
 8004756:	e000      	b.n	800475a <HAL_SPI_Transmit+0x24e>
  }

error:
 8004758:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800476a:	7ffb      	ldrb	r3, [r7, #31]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3720      	adds	r7, #32
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	4613      	mov	r3, r2
 8004782:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004790:	d112      	bne.n	80047b8 <HAL_SPI_Receive+0x44>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10e      	bne.n	80047b8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2204      	movs	r2, #4
 800479e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f8e9 	bl	8004986 <HAL_SPI_TransmitReceive>
 80047b4:	4603      	mov	r3, r0
 80047b6:	e0e2      	b.n	800497e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_SPI_Receive+0x52>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e0db      	b.n	800497e <HAL_SPI_Receive+0x20a>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ce:	f7fd fb67 	bl	8001ea0 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d002      	beq.n	80047e6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80047e0:	2302      	movs	r3, #2
 80047e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047e4:	e0c2      	b.n	800496c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_SPI_Receive+0x7e>
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d102      	bne.n	80047f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047f6:	e0b9      	b.n	800496c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2204      	movs	r2, #4
 80047fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	88fa      	ldrh	r2, [r7, #6]
 8004810:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	88fa      	ldrh	r2, [r7, #6]
 8004816:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800483e:	d107      	bne.n	8004850 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800484e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b40      	cmp	r3, #64	; 0x40
 800485c:	d007      	beq.n	800486e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800486c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d162      	bne.n	800493c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004876:	e02e      	b.n	80048d6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b01      	cmp	r3, #1
 8004884:	d115      	bne.n	80048b2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f103 020c 	add.w	r2, r3, #12
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	7812      	ldrb	r2, [r2, #0]
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048b0:	e011      	b.n	80048d6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b2:	f7fd faf5 	bl	8001ea0 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d803      	bhi.n	80048ca <HAL_SPI_Receive+0x156>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d102      	bne.n	80048d0 <HAL_SPI_Receive+0x15c>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048d4:	e04a      	b.n	800496c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1cb      	bne.n	8004878 <HAL_SPI_Receive+0x104>
 80048e0:	e031      	b.n	8004946 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d113      	bne.n	8004918 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	b292      	uxth	r2, r2
 80048fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	1c9a      	adds	r2, r3, #2
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004916:	e011      	b.n	800493c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004918:	f7fd fac2 	bl	8001ea0 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d803      	bhi.n	8004930 <HAL_SPI_Receive+0x1bc>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d102      	bne.n	8004936 <HAL_SPI_Receive+0x1c2>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	75fb      	strb	r3, [r7, #23]
          goto error;
 800493a:	e017      	b.n	800496c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1cd      	bne.n	80048e2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	6839      	ldr	r1, [r7, #0]
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fa27 	bl	8004d9e <SPI_EndRxTransaction>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2220      	movs	r2, #32
 800495a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	75fb      	strb	r3, [r7, #23]
 8004968:	e000      	b.n	800496c <HAL_SPI_Receive+0x1f8>
  }

error :
 800496a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800497c:	7dfb      	ldrb	r3, [r7, #23]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b08c      	sub	sp, #48	; 0x30
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004994:	2301      	movs	r3, #1
 8004996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_SPI_TransmitReceive+0x26>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e18a      	b.n	8004cc2 <HAL_SPI_TransmitReceive+0x33c>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b4:	f7fd fa74 	bl	8001ea0 <HAL_GetTick>
 80049b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049ca:	887b      	ldrh	r3, [r7, #2]
 80049cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d00f      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x70>
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049dc:	d107      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x68>
 80049e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d003      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049ee:	2302      	movs	r3, #2
 80049f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049f4:	e15b      	b.n	8004cae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_SPI_TransmitReceive+0x82>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_SPI_TransmitReceive+0x82>
 8004a02:	887b      	ldrh	r3, [r7, #2]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d103      	bne.n	8004a10 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a0e:	e14e      	b.n	8004cae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d003      	beq.n	8004a24 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2205      	movs	r2, #5
 8004a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	887a      	ldrh	r2, [r7, #2]
 8004a34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	887a      	ldrh	r2, [r7, #2]
 8004a3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	887a      	ldrh	r2, [r7, #2]
 8004a46:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	887a      	ldrh	r2, [r7, #2]
 8004a4c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b40      	cmp	r3, #64	; 0x40
 8004a66:	d007      	beq.n	8004a78 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a80:	d178      	bne.n	8004b74 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_SPI_TransmitReceive+0x10a>
 8004a8a:	8b7b      	ldrh	r3, [r7, #26]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d166      	bne.n	8004b5e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	881a      	ldrh	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	1c9a      	adds	r2, r3, #2
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ab4:	e053      	b.n	8004b5e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d11b      	bne.n	8004afc <HAL_SPI_TransmitReceive+0x176>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d016      	beq.n	8004afc <HAL_SPI_TransmitReceive+0x176>
 8004ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d113      	bne.n	8004afc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad8:	881a      	ldrh	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	1c9a      	adds	r2, r3, #2
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d119      	bne.n	8004b3e <HAL_SPI_TransmitReceive+0x1b8>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d014      	beq.n	8004b3e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	b292      	uxth	r2, r2
 8004b20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	1c9a      	adds	r2, r3, #2
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b3e:	f7fd f9af 	bl	8001ea0 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d807      	bhi.n	8004b5e <HAL_SPI_TransmitReceive+0x1d8>
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d003      	beq.n	8004b5e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b5c:	e0a7      	b.n	8004cae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1a6      	bne.n	8004ab6 <HAL_SPI_TransmitReceive+0x130>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1a1      	bne.n	8004ab6 <HAL_SPI_TransmitReceive+0x130>
 8004b72:	e07c      	b.n	8004c6e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_SPI_TransmitReceive+0x1fc>
 8004b7c:	8b7b      	ldrh	r3, [r7, #26]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d16b      	bne.n	8004c5a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	7812      	ldrb	r2, [r2, #0]
 8004b8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ba8:	e057      	b.n	8004c5a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d11c      	bne.n	8004bf2 <HAL_SPI_TransmitReceive+0x26c>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d017      	beq.n	8004bf2 <HAL_SPI_TransmitReceive+0x26c>
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d114      	bne.n	8004bf2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	7812      	ldrb	r2, [r2, #0]
 8004bd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d119      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x2ae>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d014      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c30:	2301      	movs	r3, #1
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c34:	f7fd f934 	bl	8001ea0 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d803      	bhi.n	8004c4c <HAL_SPI_TransmitReceive+0x2c6>
 8004c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4a:	d102      	bne.n	8004c52 <HAL_SPI_TransmitReceive+0x2cc>
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d103      	bne.n	8004c5a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c58:	e029      	b.n	8004cae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1a2      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x224>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d19d      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f8f8 	bl	8004e68 <SPI_EndRxTxTransaction>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d006      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c8a:	e010      	b.n	8004cae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	e000      	b.n	8004cae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004cac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3730      	adds	r7, #48	; 0x30
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cda:	e04c      	b.n	8004d76 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d048      	beq.n	8004d76 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ce4:	f7fd f8dc 	bl	8001ea0 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d902      	bls.n	8004cfa <SPI_WaitFlagStateUntilTimeout+0x30>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d13d      	bne.n	8004d76 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d12:	d111      	bne.n	8004d38 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1c:	d004      	beq.n	8004d28 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d26:	d107      	bne.n	8004d38 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d40:	d10f      	bne.n	8004d62 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e00f      	b.n	8004d96 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	bf0c      	ite	eq
 8004d86:	2301      	moveq	r3, #1
 8004d88:	2300      	movne	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d1a3      	bne.n	8004cdc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b086      	sub	sp, #24
 8004da2:	af02      	add	r7, sp, #8
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004db2:	d111      	bne.n	8004dd8 <SPI_EndRxTransaction+0x3a>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dbc:	d004      	beq.n	8004dc8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc6:	d107      	bne.n	8004dd8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de0:	d12a      	bne.n	8004e38 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dea:	d012      	beq.n	8004e12 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2200      	movs	r2, #0
 8004df4:	2180      	movs	r1, #128	; 0x80
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f7ff ff67 	bl	8004cca <SPI_WaitFlagStateUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d02d      	beq.n	8004e5e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	f043 0220 	orr.w	r2, r3, #32
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e026      	b.n	8004e60 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f7ff ff54 	bl	8004cca <SPI_WaitFlagStateUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01a      	beq.n	8004e5e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2c:	f043 0220 	orr.w	r2, r3, #32
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e013      	b.n	8004e60 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	2101      	movs	r1, #1
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f7ff ff41 	bl	8004cca <SPI_WaitFlagStateUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	f043 0220 	orr.w	r2, r3, #32
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e000      	b.n	8004e60 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e74:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <SPI_EndRxTxTransaction+0x7c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <SPI_EndRxTxTransaction+0x80>)
 8004e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7e:	0d5b      	lsrs	r3, r3, #21
 8004e80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e84:	fb02 f303 	mul.w	r3, r2, r3
 8004e88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e92:	d112      	bne.n	8004eba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2180      	movs	r1, #128	; 0x80
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7ff ff13 	bl	8004cca <SPI_WaitFlagStateUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d016      	beq.n	8004ed8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eae:	f043 0220 	orr.w	r2, r3, #32
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e00f      	b.n	8004eda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d0f2      	beq.n	8004eba <SPI_EndRxTxTransaction+0x52>
 8004ed4:	e000      	b.n	8004ed8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ed6:	bf00      	nop
  }

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20000000 	.word	0x20000000
 8004ee8:	165e9f81 	.word	0x165e9f81

08004eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e01d      	b.n	8004f3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fc fd9c 	bl	8001a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f000 fb56 	bl	80055dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0201 	orr.w	r2, r2, #1
 8004f58:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b06      	cmp	r3, #6
 8004f6a:	d007      	beq.n	8004f7c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e01d      	b.n	8004fd8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7fc fd01 	bl	80019b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f000 fb07 	bl	80055dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fd42 	bl	8005a7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a15      	ldr	r2, [pc, #84]	; (8005054 <HAL_TIM_PWM_Start+0x74>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <HAL_TIM_PWM_Start+0x2c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a14      	ldr	r2, [pc, #80]	; (8005058 <HAL_TIM_PWM_Start+0x78>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d101      	bne.n	8005010 <HAL_TIM_PWM_Start+0x30>
 800500c:	2301      	movs	r3, #1
 800500e:	e000      	b.n	8005012 <HAL_TIM_PWM_Start+0x32>
 8005010:	2300      	movs	r3, #0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d007      	beq.n	8005026 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005024:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b06      	cmp	r3, #6
 8005036:	d007      	beq.n	8005048 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40010000 	.word	0x40010000
 8005058:	40010400 	.word	0x40010400

0800505c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e083      	b.n	8005178 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7fc fc19 	bl	80018bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2202      	movs	r2, #2
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a0:	f023 0307 	bic.w	r3, r3, #7
 80050a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f000 fa93 	bl	80055dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	4313      	orrs	r3, r2
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80050fc:	f023 030c 	bic.w	r3, r3, #12
 8005100:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005108:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800510c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	4313      	orrs	r3, r2
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	011a      	lsls	r2, r3, #4
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	031b      	lsls	r3, r3, #12
 800512c:	4313      	orrs	r3, r2
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800513a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005142:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	4313      	orrs	r3, r2
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <HAL_TIM_Encoder_Start+0x16>
 8005190:	2b04      	cmp	r3, #4
 8005192:	d008      	beq.n	80051a6 <HAL_TIM_Encoder_Start+0x26>
 8005194:	e00f      	b.n	80051b6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2201      	movs	r2, #1
 800519c:	2100      	movs	r1, #0
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fc6c 	bl	8005a7c <TIM_CCxChannelCmd>
      break;
 80051a4:	e016      	b.n	80051d4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2201      	movs	r2, #1
 80051ac:	2104      	movs	r1, #4
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fc64 	bl	8005a7c <TIM_CCxChannelCmd>
      break;
 80051b4:	e00e      	b.n	80051d4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2201      	movs	r2, #1
 80051bc:	2100      	movs	r1, #0
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fc5c 	bl	8005a7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2201      	movs	r2, #1
 80051ca:	2104      	movs	r1, #4
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fc55 	bl	8005a7c <TIM_CCxChannelCmd>
      break;
 80051d2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b02      	cmp	r3, #2
 8005202:	d122      	bne.n	800524a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b02      	cmp	r3, #2
 8005210:	d11b      	bne.n	800524a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f06f 0202 	mvn.w	r2, #2
 800521a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f003 0303 	and.w	r3, r3, #3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f9b5 	bl	80055a0 <HAL_TIM_IC_CaptureCallback>
 8005236:	e005      	b.n	8005244 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f9a7 	bl	800558c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f9b8 	bl	80055b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b04      	cmp	r3, #4
 8005256:	d122      	bne.n	800529e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	2b04      	cmp	r3, #4
 8005264:	d11b      	bne.n	800529e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f06f 0204 	mvn.w	r2, #4
 800526e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f98b 	bl	80055a0 <HAL_TIM_IC_CaptureCallback>
 800528a:	e005      	b.n	8005298 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f97d 	bl	800558c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f98e 	bl	80055b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d122      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d11b      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f06f 0208 	mvn.w	r2, #8
 80052c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2204      	movs	r2, #4
 80052c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f961 	bl	80055a0 <HAL_TIM_IC_CaptureCallback>
 80052de:	e005      	b.n	80052ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f953 	bl	800558c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f964 	bl	80055b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d122      	bne.n	8005346 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f003 0310 	and.w	r3, r3, #16
 800530a:	2b10      	cmp	r3, #16
 800530c:	d11b      	bne.n	8005346 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f06f 0210 	mvn.w	r2, #16
 8005316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2208      	movs	r2, #8
 800531c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f937 	bl	80055a0 <HAL_TIM_IC_CaptureCallback>
 8005332:	e005      	b.n	8005340 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f929 	bl	800558c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f93a 	bl	80055b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b01      	cmp	r3, #1
 8005352:	d10e      	bne.n	8005372 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b01      	cmp	r3, #1
 8005360:	d107      	bne.n	8005372 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f06f 0201 	mvn.w	r2, #1
 800536a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7fb fa01 	bl	8000774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537c:	2b80      	cmp	r3, #128	; 0x80
 800537e:	d10e      	bne.n	800539e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538a:	2b80      	cmp	r3, #128	; 0x80
 800538c:	d107      	bne.n	800539e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fc1b 	bl	8005bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b40      	cmp	r3, #64	; 0x40
 80053aa:	d10e      	bne.n	80053ca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b6:	2b40      	cmp	r3, #64	; 0x40
 80053b8:	d107      	bne.n	80053ca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f8ff 	bl	80055c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d10e      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d107      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f06f 0220 	mvn.w	r2, #32
 80053ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fbe5 	bl	8005bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005416:	2302      	movs	r3, #2
 8005418:	e0b4      	b.n	8005584 <HAL_TIM_PWM_ConfigChannel+0x184>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2202      	movs	r2, #2
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b0c      	cmp	r3, #12
 800542e:	f200 809f 	bhi.w	8005570 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005432:	a201      	add	r2, pc, #4	; (adr r2, 8005438 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005438:	0800546d 	.word	0x0800546d
 800543c:	08005571 	.word	0x08005571
 8005440:	08005571 	.word	0x08005571
 8005444:	08005571 	.word	0x08005571
 8005448:	080054ad 	.word	0x080054ad
 800544c:	08005571 	.word	0x08005571
 8005450:	08005571 	.word	0x08005571
 8005454:	08005571 	.word	0x08005571
 8005458:	080054ef 	.word	0x080054ef
 800545c:	08005571 	.word	0x08005571
 8005460:	08005571 	.word	0x08005571
 8005464:	08005571 	.word	0x08005571
 8005468:	0800552f 	.word	0x0800552f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 f952 	bl	800571c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0208 	orr.w	r2, r2, #8
 8005486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0204 	bic.w	r2, r2, #4
 8005496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6999      	ldr	r1, [r3, #24]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	619a      	str	r2, [r3, #24]
      break;
 80054aa:	e062      	b.n	8005572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 f9a2 	bl	80057fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6999      	ldr	r1, [r3, #24]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	021a      	lsls	r2, r3, #8
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	619a      	str	r2, [r3, #24]
      break;
 80054ec:	e041      	b.n	8005572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 f9f7 	bl	80058e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0208 	orr.w	r2, r2, #8
 8005508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0204 	bic.w	r2, r2, #4
 8005518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69d9      	ldr	r1, [r3, #28]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	61da      	str	r2, [r3, #28]
      break;
 800552c:	e021      	b.n	8005572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fa4b 	bl	80059d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69d9      	ldr	r1, [r3, #28]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	021a      	lsls	r2, r3, #8
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	61da      	str	r2, [r3, #28]
      break;
 800556e:	e000      	b.n	8005572 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005570:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a40      	ldr	r2, [pc, #256]	; (80056f0 <TIM_Base_SetConfig+0x114>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d013      	beq.n	800561c <TIM_Base_SetConfig+0x40>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fa:	d00f      	beq.n	800561c <TIM_Base_SetConfig+0x40>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a3d      	ldr	r2, [pc, #244]	; (80056f4 <TIM_Base_SetConfig+0x118>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d00b      	beq.n	800561c <TIM_Base_SetConfig+0x40>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a3c      	ldr	r2, [pc, #240]	; (80056f8 <TIM_Base_SetConfig+0x11c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d007      	beq.n	800561c <TIM_Base_SetConfig+0x40>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a3b      	ldr	r2, [pc, #236]	; (80056fc <TIM_Base_SetConfig+0x120>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d003      	beq.n	800561c <TIM_Base_SetConfig+0x40>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a3a      	ldr	r2, [pc, #232]	; (8005700 <TIM_Base_SetConfig+0x124>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d108      	bne.n	800562e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a2f      	ldr	r2, [pc, #188]	; (80056f0 <TIM_Base_SetConfig+0x114>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d02b      	beq.n	800568e <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563c:	d027      	beq.n	800568e <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2c      	ldr	r2, [pc, #176]	; (80056f4 <TIM_Base_SetConfig+0x118>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d023      	beq.n	800568e <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2b      	ldr	r2, [pc, #172]	; (80056f8 <TIM_Base_SetConfig+0x11c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01f      	beq.n	800568e <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a2a      	ldr	r2, [pc, #168]	; (80056fc <TIM_Base_SetConfig+0x120>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d01b      	beq.n	800568e <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a29      	ldr	r2, [pc, #164]	; (8005700 <TIM_Base_SetConfig+0x124>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d017      	beq.n	800568e <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a28      	ldr	r2, [pc, #160]	; (8005704 <TIM_Base_SetConfig+0x128>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d013      	beq.n	800568e <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a27      	ldr	r2, [pc, #156]	; (8005708 <TIM_Base_SetConfig+0x12c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00f      	beq.n	800568e <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a26      	ldr	r2, [pc, #152]	; (800570c <TIM_Base_SetConfig+0x130>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00b      	beq.n	800568e <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a25      	ldr	r2, [pc, #148]	; (8005710 <TIM_Base_SetConfig+0x134>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d007      	beq.n	800568e <TIM_Base_SetConfig+0xb2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a24      	ldr	r2, [pc, #144]	; (8005714 <TIM_Base_SetConfig+0x138>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d003      	beq.n	800568e <TIM_Base_SetConfig+0xb2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a23      	ldr	r2, [pc, #140]	; (8005718 <TIM_Base_SetConfig+0x13c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d108      	bne.n	80056a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a0a      	ldr	r2, [pc, #40]	; (80056f0 <TIM_Base_SetConfig+0x114>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d003      	beq.n	80056d4 <TIM_Base_SetConfig+0xf8>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a0c      	ldr	r2, [pc, #48]	; (8005700 <TIM_Base_SetConfig+0x124>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d103      	bne.n	80056dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	615a      	str	r2, [r3, #20]
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40000c00 	.word	0x40000c00
 8005700:	40010400 	.word	0x40010400
 8005704:	40014000 	.word	0x40014000
 8005708:	40014400 	.word	0x40014400
 800570c:	40014800 	.word	0x40014800
 8005710:	40001800 	.word	0x40001800
 8005714:	40001c00 	.word	0x40001c00
 8005718:	40002000 	.word	0x40002000

0800571c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f023 0201 	bic.w	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f023 0302 	bic.w	r3, r3, #2
 8005764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a20      	ldr	r2, [pc, #128]	; (80057f4 <TIM_OC1_SetConfig+0xd8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_OC1_SetConfig+0x64>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <TIM_OC1_SetConfig+0xdc>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10c      	bne.n	800579a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f023 0308 	bic.w	r3, r3, #8
 8005786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f023 0304 	bic.w	r3, r3, #4
 8005798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a15      	ldr	r2, [pc, #84]	; (80057f4 <TIM_OC1_SetConfig+0xd8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d003      	beq.n	80057aa <TIM_OC1_SetConfig+0x8e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a14      	ldr	r2, [pc, #80]	; (80057f8 <TIM_OC1_SetConfig+0xdc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d111      	bne.n	80057ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	621a      	str	r2, [r3, #32]
}
 80057e8:	bf00      	nop
 80057ea:	371c      	adds	r7, #28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	40010000 	.word	0x40010000
 80057f8:	40010400 	.word	0x40010400

080057fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	f023 0210 	bic.w	r2, r3, #16
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f023 0320 	bic.w	r3, r3, #32
 8005846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a22      	ldr	r2, [pc, #136]	; (80058e0 <TIM_OC2_SetConfig+0xe4>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d003      	beq.n	8005864 <TIM_OC2_SetConfig+0x68>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a21      	ldr	r2, [pc, #132]	; (80058e4 <TIM_OC2_SetConfig+0xe8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d10d      	bne.n	8005880 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800586a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800587e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a17      	ldr	r2, [pc, #92]	; (80058e0 <TIM_OC2_SetConfig+0xe4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_OC2_SetConfig+0x94>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a16      	ldr	r2, [pc, #88]	; (80058e4 <TIM_OC2_SetConfig+0xe8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d113      	bne.n	80058b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800589e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	621a      	str	r2, [r3, #32]
}
 80058d2:	bf00      	nop
 80058d4:	371c      	adds	r7, #28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40010000 	.word	0x40010000
 80058e4:	40010400 	.word	0x40010400

080058e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0303 	bic.w	r3, r3, #3
 800591e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	021b      	lsls	r3, r3, #8
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a21      	ldr	r2, [pc, #132]	; (80059c8 <TIM_OC3_SetConfig+0xe0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d003      	beq.n	800594e <TIM_OC3_SetConfig+0x66>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a20      	ldr	r2, [pc, #128]	; (80059cc <TIM_OC3_SetConfig+0xe4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d10d      	bne.n	800596a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a16      	ldr	r2, [pc, #88]	; (80059c8 <TIM_OC3_SetConfig+0xe0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d003      	beq.n	800597a <TIM_OC3_SetConfig+0x92>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a15      	ldr	r2, [pc, #84]	; (80059cc <TIM_OC3_SetConfig+0xe4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d113      	bne.n	80059a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	4313      	orrs	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	621a      	str	r2, [r3, #32]
}
 80059bc:	bf00      	nop
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	40010000 	.word	0x40010000
 80059cc:	40010400 	.word	0x40010400

080059d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	031b      	lsls	r3, r3, #12
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a12      	ldr	r2, [pc, #72]	; (8005a74 <TIM_OC4_SetConfig+0xa4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_OC4_SetConfig+0x68>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a11      	ldr	r2, [pc, #68]	; (8005a78 <TIM_OC4_SetConfig+0xa8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d109      	bne.n	8005a4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	019b      	lsls	r3, r3, #6
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40010400 	.word	0x40010400

08005a7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f003 031f 	and.w	r3, r3, #31
 8005a8e:	2201      	movs	r2, #1
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a1a      	ldr	r2, [r3, #32]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	401a      	ands	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a1a      	ldr	r2, [r3, #32]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f003 031f 	and.w	r3, r3, #31
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
	...

08005ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e05a      	b.n	8005b96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a21      	ldr	r2, [pc, #132]	; (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d022      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2c:	d01d      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1d      	ldr	r2, [pc, #116]	; (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d018      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1b      	ldr	r2, [pc, #108]	; (8005bac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1a      	ldr	r2, [pc, #104]	; (8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00e      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d009      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a17      	ldr	r2, [pc, #92]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d004      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a15      	ldr	r2, [pc, #84]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d10c      	bne.n	8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	40000400 	.word	0x40000400
 8005bac:	40000800 	.word	0x40000800
 8005bb0:	40000c00 	.word	0x40000c00
 8005bb4:	40010400 	.word	0x40010400
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40001800 	.word	0x40001800

08005bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e03f      	b.n	8005c7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fc f80c 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2224      	movs	r2, #36	; 0x24
 8005c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f829 	bl	8005c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695a      	ldr	r2, [r3, #20]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c88:	b085      	sub	sp, #20
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005cc6:	f023 030c 	bic.w	r3, r3, #12
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6812      	ldr	r2, [r2, #0]
 8005cce:	68f9      	ldr	r1, [r7, #12]
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cf2:	f040 818b 	bne.w	800600c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4ac1      	ldr	r2, [pc, #772]	; (8006000 <UART_SetConfig+0x37c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d005      	beq.n	8005d0c <UART_SetConfig+0x88>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4abf      	ldr	r2, [pc, #764]	; (8006004 <UART_SetConfig+0x380>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	f040 80bd 	bne.w	8005e86 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d0c:	f7fe fb86 	bl	800441c <HAL_RCC_GetPCLK2Freq>
 8005d10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	461d      	mov	r5, r3
 8005d16:	f04f 0600 	mov.w	r6, #0
 8005d1a:	46a8      	mov	r8, r5
 8005d1c:	46b1      	mov	r9, r6
 8005d1e:	eb18 0308 	adds.w	r3, r8, r8
 8005d22:	eb49 0409 	adc.w	r4, r9, r9
 8005d26:	4698      	mov	r8, r3
 8005d28:	46a1      	mov	r9, r4
 8005d2a:	eb18 0805 	adds.w	r8, r8, r5
 8005d2e:	eb49 0906 	adc.w	r9, r9, r6
 8005d32:	f04f 0100 	mov.w	r1, #0
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d46:	4688      	mov	r8, r1
 8005d48:	4691      	mov	r9, r2
 8005d4a:	eb18 0005 	adds.w	r0, r8, r5
 8005d4e:	eb49 0106 	adc.w	r1, r9, r6
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	461d      	mov	r5, r3
 8005d58:	f04f 0600 	mov.w	r6, #0
 8005d5c:	196b      	adds	r3, r5, r5
 8005d5e:	eb46 0406 	adc.w	r4, r6, r6
 8005d62:	461a      	mov	r2, r3
 8005d64:	4623      	mov	r3, r4
 8005d66:	f7fa fa2f 	bl	80001c8 <__aeabi_uldivmod>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	460c      	mov	r4, r1
 8005d6e:	461a      	mov	r2, r3
 8005d70:	4ba5      	ldr	r3, [pc, #660]	; (8006008 <UART_SetConfig+0x384>)
 8005d72:	fba3 2302 	umull	r2, r3, r3, r2
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	461d      	mov	r5, r3
 8005d80:	f04f 0600 	mov.w	r6, #0
 8005d84:	46a9      	mov	r9, r5
 8005d86:	46b2      	mov	sl, r6
 8005d88:	eb19 0309 	adds.w	r3, r9, r9
 8005d8c:	eb4a 040a 	adc.w	r4, sl, sl
 8005d90:	4699      	mov	r9, r3
 8005d92:	46a2      	mov	sl, r4
 8005d94:	eb19 0905 	adds.w	r9, r9, r5
 8005d98:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d9c:	f04f 0100 	mov.w	r1, #0
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005da8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005db0:	4689      	mov	r9, r1
 8005db2:	4692      	mov	sl, r2
 8005db4:	eb19 0005 	adds.w	r0, r9, r5
 8005db8:	eb4a 0106 	adc.w	r1, sl, r6
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	461d      	mov	r5, r3
 8005dc2:	f04f 0600 	mov.w	r6, #0
 8005dc6:	196b      	adds	r3, r5, r5
 8005dc8:	eb46 0406 	adc.w	r4, r6, r6
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4623      	mov	r3, r4
 8005dd0:	f7fa f9fa 	bl	80001c8 <__aeabi_uldivmod>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4b8b      	ldr	r3, [pc, #556]	; (8006008 <UART_SetConfig+0x384>)
 8005ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	2164      	movs	r1, #100	; 0x64
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	3332      	adds	r3, #50	; 0x32
 8005dee:	4a86      	ldr	r2, [pc, #536]	; (8006008 <UART_SetConfig+0x384>)
 8005df0:	fba2 2303 	umull	r2, r3, r2, r3
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dfc:	4498      	add	r8, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	461d      	mov	r5, r3
 8005e02:	f04f 0600 	mov.w	r6, #0
 8005e06:	46a9      	mov	r9, r5
 8005e08:	46b2      	mov	sl, r6
 8005e0a:	eb19 0309 	adds.w	r3, r9, r9
 8005e0e:	eb4a 040a 	adc.w	r4, sl, sl
 8005e12:	4699      	mov	r9, r3
 8005e14:	46a2      	mov	sl, r4
 8005e16:	eb19 0905 	adds.w	r9, r9, r5
 8005e1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e1e:	f04f 0100 	mov.w	r1, #0
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e32:	4689      	mov	r9, r1
 8005e34:	4692      	mov	sl, r2
 8005e36:	eb19 0005 	adds.w	r0, r9, r5
 8005e3a:	eb4a 0106 	adc.w	r1, sl, r6
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	461d      	mov	r5, r3
 8005e44:	f04f 0600 	mov.w	r6, #0
 8005e48:	196b      	adds	r3, r5, r5
 8005e4a:	eb46 0406 	adc.w	r4, r6, r6
 8005e4e:	461a      	mov	r2, r3
 8005e50:	4623      	mov	r3, r4
 8005e52:	f7fa f9b9 	bl	80001c8 <__aeabi_uldivmod>
 8005e56:	4603      	mov	r3, r0
 8005e58:	460c      	mov	r4, r1
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	4b6a      	ldr	r3, [pc, #424]	; (8006008 <UART_SetConfig+0x384>)
 8005e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	2164      	movs	r1, #100	; 0x64
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	3332      	adds	r3, #50	; 0x32
 8005e70:	4a65      	ldr	r2, [pc, #404]	; (8006008 <UART_SetConfig+0x384>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	095b      	lsrs	r3, r3, #5
 8005e78:	f003 0207 	and.w	r2, r3, #7
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4442      	add	r2, r8
 8005e82:	609a      	str	r2, [r3, #8]
 8005e84:	e26f      	b.n	8006366 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e86:	f7fe fab5 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
 8005e8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	461d      	mov	r5, r3
 8005e90:	f04f 0600 	mov.w	r6, #0
 8005e94:	46a8      	mov	r8, r5
 8005e96:	46b1      	mov	r9, r6
 8005e98:	eb18 0308 	adds.w	r3, r8, r8
 8005e9c:	eb49 0409 	adc.w	r4, r9, r9
 8005ea0:	4698      	mov	r8, r3
 8005ea2:	46a1      	mov	r9, r4
 8005ea4:	eb18 0805 	adds.w	r8, r8, r5
 8005ea8:	eb49 0906 	adc.w	r9, r9, r6
 8005eac:	f04f 0100 	mov.w	r1, #0
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005eb8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ebc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ec0:	4688      	mov	r8, r1
 8005ec2:	4691      	mov	r9, r2
 8005ec4:	eb18 0005 	adds.w	r0, r8, r5
 8005ec8:	eb49 0106 	adc.w	r1, r9, r6
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	461d      	mov	r5, r3
 8005ed2:	f04f 0600 	mov.w	r6, #0
 8005ed6:	196b      	adds	r3, r5, r5
 8005ed8:	eb46 0406 	adc.w	r4, r6, r6
 8005edc:	461a      	mov	r2, r3
 8005ede:	4623      	mov	r3, r4
 8005ee0:	f7fa f972 	bl	80001c8 <__aeabi_uldivmod>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4b47      	ldr	r3, [pc, #284]	; (8006008 <UART_SetConfig+0x384>)
 8005eec:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	461d      	mov	r5, r3
 8005efa:	f04f 0600 	mov.w	r6, #0
 8005efe:	46a9      	mov	r9, r5
 8005f00:	46b2      	mov	sl, r6
 8005f02:	eb19 0309 	adds.w	r3, r9, r9
 8005f06:	eb4a 040a 	adc.w	r4, sl, sl
 8005f0a:	4699      	mov	r9, r3
 8005f0c:	46a2      	mov	sl, r4
 8005f0e:	eb19 0905 	adds.w	r9, r9, r5
 8005f12:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f16:	f04f 0100 	mov.w	r1, #0
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f2a:	4689      	mov	r9, r1
 8005f2c:	4692      	mov	sl, r2
 8005f2e:	eb19 0005 	adds.w	r0, r9, r5
 8005f32:	eb4a 0106 	adc.w	r1, sl, r6
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	461d      	mov	r5, r3
 8005f3c:	f04f 0600 	mov.w	r6, #0
 8005f40:	196b      	adds	r3, r5, r5
 8005f42:	eb46 0406 	adc.w	r4, r6, r6
 8005f46:	461a      	mov	r2, r3
 8005f48:	4623      	mov	r3, r4
 8005f4a:	f7fa f93d 	bl	80001c8 <__aeabi_uldivmod>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	460c      	mov	r4, r1
 8005f52:	461a      	mov	r2, r3
 8005f54:	4b2c      	ldr	r3, [pc, #176]	; (8006008 <UART_SetConfig+0x384>)
 8005f56:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5a:	095b      	lsrs	r3, r3, #5
 8005f5c:	2164      	movs	r1, #100	; 0x64
 8005f5e:	fb01 f303 	mul.w	r3, r1, r3
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	3332      	adds	r3, #50	; 0x32
 8005f68:	4a27      	ldr	r2, [pc, #156]	; (8006008 <UART_SetConfig+0x384>)
 8005f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f76:	4498      	add	r8, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	461d      	mov	r5, r3
 8005f7c:	f04f 0600 	mov.w	r6, #0
 8005f80:	46a9      	mov	r9, r5
 8005f82:	46b2      	mov	sl, r6
 8005f84:	eb19 0309 	adds.w	r3, r9, r9
 8005f88:	eb4a 040a 	adc.w	r4, sl, sl
 8005f8c:	4699      	mov	r9, r3
 8005f8e:	46a2      	mov	sl, r4
 8005f90:	eb19 0905 	adds.w	r9, r9, r5
 8005f94:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f98:	f04f 0100 	mov.w	r1, #0
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fac:	4689      	mov	r9, r1
 8005fae:	4692      	mov	sl, r2
 8005fb0:	eb19 0005 	adds.w	r0, r9, r5
 8005fb4:	eb4a 0106 	adc.w	r1, sl, r6
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	461d      	mov	r5, r3
 8005fbe:	f04f 0600 	mov.w	r6, #0
 8005fc2:	196b      	adds	r3, r5, r5
 8005fc4:	eb46 0406 	adc.w	r4, r6, r6
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4623      	mov	r3, r4
 8005fcc:	f7fa f8fc 	bl	80001c8 <__aeabi_uldivmod>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <UART_SetConfig+0x384>)
 8005fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	2164      	movs	r1, #100	; 0x64
 8005fe0:	fb01 f303 	mul.w	r3, r1, r3
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	3332      	adds	r3, #50	; 0x32
 8005fea:	4a07      	ldr	r2, [pc, #28]	; (8006008 <UART_SetConfig+0x384>)
 8005fec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	f003 0207 	and.w	r2, r3, #7
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4442      	add	r2, r8
 8005ffc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ffe:	e1b2      	b.n	8006366 <UART_SetConfig+0x6e2>
 8006000:	40011000 	.word	0x40011000
 8006004:	40011400 	.word	0x40011400
 8006008:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4ad7      	ldr	r2, [pc, #860]	; (8006370 <UART_SetConfig+0x6ec>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d005      	beq.n	8006022 <UART_SetConfig+0x39e>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4ad6      	ldr	r2, [pc, #856]	; (8006374 <UART_SetConfig+0x6f0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	f040 80d1 	bne.w	80061c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006022:	f7fe f9fb 	bl	800441c <HAL_RCC_GetPCLK2Freq>
 8006026:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	469a      	mov	sl, r3
 800602c:	f04f 0b00 	mov.w	fp, #0
 8006030:	46d0      	mov	r8, sl
 8006032:	46d9      	mov	r9, fp
 8006034:	eb18 0308 	adds.w	r3, r8, r8
 8006038:	eb49 0409 	adc.w	r4, r9, r9
 800603c:	4698      	mov	r8, r3
 800603e:	46a1      	mov	r9, r4
 8006040:	eb18 080a 	adds.w	r8, r8, sl
 8006044:	eb49 090b 	adc.w	r9, r9, fp
 8006048:	f04f 0100 	mov.w	r1, #0
 800604c:	f04f 0200 	mov.w	r2, #0
 8006050:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006054:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006058:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800605c:	4688      	mov	r8, r1
 800605e:	4691      	mov	r9, r2
 8006060:	eb1a 0508 	adds.w	r5, sl, r8
 8006064:	eb4b 0609 	adc.w	r6, fp, r9
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4619      	mov	r1, r3
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	f04f 0400 	mov.w	r4, #0
 800607a:	0094      	lsls	r4, r2, #2
 800607c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006080:	008b      	lsls	r3, r1, #2
 8006082:	461a      	mov	r2, r3
 8006084:	4623      	mov	r3, r4
 8006086:	4628      	mov	r0, r5
 8006088:	4631      	mov	r1, r6
 800608a:	f7fa f89d 	bl	80001c8 <__aeabi_uldivmod>
 800608e:	4603      	mov	r3, r0
 8006090:	460c      	mov	r4, r1
 8006092:	461a      	mov	r2, r3
 8006094:	4bb8      	ldr	r3, [pc, #736]	; (8006378 <UART_SetConfig+0x6f4>)
 8006096:	fba3 2302 	umull	r2, r3, r3, r2
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	469b      	mov	fp, r3
 80060a4:	f04f 0c00 	mov.w	ip, #0
 80060a8:	46d9      	mov	r9, fp
 80060aa:	46e2      	mov	sl, ip
 80060ac:	eb19 0309 	adds.w	r3, r9, r9
 80060b0:	eb4a 040a 	adc.w	r4, sl, sl
 80060b4:	4699      	mov	r9, r3
 80060b6:	46a2      	mov	sl, r4
 80060b8:	eb19 090b 	adds.w	r9, r9, fp
 80060bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060c0:	f04f 0100 	mov.w	r1, #0
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060d4:	4689      	mov	r9, r1
 80060d6:	4692      	mov	sl, r2
 80060d8:	eb1b 0509 	adds.w	r5, fp, r9
 80060dc:	eb4c 060a 	adc.w	r6, ip, sl
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	4619      	mov	r1, r3
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	f04f 0400 	mov.w	r4, #0
 80060f2:	0094      	lsls	r4, r2, #2
 80060f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060f8:	008b      	lsls	r3, r1, #2
 80060fa:	461a      	mov	r2, r3
 80060fc:	4623      	mov	r3, r4
 80060fe:	4628      	mov	r0, r5
 8006100:	4631      	mov	r1, r6
 8006102:	f7fa f861 	bl	80001c8 <__aeabi_uldivmod>
 8006106:	4603      	mov	r3, r0
 8006108:	460c      	mov	r4, r1
 800610a:	461a      	mov	r2, r3
 800610c:	4b9a      	ldr	r3, [pc, #616]	; (8006378 <UART_SetConfig+0x6f4>)
 800610e:	fba3 1302 	umull	r1, r3, r3, r2
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	2164      	movs	r1, #100	; 0x64
 8006116:	fb01 f303 	mul.w	r3, r1, r3
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	3332      	adds	r3, #50	; 0x32
 8006120:	4a95      	ldr	r2, [pc, #596]	; (8006378 <UART_SetConfig+0x6f4>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800612c:	4498      	add	r8, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	469b      	mov	fp, r3
 8006132:	f04f 0c00 	mov.w	ip, #0
 8006136:	46d9      	mov	r9, fp
 8006138:	46e2      	mov	sl, ip
 800613a:	eb19 0309 	adds.w	r3, r9, r9
 800613e:	eb4a 040a 	adc.w	r4, sl, sl
 8006142:	4699      	mov	r9, r3
 8006144:	46a2      	mov	sl, r4
 8006146:	eb19 090b 	adds.w	r9, r9, fp
 800614a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800614e:	f04f 0100 	mov.w	r1, #0
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800615a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800615e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006162:	4689      	mov	r9, r1
 8006164:	4692      	mov	sl, r2
 8006166:	eb1b 0509 	adds.w	r5, fp, r9
 800616a:	eb4c 060a 	adc.w	r6, ip, sl
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	4619      	mov	r1, r3
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	f04f 0400 	mov.w	r4, #0
 8006180:	0094      	lsls	r4, r2, #2
 8006182:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006186:	008b      	lsls	r3, r1, #2
 8006188:	461a      	mov	r2, r3
 800618a:	4623      	mov	r3, r4
 800618c:	4628      	mov	r0, r5
 800618e:	4631      	mov	r1, r6
 8006190:	f7fa f81a 	bl	80001c8 <__aeabi_uldivmod>
 8006194:	4603      	mov	r3, r0
 8006196:	460c      	mov	r4, r1
 8006198:	461a      	mov	r2, r3
 800619a:	4b77      	ldr	r3, [pc, #476]	; (8006378 <UART_SetConfig+0x6f4>)
 800619c:	fba3 1302 	umull	r1, r3, r3, r2
 80061a0:	095b      	lsrs	r3, r3, #5
 80061a2:	2164      	movs	r1, #100	; 0x64
 80061a4:	fb01 f303 	mul.w	r3, r1, r3
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	3332      	adds	r3, #50	; 0x32
 80061ae:	4a72      	ldr	r2, [pc, #456]	; (8006378 <UART_SetConfig+0x6f4>)
 80061b0:	fba2 2303 	umull	r2, r3, r2, r3
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	f003 020f 	and.w	r2, r3, #15
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4442      	add	r2, r8
 80061c0:	609a      	str	r2, [r3, #8]
 80061c2:	e0d0      	b.n	8006366 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80061c4:	f7fe f916 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
 80061c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	469a      	mov	sl, r3
 80061ce:	f04f 0b00 	mov.w	fp, #0
 80061d2:	46d0      	mov	r8, sl
 80061d4:	46d9      	mov	r9, fp
 80061d6:	eb18 0308 	adds.w	r3, r8, r8
 80061da:	eb49 0409 	adc.w	r4, r9, r9
 80061de:	4698      	mov	r8, r3
 80061e0:	46a1      	mov	r9, r4
 80061e2:	eb18 080a 	adds.w	r8, r8, sl
 80061e6:	eb49 090b 	adc.w	r9, r9, fp
 80061ea:	f04f 0100 	mov.w	r1, #0
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061fe:	4688      	mov	r8, r1
 8006200:	4691      	mov	r9, r2
 8006202:	eb1a 0508 	adds.w	r5, sl, r8
 8006206:	eb4b 0609 	adc.w	r6, fp, r9
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	4619      	mov	r1, r3
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	f04f 0400 	mov.w	r4, #0
 800621c:	0094      	lsls	r4, r2, #2
 800621e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006222:	008b      	lsls	r3, r1, #2
 8006224:	461a      	mov	r2, r3
 8006226:	4623      	mov	r3, r4
 8006228:	4628      	mov	r0, r5
 800622a:	4631      	mov	r1, r6
 800622c:	f7f9 ffcc 	bl	80001c8 <__aeabi_uldivmod>
 8006230:	4603      	mov	r3, r0
 8006232:	460c      	mov	r4, r1
 8006234:	461a      	mov	r2, r3
 8006236:	4b50      	ldr	r3, [pc, #320]	; (8006378 <UART_SetConfig+0x6f4>)
 8006238:	fba3 2302 	umull	r2, r3, r3, r2
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	469b      	mov	fp, r3
 8006246:	f04f 0c00 	mov.w	ip, #0
 800624a:	46d9      	mov	r9, fp
 800624c:	46e2      	mov	sl, ip
 800624e:	eb19 0309 	adds.w	r3, r9, r9
 8006252:	eb4a 040a 	adc.w	r4, sl, sl
 8006256:	4699      	mov	r9, r3
 8006258:	46a2      	mov	sl, r4
 800625a:	eb19 090b 	adds.w	r9, r9, fp
 800625e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006262:	f04f 0100 	mov.w	r1, #0
 8006266:	f04f 0200 	mov.w	r2, #0
 800626a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800626e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006272:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006276:	4689      	mov	r9, r1
 8006278:	4692      	mov	sl, r2
 800627a:	eb1b 0509 	adds.w	r5, fp, r9
 800627e:	eb4c 060a 	adc.w	r6, ip, sl
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	4619      	mov	r1, r3
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	f04f 0400 	mov.w	r4, #0
 8006294:	0094      	lsls	r4, r2, #2
 8006296:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800629a:	008b      	lsls	r3, r1, #2
 800629c:	461a      	mov	r2, r3
 800629e:	4623      	mov	r3, r4
 80062a0:	4628      	mov	r0, r5
 80062a2:	4631      	mov	r1, r6
 80062a4:	f7f9 ff90 	bl	80001c8 <__aeabi_uldivmod>
 80062a8:	4603      	mov	r3, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	461a      	mov	r2, r3
 80062ae:	4b32      	ldr	r3, [pc, #200]	; (8006378 <UART_SetConfig+0x6f4>)
 80062b0:	fba3 1302 	umull	r1, r3, r3, r2
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	2164      	movs	r1, #100	; 0x64
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	3332      	adds	r3, #50	; 0x32
 80062c2:	4a2d      	ldr	r2, [pc, #180]	; (8006378 <UART_SetConfig+0x6f4>)
 80062c4:	fba2 2303 	umull	r2, r3, r2, r3
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062ce:	4498      	add	r8, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	469b      	mov	fp, r3
 80062d4:	f04f 0c00 	mov.w	ip, #0
 80062d8:	46d9      	mov	r9, fp
 80062da:	46e2      	mov	sl, ip
 80062dc:	eb19 0309 	adds.w	r3, r9, r9
 80062e0:	eb4a 040a 	adc.w	r4, sl, sl
 80062e4:	4699      	mov	r9, r3
 80062e6:	46a2      	mov	sl, r4
 80062e8:	eb19 090b 	adds.w	r9, r9, fp
 80062ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062f0:	f04f 0100 	mov.w	r1, #0
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006300:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006304:	4689      	mov	r9, r1
 8006306:	4692      	mov	sl, r2
 8006308:	eb1b 0509 	adds.w	r5, fp, r9
 800630c:	eb4c 060a 	adc.w	r6, ip, sl
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	4619      	mov	r1, r3
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	f04f 0400 	mov.w	r4, #0
 8006322:	0094      	lsls	r4, r2, #2
 8006324:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006328:	008b      	lsls	r3, r1, #2
 800632a:	461a      	mov	r2, r3
 800632c:	4623      	mov	r3, r4
 800632e:	4628      	mov	r0, r5
 8006330:	4631      	mov	r1, r6
 8006332:	f7f9 ff49 	bl	80001c8 <__aeabi_uldivmod>
 8006336:	4603      	mov	r3, r0
 8006338:	460c      	mov	r4, r1
 800633a:	461a      	mov	r2, r3
 800633c:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <UART_SetConfig+0x6f4>)
 800633e:	fba3 1302 	umull	r1, r3, r3, r2
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	2164      	movs	r1, #100	; 0x64
 8006346:	fb01 f303 	mul.w	r3, r1, r3
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	3332      	adds	r3, #50	; 0x32
 8006350:	4a09      	ldr	r2, [pc, #36]	; (8006378 <UART_SetConfig+0x6f4>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	f003 020f 	and.w	r2, r3, #15
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4442      	add	r2, r8
 8006362:	609a      	str	r2, [r3, #8]
}
 8006364:	e7ff      	b.n	8006366 <UART_SetConfig+0x6e2>
 8006366:	bf00      	nop
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006370:	40011000 	.word	0x40011000
 8006374:	40011400 	.word	0x40011400
 8006378:	51eb851f 	.word	0x51eb851f

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4e0d      	ldr	r6, [pc, #52]	; (80063b4 <__libc_init_array+0x38>)
 8006380:	4c0d      	ldr	r4, [pc, #52]	; (80063b8 <__libc_init_array+0x3c>)
 8006382:	1ba4      	subs	r4, r4, r6
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	2500      	movs	r5, #0
 8006388:	42a5      	cmp	r5, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	4e0b      	ldr	r6, [pc, #44]	; (80063bc <__libc_init_array+0x40>)
 800638e:	4c0c      	ldr	r4, [pc, #48]	; (80063c0 <__libc_init_array+0x44>)
 8006390:	f000 f820 	bl	80063d4 <_init>
 8006394:	1ba4      	subs	r4, r4, r6
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	2500      	movs	r5, #0
 800639a:	42a5      	cmp	r5, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063a4:	4798      	blx	r3
 80063a6:	3501      	adds	r5, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063ae:	4798      	blx	r3
 80063b0:	3501      	adds	r5, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	08006428 	.word	0x08006428
 80063b8:	08006428 	.word	0x08006428
 80063bc:	08006428 	.word	0x08006428
 80063c0:	0800642c 	.word	0x0800642c

080063c4 <memset>:
 80063c4:	4402      	add	r2, r0
 80063c6:	4603      	mov	r3, r0
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d100      	bne.n	80063ce <memset+0xa>
 80063cc:	4770      	bx	lr
 80063ce:	f803 1b01 	strb.w	r1, [r3], #1
 80063d2:	e7f9      	b.n	80063c8 <memset+0x4>

080063d4 <_init>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	bf00      	nop
 80063d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063da:	bc08      	pop	{r3}
 80063dc:	469e      	mov	lr, r3
 80063de:	4770      	bx	lr

080063e0 <_fini>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	bf00      	nop
 80063e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e6:	bc08      	pop	{r3}
 80063e8:	469e      	mov	lr, r3
 80063ea:	4770      	bx	lr
